var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/AggregateResult.html",[0,0.282,1,2.326]],["body/interfaces/AggregateResult.html",[0,0.535,1,3.375,2,1.193,3,0.072,4,0.072,5,0.072,6,1.599,7,3.341,8,1.109,9,4.328,10,4.674,11,0.007,12,0.386,13,0.786,14,5.334,15,2.689,16,1.426,17,0.008,18,1.676,19,0.714,20,1.646,21,4.449,22,2.911,23,0.124,24,2.76,25,2.922,26,3.08,27,3.359,28,1.791,29,2.812,30,3.341,31,3.341,32,2.922,33,2.073,34,3.588,35,3.183,36,1.75,37,3.891,38,3.183,39,3.183,40,3.045,41,2.922,42,3.045,43,3.183,44,2.922,45,4.059,46,1.646,47,1.342,48,0.878,49,1.599,50,3.488,51,2.073,52,2.711,53,0.633,54,3.045,55,1.872,56,2.812,57,2.922,58,3.183,59,4.055,60,3.744,61,3.891,62,3.891,63,4.21,64,4.559,65,1.296,66,3.375,67,3.744,68,1.832,69,1.876,70,2.619,71,2.812,72,2.619,73,2.502,74,2.812,75,4.239,76,3.045,77,3.045,78,3.744,79,3.744,80,2.711,81,3.183,82,1.467,83,2.313,84,2.711,85,3.045,86,3.183,87,0.79,88,3.341,89,2.382,90,3.045,91,3.183,92,2.186,93,3.172,94,2.922,95,2.878,96,2.922,97,2.313,98,3.183,99,0.005,100,0.004]],["title/components/AppComponent.html",[101,0.726,102,1.436]],["body/components/AppComponent.html",[3,0.086,4,0.071,5,0.047,8,0.486,11,0.005,12,0.457,13,0.583,15,1.977,16,0.978,17,0.008,19,0.404,20,1.085,23,0.047,24,1.359,26,2.282,33,2.045,34,1.474,36,1.803,47,1.423,48,1.495,49,2.11,51,1.359,52,1.778,53,0.625,55,0.922,56,1.844,65,1.447,67,3.98,73,1.649,93,1.562,99,0.004,100,0.006,101,1.346,102,2.064,103,2.284,104,1.004,105,1.048,106,1.096,107,0.942,108,3.253,109,4.338,110,4.338,111,4.895,112,3.479,113,3.698,114,2.526,115,4.895,116,3.297,117,3.067,118,2.302,119,2.501,120,1.613,121,5.885,122,1.649,123,4.895,124,5.885,125,2.431,126,5.885,127,1.278,128,1.474,129,1.394,130,3.253,131,1.388,132,3.971,133,3.297,134,4.729,135,3.971,136,1.949,137,3.217,138,4.895,139,4.895,140,4.895,141,2.522,142,3.971,143,3.253,144,2.423,145,1.388,146,3.479,147,3.297,148,1.939,149,4.895,150,0.341,151,0.36,152,2.35,153,1.434,154,1.61,155,2.639,156,1.474,157,5.573,158,2.639,159,3.297,160,3.964,161,2.883,162,2.312,163,2.457,164,3.479,165,3.253,166,2.457,167,3.297,168,2.883,169,1.856,170,2.883,171,2.457,172,3.971,173,2.064,174,2.883,175,1.662,176,2.457,177,2.064,178,3.253,179,0.101,180,1.687,181,1.23,182,3.698,183,1.957,184,2.457,185,2.883,186,3.253,187,3.253,188,3.253,189,2.883,190,3.253,191,2.639,192,1.916,193,3.095,194,2.826,195,3.698,196,7.377,197,1.177,198,5.216,199,2.337,200,4.895,201,3.253,202,2.457,203,3.253,204,0.962,205,1.366,206,3.253,207,3.253,208,3.253,209,3.253,210,3.253,211,3.253,212,2.639,213,2.639,214,3.253,215,1.778,216,1.048,217,2.087,218,3.253,219,0.541,220,3.253,221,3.253,222,3.253,223,2.457,224,1.87,225,2.312,226,5.697,227,3.971,228,2.312,229,3.253,230,3.253,231,5.697,232,2.457,233,1.359,234,3.253,235,1.916,236,1.121,237,1.662,238,1.778,239,2.282,240,2.423,241,3.253,242,4.895,243,3.253,244,3.253,245,4.895,246,3.253,247,1.253,248,1.778,249,2.584,250,3.253,251,4.895,252,1.359,253,1.777,254,3.253,255,4.895,256,3.253,257,3.253,258,3.253,259,1.844,260,3.253,261,2.191,262,4.895,263,4.895,264,4.338,265,4.895,266,4.895,267,4.895,268,3.095,269,1.61,270,1.916,271,2.365,272,2.721,273,3.005,274,2.675,275,2.1,276,2.639,277,1.359,278,2.639,279,2.218,280,2.191,281,2.076,282,1.916,283,2.157,284,1.897,285,3.107,286,1.517,287,3.253,288,2.312,289,2.584,290,1.417,291,2.423,292,2.584,293,2.501,294,2.639,295,1.718,296,1.517,297,2.675,298,1.662,299,2.826,300,1.359,301,1.517,302,1.396,303,2.191,304,3.253,305,1.916,306,2.584,307,1.997,308,1.844,309,1.718,310,2.883,311,2.639,312,2.191,313,2.883,314,2.883,315,2.639,316,3.253,317,0.541,318,1.51,319,1.577,320,1.096,321,2.206,322,1.096,323,1.096,324,1.026,325,1.096,326,1.026,327,1.096,328,1.026,329,1.233,330,1.096,331,1.026,332,1.048,333,1.096,334,1.026,335,1.096,336,1.026,337,1.096,338,1.026,339,1.096,340,1.026,341,1.983,342,1.096,343,1.026,344,1.649,345,1.026,346,1.072,347,1.096,348,1.026,349,1.51,350,1.649,351,1.026,352,1.096,353,1.026,354,1.096,355,1.026,356,1.026,357,1.096,358,1.026,359,1.096,360,1.026,361,1.649,362,1.026,363,1.096,364,1.026,365,1.096,366,1.026,367,1.096,368,1.048,369,1.096,370,1.026,371,1.096,372,1.026,373,1.096,374,1.026,375,1.026,376,1.096,377,1.026,378,1.026,379,1.096,380,1.096]],["title/modules/AppModule.html",[381,0.651,382,3.44]],["body/modules/AppModule.html",[3,0.08,4,0.08,5,0.08,11,0.005,17,0.008,23,0.08,99,0.006,100,0.005,102,2.92,136,1.517,150,0.385,151,0.605,170,4.843,171,4.128,174,4.843,175,2.792,179,0.17,204,1.616,226,4.434,231,4.434,317,0.908,381,0.781,382,7.249,383,1.549,384,1.549,385,2.351,386,2.302,387,2.081,388,1.651,389,4.843,390,4.843,391,4.843,392,4.843,393,6.191,394,6.191,395,5.867,396,5.589,397,6.191,398,6.191,399,5.867,400,6.191,401,6.191,402,6.191,403,1.995,404,1.456,405,5.465,406,2.172,407,2.126,408,3.847,409,2.792,410,6.238,411,5.002,412,6.238,413,4.843,414,5.465,415,5.465,416,5.465,417,4.843,418,5.465,419,4.843,420,3.884,421,4.843,422,5.465,423,3.507,424,5.465,425,4.843,426,4.434,427,3.884,428,4.434,429,5.465,430,5.002,431,5.465,432,5.465,433,4.434,434,5.465,435,6.238,436,5.465,437,4.434,438,4.434]],["title/modules/BodyModule.html",[381,0.651,393,3.236]],["body/modules/BodyModule.html",[3,0.099,4,0.099,5,0.099,11,0.006,17,0.008,23,0.099,99,0.007,100,0.006,128,1.691,150,0.35,151,0.748,179,0.21,204,1.997,317,1.123,381,0.966,383,1.915,384,1.915,385,2.424,386,1.997,387,1.997,388,2.586,393,6.589,403,2.275,404,1.799,406,2.476,407,2.424,439,5.986,440,5.986,441,5.986,442,6.764,443,6.754,444,2.765,445,2.275,446,5.48,447,6.754]],["title/classes/BodyUI.html",[179,0.142,448,3.44]],["body/classes/BodyUI.html",[0,0.225,3,0.053,4,0.053,5,0.053,6,2.893,8,0.543,11,0.003,12,0.283,13,0.633,16,1.033,17,0.008,18,1.001,19,0.741,20,1.759,23,0.078,28,0.79,36,1.481,46,1.631,53,0.981,87,1.344,99,0.004,100,0.003,118,1.305,125,2.819,127,1.724,128,2.279,129,1.9,145,1.507,150,0.314,153,1.603,156,1.648,179,0.196,197,1.278,205,1.759,219,1.319,236,1.832,252,1.774,301,2.93,302,1.56,329,0.685,403,1.781,448,4.016,449,1.858,450,6.781,451,3.223,452,4.712,453,3.581,454,4.233,455,2.807,456,5.461,457,4.717,458,7.033,459,5.57,460,5.57,461,5.57,462,5.57,463,5.57,464,5.57,465,5.316,466,5.316,467,5.316,468,5.316,469,5.316,470,1.198,471,4.712,472,2.435,473,5.316,474,1.924,475,3.264,476,1.391,477,3.636,478,3.636,479,3.636,480,4.845,481,4.712,482,3.636,483,4.675,484,3.636,485,4.712,486,3.636,487,3.636,488,4.712,489,3.636,490,3.636,491,4.712,492,4.994,493,5.099,494,3.111,495,4.447,496,3.636,497,4.747,498,1.443,499,4.712,500,3.636,501,4.712,502,3.636,503,1.858,504,4.712,505,3.636,506,4.712,507,3.636,508,2.409,509,5.57,510,4.712,511,4.712,512,2.061,513,2.333,514,2.232,515,2.061,516,3.223,517,1.603,518,2.95,519,2.142,520,2.333,521,1.695,522,2.061,523,2.142,524,2.333,525,3.111,526,3.223,527,3.223,528,2.142,529,3.223,530,1.52,531,3.223,532,3.223,533,3.223,534,3.223,535,3.223,536,2.232,537,3.223,538,3.223,539,3.223,540,4.712,541,3.223,542,3.223,543,3.223,544,1.746,545,1.987,546,1.648,547,2.333,548,3.223,549,4.712,550,3.223,551,2.333,552,3.223,553,4.712,554,3.223,555,2.807,556,5.57,557,4.712,558,4.712,559,3.223,560,3.223,561,6.146,562,4.712,563,3.223,564,5.57,565,1.343,566,3.223,567,3.223,568,4.712,569,3.223,570,3.223,571,3.223,572,3.412,573,3.223,574,3.223,575,3.223,576,4.712,577,5.57,578,2.56,579,6.519,580,4.712,581,4.712,582,4.712,583,3.223,584,3.223,585,3.223,586,3.223,587,2.95,588,3.223,589,3.223,590,3.223,591,3.223,592,3.223,593,1.444,594,3.223,595,3.223,596,3.223,597,2.449,598,3.223,599,2.747,600,3.223,601,3.223,602,3.223]],["title/classes/BodyUILayer.html",[179,0.142,456,3.236]],["body/classes/BodyUILayer.html",[0,0.273,3,0.089,4,0.064,5,0.064,6,2.554,11,0.004,12,0.344,13,0.727,16,1.327,17,0.008,18,1.612,19,0.654,20,0.98,23,0.089,28,1.64,36,1.979,46,1.674,53,0.78,69,2.31,87,0.704,95,1.712,99,0.005,100,0.004,125,2.16,127,0.96,128,1.984,129,1.607,141,1.456,145,2.246,150,0.344,179,0.138,197,1.468,205,1.274,216,1.968,219,1.396,236,1.523,240,2.187,247,1.687,252,1.743,253,1.335,282,2.603,329,1.15,449,2.258,450,5.986,454,5.337,456,5.366,474,1.107,476,1.115,480,4.279,492,3.749,497,3.339,498,1.373,512,2.505,513,3.919,514,2.713,525,3.922,530,1.847,544,3.36,545,3.338,546,2.768,561,4.614,565,2.585,578,3.075,593,3.147,599,3.339,603,3.141,604,2.552,605,6.203,606,3.085,607,6.203,608,6.108,609,6.691,610,6.691,611,4.419,612,5.413,613,4.419,614,4.419,615,4.419,616,3.917,617,5.413,618,6.203,619,3.586,620,2.977,621,3.917,622,3.586,623,5.413,624,3.917,625,3.586,626,6.203,627,3.586,628,5.413,629,3.586,630,3.917,631,3.141,632,3.586,633,3.917,634,3.917,635,3.917,636,3.917,637,3.917,638,3.917,639,2.836,640,3.339,641,5.703,642,4.614,643,4.614,644,5.703,645,3.339,646,3.339,647,4.614,648,3.339,649,4.448,650,2.002,651,5.413,652,5.413,653,2.06,654,3.917,655,3.917,656,3.917,657,6.203,658,3.917,659,3.917,660,5.413,661,3.917,662,3.917,663,3.917,664,5.413,665,4.341,666,5.413,667,3.586,668,3.917,669,2.333,670,3.917,671,6.203,672,3.917,673,3.917,674,3.917,675,3.917,676,3.339,677,5.413,678,5.413,679,3.917,680,5.413,681,5.703,682,3.917,683,5.413,684,3.917,685,3.339,686,2.836,687,3.917,688,3.917,689,3.917,690,3.917,691,5.413,692,6.203,693,6.203,694,5.413,695,5.413,696,5.413,697,3.917,698,3.917,699,3.917,700,3.917,701,3.917,702,3.917,703,3.917,704,2.836,705,3.917,706,3.917,707,3.339,708,3.917,709,3.917,710,3.339,711,3.917,712,3.917,713,3.917]],["title/interfaces/BodyUIProps.html",[0,0.282,518,3.695]],["body/interfaces/BodyUIProps.html",[0,0.281,2,1.092,3,0.066,4,0.066,5,0.066,6,1.464,11,0.004,12,0.353,13,0.741,16,1.264,17,0.008,18,1.172,19,0.586,23,0.091,28,1.659,36,1.466,46,1.774,99,0.005,100,0.004,118,1.114,125,2.611,128,1.778,145,1.764,150,0.338,153,2.001,156,2.058,179,0.194,205,1.669,219,1.407,236,2.144,252,1.908,301,2.117,302,1.948,329,0.855,403,2.012,448,3.43,450,3.43,451,4.025,452,4.025,453,3.059,454,4.192,455,2.64,456,5.046,457,4.358,458,7.091,459,4.025,460,4.025,461,4.025,462,4.025,463,4.025,464,4.025,471,4.025,472,1.76,475,2.788,476,1.393,480,4.684,481,4.025,483,4.499,485,4.025,488,4.025,491,4.025,493,3.684,495,4.373,497,3.43,499,4.025,501,4.025,504,4.025,506,4.025,508,2.058,509,6.292,510,5.515,511,5.515,512,2.574,513,2.914,514,2.788,515,2.574,516,4.025,517,2.001,518,5.049,519,4.499,520,4.556,521,3.561,522,4.024,523,2.675,524,2.914,525,3.514,526,4.025,527,4.025,528,2.675,529,4.025,530,1.898,531,4.025,532,4.025,533,4.025,534,4.025,535,4.025,536,2.788,537,4.025,538,4.025,539,4.025,540,5.515,541,4.025,542,4.025,543,4.025,544,2.18,545,2.482,546,2.058,547,2.914,548,4.025,549,5.515,550,4.025,551,2.914,552,4.025,553,5.515,554,4.025,555,3.286,556,6.292,557,5.515,558,5.515,559,4.025,560,4.025,561,6.509,562,5.515,563,4.025,564,6.292,565,1.677,566,4.025,567,4.025,568,5.515,569,4.025,570,4.025,571,4.025,572,3.993,573,4.025,574,4.025,575,4.025,576,5.515,577,6.292,578,2.892,579,7.091,580,5.515,581,5.515,582,5.515,583,4.025,584,4.025,585,4.025,586,4.025,587,3.684,588,4.025,589,4.025,590,4.025,591,4.025,592,4.025,593,1.804,594,4.025,595,4.025,596,4.025,597,3.059,598,4.025,599,3.43,600,4.025,601,4.025,602,4.025]],["title/components/BodyUiComponent.html",[101,0.726,324,1.436]],["body/components/BodyUiComponent.html",[3,0.097,4,0.059,5,0.059,11,0.003,12,0.314,13,0.683,17,0.008,19,0.657,23,0.059,28,0.877,36,1.351,47,1.385,48,1.409,53,0.927,55,1.145,65,1.308,68,2.118,73,2.909,81,2.592,87,0.914,99,0.005,100,0.006,101,1.221,102,1.273,103,1.625,104,1.246,105,1.302,106,1.361,107,1.169,114,1.971,117,3.119,118,2.329,120,1.889,122,1.932,125,1.246,127,0.877,128,2.187,129,1.743,136,1.121,144,2.838,148,1.331,150,0.314,151,0.447,152,1.939,160,5.517,161,3.579,162,2.87,163,3.051,167,4.889,168,3.579,169,1.273,173,1.273,177,1.273,179,0.126,184,3.051,197,1.379,205,1.514,216,1.848,219,1.206,224,1.776,253,1.22,277,1.688,290,1.169,295,2.132,317,0.671,318,1.769,319,1.848,320,1.361,321,2.445,322,1.361,323,1.361,324,2.289,325,1.361,326,1.273,327,1.361,328,1.273,329,1.367,330,1.361,331,1.273,332,1.302,333,1.361,334,1.273,335,1.361,336,1.273,337,1.361,338,1.273,339,1.361,340,1.273,341,2.246,342,1.361,343,1.273,344,1.932,345,1.273,346,1.331,347,1.361,348,1.273,349,2.457,350,1.932,351,1.273,352,1.361,353,1.273,354,1.361,355,1.273,356,1.273,357,1.361,358,1.273,359,1.361,360,1.273,361,1.932,362,1.273,363,1.361,364,1.273,365,1.361,366,1.273,367,1.361,368,1.302,369,1.361,370,1.273,371,1.361,372,1.273,373,1.361,374,1.273,375,1.273,376,1.361,377,1.273,378,1.273,379,1.361,380,1.361,446,6.791,448,6.187,454,5.163,455,2.014,470,1.331,472,2.584,474,1.436,476,0.914,494,1.999,498,1.125,508,1.83,519,3.378,587,4.652,653,2.673,665,4.076,714,7.418,715,4.038,716,2.598,717,4.739,718,6.667,719,5.734,720,6.667,721,5.734,722,5.158,723,2.335,724,2.396,725,6.667,726,3.051,727,5.734,728,4.038,729,4.652,730,3.68,731,5.082,732,3.68,733,5.082,734,2.716,735,4.038,736,2.118,737,5.734,738,4.038,739,4.038,740,5.448,741,5.734,742,4.332,743,4.038,744,2.87,745,2.522,746,2.335,747,4.038,748,4.038,749,4.038,750,4.038,751,4.038,752,4.038,753,4.038,754,2.379,755,2.592,756,2.063,757,4.038,758,4.038,759,4.038,760,4.038,761,4.038,762,4.038,763,2.379,764,4.038,765,4.204,766,4.038,767,6.667,768,4.038,769,5.158,770,4.038,771,4.038,772,4.038,773,4.038,774,4.038,775,4.038,776,4.038,777,5.734,778,4.038,779,4.038,780,4.038,781,5.734,782,4.038,783,5.734,784,5.734,785,4.038,786,2.479]],["title/modules/BodyUiModule.html",[381,0.651,442,3.236]],["body/modules/BodyUiModule.html",[3,0.099,4,0.099,5,0.099,11,0.006,17,0.008,23,0.099,99,0.007,100,0.006,128,1.696,150,0.351,151,0.75,179,0.211,204,2.003,317,1.126,324,3.002,381,0.968,383,1.92,384,1.92,385,2.589,386,2.003,387,2.003,388,2.589,403,2.279,404,1.804,406,2.09,407,2.428,442,6.592,444,2.77,445,2.282,446,5.496,714,6.003,787,6.003,788,6.003,789,6.003,790,6.773,791,6.773]],["title/classes/CCFDatabase.html",[179,0.142,792,2.922]],["body/classes/CCFDatabase.html",[0,0.179,1,1.481,2,0.697,3,0.042,4,0.042,5,0.042,6,2.769,8,1.229,9,3.372,11,0.005,12,0.225,13,0.534,16,1.229,17,0.008,18,0.844,19,0.709,20,1.215,23,0.08,24,3.329,25,2.641,26,1.352,27,1.826,28,1.65,32,1.708,34,2.795,36,2.089,45,2.451,47,1.115,48,0.513,50,1.531,53,1.035,65,1.21,66,2.291,68,2.605,69,3.249,73,3.22,80,3.372,83,3.78,85,2.752,87,1.292,92,2.416,94,2.641,95,3.3,96,2.641,99,0.006,100,0.006,118,1.1,127,1.34,128,1.123,129,1.813,131,1.271,145,1.749,150,0.337,152,3.531,179,0.09,180,2.126,181,1.696,183,2.073,194,4.049,197,1.078,219,1.025,236,2.43,237,3.983,240,3.054,247,1.695,249,2.368,252,1.424,253,1.354,259,1.644,449,1.481,470,0.955,474,2.031,476,1.063,480,1.644,498,1.731,606,1.976,620,1.953,650,3.95,653,2.09,665,5.661,716,2.032,792,3.959,793,6.106,794,2.57,795,3.974,796,5.013,797,2.752,798,3.974,799,4.141,800,4.484,801,4.141,802,3.638,803,4.448,804,3.974,805,4.484,806,3.23,807,2.9,808,5.89,809,4.484,810,5.039,811,4.141,812,2.9,813,4.859,814,2.9,815,3.897,816,3.855,817,3.974,818,4.448,819,2.9,820,5.005,821,3.974,822,2.9,823,3.02,824,4.526,825,3.638,826,3.974,827,2.877,828,3.974,829,2.9,830,3.974,831,5.467,832,2.9,833,3.974,834,2.9,835,5.966,836,4.859,837,2.9,838,2.641,839,2.9,840,3.638,841,2.9,842,3.974,843,3.365,844,3.638,845,3.387,846,2.9,847,2.752,848,5.005,849,1.924,850,2.877,851,3.974,852,2.9,853,3.974,854,2.9,855,3.974,856,2.353,857,2.57,858,2.57,859,2.57,860,1.78,861,2.353,862,2.57,863,2.57,864,4.75,865,2.57,866,2.57,867,2.57,868,2.57,869,2.57,870,2.57,871,2.061,872,1.481,873,2.57,874,2.19,875,4.859,876,2.19,877,3.974,878,1.545,879,3.974,880,3.387,881,3.787,882,1.861,883,3.638,884,3.974,885,2.57,886,3.974,887,1.861,888,2.57,889,2.57,890,2.57,891,2.353,892,2.57,893,2.57,894,2.19,895,6.733,896,2.353,897,2.57,898,2.57,899,2.57,900,2.353,901,3.974,902,2.57,903,2.57,904,2.57,905,2.57,906,2.57,907,3.974,908,2.57,909,2.57,910,2.57,911,2.57,912,2.57,913,2.57,914,2.57,915,2.57,916,2.061,917,2.57,918,2.57,919,2.57,920,2.57,921,2.57,922,3.974,923,2.57,924,2.57,925,2.632,926,4.859,927,2.57,928,2.57,929,3.187,930,2.57,931,2.57,932,2.57,933,2.57,934,2.57,935,2.57,936,2.57,937,2.57,938,2.57,939,2.57,940,2.57,941,2.57]],["title/interfaces/CCFDatabaseOptions.html",[0,0.282,808,3.44]],["body/interfaces/CCFDatabaseOptions.html",[0,0.219,1,1.814,2,1.256,3,0.052,4,0.052,5,0.052,6,1.144,8,0.53,9,2.855,11,0.005,12,0.276,13,0.622,16,1.355,17,0.008,18,0.669,19,0.68,23,0.09,24,3.044,25,2.091,26,1.655,27,1.446,28,1.485,32,2.091,34,3.662,36,2.095,45,2.855,47,0.944,48,0.628,50,1.874,65,1.025,66,1.814,68,2.289,69,3.172,73,3.172,80,2.855,83,3.672,85,3.207,87,0.832,92,2.302,94,2.091,95,3.131,96,2.091,99,0.006,100,0.006,118,1.282,127,0.771,128,0.889,131,1.006,145,1.757,150,0.352,152,3.497,179,0.111,180,1.8,181,1.343,183,2.174,194,3.782,219,1.136,236,2.135,237,3.892,240,2.586,247,1.785,249,1.874,252,1.578,253,1.578,259,2.012,476,1.161,480,2.012,498,1.646,606,3.012,620,3.518,650,3.452,653,2.435,665,5.177,716,1.609,792,3.352,793,2.523,794,3.146,795,3.146,796,4.405,799,2.682,801,2.682,803,2.88,806,3.651,808,5.503,810,5.163,811,3.946,813,4.629,815,3.713,816,3.736,817,3.146,818,4.238,820,5.029,821,3.146,823,2.391,825,2.88,826,3.146,827,2.278,828,3.146,830,3.146,831,5.493,833,3.146,835,5.546,836,4.629,838,2.091,840,2.88,842,3.146,843,3.207,844,2.88,845,2.682,847,2.179,848,4.238,849,1.523,850,2.278,851,3.146,853,3.146,855,3.146,856,2.88,857,3.146,858,3.146,859,3.146,860,2.179,861,2.88,862,3.146,863,3.146,864,5.131,865,3.146,866,3.146,867,3.146,868,3.146,869,3.146,870,3.146,871,2.523,872,1.814,873,3.146,874,2.682,875,6.752,876,3.946,877,6.456,878,2.355,879,6.456,880,5.503,881,4.961,882,3.352,883,5.91,884,6.456,885,4.629,886,6.456,887,3.352,888,6.057,889,3.146,890,3.146,891,2.88,892,3.146,893,3.146,894,2.682,895,7.162,896,2.88,897,3.146,898,3.146,899,3.146,900,2.88,901,4.629,902,3.146,903,3.146,904,3.146,905,3.146,906,3.146,907,4.629,908,3.146,909,3.146,910,3.146,911,3.146,912,3.146,913,3.146,914,3.146,915,3.146,916,2.523,917,3.146,918,3.146,919,3.146,920,3.146,921,3.146,922,4.629,923,3.146,924,3.146,925,2.976,926,5.493,927,3.146,928,3.146,929,3.713,930,3.146,931,3.146,932,3.146,933,3.146,934,3.146,935,3.146,936,3.146,937,3.146,938,3.146,939,3.146,940,3.146,941,3.146]],["title/classes/CCFSpatialGraph.html",[179,0.142,811,3.44]],["body/classes/CCFSpatialGraph.html",[3,0.065,4,0.103,5,0.065,6,2.765,11,0.005,12,0.347,13,0.732,16,1.258,17,0.008,18,1.325,19,0.718,23,0.09,53,1.015,80,2.438,83,4.184,84,3.36,87,1.267,99,0.005,100,0.004,118,1.508,127,0.969,129,1.792,150,0.356,152,2.142,179,0.139,197,1.478,205,1.79,216,1.438,219,1.465,236,2.423,237,2.279,247,1.692,252,1.03,253,2.124,259,3.987,272,1.728,449,2.279,470,1.47,474,1.991,476,1.121,498,1.56,513,5.404,514,2.738,544,2.142,545,2.438,546,2.021,555,4.002,578,3.087,649,2.628,763,2.628,765,3.714,769,4.999,792,4.864,793,6.098,796,4.999,811,4.644,816,4.345,864,3.005,871,3.17,872,2.279,896,3.619,925,3.377,929,3.17,942,4.46,943,6.147,944,6.147,945,6.147,946,7.58,947,6.147,948,3.953,949,6.147,950,4.644,951,7.58,952,6.147,953,4.46,954,6.147,955,5.651,956,4.46,957,6.147,958,6.147,959,5.672,960,4.46,961,5.651,962,4.46,963,6.147,964,7.95,965,4.46,966,7.033,967,3.619,968,5.448,969,4.46,970,3.953,971,4.46,972,4.46,973,5.448,974,4.46,975,3.953,976,3.953,977,3.17,978,3.619,979,4.46,980,4.46,981,6.147,982,6.233,983,6.451,984,4.46,985,3.619,986,3.37,987,3.37,988,3.619,989,3.043,990,4.46,991,4.46,992,4.46,993,4.46,994,4.46,995,4.46,996,4.46,997,3.953,998,4.46,999,4.46,1000,4.46,1001,4.46,1002,4.46,1003,4.46,1004,4.46,1005,4.46,1006,2.528,1007,4.46,1008,3.619,1009,2.628,1010,7.033,1011,4.46,1012,7.033,1013,7.033,1014,4.46,1015,4.46,1016,4.46,1017,4.46,1018,4.46,1019,4.46,1020,4.46,1021,4.46,1022,4.46,1023,4.46,1024,4.46,1025,4.46,1026,4.46,1027,6.147,1028,5.707,1029,4.46,1030,4.46,1031,4.46,1032,4.46]],["title/classes/CCFSpatialScene.html",[179,0.142,815,3.236]],["body/classes/CCFSpatialScene.html",[0,0.226,2,0.878,3,0.053,4,0.078,5,0.053,6,2.625,11,0.004,12,0.284,16,1.241,17,0.008,18,1.387,19,0.685,20,0.809,23,0.078,28,1.158,45,1.995,46,1.535,53,1.015,61,3.141,62,3.141,66,1.865,73,3.079,74,3.022,83,3.873,87,1.266,90,2.241,99,0.004,100,0.003,118,1.308,127,1.505,128,2.04,129,1.691,145,2.309,150,0.315,152,1.753,179,0.114,197,1.282,219,1.422,237,1.865,240,2.639,247,1.691,252,2.073,253,2.324,272,1.414,329,1.629,449,1.865,470,1.203,472,2.441,474,1.99,476,0.849,480,5.03,498,1.51,513,3.421,514,2.241,525,4.524,555,3.326,578,3.384,639,3.421,640,5.812,641,5.812,642,4.027,643,4.027,644,4.027,645,4.027,646,5.232,647,4.027,648,4.027,676,2.757,685,4.027,707,2.757,710,5.565,763,3.71,765,4.386,769,5.904,792,4.445,793,5.789,804,4.725,815,3.789,816,4.676,824,4.728,845,4.027,850,2.342,864,2.459,871,2.594,872,1.865,929,3.789,948,3.235,950,4.027,967,2.962,977,2.594,978,2.962,983,5.978,985,2.962,986,2.757,987,2.757,988,2.962,1006,2.069,1008,2.962,1033,3.235,1034,5.331,1035,5.331,1036,5.331,1037,5.331,1038,5.331,1039,3.65,1040,4.725,1041,3.65,1042,4.725,1043,3.65,1044,4.725,1045,3.65,1046,4.725,1047,3.65,1048,3.65,1049,4.725,1050,6.139,1051,3.65,1052,2.594,1053,6.529,1054,4.725,1055,3.235,1056,3.235,1057,3.235,1058,6.139,1059,6.529,1060,4.725,1061,4.725,1062,7.042,1063,3.235,1064,4.725,1065,3.235,1066,3.235,1067,3.235,1068,2.757,1069,3.235,1070,3.235,1071,3.235,1072,3.235,1073,3.235,1074,2.962,1075,3.235,1076,3.235,1077,4.725,1078,3.235,1079,3.235,1080,7.219,1081,4.326,1082,4.725,1083,4.725,1084,4.326,1085,4.725,1086,3.235,1087,4.725,1088,3.235,1089,4.725,1090,4.725,1091,3.235,1092,3.235,1093,3.235,1094,3.235,1095,3.235,1096,3.235,1097,3.235,1098,3.235,1099,3.235,1100,3.789,1101,3.235,1102,6.529,1103,4.725,1104,3.235,1105,3.235,1106,3.235,1107,4.725,1108,4.445,1109,3.235,1110,3.235,1111,3.235,1112,4.027,1113,2.241,1114,3.235,1115,2.594,1116,3.235,1117,3.235,1118,3.235,1119,3.235,1120,3.235,1121,1.753,1122,3.235,1123,3.235,1124,3.235,1125,3.235,1126,3.235,1127,3.235,1128,3.235]],["title/interfaces/ChannelConfig.html",[0,0.282,1129,2.922]],["body/interfaces/ChannelConfig.html",[0,0.418,2,0.836,3,0.075,4,0.051,5,0.051,6,1.121,11,0.006,12,0.4,13,0.612,16,1.129,17,0.008,18,1.723,19,0.698,23,0.11,28,1.7,46,1.5,47,0.93,48,0.616,92,3.183,95,2.799,99,0.004,100,0.003,125,1.073,141,2.017,145,1.458,150,0.296,179,0.108,205,1.711,216,1.658,219,1.439,235,2.049,247,1.874,252,1.562,271,2.706,281,2.313,329,1.36,455,2.521,457,4.434,472,1.994,475,3.158,476,0.554,495,3.699,512,1.971,515,1.971,517,2.699,519,4.255,520,2.232,522,1.971,523,4.917,524,2.232,525,3.031,528,3.607,530,2.559,536,3.158,547,2.232,572,5.021,604,1.453,650,3.273,653,3.367,669,3.814,686,2.232,736,2.793,860,2.135,925,1.67,989,2.547,1129,3.93,1130,2.342,1131,2.135,1132,3.69,1133,3.575,1134,3.573,1135,4.558,1136,4.255,1137,3.93,1138,1.971,1139,2.232,1140,3.031,1141,3.158,1142,3.031,1143,3.158,1144,2.472,1145,2.472,1146,3.302,1147,4.434,1148,2.472,1149,2.472,1150,3.465,1151,4.125,1152,2.472,1153,3.302,1154,3.302,1155,4.352,1156,4.104,1157,3.158,1158,2.135,1159,2.135,1160,3.699,1161,5.134,1162,4.558,1163,3.657,1164,4.125,1165,2.472,1166,2.472,1167,2.472,1168,4.125,1169,1.971,1170,4.352,1171,4.352,1172,2.342,1173,2.342,1174,4.125,1175,4.343,1176,4.352,1177,2.232,1178,2.342,1179,2.472,1180,2.232,1181,4.81,1182,2.342,1183,5.498,1184,3.465,1185,3.465,1186,3.836,1187,2.232,1188,2.472,1189,2.472,1190,2.472,1191,2.472,1192,2.472,1193,2.472,1194,2.135,1195,4.352,1196,4.352,1197,4.352,1198,4.81,1199,5.134,1200,2.342,1201,2.472,1202,2.342,1203,3.657,1204,2.472,1205,2.472,1206,2.472,1207,2.342,1208,2.472,1209,2.472,1210,2.472,1211,2.342,1212,2.472,1213,2.472,1214,3.657,1215,2.472,1216,2.472,1217,2.342,1218,4.352,1219,2.472,1220,3.031,1221,2.472,1222,3.657,1223,2.232,1224,2.232,1225,2.472,1226,2.342,1227,2.472,1228,3.657,1229,2.342,1230,2.472,1231,2.472,1232,2.232,1233,3.302,1234,2.472,1235,2.472,1236,2.472,1237,2.472,1238,2.472,1239,2.342,1240,2.472,1241,1.971,1242,2.472,1243,2.472,1244,2.472,1245,2.472,1246,2.472,1247,2.342,1248,2.472,1249,2.342,1250,3.465,1251,2.472,1252,2.472,1253,2.472,1254,2.472,1255,2.342,1256,2.472,1257,2.472,1258,2.472,1259,2.472,1260,2.472,1261,2.232,1262,2.472,1263,2.472,1264,3.657,1265,2.472,1266,2.472]],["title/components/CheckboxComponent.html",[101,0.726,326,1.436]],["body/components/CheckboxComponent.html",[3,0.097,4,0.059,5,0.059,8,0.854,11,0.003,12,0.313,15,2.525,16,1.27,17,0.008,19,0.631,20,1.474,23,0.059,24,3.027,46,1.267,47,1.383,48,1.408,49,1.296,53,0.849,55,1.14,65,1.305,69,2.74,73,2.241,82,1.69,87,0.641,89,2.745,99,0.005,100,0.006,101,1.219,102,1.268,103,1.621,104,1.241,105,1.296,106,1.355,107,1.164,114,1.967,117,3.119,118,2.323,120,1.884,122,1.926,127,0.874,128,1.007,129,1.629,131,1.621,136,1.116,144,2.83,146,4.063,148,1.325,150,0.234,151,0.445,159,5.631,169,1.268,173,1.268,177,1.268,179,0.125,180,1.97,183,1.461,197,1.375,199,2.271,205,1.192,219,0.669,224,1.772,232,4.319,233,3.323,236,1.97,248,3.125,259,3.241,268,2.932,269,1.991,275,2.453,281,1.189,284,2.578,286,1.875,290,1.164,291,3.292,292,2.123,295,2.123,308,2.28,309,2.123,311,3.263,317,0.669,318,1.764,319,1.842,320,1.355,321,2.44,322,1.355,323,1.355,324,1.268,325,1.355,326,2.284,327,1.355,328,1.268,329,1.441,330,1.355,331,1.268,332,1.296,333,1.355,334,1.268,335,1.355,336,1.268,337,1.355,338,1.268,339,1.355,340,1.268,341,2.241,342,1.355,343,1.268,344,1.926,345,1.268,346,1.325,347,1.355,348,1.268,349,1.764,350,1.926,351,1.268,352,1.355,353,1.268,354,1.355,355,1.268,356,1.268,357,1.355,358,1.268,359,1.355,360,1.268,361,1.926,362,1.268,363,1.355,364,1.268,365,1.355,366,1.268,367,1.355,368,1.296,369,1.355,370,1.268,371,1.355,372,1.268,373,1.355,374,1.268,375,1.268,376,1.355,377,1.268,378,1.268,379,1.355,380,1.355,474,1.007,476,0.641,498,0.789,503,3.701,521,2.665,723,2.329,724,2.389,734,2.709,736,2.111,745,2.74,746,2.329,1028,3.263,1267,4.021,1268,5.717,1269,5.067,1270,7.952,1271,5.717,1272,7.933,1273,6.651,1274,5.717,1275,5.717,1276,5.397,1277,4.021,1278,5.717,1279,5.717,1280,5.717,1281,5.717,1282,4.021,1283,4.639,1284,5.877,1285,4.319,1286,4.021,1287,3.509,1288,7.645,1289,4.063,1290,6.42,1291,4.021,1292,4.639,1293,5.717,1294,7.244,1295,6.593,1296,4.021,1297,3.851,1298,4.319,1299,5.717,1300,4.319,1301,4.267,1302,3.669,1303,5.717,1304,5.717,1305,3.263,1306,4.021,1307,5.397,1308,4.021,1309,3.564,1310,4.021,1311,4.021,1312,4.021,1313,4.021,1314,3.263,1315,1.875,1316,4.021,1317,2.469,1318,2.469,1319,2.858,1320,4.063,1321,3.564,1322,4.021,1323,4.021]],["title/modules/CheckboxModule.html",[381,0.651,1324,3.236]],["body/modules/CheckboxModule.html",[3,0.099,4,0.099,5,0.099,11,0.006,17,0.008,23,0.099,99,0.007,100,0.006,150,0.363,151,0.749,179,0.211,204,2,317,1.124,326,3.001,381,0.967,383,1.917,384,1.917,385,2.587,386,2,387,2,388,2.587,403,2.277,404,1.801,406,2.087,407,2.426,444,2.767,445,2.279,1305,5.488,1324,6.591,1325,5.995,1326,5.995,1327,5.995,1328,6.764,1329,7.118,1330,6.764]],["title/components/ColorBarComponent.html",[101,0.726,328,1.436]],["body/components/ColorBarComponent.html",[3,0.098,4,0.059,5,0.059,8,0.86,11,0.005,12,0.52,16,1.147,17,0.008,19,0.552,20,1.482,23,0.059,45,2.219,46,0.9,47,1.388,48,1.412,49,1.308,53,0.854,55,1.151,65,1.312,82,1.977,87,0.647,99,0.005,100,0.006,101,1.224,102,1.28,103,1.631,104,1.253,105,1.308,106,1.367,107,1.175,114,1.977,117,3.128,118,2.324,120,1.896,122,1.939,127,1.452,128,1.017,129,1.784,136,1.127,144,3.309,148,1.337,150,0.235,151,0.449,169,1.28,173,1.28,177,1.28,179,0.126,197,1.384,205,0.847,219,0.957,224,2.388,238,3.976,239,4.249,252,0.937,268,1.789,271,1.367,275,1.742,281,2.151,290,1.175,300,1.696,301,1.892,302,1.742,303,3.876,317,0.675,318,1.776,319,1.855,320,1.367,321,2.451,322,1.367,323,1.367,324,1.28,325,1.367,326,1.28,327,1.367,328,2.294,329,1.784,330,1.367,331,1.28,332,1.308,333,1.367,334,1.28,335,1.367,336,1.28,337,1.367,338,1.28,339,1.367,340,1.28,341,2.252,342,1.367,343,1.28,344,1.939,345,1.28,346,1.337,347,1.367,348,1.28,349,1.776,350,1.939,351,1.28,352,1.367,353,1.28,354,1.367,355,1.28,356,1.28,357,1.367,358,1.28,359,1.367,360,1.28,361,1.939,362,1.28,363,1.367,364,1.28,365,1.367,366,1.28,367,1.367,368,1.308,369,1.367,370,1.28,371,1.367,372,1.28,373,1.367,374,1.28,375,1.28,376,1.367,377,1.28,378,1.28,379,1.367,380,1.367,474,1.017,476,0.647,498,1.427,565,2.686,723,2.344,724,2.405,734,2.723,745,2.905,746,2.344,1287,2.492,1315,2.683,1331,4.832,1332,3.863,1333,6.44,1334,4.059,1335,6.8,1336,3.693,1337,6.686,1338,5.755,1339,5.1,1340,6.686,1341,3.614,1342,6.686,1343,6.686,1344,6.686,1345,3.262,1346,6.686,1347,4.059,1348,3.145,1349,4.059,1350,3.533,1351,3.939,1352,4.059,1353,4.059,1354,5.755,1355,4.059,1356,5.1,1357,3.597,1358,4.059,1359,2.143,1360,4.059,1361,4.059,1362,4.059,1363,4.668,1364,3.597,1365,4.059,1366,4.059,1367,4.059,1368,5.755,1369,5.1,1370,5.1,1371,5.755,1372,2.391,1373,2.605,1374,3.597,1375,4.09,1376,3.693,1377,2.219,1378,4.059,1379,2.219,1380,2.074,1381,2.219,1382,3.066]],["title/modules/ColorBarModule.html",[381,0.651,1383,3.067]],["body/modules/ColorBarModule.html",[3,0.099,4,0.099,5,0.099,11,0.006,17,0.008,23,0.099,99,0.007,100,0.006,150,0.351,151,0.749,179,0.211,204,2,317,1.124,328,3.001,329,1.274,381,0.967,383,1.917,384,1.917,385,2.587,386,2,387,2,388,2.587,403,2.277,404,1.801,406,2.087,407,2.426,444,2.767,445,2.279,1331,3.834,1332,3.065,1333,5.11,1383,6.246,1384,5.995,1385,5.995,1386,5.995,1387,6.764,1388,6.764]],["title/components/ColorPickerLauncherComponent.html",[101,0.726,331,1.436]],["body/components/ColorPickerLauncherComponent.html",[3,0.105,4,0.069,5,0.069,8,0.703,11,0.004,12,0.366,13,0.759,17,0.008,19,0.526,23,0.069,47,1.544,48,1.559,53,0.814,55,1.334,65,1.419,89,3.062,99,0.005,100,0.006,101,1.361,102,1.484,103,1.808,104,1.452,105,1.517,106,1.586,107,1.362,114,2.138,117,3.151,118,2.347,120,2.101,122,2.148,128,1.179,129,1.357,134,4.295,136,1.307,148,1.551,150,0.261,151,0.521,169,1.484,173,1.484,177,1.484,179,0.147,194,3.062,224,2.158,233,2.665,271,1.586,272,1.824,281,1.392,290,1.362,296,2.194,298,3.258,300,1.967,301,2.194,302,2.019,317,0.782,318,1.968,319,2.055,320,1.586,321,2.611,322,1.586,323,1.586,324,1.484,325,1.586,326,1.484,327,1.586,328,1.484,329,1.748,330,1.586,331,2.444,332,2.98,333,1.586,334,1.484,335,1.586,336,1.484,337,1.586,338,1.484,339,1.586,340,1.484,341,2.436,342,1.586,343,1.484,344,2.148,345,1.484,346,1.551,347,1.586,348,1.484,349,1.968,350,2.148,351,1.484,352,1.586,353,1.484,354,1.586,355,1.484,356,1.484,357,1.586,358,1.484,359,1.586,360,1.484,361,2.148,362,1.484,363,1.586,364,1.484,365,1.586,366,1.484,367,1.586,368,1.517,369,1.586,370,1.484,371,1.586,372,1.484,373,1.586,374,1.484,375,1.484,376,1.586,377,1.484,378,1.484,379,1.586,380,1.586,476,0.75,517,3.83,723,2.597,724,2.665,732,4.092,734,2.946,745,2.412,746,3.157,1164,4.295,1302,4.092,1315,2.973,1331,4.099,1332,3.277,1370,5.651,1377,2.572,1389,5.868,1390,4.706,1391,5.174,1392,4.532,1393,5.651,1394,6.376,1395,6.376,1396,3.614,1397,3.614,1398,6.376,1399,7.232,1400,6.376,1401,4.871,1402,3.695,1403,4.706,1404,4.706,1405,5.651,1406,4.817,1407,3.258,1408,4.817,1409,2.668,1410,2.889,1411,4.706,1412,3.819]],["title/modules/ColorPickerLauncherModule.html",[381,0.651,1413,3.236]],["body/modules/ColorPickerLauncherModule.html",[3,0.096,4,0.096,5,0.096,11,0.005,17,0.008,23,0.096,99,0.007,100,0.005,150,0.359,151,0.728,179,0.205,204,1.945,224,2.104,317,1.093,329,1.488,331,2.991,332,2.728,381,0.94,383,1.865,384,1.865,385,2.557,386,1.945,387,1.945,388,2.557,403,2.239,404,1.752,406,2.437,407,2.386,444,2.722,445,2.216,1331,3.728,1332,2.98,1389,5.337,1413,6.653,1414,5.83,1415,5.83,1416,5.83,1417,5.83,1418,6.482,1419,6.578,1420,6.578,1421,5.337,1422,6.578]],["title/interfaces/ColorScheme.html",[0,0.282,1341,2.063]],["body/interfaces/ColorScheme.html",[0,0.427,2,1.661,3,0.101,4,0.101,5,0.101,11,0.006,12,0.537,13,0.968,16,1.377,17,0.008,18,1.628,19,0.774,23,0.101,53,1.14,99,0.007,100,0.006,1341,3.686,1351,5.257,1363,5.547,1373,5.727,1376,5.547,1423,6.91,1424,6.91]],["title/interfaces/ColorScheme-1.html",[0,0.235,253,1.146,1341,1.719]],["body/interfaces/ColorScheme-1.html",[0,0.366,2,1.017,3,0.086,4,0.062,5,0.062,8,0.631,11,0.004,12,0.531,13,0.705,16,1.207,17,0.008,18,1.395,19,0.759,23,0.131,36,1.395,47,0.764,51,1.767,53,1.165,69,1.599,82,1.751,99,0.005,100,0.004,127,1.914,131,1.938,219,1.465,224,2.368,236,1.457,239,2.761,252,2.012,253,2.633,329,1.287,530,1.767,736,1.561,1331,2.396,1332,1.916,1341,4.061,1351,5.42,1363,5.655,1373,5.853,1376,5.925,1407,2.16,1425,3.747,1426,4.228,1427,4.474,1428,4.805,1429,5.249,1430,5.249,1431,3.747,1432,3.747,1433,5.249,1434,3.747,1435,5.249,1436,3.747,1437,3.747,1438,3.747,1439,7.726,1440,7.726,1441,6.196,1442,7.726,1443,7.726,1444,5.249,1445,5.249,1446,3.747,1447,3.747,1448,3.747,1449,3.747,1450,3.747,1451,3.747,1452,6.058,1453,3.747,1454,3.747,1455,3.747,1456,5.249,1457,3.747,1458,3.747,1459,3.747,1460,6.058,1461,3.747,1462,3.747,1463,3.747,1464,3.747,1465,3.747,1466,5.249,1467,3.747,1468,3.747,1469,6.058,1470,3.747,1471,3.747,1472,3.747,1473,3.747,1474,3.747,1475,3.747,1476,3.747,1477,6.058,1478,3.747,1479,3.747,1480,3.747,1481,3.747,1482,3.747,1483,3.747,1484,3.747,1485,6.058,1486,3.747,1487,3.747,1488,3.747,1489,3.747,1490,3.747,1491,3.747,1492,3.747,1493,3.747,1494,6.058,1495,3.747,1496,3.747,1497,3.747,1498,3.747,1499,3.747,1500,3.747,1501,3.747,1502,3.747,1503,6.058,1504,3.747,1505,3.747,1506,3.747,1507,3.747,1508,3.747,1509,3.747,1510,3.747,1511,3.747,1512,6.058,1513,3.747,1514,3.747,1515,3.747,1516,3.747,1517,3.747,1518,3.747,1519,3.747,1520,2.713,1521,3.005,1522,2.16,1523,3.194,1524,3.747]],["title/components/ColorSchemeContentsComponent.html",[101,0.726,334,1.436]],["body/components/ColorSchemeContentsComponent.html",[3,0.079,4,0.041,5,0.041,8,0.657,11,0.002,12,0.342,13,0.831,15,0.854,16,0.806,17,0.008,18,1.596,19,0.653,20,1.968,23,0.041,24,1.838,33,1.838,47,1.191,48,1.29,49,1.962,53,0.93,55,0.802,65,1.059,68,1.993,69,3.047,87,1.05,93,1.358,99,0.004,100,0.004,101,1.05,102,0.892,103,1.246,104,0.873,105,0.911,106,0.953,107,0.819,114,1.595,117,3.027,118,2.255,120,1.449,122,1.481,127,0.955,128,0.708,129,1.834,131,1.725,135,3.568,136,0.785,144,3.013,145,1.725,148,0.932,150,0.249,151,0.313,159,3.634,169,0.892,173,0.892,177,0.892,179,0.088,183,0.723,197,1.057,199,1.123,205,1.68,213,3.568,219,0.897,224,2.516,233,1.838,238,2.403,239,2.05,247,1.148,252,0.653,253,1.63,268,2.906,269,2.177,270,2.59,271,1.818,272,1.096,275,1.213,277,2.255,279,2.987,281,1.949,282,2.59,284,2.555,286,3.397,290,0.819,293,2.757,299,1.358,300,2.755,301,1.318,302,2.829,305,1.666,306,1.493,308,1.603,309,1.493,317,0.47,318,1.357,319,1.417,320,0.953,321,2.05,322,0.953,323,0.953,324,0.892,325,0.953,326,0.892,327,0.953,328,0.892,329,1.645,330,0.953,331,0.892,332,0.911,333,0.953,334,1.919,335,0.953,336,0.892,337,0.953,338,0.892,339,0.953,340,0.892,341,1.818,342,0.953,343,0.892,344,1.481,345,0.892,346,0.932,347,0.953,348,0.892,349,1.357,350,1.481,351,0.892,352,0.953,353,0.892,354,0.953,355,0.892,356,0.892,357,0.953,358,0.892,359,0.953,360,0.892,361,1.481,362,0.892,363,0.953,364,0.892,365,0.953,366,0.892,367,0.953,368,0.911,369,0.953,370,0.892,371,0.953,372,0.892,373,0.953,374,0.892,375,0.892,376,0.953,377,0.892,378,0.892,379,0.953,380,0.953,455,1.63,470,1.778,472,1.704,474,1.651,476,1.337,498,1.552,517,3.894,565,1.624,723,1.791,724,1.838,734,2.198,736,2.782,745,2.302,746,1.791,987,2.136,1121,1.358,1133,4.05,1289,3.125,1292,3.568,1302,3.906,1315,2.838,1331,4.92,1332,3.933,1335,2.294,1336,2.822,1339,3.897,1341,3.302,1345,2.492,1350,2.699,1357,3.897,1359,4.32,1372,3.179,1375,2.01,1377,1.546,1379,1.546,1380,2.246,1381,2.403,1382,2.136,1401,4.1,1402,3.11,1407,2.246,1410,1.736,1520,3.462,1525,7.043,1526,2.828,1527,3.568,1528,4.397,1529,4.397,1530,4.938,1531,5.395,1532,4.397,1533,5.395,1534,5.395,1535,6.086,1536,6.086,1537,4.782,1538,4.378,1539,5.395,1540,5.395,1541,5.962,1542,2.828,1543,4.397,1544,2.828,1545,3.125,1546,1.992,1547,2.828,1548,3.322,1549,3.897,1550,2.828,1551,3.125,1552,2.828,1553,2.828,1554,6.126,1555,2.828,1556,4.397,1557,3.125,1558,3.322,1559,2.59,1560,2.246,1561,2.828,1562,2.828,1563,2.828,1564,4.598,1565,2.828,1566,2.828,1567,2.828,1568,2.828,1569,5.394,1570,2.828,1571,2.828,1572,2.828,1573,2.828,1574,5.394,1575,2.828,1576,2.828,1577,2.828,1578,2.828,1579,2.828,1580,2.828,1581,4.326,1582,2.828,1583,2.828,1584,6.086,1585,2.828,1586,2.828,1587,2.828,1588,2.828,1589,2.828,1590,2.828,1591,5.395,1592,2.506,1593,2.506,1594,2.506,1595,2.506,1596,2.506,1597,2.828,1598,2.828,1599,2.828,1600,2.828,1601,4.397,1602,2.01,1603,2.828,1604,2.828,1605,2.828,1606,1.736,1607,1.905,1608,3.125,1609,2.01,1610,2.962,1611,1.905,1612,2.294,1613,2.294,1614,1.603,1615,1.546,1616,4.397,1617,2.01,1618,2.506,1619,3.897,1620,2.294,1621,2.136,1622,2.828,1623,2.506]],["title/modules/ColorSchemeContentsModule.html",[381,0.651,1624,3.236]],["body/modules/ColorSchemeContentsModule.html",[3,0.093,4,0.093,5,0.093,11,0.005,17,0.008,23,0.093,99,0.006,100,0.005,150,0.371,151,0.709,179,0.199,204,1.893,224,2.228,317,1.064,329,1.463,334,2.981,381,0.915,383,1.815,384,1.815,385,2.527,386,1.893,387,1.893,388,2.527,396,5.815,403,2.203,404,1.705,406,2.398,407,2.347,426,5.194,427,4.55,428,5.194,444,2.677,445,2.157,1133,3.169,1331,3.629,1332,2.901,1333,4.836,1383,6.104,1525,5.194,1581,4.55,1624,6.694,1625,5.673,1626,5.673,1627,6.401,1628,5.673,1629,6.401,1630,6.887,1631,6.401,1632,5.673]],["title/components/ColorSchemePopupComponent.html",[101,0.726,336,1.436]],["body/components/ColorSchemePopupComponent.html",[3,0.093,4,0.055,5,0.055,8,0.561,11,0.003,12,0.292,13,0.925,17,0.008,19,0.641,20,1.419,23,0.055,47,1.347,48,1.419,49,1.754,53,0.818,55,1.065,65,1.256,87,1.02,99,0.005,100,0.005,101,1.187,102,1.184,103,1.543,104,1.159,105,1.211,106,1.265,107,1.087,114,1.893,117,3.111,118,2.311,120,1.793,122,1.834,127,1.391,128,0.941,129,1.781,136,1.043,145,1.543,148,1.238,150,0.262,151,0.416,169,1.184,173,1.184,177,1.184,179,0.117,183,0.96,197,1.309,205,1.335,215,2.975,219,0.905,224,2.505,233,2.275,247,0.8,248,2.975,269,3.475,274,2.053,277,2.676,283,1.656,286,2.985,290,1.087,296,2.538,299,1.803,317,0.624,318,1.68,319,2.739,320,1.265,321,2.365,322,1.265,323,1.265,324,1.184,325,1.265,326,1.184,327,1.265,328,1.184,329,1.639,330,1.265,331,1.184,332,1.211,333,1.265,334,1.184,335,1.265,336,2.214,337,1.265,338,1.184,339,1.265,340,1.184,341,2.157,342,1.265,343,1.184,344,1.834,345,1.184,346,1.238,347,1.265,348,1.184,349,1.68,350,1.834,351,1.184,352,1.265,353,1.184,354,1.265,355,1.184,356,1.184,357,1.265,358,1.184,359,1.265,360,1.184,361,1.834,362,1.184,363,1.265,364,1.184,365,1.265,366,1.184,367,1.265,368,1.211,369,1.265,370,1.184,371,1.265,372,1.184,373,1.265,374,1.184,375,1.184,376,1.265,377,1.184,378,1.184,379,1.265,380,1.265,455,1.934,474,0.941,476,0.598,493,5.195,494,1.859,498,0.737,503,3.587,517,3.618,522,3.086,544,1.803,555,1.983,565,2.593,578,1.53,606,2.399,649,2.213,723,2.217,724,2.275,730,3.493,734,2.608,740,5.297,742,4.112,744,2.67,745,2.421,746,2.859,824,2.41,1287,3.342,1292,4.417,1331,4.817,1332,3.85,1336,5.756,1341,2.901,1372,3.772,1401,4.312,1402,3.271,1410,2.306,1421,6.895,1520,4.108,1538,5.195,1545,5.523,1549,4.824,1551,3.869,1614,2.129,1633,3.756,1634,6.402,1635,5.443,1636,7.02,1637,8.367,1638,7.771,1639,4.824,1640,4.824,1641,3.756,1642,4.31,1643,3.493,1644,3.756,1645,4.824,1646,3.756,1647,2.838,1648,4.417,1649,3.329,1650,3.756,1651,4.824,1652,4.824,1653,4.99,1654,4.112,1655,5.443,1656,5.443,1657,3.756,1658,4.824,1659,3.756,1660,6.222,1661,5.443,1662,3.756,1663,3.756,1664,3.493,1665,3.493,1666,3.756,1667,4.112,1668,3.048,1669,3.329,1670,3.329,1671,3.329,1672,3.756,1673,4.824,1674,3.756,1675,3.756,1676,3.756,1677,5.443,1678,3.756,1679,3.756,1680,3.756,1681,3.048,1682,2.838]],["title/modules/ColorSchemePopupModule.html",[381,0.651,1418,3.236]],["body/modules/ColorSchemePopupModule.html",[3,0.096,4,0.096,5,0.096,11,0.005,17,0.008,23,0.096,99,0.007,100,0.005,150,0.359,151,0.728,179,0.205,204,1.945,224,2.392,317,1.093,329,1.488,336,2.991,381,0.94,383,1.865,384,1.865,385,2.557,386,1.945,387,1.945,388,2.557,403,2.239,404,1.752,406,2.437,407,2.386,444,2.722,445,2.216,1331,3.728,1332,2.98,1418,6.653,1421,5.337,1525,5.337,1624,6.482,1683,5.83,1684,5.83,1685,6.578,1686,5.83,1687,6.578,1688,6.578,1689,6.578]],["title/interfaces/ColorSchemeSelection.html",[0,0.282,1523,3.44]],["body/interfaces/ColorSchemeSelection.html",[0,0.371,2,1.036,3,0.101,4,0.063,5,0.063,8,0.643,11,0.004,12,0.61,13,0.714,16,0.896,17,0.008,18,1.406,19,0.742,23,0.131,36,1.015,51,2.508,53,1.139,69,1.629,82,1.274,99,0.005,100,0.004,127,1.921,131,1.221,219,1.47,224,2.41,236,2.067,239,3.481,252,2.02,253,2.643,329,1.406,736,2.216,1331,2.442,1332,1.952,1341,4.099,1351,5.295,1363,5.459,1373,5.725,1376,5.868,1407,3.065,1425,3.818,1427,3.254,1428,4.869,1429,5.318,1430,5.318,1431,3.818,1432,3.818,1433,5.318,1434,3.818,1435,5.318,1436,3.818,1437,3.818,1438,3.818,1439,7.756,1440,7.756,1441,6.22,1442,7.756,1443,7.756,1444,5.318,1445,5.318,1446,3.818,1447,3.818,1448,3.818,1449,3.818,1450,3.818,1451,3.818,1452,6.119,1453,3.818,1454,3.818,1455,3.818,1456,5.318,1457,3.818,1458,3.818,1459,3.818,1460,6.119,1461,3.818,1462,3.818,1463,3.818,1464,3.818,1465,3.818,1466,5.318,1467,3.818,1468,3.818,1469,6.119,1470,3.818,1471,3.818,1472,3.818,1473,3.818,1474,3.818,1475,3.818,1476,3.818,1477,6.119,1478,3.818,1479,3.818,1480,3.818,1481,3.818,1482,3.818,1483,3.818,1484,3.818,1485,6.119,1486,3.818,1487,3.818,1488,3.818,1489,3.818,1490,3.818,1491,3.818,1492,3.818,1493,3.818,1494,6.119,1495,3.818,1496,3.818,1497,3.818,1498,3.818,1499,3.818,1500,3.818,1501,3.818,1502,3.818,1503,6.119,1504,3.818,1505,3.818,1506,3.818,1507,3.818,1508,3.818,1509,3.818,1510,3.818,1511,3.818,1512,6.119,1513,3.818,1514,3.818,1515,3.818,1516,3.818,1517,3.818,1518,3.818,1519,3.818,1520,2.764,1521,4.265,1522,3.065,1523,4.533,1524,6.618]],["title/components/ContainerComponent.html",[101,0.726,338,1.436]],["body/components/ContainerComponent.html",[3,0.086,4,0.048,5,0.048,8,0.881,11,0.003,12,0.382,13,0.585,17,0.008,18,0.925,19,0.651,20,1.089,23,0.048,46,1.455,47,1.271,48,1.308,49,1.053,51,1.366,53,0.838,55,0.926,65,1.158,82,1.452,87,0.783,99,0.004,100,0.005,101,1.33,102,1.031,103,2.095,104,1.009,105,1.053,106,1.101,107,0.946,109,4.354,114,2.553,117,3.068,118,2.293,120,1.618,122,1.655,125,1.009,127,1.067,128,0.819,129,1.82,131,1.392,136,0.907,145,2.173,148,1.077,150,0.302,151,0.362,153,1.441,156,1.481,169,1.031,173,1.031,177,2.069,179,0.219,180,1.693,181,1.858,183,1.678,192,4.842,197,1.181,205,1.369,216,1.583,219,1.091,224,1.572,247,1.397,252,0.755,253,1.783,273,3.015,274,1.786,275,3.669,277,2.94,283,3.838,290,0.946,314,2.897,317,0.543,318,2.025,319,1.583,320,1.101,321,2.211,322,1.101,323,1.101,324,1.031,325,1.101,326,1.031,327,1.101,328,1.031,329,1.236,330,1.101,331,1.031,332,1.053,333,1.101,334,1.031,335,1.101,336,1.031,337,1.101,338,2.069,339,1.101,340,2.069,341,1.988,342,1.101,343,1.031,344,1.655,345,1.031,346,1.077,347,1.101,348,1.031,349,1.516,350,1.655,351,1.031,352,1.101,353,1.031,354,1.101,355,1.031,356,1.031,357,1.101,358,1.031,359,1.101,360,1.031,361,1.655,362,1.031,363,1.101,364,1.031,365,1.101,366,1.031,367,1.101,368,1.053,369,1.101,370,1.031,371,1.101,372,1.031,373,1.101,374,1.031,375,1.031,376,1.101,377,1.031,378,1.031,379,1.101,380,1.101,387,1.452,455,2.744,470,1.077,474,1.23,476,0.94,494,2.921,498,1.504,503,3.776,578,2.001,716,2.226,717,4.195,722,4.665,755,4.211,786,2.006,849,2.108,878,1.693,1345,2.784,1373,3.152,1396,2.784,1397,2.784,1409,1.853,1522,3.353,1546,2.974,1560,2.51,1615,1.786,1682,2.469,1690,3.268,1691,3.345,1692,4.354,1693,4.912,1694,3.904,1695,5.902,1696,4.912,1697,3.482,1698,5.902,1699,5.902,1700,5.792,1701,3.986,1702,3.72,1703,6.563,1704,3.711,1705,5.902,1706,3.986,1707,4.665,1708,4.665,1709,4.912,1710,2.51,1711,3.594,1712,3.491,1713,3.268,1714,4.912,1715,3.795,1716,3.268,1717,4.354,1718,4.912,1719,3.711,1720,3.711,1721,3.711,1722,3.268,1723,3.309,1724,4.912,1725,4.912,1726,3.268,1727,3.491,1728,3.268,1729,4.912,1730,3.116,1731,3.268,1732,3.309,1733,7.667,1734,4.912,1735,5.816,1736,3.268,1737,4.354,1738,6.563,1739,4.912,1740,3.268,1741,3.711,1742,4.354,1743,4.912,1744,3.268,1745,4.458,1746,3.711,1747,3.268,1748,3.268,1749,3.986,1750,3.268,1751,3.268,1752,3.268,1753,2.323,1754,3.268,1755,2.897,1756,2.897,1757,2.469,1758,2.652,1759,2.097,1760,3.268,1761,2.897,1762,4.354,1763,3.268,1764,2.897,1765,3.268,1766,3.268,1767,3.477,1768,3.477,1769,3.268,1770,2.323,1771,3.268,1772,2.323,1773,2.323,1774,3.268,1775,3.268,1776,3.268,1777,2.201,1778,2.652,1779,2.897,1780,2.652,1781,2.469,1782,3.268,1783,3.268,1784,4.354,1785,2.201,1786,3.986,1787,3.268,1788,3.268,1789,2.469,1790,3.268,1791,3.268,1792,3.268,1793,4.912,1794,4.912,1795,3.268,1796,3.268,1797,3.268,1798,3.268,1799,3.268,1800,3.268,1801,3.268,1802,2.201,1803,2.897,1804,2.897]],["title/components/ContentComponent.html",[101,0.726,340,1.436]],["body/components/ContentComponent.html",[3,0.085,4,0.046,5,0.046,8,0.968,11,0.003,12,0.375,13,0.574,17,0.008,18,1.378,19,0.534,20,1.685,23,0.046,46,1.542,47,1.257,48,1.295,49,1.027,53,0.889,55,0.903,65,1.14,82,2.164,87,0.926,99,0.004,100,0.005,101,1.277,102,1.005,103,1.366,104,1.487,105,1.027,106,1.073,107,0.922,114,2.644,117,3.061,118,2.288,120,1.587,125,0.983,127,1.7,128,0.798,129,1.79,131,1.366,136,0.884,141,1.914,145,2.155,148,1.05,150,0.285,151,0.353,153,1.404,169,1.005,173,1.005,177,2.194,179,0.217,180,1.66,181,1.822,183,1.943,192,4.099,193,3.067,197,1.158,199,2.763,205,1.527,216,1.027,219,1.263,224,1.548,247,1.379,248,2.634,252,1.606,253,0.962,271,1.073,273,1.956,277,2.707,281,2.369,282,2.838,283,3.787,284,3.466,290,0.922,293,3.739,306,2.544,310,2.823,312,2.146,317,0.53,318,1.999,319,1.553,320,1.073,321,2.182,322,1.073,323,1.073,324,1.005,325,1.073,326,1.005,327,1.073,328,1.005,329,1.22,330,1.073,331,1.005,332,1.027,333,1.073,334,1.005,335,1.073,336,1.005,337,1.073,338,1.005,339,1.073,340,2.043,341,1.958,342,1.073,343,1.005,344,1.623,345,1.005,346,1.05,347,1.073,348,1.005,349,1.487,350,1.623,351,1.005,352,1.073,353,1.005,354,1.073,355,1.005,356,1.005,357,1.073,358,1.005,359,1.073,360,1.005,361,1.623,362,1.005,363,1.073,364,1.005,365,1.073,366,1.005,367,1.073,368,1.027,369,1.073,370,1.005,371,1.073,372,1.005,373,1.073,374,1.005,375,1.005,376,1.073,377,1.005,378,1.005,379,1.073,380,1.073,404,0.848,455,2.618,470,1.05,474,1.455,476,0.768,498,1.365,503,3.739,565,2.57,716,2.183,763,1.877,765,3.068,849,2.067,878,1.66,1009,2.838,1121,1.53,1186,2.731,1301,1.877,1359,3.421,1375,2.264,1380,2.969,1396,2.731,1397,2.731,1409,1.806,1522,3.31,1546,2.183,1560,1.627,1615,1.741,1617,2.264,1682,2.406,1691,3.294,1694,3.623,1700,5.742,1701,3.909,1702,3.672,1704,3.64,1706,3.909,1707,4.605,1708,4.605,1710,2.462,1711,3.31,1712,3.425,1715,3.623,1719,3.64,1720,3.64,1721,3.64,1727,3.425,1742,4.27,1745,4.39,1746,3.64,1753,2.264,1757,2.406,1767,4.478,1768,4.312,1772,2.264,1773,2.264,1781,2.406,1785,2.146,1789,2.406,1802,2.146,1805,3.186,1806,4.818,1807,7.101,1808,4.715,1809,6.478,1810,4.818,1811,4.818,1812,4.818,1813,6.478,1814,5.811,1815,5.811,1816,4.818,1817,3.245,1818,3.186,1819,3.909,1820,3.186,1821,3.186,1822,4.818,1823,3.186,1824,3.186,1825,3.909,1826,3.186,1827,3.909,1828,3.909,1829,3.186,1830,3.186,1831,4.818,1832,5.811,1833,4.818,1834,5.094,1835,3.186,1836,3.186,1837,3.909,1838,2.823,1839,2.838,1840,2.823,1841,2.585,1842,3.186,1843,3.186,1844,3.186,1845,3.186,1846,3.186,1847,3.186,1848,3.186,1849,4.818,1850,3.186,1851,3.186,1852,3.186,1853,3.186,1854,3.186,1855,3.186,1856,2.585,1857,4.818,1858,3.186,1859,4.818,1860,1.956,1861,3.186,1862,2.044,1863,2.146,1864,3.186,1865,3.186,1866,3.186,1867,5.811,1868,3.186,1869,3.186,1870,4.818,1871,3.186,1872,3.186,1873,4.818,1874,3.186,1875,3.186,1876,3.186,1877,2.585,1878,3.186,1879,2.823,1880,2.406]],["title/interfaces/ContentContainerChanged.html",[0,0.282,1881,3.067]],["body/interfaces/ContentContainerChanged.html",[0,0.504,2,1.286,3,0.078,4,0.078,5,0.078,8,0.799,11,0.004,12,0.416,13,0.826,17,0.008,18,1.307,19,0.786,23,0.134,46,1.539,53,0.683,82,2.052,97,3.593,99,0.006,100,0.004,101,1.346,103,1.968,114,2.743,116,3.603,131,1.516,141,1.762,150,0.219,179,0.167,192,4.089,215,2.924,219,0.889,233,3.408,275,2.978,281,2.052,283,3.981,284,2.69,290,1.548,296,2.494,476,1.106,544,2.568,546,2.424,578,2.179,593,3.356,849,3.306,872,3.546,878,2.392,1009,3.151,1560,3.546,1694,3.814,1697,2.648,1710,2.733,1711,3.546,1715,4.593,1730,3.665,1785,3.603,1834,4.261,1860,3.283,1862,3.432,1881,5.19,1882,3.802,1883,5.102,1884,4.934,1885,4.934,1886,5.477,1887,3.802,1888,4.675,1889,3.802,1890,3.283,1891,4.804,1892,4.934,1893,4.041,1894,4.041,1895,4.675,1896,4.675,1897,4.089,1898,4.041,1899,4.041,1900,4.934,1901,3.432,1902,3.802]],["title/modules/CoreModule.html",[381,0.651,394,3.236]],["body/modules/CoreModule.html",[3,0.094,4,0.094,5,0.094,11,0.005,17,0.008,23,0.094,87,1.021,99,0.006,100,0.005,119,3.275,150,0.365,151,0.709,179,0.2,204,1.895,317,1.066,381,1.197,383,1.817,384,1.817,385,1.936,386,1.895,387,1.895,388,2.528,394,6.721,403,2.204,404,1.707,406,2.4,407,2.349,476,1.021,1770,4.556,1903,5.681,1904,5.681,1905,5.681,1906,6.721,1907,6.443,1908,6.443,1909,6.41,1910,7.776,1911,5.201,1912,5.527,1913,6.41,1914,6.41,1915,6.41,1916,4.842,1917,8.371,1918,6.41,1919,5.201,1920,6.41]],["title/interfaces/DataSource.html",[0,0.282,92,2.007]],["body/interfaces/DataSource.html",[0,0.539,1,2.433,2,1.145,3,0.069,4,0.069,5,0.069,6,2.51,7,3.208,8,1.087,9,3.977,10,4.939,11,0.007,12,0.37,14,3.208,15,2.532,16,1.418,17,0.008,18,1.613,19,0.719,20,1.425,21,3.208,22,2.099,23,0.122,24,3.041,25,2.806,26,2.997,27,3.313,28,1.767,29,2.7,30,3.208,31,3.208,32,2.806,33,1.99,34,3.53,35,3.056,36,1.714,37,3.787,38,3.056,39,3.056,40,2.924,41,2.806,42,2.924,43,3.056,44,2.806,45,3.977,46,1.613,47,1.408,48,0.843,49,1.535,50,3.394,51,1.99,52,2.603,53,0.995,54,2.924,55,1.822,56,2.7,57,2.806,58,3.056,59,3.946,60,3.644,61,3.787,62,3.787,63,4.124,64,4.466,65,1.261,66,3.284,67,3.644,68,1.759,69,1.801,70,2.515,71,2.7,72,2.515,73,2.974,74,2.7,75,4.125,76,2.924,77,2.924,78,3.644,79,3.644,80,2.603,81,3.056,82,1.408,83,2.22,84,2.603,85,2.924,86,3.056,87,1.241,88,3.208,89,2.287,90,2.924,91,4.125,92,2.833,93,3.74,94,3.787,95,3.248,96,3.787,97,2.997,98,4.125,99,0.005,100,0.004,129,1.549,197,1.545,217,3.056,474,1.822,498,1.428,799,4.856,801,4.856,802,5.215,824,4.125,1921,4.763,1922,4.763,1923,4.763]],["title/interfaces/DataSource-1.html",[0,0.235,92,1.672,253,1.146]],["body/interfaces/DataSource-1.html",[0,0.419,2,0.839,3,0.106,4,0.051,5,0.051,6,1.125,11,0.006,12,0.401,13,0.614,16,1.131,17,0.008,18,1.631,19,0.715,23,0.11,28,1.702,46,1.144,47,0.932,48,0.618,92,3.337,95,2.803,99,0.004,100,0.003,125,1.077,141,2.022,145,1.462,150,0.296,179,0.109,205,1.713,216,1.663,219,1.44,235,2.056,247,1.875,252,1.565,271,2.709,281,2.316,329,0.972,455,2.523,457,4.44,472,1.999,475,3.167,476,0.556,495,3.705,512,1.978,515,1.978,517,2.705,519,4.261,520,2.24,522,1.978,523,4.921,524,2.24,525,3.037,528,3.615,530,2.564,536,3.167,547,2.24,572,5.027,604,1.459,650,3.278,653,3.372,669,3.819,686,2.24,736,2.796,860,2.143,925,1.676,989,2.553,1129,3.31,1130,2.351,1131,2.143,1132,2.636,1133,2.553,1134,3.579,1135,4.566,1136,4.261,1137,3.938,1138,1.978,1139,2.24,1140,3.994,1141,4.161,1142,3.994,1143,4.161,1144,2.481,1145,2.481,1146,3.31,1147,4.44,1148,2.481,1149,2.481,1150,3.475,1151,4.133,1152,2.481,1153,3.31,1154,3.31,1155,4.362,1156,4.109,1157,3.167,1158,2.143,1159,2.143,1160,3.705,1161,5.141,1162,4.566,1163,3.667,1164,4.133,1165,2.481,1166,2.481,1167,2.481,1168,4.133,1169,1.978,1170,4.362,1171,4.362,1172,2.351,1173,2.351,1174,4.133,1175,4.35,1176,4.362,1177,2.24,1178,2.351,1179,2.481,1180,2.24,1181,4.818,1182,2.351,1183,5.503,1184,3.475,1185,3.475,1186,3.843,1187,2.24,1188,2.481,1189,2.481,1190,2.481,1191,2.481,1192,2.481,1193,2.481,1194,2.143,1195,4.362,1196,4.362,1197,4.362,1198,4.818,1199,5.141,1200,2.351,1201,2.481,1202,2.351,1203,3.667,1204,2.481,1205,2.481,1206,2.481,1207,2.351,1208,2.481,1209,2.481,1210,2.481,1211,2.351,1212,2.481,1213,2.481,1214,3.667,1215,2.481,1216,2.481,1217,2.351,1218,4.362,1219,2.481,1220,3.039,1221,2.481,1222,3.667,1223,2.24,1224,2.24,1225,2.481,1226,2.351,1227,2.481,1228,3.667,1229,2.351,1230,2.481,1231,2.481,1232,2.24,1233,3.31,1234,2.481,1235,2.481,1236,2.481,1237,2.481,1238,2.481,1239,2.351,1240,2.481,1241,1.978,1242,2.481,1243,2.481,1244,2.481,1245,2.481,1246,2.481,1247,2.351,1248,2.481,1249,2.351,1250,3.475,1251,2.481,1252,2.481,1253,2.481,1254,2.481,1255,2.351,1256,2.481,1257,2.481,1258,2.481,1259,2.481,1260,2.481,1261,2.24,1262,2.481,1263,2.481,1264,3.667,1265,2.481,1266,2.481]],["title/injectables/DataSourceService.html",[160,3.067,1924,1.722]],["body/injectables/DataSourceService.html",[1,2.15,3,0.061,4,0.099,5,0.061,8,1.163,9,3.227,11,0.006,12,0.327,13,0.703,16,1.019,17,0.008,19,0.698,23,0.061,24,2.467,26,1.962,27,2.405,28,0.914,36,1.901,47,1.336,50,2.223,53,0.944,65,1.158,68,1.555,69,2.233,70,4.261,72,4.599,73,3.137,87,1.178,91,3.789,92,3.006,94,3.478,95,3.127,96,3.478,97,2.753,98,3.789,99,0.005,100,0.007,118,1.033,119,2.15,129,1.83,137,5.005,150,0.319,151,0.466,152,4.227,153,1.855,160,3.977,162,6.19,179,0.131,180,2.034,181,2.233,183,1.89,194,2.835,197,1.42,217,3.789,219,0.7,236,2.034,238,4.411,247,1.657,381,0.602,455,2.437,470,2.247,474,1.851,476,0.941,498,1.709,578,1.714,593,1.672,650,3.09,653,1.962,792,5.179,799,4.46,801,4.46,802,4.79,803,4.79,808,5.881,810,4.46,824,4.376,840,4.79,843,3.624,844,4.79,849,2.533,878,2.034,950,5.584,1241,3.347,1320,2.992,1559,4.983,1642,2.584,1749,4.79,1890,4.538,1924,2.233,1925,2.48,1926,8.709,1927,4.209,1928,6.819,1929,7.392,1930,7.392,1931,5.904,1932,4.209,1933,4.209,1934,7.392,1935,4.209,1936,4.209,1937,4.209,1938,5.233,1939,7.392,1940,4.209,1941,5.904,1942,4.209,1943,3.731,1944,3.18,1945,3.731,1946,2.701,1947,5.904,1948,4.209,1949,4.209,1950,4.209,1951,7.392,1952,4.209,1953,6.819,1954,4.209,1955,5.904,1956,3.18,1957,4.209,1958,5.904,1959,3.731,1960,3.731,1961,4.209,1962,4.209,1963,3.731,1964,6.819,1965,4.209,1966,7.392,1967,4.209,1968,4.209,1969,4.209,1970,4.209]],["title/injectables/DataState.html",[167,3.067,1924,1.722]],["body/injectables/DataState.html",[0,0.187,1,1.546,3,0.044,4,0.099,5,0.044,8,1.072,9,3.449,10,5.119,11,0.006,12,0.36,13,0.552,17,0.008,18,0.57,19,0.592,20,1.866,23,0.092,24,2.637,26,1.411,36,2.128,46,0.671,53,0.916,60,1.715,65,0.909,66,2.367,67,1.715,71,4.067,72,4.605,73,3.155,74,1.715,76,1.858,77,1.858,78,1.715,79,1.715,87,1.143,99,0.004,100,0.003,118,0.743,125,2.874,127,1.806,129,1.856,131,2.034,133,3.121,137,4.316,141,2.655,142,3.76,145,0.858,146,2.151,150,0.323,151,0.335,152,1.453,153,1.334,154,1.498,155,2.455,156,1.371,160,4.25,162,2.151,163,2.286,166,3.5,167,3.121,179,0.094,180,1.597,181,1.753,183,2.018,197,1.114,205,1.316,216,2.406,219,0.77,233,1.936,237,1.546,247,1.527,249,2.973,253,0.914,309,1.598,349,0.934,455,2.651,470,0.997,472,2.182,474,1.703,476,1.227,483,4.828,494,3.123,495,4.21,498,1.581,515,1.715,545,2.533,604,1.936,736,3.221,756,2.367,843,3.873,874,4.766,878,2.174,989,1.498,1006,1.715,1186,3.192,1359,2.447,1407,2.367,1521,2.151,1643,1.942,1710,1.546,1758,4.569,1759,1.942,1767,1.783,1890,3.456,1901,1.942,1924,1.753,1925,1.783,1971,2.455,1972,4.107,1973,3.793,1974,4.99,1975,4.99,1976,4.99,1977,6.406,1978,6.028,1979,6.617,1980,6.028,1981,4.99,1982,4.99,1983,6.028,1984,6.028,1985,4.107,1986,2.682,1987,3.026,1988,4.107,1989,3.026,1990,6.617,1991,4.107,1992,3.026,1993,4.107,1994,3.026,1995,4.107,1996,3.456,1997,3.026,1998,6.358,1999,3.026,2000,5.099,2001,3.026,2002,3.026,2003,6.358,2004,4.107,2005,4.107,2006,3.026,2007,5.64,2008,4.107,2009,3.026,2010,6.249,2011,4.107,2012,3.026,2013,4.107,2014,4.107,2015,3.026,2016,4.107,2017,3.026,2018,3.026,2019,4.107,2020,4.99,2021,4.107,2022,4.107,2023,4.107,2024,4.99,2025,4.107,2026,4.99,2027,6.028,2028,4.99,2029,3.026,2030,4.107,2031,4.107,2032,3.026,2033,4.107,2034,3.026,2035,2.844,2036,1.858,2037,1.858,2038,1.546,2039,4.107,2040,4.107,2041,2.682,2042,2.682,2043,4.107,2044,2.455,2045,2.286,2046,2.682,2047,4.107,2048,2.682,2049,2.682,2050,2.682,2051,2.286,2052,2.286,2053,2.682,2054,2.151,2055,4.569,2056,5.42,2057,2.455,2058,2.455,2059,2.682,2060,1.858,2061,2.038,2062,2.682,2063,2.682,2064,2.682,2065,4.107,2066,2.682,2067,2.682,2068,2.682,2069,2.682,2070,2.455,2071,1.942,2072,2.682,2073,2.286,2074,2.682,2075,2.682,2076,2.682,2077,2.682,2078,2.455,2079,2.038,2080,2.038,2081,2.682,2082,2.682,2083,2.682,2084,2.682,2085,4.107,2086,2.682,2087,2.682,2088,2.682,2089,2.682,2090,2.682,2091,2.682,2092,2.682,2093,2.682,2094,2.682,2095,2.682,2096,2.682,2097,2.682,2098,2.682]],["title/interfaces/DataStateModel.html",[0,0.282,2078,3.695]],["body/interfaces/DataStateModel.html",[0,0.237,1,1.961,2,0.923,3,0.056,4,0.103,5,0.056,8,0.573,9,3.022,10,5.036,11,0.006,12,0.43,13,0.658,17,0.008,18,0.723,19,0.317,20,1.226,23,0.103,24,2.31,26,1.789,36,2.107,46,0.851,53,0.49,60,2.175,65,0.753,66,1.961,67,2.175,71,3.673,72,4.508,73,3.158,74,2.175,76,2.356,77,2.356,78,2.175,79,2.175,87,0.611,99,0.005,100,0.003,118,0.942,125,2.72,127,0.834,131,1.837,133,2.585,137,4.108,141,2.771,142,3.114,145,1.088,146,2.728,150,0.344,151,0.425,152,1.843,153,1.691,154,1.9,155,3.114,156,1.739,160,3.724,162,2.728,163,2.899,166,4.176,167,2.585,179,0.12,180,1.322,181,1.451,183,2.15,205,1.352,216,2.6,219,0.919,233,1.604,237,2.824,247,1.666,249,3.422,253,1.159,309,2.026,349,1.184,455,2.364,472,1.487,476,1.197,483,4.864,495,4.108,498,1.536,515,2.175,545,3.022,604,1.604,736,3.193,756,2.824,843,3.394,874,4.176,878,1.905,989,1.9,1006,2.175,1186,3.673,1359,2.026,1407,1.961,1521,2.728,1643,2.463,1710,1.961,1758,5.258,1759,2.463,1767,2.261,1890,3.978,1901,2.463,1924,2.091,1971,3.114,1972,3.401,1973,3.724,1974,3.401,1975,3.401,1976,3.401,1977,5.258,1978,4.9,1979,4.9,1980,4.9,1981,3.401,1982,3.401,1983,3.401,1984,4.9,1988,3.401,1990,6.284,1991,3.401,1993,3.401,1995,3.401,1996,3.394,1998,5.743,2000,4.606,2003,5.743,2004,3.401,2005,3.401,2007,5.357,2008,3.401,2010,5.753,2011,3.401,2013,3.401,2014,3.401,2016,3.401,2019,3.401,2020,4.9,2021,3.401,2022,3.401,2023,3.401,2024,4.9,2025,3.401,2026,4.9,2027,6.284,2028,4.9,2030,3.401,2031,3.401,2033,3.401,2035,3.394,2036,2.356,2037,2.356,2038,1.961,2039,4.9,2040,4.9,2041,3.401,2042,3.401,2043,4.9,2044,3.114,2045,2.899,2046,3.401,2047,4.9,2048,3.401,2049,3.401,2050,3.401,2051,2.899,2052,2.899,2053,3.401,2054,2.728,2055,5.258,2056,5.914,2057,3.114,2058,3.114,2059,3.401,2060,2.356,2061,2.585,2062,3.401,2063,3.401,2064,3.401,2065,4.9,2066,3.401,2067,3.401,2068,3.401,2069,3.401,2070,3.114,2071,2.463,2072,3.401,2073,2.899,2074,3.401,2075,3.401,2076,3.401,2077,3.401,2078,4.486,2079,2.585,2080,2.585,2081,3.401,2082,3.401,2083,3.401,2084,3.401,2085,4.9,2086,3.401,2087,3.401,2088,3.401,2089,3.401,2090,3.401,2091,3.401,2092,3.401,2093,3.401,2094,3.401,2095,3.401,2096,3.401,2097,3.401,2098,3.401]],["title/interfaces/DefaultIconDefinition.html",[0,0.282,2099,4.036]],["body/interfaces/DefaultIconDefinition.html",[0,0.37,2,1.439,3,0.087,4,0.087,5,0.087,8,0.894,11,0.005,12,0.465,13,0.887,16,1.4,17,0.008,19,0.701,23,0.109,33,3.958,34,4.176,51,3.116,53,1.167,68,3.293,73,2.016,87,1.456,99,0.006,100,0.005,127,1.3,182,4.521,219,0.995,236,2.569,259,3.392,288,5.299,318,2.79,827,3.841,1558,4.521,1643,3.841,2099,7.197,2100,4.856,2101,5.985,2102,5.985,2103,4.856,2104,7.455,2105,5.985,2106,5.985,2107,4.856,2108,5.304,2109,5.985,2110,5.985,2111,7.336,2112,5.632,2113,6.896,2114,6.421,2115,6.049,2116,5.985,2117,4.856,2118,4.856,2119,5.985,2120,5.985,2121,5.985,2122,5.985]],["title/interfaces/DrawerContainersChanged.html",[0,0.282,1888,3.067]],["body/interfaces/DrawerContainersChanged.html",[0,0.503,2,1.28,3,0.078,4,0.078,5,0.078,8,0.795,11,0.004,12,0.414,13,0.824,17,0.008,18,1.303,19,0.786,23,0.134,46,1.534,53,0.68,82,2.046,97,3.585,99,0.006,100,0.004,101,1.297,103,2.18,114,2.765,116,3.587,131,1.509,141,1.754,150,0.218,179,0.166,192,4.971,215,2.911,219,0.885,233,3.402,275,2.969,281,2.046,283,3.588,284,2.682,290,1.542,296,2.483,476,0.848,544,2.557,546,2.413,578,2.819,593,3.498,849,2.969,872,3.536,878,2.385,1009,4.077,1560,3.536,1694,3.806,1697,2.636,1710,2.72,1711,3.536,1715,4.59,1730,3.654,1785,3.587,1834,4.249,1860,3.269,1862,3.417,1881,4.662,1882,3.785,1883,5.095,1884,4.919,1885,4.919,1886,5.465,1887,3.785,1888,5.179,1889,4.919,1890,4.249,1891,4.796,1892,4.919,1893,4.023,1894,4.023,1895,4.662,1896,4.662,1897,4.077,1898,4.023,1899,4.023,1900,4.919,1901,3.417,1902,3.785]],["title/interfaces/DrawerInitialized.html",[0,0.282,1895,3.067]],["body/interfaces/DrawerInitialized.html",[0,0.507,2,1.302,3,0.079,4,0.079,5,0.079,8,0.809,11,0.005,12,0.421,13,0.833,17,0.008,18,1.318,19,0.786,23,0.134,46,1.551,53,0.692,82,2.069,97,3.614,99,0.006,100,0.005,101,1.235,103,1.983,114,2.76,116,3.648,131,1.535,141,1.784,150,0.222,179,0.169,192,4.122,215,2.96,219,0.9,233,3.239,275,3.002,281,2.069,283,3.611,284,2.711,290,1.568,296,2.525,476,0.863,544,2.6,546,2.454,578,2.206,593,3.079,849,3.002,872,3.575,878,2.411,1009,3.19,1560,3.575,1694,3.837,1697,2.681,1710,2.767,1711,3.575,1715,4.6,1730,3.695,1785,3.648,1834,4.295,1860,3.324,1862,3.475,1881,4.713,1882,3.849,1883,5.119,1884,4.973,1885,4.973,1886,5.51,1887,3.849,1888,4.713,1889,3.849,1890,3.324,1891,4.827,1892,4.973,1893,5.286,1894,5.286,1895,5.221,1896,4.713,1897,4.122,1898,4.091,1899,4.091,1900,4.973,1901,3.475,1902,3.849]],["title/modules/DrawerModule.html",[381,0.651,395,3.067]],["body/modules/DrawerModule.html",[3,0.088,4,0.088,5,0.088,11,0.005,17,0.008,23,0.088,99,0.006,100,0.005,136,1.674,150,0.378,151,0.667,177,2.959,179,0.188,204,1.783,290,1.746,317,1.002,338,2.959,340,2.959,377,2.959,381,0.862,383,1.709,384,1.709,385,2.461,386,1.783,387,2.215,388,2.461,395,6.402,403,2.123,404,1.606,406,1.861,407,2.262,408,4.094,409,3.081,410,6.638,411,5.324,412,6.638,413,5.344,437,4.893,438,4.893,1756,5.344,1757,4.555,1887,4.286,2123,5.344,2124,5.344,2125,5.344,2126,6.03,2127,5.324,2128,5.324,2129,6.03,2130,5.344,2131,5.344]],["title/interfaces/DrawerToggled.html",[0,0.282,1896,3.067]],["body/interfaces/DrawerToggled.html",[0,0.497,2,1.24,3,0.075,4,0.075,5,0.075,8,0.77,11,0.004,12,0.401,13,0.807,17,0.008,18,1.615,19,0.788,23,0.133,46,1.901,53,0.659,82,2.378,97,3.53,99,0.006,100,0.004,101,1.206,103,1.922,114,2.781,116,3.475,131,1.922,141,2.233,150,0.211,179,0.161,192,3.993,215,3.705,219,0.857,233,3.361,275,2.908,281,2.535,283,3.544,284,3.323,290,1.962,296,3.16,476,0.822,544,2.477,546,2.337,578,2.101,593,3.007,849,2.908,872,3.463,878,2.336,1009,3.039,1560,3.463,1694,3.748,1697,2.553,1710,3.463,1711,3.463,1715,4.57,1730,3.579,1785,3.475,1834,5.264,1860,3.167,1862,3.31,1881,4.566,1882,3.666,1883,4.921,1884,4.818,1885,4.818,1886,5.382,1887,3.666,1888,4.566,1889,3.666,1890,3.167,1891,4.738,1892,4.818,1893,3.897,1894,3.897,1895,4.566,1896,5.1,1897,5.051,1898,5.121,1899,5.121,1900,4.818,1901,3.31,1902,3.666]],["title/components/DropdownComponent.html",[101,0.726,343,1.436]],["body/components/DropdownComponent.html",[3,0.092,4,0.053,5,0.053,8,0.799,11,0.003,12,0.285,13,0.636,15,2.229,16,1.262,17,0.008,19,0.636,20,1.807,22,3.506,23,0.053,47,1.333,48,1.364,53,0.806,55,1.039,65,1.238,69,2.387,87,0.584,99,0.004,100,0.005,101,1.267,102,1.155,103,1.516,104,1.131,105,1.181,106,1.234,107,1.061,114,1.866,117,3.097,118,2.31,120,1.761,122,1.801,125,1.131,127,0.796,128,0.918,129,1.693,131,1.516,136,1.017,144,2.646,147,2.468,148,1.207,150,0.15,151,0.406,159,4.97,169,1.155,173,1.155,177,1.155,179,0.114,183,0.937,193,3.058,197,1.285,199,2.123,205,1.447,224,1.681,228,2.604,239,3.801,252,1.602,253,1.107,261,2.468,268,1.615,271,2.338,272,2.446,277,1.531,279,1.66,281,2.411,282,3.718,286,3.235,289,3.896,290,1.061,291,4.036,292,3.333,293,2.731,295,2.823,297,3.45,298,1.872,299,3.031,300,3.324,308,4.182,309,3.896,317,0.609,318,1.65,319,1.723,320,1.234,321,2.338,322,1.234,323,1.234,324,1.155,325,1.234,326,1.155,327,1.234,328,1.155,329,1.39,330,1.234,331,1.155,332,1.181,333,1.234,334,1.155,335,1.234,336,1.155,337,1.234,338,1.155,339,1.234,340,1.155,341,2.126,342,1.234,343,2.188,344,1.801,345,1.155,346,1.207,347,1.234,348,1.155,349,1.65,350,1.801,351,1.155,352,1.234,353,1.155,354,1.234,355,1.155,356,1.155,357,1.234,358,1.155,359,1.234,360,1.155,361,1.801,362,1.155,363,1.234,364,1.155,365,1.234,366,1.155,367,1.234,368,1.181,369,1.234,370,1.155,371,1.234,372,1.155,373,1.234,374,1.155,375,1.155,376,1.234,377,1.155,378,1.155,379,1.234,380,1.234,453,4.252,474,0.918,476,1.006,498,1.049,723,2.177,724,2.234,734,2.571,736,1.974,745,2.624,746,2.177,847,4.883,916,3.8,1108,3.431,1113,4.529,1276,5.121,1295,6.159,1307,2.973,1317,2.249,1318,2.249,1348,2.922,1350,3.282,1359,2.823,1377,2.003,1379,2.922,1380,2.731,1381,2.922,1527,6.616,1530,4.338,1545,3.8,1560,2.731,1606,2.249,1607,2.468,1608,3.8,1609,2.604,1610,4.252,1611,2.468,1614,2.077,1660,4.738,1819,5.63,1839,2.159,2132,3.664,2133,6.947,2134,5.594,2135,4.738,2136,6.312,2137,5.346,2138,6.939,2139,3.664,2140,4.738,2141,3.664,2142,5.346,2143,3.664,2144,3.664,2145,5.346,2146,3.664,2147,3.664,2148,6.15,2149,5.63,2150,3.664,2151,5.346,2152,3.664,2153,4.738,2154,5.346,2155,3.664,2156,4.738,2157,5.987,2158,2.768,2159,2.973,2160,4.738,2161,3.247,2162,2.973,2163,2.973,2164,2.768,2165,5.63,2166,2.768,2167,4.738,2168,2.973,2169,3.664,2170,3.247,2171,3.247,2172,3.664,2173,2.973,2174,3.664,2175,4.338,2176,2.077,2177,3.664,2178,3.247,2179,2.973,2180,3.247,2181,3.247,2182,3.247]],["title/modules/DropdownModule.html",[381,0.651,2183,3.236]],["body/modules/DropdownModule.html",[3,0.098,4,0.098,5,0.098,11,0.006,17,0.008,22,2.952,23,0.098,99,0.007,100,0.006,150,0.369,151,0.741,179,0.209,204,1.98,317,1.113,343,2.998,381,0.957,383,1.899,384,1.899,385,2.577,386,1.98,387,1.98,388,2.577,403,2.263,404,1.784,406,2.067,407,2.412,444,2.751,445,2.256,2183,6.578,2184,5.936,2185,5.936,2186,5.936,2187,6.697,2188,6.032,2189,5.059,2190,6.478,2191,5.434,2192,5.936]],["title/components/DualSliderComponent.html",[101,0.726,345,1.436]],["body/components/DualSliderComponent.html",[3,0.064,4,0.031,5,0.031,8,0.847,11,0.002,12,0.163,13,0.61,15,2.038,16,0.847,17,0.008,18,1.271,19,0.653,20,1.798,22,2.499,23,0.031,47,1.024,48,1.08,49,1.967,51,1.445,53,0.824,55,0.594,63,1.96,65,0.866,69,2.854,71,1.96,75,4.489,82,1.515,87,0.816,93,1.66,99,0.003,100,0.004,101,1.148,102,0.661,103,0.98,104,1.362,105,1.114,106,0.706,107,0.607,114,1.305,117,2.927,118,2.192,120,1.139,122,1.165,127,0.959,128,0.525,129,1.822,131,1.73,134,2.973,136,0.582,144,2.536,145,1.607,147,5.177,148,0.69,150,0.21,151,0.232,159,4.976,169,0.661,173,0.661,177,0.661,179,0.065,180,1.765,181,1.308,183,1.449,193,1.946,197,0.831,199,1.753,202,6.5,205,1.673,219,1.122,223,2.612,224,1.176,228,1.489,233,2.55,235,1.234,239,1.612,247,1.207,249,1.826,252,1.615,253,1.333,268,2.845,269,1.711,270,2.037,271,2.056,272,1.34,274,1.145,277,1.445,279,2.321,281,2.068,282,3.34,283,0.924,284,2.197,286,2.058,289,2.993,290,0.607,291,2.806,292,2.993,293,3.298,295,1.106,296,2.845,297,1.89,298,1.07,299,2.46,300,2.55,302,3.238,305,2.6,306,1.826,307,1.286,308,2.904,309,2.705,317,0.348,318,1.067,319,2.432,320,0.706,321,1.726,322,0.706,323,0.706,324,0.661,325,0.706,326,0.661,327,0.706,328,0.661,329,1.068,330,0.706,331,0.661,332,0.675,333,0.706,334,0.661,335,0.706,336,0.661,337,0.706,338,0.661,339,0.706,340,0.661,341,1.487,342,0.706,343,0.661,344,1.165,345,1.615,346,2.374,347,0.706,348,0.661,349,1.067,350,1.165,351,0.661,352,0.706,353,0.661,354,0.706,355,0.661,356,0.661,357,0.706,358,0.661,359,0.706,360,0.661,361,1.165,362,0.661,363,0.706,364,0.661,365,0.706,366,0.661,367,0.706,368,0.675,369,0.706,370,0.661,371,0.706,372,0.661,373,0.706,374,0.661,375,0.661,376,0.706,377,0.661,378,0.661,379,0.706,380,0.706,427,6.116,453,2.329,455,2.176,470,1.139,474,1.283,476,0.703,494,1.711,498,1.372,503,3.927,522,1.96,544,2.119,555,1.106,565,2.583,578,1.408,606,2.258,631,2.458,649,2.6,669,2.331,716,1.567,723,1.408,724,1.445,730,2.219,734,1.798,736,1.892,740,4.796,742,2.612,744,1.489,745,2.308,746,1.408,847,3.48,849,2.895,878,1.191,900,1.7,916,2.458,1108,2.219,1113,3.48,1121,1.66,1133,4.566,1276,3.582,1285,1.583,1289,2.458,1307,1.7,1309,1.857,1315,2.388,1317,2.122,1318,2.122,1321,1.857,1335,1.7,1345,1.96,1350,3.746,1359,3.693,1379,1.89,1380,1.766,1381,1.89,1407,2.617,1522,1.766,1530,2.805,1546,1.567,1560,1.07,1569,4.54,1574,3.912,1581,3.641,1592,3.064,1593,3.912,1594,1.857,1595,1.857,1596,1.857,1606,1.286,1607,1.411,1608,2.458,1609,1.489,1610,3.451,1611,1.411,1614,1.188,1639,3.064,1640,3.064,1642,1.286,1647,1.583,1648,4.157,1649,1.857,1651,3.064,1652,3.064,1653,2.458,1654,2.612,1664,2.219,1667,3.335,1668,1.7,1669,1.857,1670,1.857,1671,3.912,1681,2.805,1691,3.213,1702,2.904,1727,2.458,1767,2.037,1768,1.234,1804,3.064,1819,4.6,1839,1.234,1860,3.145,1890,3.145,2140,3.064,2148,3.064,2149,2.805,2153,3.064,2156,3.064,2157,2.805,2158,1.583,2159,2.805,2160,1.857,2161,1.857,2162,1.7,2163,1.7,2164,1.583,2165,4.157,2166,2.612,2167,3.064,2170,1.857,2171,1.857,2173,1.7,2178,3.064,2179,1.7,2180,1.857,2181,1.857,2193,7.626,2194,2.095,2195,4.414,2196,4.414,2197,3.457,2198,4.414,2199,6.748,2200,6.103,2201,6.748,2202,6.995,2203,6.455,2204,5.669,2205,5.123,2206,5.123,2207,3.457,2208,3.457,2209,3.457,2210,6.103,2211,5.123,2212,5.123,2213,4.414,2214,5.669,2215,2.095,2216,3.457,2217,3.064,2218,3.457,2219,2.458,2220,2.095,2221,3.457,2222,2.095,2223,2.095,2224,2.612,2225,3.457,2226,2.095,2227,2.095,2228,3.457,2229,3.457,2230,3.064,2231,3.457,2232,2.095,2233,2.612,2234,3.457,2235,5.123,2236,2.095,2237,3.457,2238,2.095,2239,3.457,2240,3.064,2241,2.095,2242,5.669,2243,2.095,2244,6.455,2245,5.123,2246,4.414,2247,3.457,2248,2.095,2249,2.095,2250,3.064,2251,2.095,2252,3.457,2253,2.095,2254,2.095,2255,2.095,2256,5.123,2257,3.064,2258,2.095,2259,3.064,2260,2.095,2261,2.095,2262,2.095,2263,3.457,2264,2.095,2265,2.805,2266,4.414,2267,3.457,2268,2.095,2269,2.095,2270,2.095,2271,3.457,2272,3.457,2273,1.7,2274,1.857,2275,2.095,2276,2.095,2277,2.095,2278,2.095,2279,3.457,2280,2.095,2281,2.095,2282,2.095,2283,2.095,2284,2.095,2285,2.095,2286,2.095,2287,1.857,2288,2.095,2289,3.457,2290,2.095,2291,3.457,2292,2.095,2293,3.457,2294,2.095,2295,2.095,2296,2.095,2297,2.095,2298,2.095,2299,2.095,2300,2.095,2301,2.095,2302,2.095,2303,2.095,2304,3.457,2305,4.414,2306,3.457,2307,4.414,2308,2.095,2309,2.095,2310,2.095,2311,5.123,2312,2.095,2313,2.095,2314,2.095,2315,3.457,2316,3.457,2317,3.457,2318,2.095,2319,2.095,2320,2.095,2321,2.095,2322,3.457,2323,2.095,2324,2.095,2325,2.095,2326,2.095,2327,2.095,2328,3.457,2329,1.7,2330,2.095,2331,2.095,2332,1.106,2333,2.095]],["title/modules/DualSliderModule.html",[381,0.651,396,2.922]],["body/modules/DualSliderModule.html",[3,0.095,4,0.095,5,0.095,11,0.005,17,0.008,22,2.856,23,0.095,99,0.007,100,0.005,150,0.379,151,0.717,179,0.202,204,1.916,317,1.077,345,2.986,346,2.135,381,0.926,383,1.837,384,1.837,385,2.54,386,1.916,387,1.916,388,2.54,396,5.9,403,2.219,404,1.726,406,1.999,407,2.364,427,4.605,444,2.697,445,2.183,1133,3.207,1581,4.605,1630,6.937,2188,5.913,2189,4.895,2190,6.351,2191,5.257,2193,5.743,2273,5.257,2274,5.743,2334,5.743,2335,5.743,2336,5.743,2337,6.479,2338,7.827,2339,7.827,2340,6.479]],["title/interfaces/ExtDeckProps.html",[0,0.282,1150,3.067]],["body/interfaces/ExtDeckProps.html",[0,0.42,2,0.843,3,0.076,4,0.051,5,0.051,6,1.131,11,0.006,12,0.403,13,0.616,16,1.203,17,0.008,18,1.633,19,0.678,23,0.111,28,1.704,46,1.148,47,0.936,48,0.621,87,0.825,92,3.195,95,2.809,99,0.004,100,0.003,125,1.083,141,2.028,145,1.468,150,0.297,179,0.109,205,1.715,216,1.669,219,1.441,235,2.067,247,1.876,252,1.569,271,2.713,281,2.32,329,0.975,455,2.526,457,4.45,472,2.007,475,3.778,476,0.559,495,3.715,512,1.989,515,1.989,517,2.713,519,4.745,520,2.251,522,3.489,523,4.927,524,2.251,525,3.047,528,3.626,530,2.572,536,3.179,547,2.251,572,5.035,604,2.164,650,3.285,653,3.38,669,3.828,686,2.251,736,2.802,860,2.154,925,1.684,989,2.563,1129,3.323,1130,2.363,1131,2.154,1132,2.646,1133,2.563,1134,3.588,1135,4.578,1136,4.27,1137,3.95,1138,1.989,1139,2.251,1140,3.051,1141,3.179,1142,3.051,1143,3.179,1144,2.493,1145,2.493,1146,3.323,1147,4.45,1148,2.493,1149,2.493,1150,4.146,1151,4.146,1152,2.493,1153,3.323,1154,3.323,1155,4.375,1156,4.115,1157,3.179,1158,2.154,1159,2.154,1160,3.715,1161,5.152,1162,4.578,1163,3.681,1164,4.146,1165,2.493,1166,2.493,1167,2.493,1168,4.146,1169,1.989,1170,4.375,1171,4.375,1172,2.363,1173,2.363,1174,4.146,1175,4.361,1176,4.375,1177,2.251,1178,2.363,1179,2.493,1180,2.251,1181,4.83,1182,2.363,1183,5.508,1184,3.488,1185,3.488,1186,3.852,1187,2.251,1188,2.493,1189,2.493,1190,2.493,1191,2.493,1192,2.493,1193,2.493,1194,2.154,1195,4.375,1196,4.375,1197,4.375,1198,4.83,1199,5.152,1200,2.363,1201,2.493,1202,2.363,1203,3.681,1204,2.493,1205,2.493,1206,2.493,1207,2.363,1208,2.493,1209,2.493,1210,2.493,1211,2.363,1212,2.493,1213,2.493,1214,3.681,1215,2.493,1216,2.493,1217,2.363,1218,4.375,1219,2.493,1220,3.051,1221,2.493,1222,3.681,1223,2.251,1224,2.251,1225,2.493,1226,2.363,1227,2.493,1228,3.681,1229,2.363,1230,2.493,1231,2.493,1232,2.251,1233,3.323,1234,2.493,1235,2.493,1236,2.493,1237,2.493,1238,2.493,1239,2.363,1240,2.493,1241,1.989,1242,2.493,1243,2.493,1244,2.493,1245,2.493,1246,2.493,1247,2.363,1248,2.493,1249,2.363,1250,3.488,1251,2.493,1252,2.493,1253,2.493,1254,2.493,1255,2.363,1256,2.493,1257,2.493,1258,2.493,1259,2.493,1260,2.493,1261,2.251,1262,2.493,1263,2.493,1264,3.681,1265,2.493,1266,2.493]],["title/interfaces/Filter.html",[0,0.282,73,1.534]],["body/interfaces/Filter.html",[0,0.525,1,2.344,2,1.103,3,0.067,4,0.067,5,0.067,6,1.479,7,3.091,8,1.066,9,3.426,10,4.348,11,0.007,12,0.357,13,0.746,14,3.091,15,2.504,16,1.425,17,0.008,18,1.728,19,0.753,20,1.389,21,3.091,22,2.023,23,0.121,24,2.619,25,2.703,26,2.922,27,3.271,28,1.744,29,2.601,30,3.091,31,3.091,32,2.703,33,1.918,34,3.476,35,2.945,36,1.682,37,3.692,38,2.945,39,2.945,40,2.817,41,2.703,42,2.817,43,2.945,44,2.703,45,4.193,46,1.881,47,1.29,48,0.812,49,1.479,50,3.31,51,1.918,52,2.508,53,0.586,54,2.817,55,1.777,56,2.601,57,2.703,58,2.945,59,4.382,60,4.552,61,4.519,62,4.519,63,4.348,64,4.709,65,1.401,66,3.647,67,4.552,68,1.695,69,2.371,70,3.31,71,3.553,72,3.31,73,2.584,74,4.046,75,4.923,76,4.709,77,4.709,78,4.699,79,4.699,80,3.426,81,4.923,82,1.853,83,2.922,84,3.426,85,4.709,86,4.022,87,1.376,88,4.222,89,3.009,90,4.709,91,2.945,92,2.023,93,3.009,94,2.703,95,2.766,96,2.703,97,2.139,98,2.945,99,0.005,100,0.004]],["title/components/FiltersContentComponent.html",[101,0.726,348,1.436]],["body/components/FiltersContentComponent.html",[3,0.097,4,0.059,5,0.059,8,0.855,11,0.003,12,0.313,16,0.994,17,0.008,19,0.632,20,1.697,23,0.059,46,1.269,47,1.384,48,1.408,49,2.468,53,0.85,55,1.142,65,1.306,68,2.114,70,3.022,73,2.941,87,0.642,99,0.005,100,0.006,101,1.22,102,1.27,103,2.055,104,1.243,105,1.298,106,1.357,107,1.166,114,1.969,117,3.119,118,2.328,120,1.886,122,1.928,128,1.009,129,1.694,136,1.118,144,3.938,148,1.327,150,0.165,151,0.446,169,1.27,173,1.27,177,1.27,179,0.125,183,1.463,193,1.776,197,1.376,205,1.512,224,1.773,233,2.392,236,1.972,268,2.934,269,1.994,274,4.349,275,1.728,279,2.594,281,2.143,283,2.523,284,2.58,289,2.127,290,1.166,295,3.515,296,3.38,298,2.924,299,3.481,300,2.782,301,1.878,302,1.728,303,3.855,317,0.67,318,1.766,319,1.845,320,1.357,321,2.442,322,1.357,323,1.357,324,1.27,325,1.357,326,1.27,327,1.357,328,1.27,329,1.442,330,1.357,331,1.27,332,1.298,333,1.357,334,1.27,335,1.357,336,1.27,337,1.357,338,1.27,339,1.357,340,1.27,341,2.243,342,1.357,343,1.27,344,1.928,345,1.27,346,1.886,347,1.357,348,2.286,349,2.882,350,1.928,351,1.27,352,1.357,353,1.27,354,1.357,355,1.27,356,1.27,357,1.357,358,1.27,359,1.357,360,1.27,361,1.928,362,1.27,363,1.357,364,1.27,365,1.357,366,1.27,367,1.357,368,1.298,369,1.357,370,1.27,371,1.357,372,1.27,373,1.357,374,1.27,375,1.27,376,1.357,377,1.27,378,1.27,379,1.357,380,1.357,474,1.009,476,1.155,498,1.123,593,2.644,669,4.321,723,2.331,724,2.392,729,4.644,730,3.673,734,3.119,736,2.114,745,2.518,746,2.712,1113,3.514,1133,1.994,1156,2.924,1302,3.673,1319,2.863,1336,3.673,1350,3.514,1359,3.022,1377,2.202,1379,2.202,1380,2.058,1381,2.202,1522,2.924,1564,4.324,1606,2.473,1607,2.713,1610,2.713,1611,2.713,1612,3.269,1623,5.073,1664,3.673,1808,5.402,1985,5.073,2133,3.269,2163,3.269,2182,3.57,2341,6.183,2342,6.64,2343,3.57,2344,4.644,2345,5.073,2346,7.249,2347,5.901,2348,5.901,2349,3.57,2350,4.028,2351,3.57,2352,3.57,2353,5.073,2354,4.028,2355,7.249,2356,5.724,2357,4.028,2358,5.724,2359,7.249,2360,5.073,2361,4.028,2362,4.028,2363,5.724,2364,4.028,2365,4.028,2366,4.028,2367,4.028,2368,4.028,2369,4.028,2370,3.57,2371,5.724]],["title/modules/FiltersContentModule.html",[381,0.651,2372,3.236]],["body/modules/FiltersContentModule.html",[3,0.093,4,0.093,5,0.093,11,0.005,17,0.008,23,0.093,99,0.006,100,0.005,150,0.371,151,0.709,179,0.199,204,1.893,317,1.064,348,2.981,349,1.975,381,0.915,383,1.815,384,1.815,385,2.527,386,1.893,387,1.893,388,2.527,396,5.815,403,2.203,404,1.705,406,2.398,407,2.347,426,5.194,427,4.55,428,5.194,444,2.677,445,2.157,1324,6.441,2183,6.441,2341,4.836,2342,5.194,2372,6.743,2373,5.673,2374,5.673,2375,6.401,2376,5.673,2377,5.673,2378,6.401,2379,6.401,2380,5.673]],["title/components/FiltersPopoverComponent.html",[101,0.726,169,1.436]],["body/components/FiltersPopoverComponent.html",[3,0.094,4,0.056,5,0.056,8,0.824,11,0.003,12,0.503,13,0.657,17,0.008,19,0.584,20,0.848,23,0.056,46,1.223,47,1.356,48,1.384,51,2.959,53,0.826,55,1.084,65,1.269,68,2.615,73,2.385,82,2.093,87,0.609,99,0.005,100,0.005,101,1.196,102,1.206,103,1.564,104,1.18,105,2.085,106,1.289,107,1.107,114,2.219,117,3.107,118,2.314,120,1.817,122,1.858,127,0.831,128,1.773,129,1.716,133,4.769,136,1.062,144,3.505,148,1.26,150,0.157,151,0.423,169,2.233,171,6.232,173,1.206,177,1.206,179,0.119,183,0.978,193,1.686,197,1.326,199,2.191,202,6.527,205,1.631,216,1.778,223,4.167,224,1.723,236,1.901,238,3.015,252,1.273,253,1.155,271,1.858,275,2.366,277,3.137,279,1.733,281,2.312,282,3.811,285,2.02,289,2.912,290,1.107,295,2.02,297,3.015,298,1.954,299,3.106,300,2.959,301,1.783,302,1.641,303,2.577,317,0.636,318,1.702,319,1.778,320,1.289,321,2.385,322,1.289,323,1.289,324,1.206,325,1.289,326,1.206,327,1.289,328,1.206,329,1.333,330,1.289,331,1.206,332,1.233,333,1.289,334,1.206,335,1.289,336,1.206,337,1.289,338,1.206,339,1.289,340,1.206,341,2.179,342,1.289,343,1.206,344,1.858,345,1.206,346,1.26,347,1.289,348,1.206,349,2.887,350,1.858,351,1.206,352,1.289,353,1.206,354,1.289,355,1.206,356,1.206,357,1.289,358,1.206,359,1.289,360,1.206,361,1.858,362,1.206,363,1.289,364,1.206,365,1.289,366,1.206,367,1.289,368,1.233,369,1.289,370,1.206,371,1.289,372,1.206,373,1.289,374,1.206,375,1.206,376,1.289,377,1.206,378,1.206,379,1.289,380,1.289,474,0.958,476,0.609,498,1.269,565,2.389,723,2.247,724,2.305,729,4.475,730,3.54,731,4.888,732,3.54,733,4.888,734,2.635,736,2.615,745,2.447,746,2.247,786,3.971,916,3.92,1100,2.719,1113,4.608,1156,3.835,1301,3.249,1336,4.817,1379,2.091,1380,1.954,1381,2.091,1441,2.719,1522,2.818,1564,4.167,1606,5.159,1607,2.577,1608,3.92,1609,2.719,1610,2.577,1611,2.577,1614,2.168,1615,3.015,1643,3.54,1665,3.54,1681,3.104,1839,4.748,1877,5.248,1897,3.811,2166,4.887,2175,3.104,2341,6.232,2347,4.888,2348,5.733,2360,3.39,2381,3.39,2382,5.733,2383,4.888,2384,6.469,2385,7.08,2386,7.08,2387,6.469,2388,3.825,2389,5.745,2390,4.888,2391,3.825,2392,3.825,2393,5.516,2394,3.825,2395,6.275,2396,3.825,2397,3.825,2398,3.825,2399,6.469,2400,3.825,2401,3.825,2402,4.888,2403,3.825,2404,3.825,2405,3.825,2406,3.825,2407,3.825,2408,5.516,2409,3.825,2410,3.825]],["title/modules/FiltersPopoverModule.html",[381,0.651,397,3.236]],["body/modules/FiltersPopoverModule.html",[3,0.096,4,0.096,5,0.096,11,0.005,17,0.008,23,0.096,99,0.007,100,0.005,150,0.367,151,0.728,169,2.991,171,4.969,172,5.337,179,0.205,204,1.945,317,1.093,349,2.437,381,0.94,383,1.865,384,1.865,385,2.557,386,1.945,387,1.945,388,2.557,397,6.653,403,2.239,404,1.752,406,2.437,407,2.386,408,4.317,409,3.36,444,2.722,445,2.216,2341,4.969,2342,5.337,2372,6.482,2411,5.83,2412,5.83,2413,6.578,2414,5.83,2415,5.83,2416,5.337]],["title/classes/FlatNode.html",[179,0.142,2417,4.036]],["body/classes/FlatNode.html",[3,0.08,4,0.08,5,0.08,8,1.162,11,0.005,12,0.424,15,2.568,16,1.05,17,0.008,18,1.639,19,0.678,23,0.08,46,1.558,53,0.897,65,1.779,82,2.078,87,1.12,99,0.006,100,0.005,101,1.12,107,2.597,125,1.683,129,1.749,131,1.992,150,0.223,179,0.17,180,2.83,181,2.658,183,2.1,184,4.119,194,3.374,197,1.69,236,2.999,247,1.655,252,1.259,449,2.786,470,1.796,474,1.76,476,1.355,498,1.612,508,4.312,606,3.428,1345,3.984,1356,6.229,2217,6.229,2257,6.229,2417,7.28,2418,8.501,2419,4.832,2420,6.892,2421,5.452,2422,4.524,2423,7.607,2424,5.452,2425,9.14,2426,6.848,2427,7.028,2428,5.452,2429,5.452,2430,5.452,2431,7.028,2432,5.452,2433,5.452,2434,7.028,2435,4.51,2436,5.452,2437,5.452,2438,5.452]],["title/components/HeaderComponent.html",[101,0.726,351,1.436]],["body/components/HeaderComponent.html",[3,0.117,4,0.061,5,0.061,8,0.621,11,0.003,12,0.323,16,0.874,17,0.008,19,0.639,23,0.061,33,1.738,34,2.652,36,1.379,37,4.736,46,1.298,47,1.4,48,1.423,49,2.37,53,0.748,55,1.179,60,3.318,63,3.318,64,3.593,65,1.329,73,2.611,93,2.81,99,0.005,100,0.006,101,1.079,102,1.311,103,1.659,104,1.283,105,1.34,106,1.401,107,1.204,113,5.854,114,2.003,117,3.126,118,2.333,120,1.928,122,1.972,128,1.041,129,1.65,136,1.154,148,1.37,150,0.17,151,0.46,169,1.311,173,1.311,177,1.311,179,0.13,191,4.749,199,1.651,224,1.804,252,1.351,253,1.256,268,3.416,271,2.611,272,1.611,276,3.374,280,2.801,281,2.291,283,1.833,284,2.268,285,3.577,286,2.729,289,2.195,290,1.204,291,2.058,292,3.091,293,2.124,294,6.288,296,3.613,299,1.996,300,2.831,301,1.939,302,1.784,305,3.448,306,3.577,307,2.552,308,2.357,309,2.195,317,0.691,318,1.806,319,1.886,320,1.401,321,2.477,322,1.401,323,1.401,324,1.311,325,1.401,326,1.311,327,1.401,328,1.311,329,1.459,330,1.401,331,1.311,332,1.34,333,1.401,334,1.311,335,1.401,336,1.311,337,1.401,338,1.311,339,1.401,340,1.311,341,2.282,342,1.401,343,1.311,344,1.972,345,1.311,346,1.37,347,1.401,348,1.311,349,2.391,350,1.972,351,2.318,352,1.401,353,1.311,354,1.401,355,1.311,356,1.311,357,1.401,358,1.311,359,1.401,360,1.311,361,1.972,362,1.311,363,1.401,364,1.311,365,1.401,366,1.311,367,1.401,368,1.34,369,1.401,370,1.311,371,1.401,372,1.311,373,1.401,374,1.311,375,1.311,376,1.401,377,1.311,378,1.311,379,1.401,380,1.401,476,0.933,723,2.384,724,2.446,734,3.156,736,2.715,745,2.781,746,2.759,881,4.158,882,4.347,883,5.496,1156,2.99,1285,3.141,1287,3.593,1302,3.756,1348,3.199,1377,2.273,1379,2.273,1380,2.124,1381,2.273,1396,3.318,1397,3.318,1409,2.357,1521,5.226,1564,4.422,1664,5.159,1764,5.188,1839,2.449,2118,5.966,2164,3.141,2176,2.357,2332,2.195,2439,4.158,2440,7.352,2441,5.188,2442,5.853,2443,6.774,2444,5.853,2445,6.774,2446,6.774,2447,6.774,2448,4.158,2449,4.158,2450,4.158,2451,5.853,2452,4.158,2453,4.158,2454,7.749,2455,5.853,2456,5.853,2457,5.853,2458,5.853,2459,5.853,2460,5.188,2461,5.853,2462,5.853,2463,3.685,2464,4.158,2465,3.374,2466,4.158,2467,4.158,2468,3.685,2469,3.685,2470,4.158,2471,4.158,2472,4.158,2473,4.158,2474,4.158,2475,4.158,2476,4.158]],["title/modules/HeaderModule.html",[381,0.651,1906,3.236]],["body/modules/HeaderModule.html",[3,0.094,4,0.094,5,0.094,11,0.005,17,0.008,23,0.094,99,0.006,100,0.005,150,0.379,151,0.713,179,0.201,204,1.906,317,1.071,351,2.984,381,0.921,383,1.827,384,1.827,385,2.534,386,1.906,387,1.906,388,2.534,403,2.212,404,1.716,406,2.408,407,2.356,408,4.264,409,3.292,419,5.712,444,2.688,445,2.171,1906,6.632,2477,5.712,2478,5.712,2479,5.712,2480,5.712,2481,6.451,2482,6.445,2483,6.915,2484,5.712,2485,7.802,2486,6.445,2487,6.915,2488,5.712,2489,5.229,2490,6.445,2491,6.445]],["title/classes/HuBMAPEntity.html",[179,0.142,2492,4.036]],["body/classes/HuBMAPEntity.html",[3,0.026,4,0.026,5,0.026,6,2.822,8,0.776,10,1.017,11,0.001,12,0.236,13,0.361,15,1.815,16,1.386,17,0.008,18,1.19,19,0.738,20,0.398,22,0.79,23,0.058,27,0.73,28,1.56,29,1.017,32,1.057,34,3.086,35,2.533,36,1.947,38,1.151,39,1.151,40,2.423,41,2.326,42,1.101,44,1.057,46,0.673,47,0.324,48,0.537,49,0.578,52,3.831,53,0.504,54,4.042,55,1.119,59,1.864,60,4.072,61,3.324,62,3.324,63,4.159,64,4.042,67,2.633,68,0.662,78,3.198,83,2.946,84,2.539,87,1.117,95,0.695,99,0.003,100,0.001,118,0.44,127,0.39,128,0.76,129,1.857,145,0.861,150,0.231,154,1.503,179,0.056,183,1.187,189,1.59,193,1.338,197,0.73,199,1.206,216,1.272,217,4.056,219,1.392,236,1.79,237,2.882,247,0.84,252,1.2,253,2.329,272,1.8,283,0.79,293,0.916,449,0.916,470,0.591,474,0.449,476,0.899,497,3.509,498,0.775,508,0.813,565,0.662,578,2.298,593,1.206,597,4.257,606,1.338,620,1.208,650,0.813,653,1.84,669,1.603,681,1.355,726,1.355,736,0.662,796,1.275,797,3.19,806,2.736,816,2.539,818,2.463,820,3.203,824,2.533,850,1.151,856,1.455,860,1.864,861,1.455,876,1.355,878,0.618,880,3.509,881,4.303,882,1.151,894,1.355,977,1.275,1052,3.693,1068,2.294,1074,1.455,1081,1.455,1084,1.455,1100,3.302,1121,3.034,1134,0.947,1156,0.916,1241,1.017,1269,1.59,1297,1.208,1427,1.355,1557,1.275,1642,1.101,1735,4.605,2108,2.691,2492,2.691,2493,7.759,2494,1.59,2495,3.036,2496,3.036,2497,2.691,2498,5.196,2499,4.645,2500,6.811,2501,3.948,2502,4.645,2503,3.948,2504,7.009,2505,3.948,2506,6.01,2507,3.948,2508,5.642,2509,5.642,2510,5.128,2511,3.948,2512,6.811,2513,3.948,2514,3.948,2515,4.645,2516,7.211,2517,6.584,2518,3.036,2519,1.793,2520,1.793,2521,1.793,2522,3.036,2523,1.793,2524,1.793,2525,1.793,2526,1.793,2527,1.793,2528,1.793,2529,1.793,2530,4.216,2531,3.948,2532,1.793,2533,1.793,2534,1.793,2535,1.793,2536,1.793,2537,1.793,2538,1.793,2539,1.793,2540,1.793,2541,1.793,2542,1.793,2543,1.793,2544,1.793,2545,1.793,2546,1.793,2547,1.793,2548,4.877,2549,1.793,2550,6.01,2551,1.793,2552,1.793,2553,1.793,2554,2.045,2555,3.036,2556,2.158,2557,1.793,2558,1.59,2559,1.355,2560,1.793,2561,1.101,2562,1.793,2563,3.036,2564,1.793,2565,1.793,2566,3.203,2567,1.59,2568,3.948,2569,1.793,2570,1.793,2571,1.793,2572,1.793,2573,8.202,2574,6.32,2575,4.645,2576,6.32,2577,6.01,2578,6.32,2579,6.32,2580,6.32,2581,4.117,2582,5.196,2583,5.196,2584,5.196,2585,5.196,2586,6.32,2587,8.726,2588,3.769,2589,4.645,2590,6.32,2591,4.117,2592,4.645,2593,4.645,2594,4.645,2595,7.183,2596,6.32,2597,6.32,2598,4.645,2599,6.32,2600,4.117,2601,6.32,2602,4.645,2603,4.645,2604,4.117,2605,1.793,2606,1.793,2607,1.793,2608,6.32,2609,1.793,2610,3.036,2611,1.793,2612,3.036,2613,5.642,2614,4.645,2615,4.645,2616,1.793,2617,1.793,2618,1.793,2619,1.793,2620,1.793,2621,1.793,2622,3.948,2623,1.793,2624,3.036,2625,3.036,2626,3.036,2627,1.793,2628,1.793,2629,1.793,2630,3.036,2631,2.691,2632,1.793,2633,1.793,2634,1.793,2635,1.793,2636,1.793,2637,1.793,2638,1.793,2639,3.036,2640,1.793,2641,3.036,2642,7.598,2643,1.793,2644,3.036,2645,3.036,2646,3.036,2647,3.036,2648,1.793,2649,3.036,2650,1.793,2651,1.793,2652,3.036,2653,1.793,2654,3.036,2655,3.036,2656,1.793,2657,3.036,2658,1.793,2659,3.036,2660,1.793,2661,3.036,2662,1.793,2663,3.036,2664,1.793,2665,3.036,2666,1.793,2667,3.036,2668,1.793,2669,1.793,2670,1.793,2671,1.793,2672,1.793,2673,1.793,2674,3.036,2675,3.036,2676,1.793,2677,1.793,2678,1.793,2679,1.793,2680,1.208,2681,1.793,2682,1.793,2683,1.793,2684,1.793,2685,1.793,2686,1.793,2687,1.793,2688,1.793,2689,3.036,2690,1.793,2691,1.793,2692,1.793,2693,1.793,2694,1.793,2695,1.793,2696,1.793,2697,1.793,2698,3.036,2699,1.793,2700,3.948,2701,1.793,2702,4.645,2703,1.793,2704,4.645,2705,1.793,2706,3.036,2707,3.036,2708,3.036,2709,1.793,2710,3.036,2711,1.793,2712,1.793,2713,3.948,2714,1.793,2715,1.793,2716,1.793,2717,3.036,2718,1.793,2719,1.793,2720,1.793,2721,1.793,2722,1.793,2723,1.793,2724,6.32,2725,1.793,2726,1.793,2727,1.793,2728,3.036,2729,1.59,2730,3.036,2731,1.793,2732,1.793,2733,1.793,2734,3.036,2735,3.036,2736,1.793,2737,3.036,2738,3.036,2739,3.948,2740,1.793,2741,1.793,2742,3.948,2743,1.793,2744,1.793,2745,1.793,2746,3.948,2747,1.793,2748,1.793,2749,1.793,2750,3.036,2751,1.793,2752,1.793,2753,1.793,2754,1.793,2755,3.948,2756,1.793,2757,1.793,2758,1.793,2759,5.196,2760,1.793,2761,1.793,2762,1.59,2763,1.59,2764,1.793,2765,1.793,2766,1.793,2767,4.117,2768,1.793,2769,1.793,2770,1.455,2771,1.275,2772,1.793,2773,1.793,2774,1.793,2775,1.793,2776,1.793,2777,1.793,2778,1.793,2779,1.793,2780,1.793,2781,1.793,2782,1.793,2783,1.793,2784,1.793,2785,3.036,2786,1.793,2787,1.793,2788,3.948,2789,1.793,2790,1.793,2791,1.793,2792,3.036,2793,1.793,2794,1.793,2795,1.793,2796,3.036,2797,3.036,2798,1.793,2799,1.793,2800,1.793,2801,1.793,2802,1.793,2803,1.793,2804,1.793,2805,6.32,2806,5.642,2807,1.793,2808,6.01,2809,3.036,2810,1.793,2811,3.036,2812,1.793,2813,1.793,2814,1.793,2815,1.793,2816,1.793,2817,1.793,2818,4.645,2819,1.793,2820,1.793,2821,4.645,2822,1.793,2823,3.036,2824,1.793,2825,1.455,2826,1.793,2827,1.793,2828,1.793,2829,1.793,2830,1.793,2831,1.793,2832,1.793,2833,1.793,2834,1.793,2835,3.036,2836,1.793,2837,1.793,2838,1.59,2839,1.793,2840,1.793,2841,1.793,2842,1.793,2843,1.793,2844,1.793,2845,1.793,2846,1.793,2847,1.793,2848,1.275,2849,1.793,2850,1.275,2851,1.793,2852,3.036,2853,1.793,2854,1.793,2855,1.793,2856,1.793,2857,1.793,2858,1.793,2859,1.793,2860,1.793,2861,1.793,2862,1.793,2863,1.793,2864,1.793,2865,1.793,2866,1.793,2867,1.793,2868,3.948,2869,4.645,2870,4.645,2871,1.793,2872,3.036,2873,3.036,2874,3.036,2875,3.036,2876,1.793,2877,1.793,2878,1.793,2879,1.793,2880,1.793,2881,1.793,2882,1.793,2883,1.455,2884,1.59,2885,1.793,2886,1.793,2887,1.793,2888,1.793,2889,1.793,2890,1.793,2891,1.793,2892,1.793,2893,1.793,2894,1.793,2895,1.793,2896,1.793,2897,1.793,2898,1.793]],["title/interfaces/IconDefinition.html",[0,0.282,2899,3.695]],["body/interfaces/IconDefinition.html",[0,0.27,2,1.05,3,0.064,4,0.064,5,0.064,8,0.652,11,0.004,12,0.339,13,0.721,16,1.275,17,0.008,19,0.62,20,0.968,23,0.088,33,3.924,34,4.082,46,1.343,51,2.531,53,1.158,68,3.015,87,1.381,99,0.005,100,0.004,127,1.316,131,1.972,136,1.212,141,2.475,145,1.972,150,0.343,151,0.483,179,0.136,180,1.505,181,1.652,183,2.087,195,3.299,205,0.911,219,1.419,236,2.087,247,1.817,249,2.306,288,5.339,291,2.998,318,2.759,409,2.231,411,3.104,455,2.269,476,0.965,498,1.474,565,3.015,593,2.983,604,1.825,756,3.095,878,1.505,925,2.097,1147,4.611,1297,5.315,1642,3.718,1647,3.299,1916,3.299,1919,3.543,1924,2.291,1973,4.08,1996,3.718,2000,3.104,2035,3.718,2036,2.681,2037,2.681,2038,2.231,2080,2.941,2100,3.543,2103,6.926,2107,6.094,2111,7.255,2112,5.96,2113,6.793,2114,5.674,2115,4.915,2117,4.915,2219,3.104,2899,6.793,2900,3.543,2901,3.87,2902,5.368,2903,6.657,2904,6.657,2905,6.164,2906,5.368,2907,3.87,2908,3.299,2909,7.236,2910,3.87,2911,5.368,2912,3.87,2913,3.299,2914,3.87,2915,3.87,2916,3.87,2917,3.87,2918,3.87,2919,5.368,2920,4.915,2921,3.87,2922,3.87,2923,3.87,2924,3.87,2925,3.87,2926,5.368,2927,3.87,2928,3.87,2929,3.87,2930,3.543,2931,3.87,2932,3.87,2933,3.87,2934,3.87,2935,3.87,2936,3.87,2937,3.87,2938,4.576,2939,3.87,2940,3.87,2941,3.87,2942,3.87,2943,3.87,2944,3.87,2945,3.87,2946,3.299,2947,3.87,2948,3.87]],["title/injectables/IconRegistryState.html",[1924,1.722,2908,3.44]],["body/injectables/IconRegistryState.html",[0,0.246,3,0.058,4,0.058,5,0.058,8,1.077,11,0.003,12,0.31,16,1.139,17,0.008,19,0.629,20,0.883,23,0.083,33,3.899,34,3.846,46,1.599,51,1.665,53,1.155,68,2.444,87,1.263,99,0.005,100,0.003,127,1.438,129,1.623,131,2.247,136,1.106,141,2.612,145,2.162,150,0.334,151,0.441,179,0.124,180,1.957,181,2.148,183,2.026,195,4.291,197,1.366,205,0.831,219,1.386,236,1.373,247,1.775,249,2.999,288,5.127,291,3.571,318,2.619,409,2.036,411,2.832,455,2.6,470,1.313,474,1.91,476,0.635,494,1.972,498,1.636,565,3.08,593,3.029,604,2.374,756,2.902,878,1.957,925,3.177,1147,4.428,1297,5.618,1642,4.428,1647,4.291,1916,3.01,1919,4.608,1924,2.148,1925,2.347,1973,4.458,1996,4.062,2000,4.037,2035,3.487,2036,2.446,2037,2.446,2038,2.036,2080,2.684,2100,6.432,2103,6.886,2107,6.767,2111,6.767,2112,5.45,2113,6.767,2114,4.291,2115,3.233,2117,4.608,2219,4.037,2899,7.252,2900,6.432,2901,3.532,2902,3.532,2903,5.034,2904,5.034,2905,7.026,2906,6.393,2907,3.532,2908,4.291,2909,7.63,2910,5.034,2911,6.393,2912,5.034,2913,4.291,2914,3.532,2915,3.532,2916,3.532,2917,3.532,2918,5.034,2919,6.393,2920,5.853,2921,5.034,2922,3.532,2923,5.034,2924,6.393,2925,5.034,2926,5.034,2927,3.532,2928,3.532,2929,3.532,2930,3.233,2931,3.532,2932,3.532,2933,3.532,2934,3.532,2935,3.532,2936,3.532,2937,3.532,2938,5.45,2939,5.865,2940,3.532,2941,3.532,2942,3.532,2943,3.532,2944,3.532,2945,3.532,2946,4.291,2947,5.865,2948,3.532,2949,5.679,2950,3.985,2951,3.985,2952,3.985,2953,3.985,2954,3.985,2955,3.985,2956,3.985,2957,3.985]],["title/interfaces/IdObject.html",[0,0.282,2958,3.44]],["body/interfaces/IdObject.html",[0,0.531,2,1.246,3,0.076,4,0.076,5,0.076,8,0.774,11,0.004,12,0.403,13,0.809,15,2.433,16,1.249,17,0.008,19,0.427,20,1.903,22,3.687,23,0.118,28,1.996,51,3.171,53,1.068,65,1.641,99,0.006,100,0.004,150,0.278,154,2.564,183,1.324,216,2.767,219,1.506,247,1.103,472,2.634,498,1.016,508,3.89,521,4.002,604,2.165,754,4.745,1301,5.49,2422,3.473,2435,3.325,2554,6.405,2561,3.18,2680,3.49,2958,6.085,2959,4.203,2960,4.203,2961,6.536,2962,5.732,2963,4.203,2964,4.579,2965,5.516,2966,5.516,2967,5.393,2968,5.516,2969,4.203,2970,6.787,2971,6.787,2972,5.516,2973,4.203,2974,4.203,2975,6.156,2976,4.203,2977,4.203,2978,4.203,2979,4.203,2980,5.516,2981,4.203,2982,4.203,2983,4.203,2984,4.203,2985,4.203,2986,4.203,2987,4.203,2988,3.682,2989,5.516,2990,4.203,2991,4.203,2992,4.203,2993,4.203,2994,4.203,2995,3.49,2996,4.203]],["title/classes/ImageViewer.html",[179,0.142,1169,2.581]],["body/classes/ImageViewer.html",[0,0.356,3,0.059,4,0.037,5,0.037,6,2.95,11,0.005,12,0.315,13,0.483,16,0.998,17,0.008,18,1.617,19,0.737,20,1.612,23,0.098,28,1.522,46,1.119,47,1.657,48,0.452,53,0.957,87,1.194,92,3.206,95,2.975,99,0.003,100,0.002,125,1.558,127,1.58,129,1.944,141,1.664,145,1.15,150,0.257,179,0.08,197,0.976,205,1.778,216,1.308,219,1.346,235,3.389,247,1.766,252,1.328,271,2.687,281,2.27,329,0.764,449,1.304,455,2.724,457,4.6,470,0.841,472,2.229,474,1.876,475,2.491,476,0.407,494,2.008,495,3.654,498,1.644,512,1.447,515,1.447,517,2.536,519,3.698,520,1.638,522,1.447,523,4.981,524,1.638,525,2.5,528,3.698,530,2.624,536,3.532,547,1.638,572,4.498,604,1.067,650,3.759,653,2.927,669,3.315,686,1.638,736,2.469,860,1.567,925,1.226,989,2.008,1129,2.604,1130,6.165,1131,1.567,1132,2.073,1133,2.008,1134,3.315,1135,3.875,1136,3.938,1137,3.692,1138,1.447,1139,1.638,1140,2.39,1141,2.491,1142,2.39,1143,2.491,1144,1.814,1145,1.814,1146,3.692,1147,4.103,1148,1.814,1149,1.814,1150,2.733,1151,3.401,1152,1.814,1153,3.692,1154,3.692,1155,3.589,1156,4.074,1157,3.1,1158,1.567,1159,1.567,1160,3.831,1161,4.981,1162,3.875,1163,2.884,1164,3.401,1165,1.814,1166,1.814,1167,1.814,1168,4.721,1169,2.3,1170,3.589,1171,3.589,1172,3.401,1173,3.401,1174,3.401,1175,4.29,1176,3.589,1177,3.241,1178,3.401,1179,1.814,1180,3.241,1181,4.089,1182,3.401,1183,5.874,1184,3.875,1185,3.875,1186,3.789,1187,2.604,1188,1.814,1189,1.814,1190,1.814,1191,1.814,1192,1.814,1193,1.814,1194,3.532,1195,3.589,1196,3.589,1197,3.589,1198,4.089,1199,4.462,1200,3.875,1201,1.814,1202,2.733,1203,2.884,1204,1.814,1205,1.814,1206,1.814,1207,2.733,1208,1.814,1209,1.814,1210,1.814,1211,1.72,1212,1.814,1213,1.814,1214,2.884,1215,1.814,1216,1.814,1217,2.733,1218,3.589,1219,1.814,1220,2.39,1221,1.814,1222,2.884,1223,3.692,1224,3.692,1225,1.814,1226,1.72,1227,1.814,1228,2.884,1229,3.875,1230,1.814,1231,1.814,1232,3.692,1233,2.604,1234,1.814,1235,1.814,1236,1.814,1237,1.814,1238,1.814,1239,3.401,1240,1.814,1241,1.447,1242,1.814,1243,1.814,1244,1.814,1245,1.814,1246,1.814,1247,2.733,1248,1.814,1249,2.733,1250,3.875,1251,1.814,1252,1.814,1253,1.814,1254,1.814,1255,3.875,1256,1.814,1257,1.814,1258,1.814,1259,1.814,1260,1.814,1261,2.604,1262,1.814,1263,1.814,1264,2.884,1265,1.814,1266,1.814,1345,2.3,2997,3.596,2998,3.596,2999,3.596,3000,3.596,3001,3.596,3002,4.058,3003,2.553,3004,2.553,3005,2.553,3006,2.553,3007,2.553,3008,2.553,3009,2.553,3010,2.553,3011,2.553,3012,2.553,3013,2.553,3014,2.553,3015,2.553,3016,2.553,3017,2.553,3018,2.553,3019,2.263,3020,2.553,3021,2.263,3022,2.553,3023,2.553,3024,2.553,3025,2.553,3026,2.553,3027,2.553,3028,2.553,3029,2.553,3030,2.263,3031,2.553,3032,2.553,3033,2.553,3034,2.553,3035,2.553,3036,2.553,3037,2.263,3038,2.553,3039,2.553,3040,2.553,3041,2.553,3042,2.553,3043,2.553,3044,2.553]],["title/components/ImageViewerAccordionComponent.html",[101,0.726,353,1.436]],["body/components/ImageViewerAccordionComponent.html",[3,0.097,4,0.058,5,0.058,8,0.597,11,0.003,12,0.311,15,2.003,16,0.85,17,0.008,19,0.655,20,1.47,23,0.058,24,2.379,36,1.341,46,1.262,47,1.636,48,1.662,49,2.137,53,0.727,55,2.25,65,1.301,82,1.683,99,0.005,100,0.006,101,1.056,102,1.261,103,2.25,104,1.234,105,1.289,106,1.347,107,1.157,113,3.02,114,1.96,117,3.117,118,2.322,120,1.876,122,1.918,127,1.237,128,1.001,129,1.625,131,1.614,136,1.11,144,2.818,148,1.317,150,0.271,151,0.443,169,1.261,173,1.261,175,4.055,177,1.261,179,0.125,193,2.509,199,2.261,224,2.034,233,2.379,252,1.314,268,3.599,269,1.979,270,2.355,271,2.234,272,1.549,273,2.454,275,1.715,277,2.379,281,1.96,283,3.498,284,2.8,285,3.006,286,3.091,289,2.111,290,1.157,291,3.576,292,3.006,293,2.043,295,2.111,300,2.771,306,3.006,307,4.435,308,2.266,309,2.111,317,0.665,318,1.757,319,1.835,320,1.347,321,2.434,322,1.347,323,1.347,324,1.261,325,1.347,326,1.261,327,1.347,328,1.261,329,1.438,330,1.347,331,1.261,332,1.289,333,1.347,334,1.261,335,1.347,336,1.261,337,1.347,338,1.261,339,1.347,340,1.261,341,2.234,342,1.347,343,1.261,344,1.918,345,1.261,346,1.317,347,1.347,348,1.261,349,1.757,350,1.918,351,1.261,352,1.347,353,2.278,354,1.347,355,1.261,356,1.261,357,1.347,358,1.261,359,1.347,360,1.261,361,1.918,362,1.261,363,1.347,364,1.261,365,1.347,366,1.261,367,1.347,368,1.289,369,1.347,370,1.261,371,1.347,372,1.261,373,1.347,374,1.261,375,1.261,376,1.347,377,1.261,378,1.261,379,1.347,380,1.347,476,0.907,492,2.454,517,1.762,521,2.654,530,3.55,546,1.812,723,2.319,724,2.379,732,3.653,734,3.11,745,2.733,746,3.11,786,2.454,827,3.653,1315,3.091,1317,2.454,1318,2.454,1320,4.046,1332,1.812,1341,1.812,1348,3.112,1372,2.355,1377,2.185,1379,2.185,1380,2.043,1381,2.185,1401,4.466,1402,3.387,1407,2.909,1410,2.454,1546,2.58,1560,2.909,1621,3.02,1767,2.355,1768,2.355,1938,3.543,2157,3.244,2168,6.626,2176,3.227,2332,2.111,2420,5.046,3045,4.055,3046,6.439,3047,3.998,3048,7.224,3049,6.63,3050,5.693,3051,5.009,3052,5.009,3053,3.998,3054,4.619,3055,3.998,3056,3.998,3057,3.998,3058,4.619,3059,3.998,3060,5.693,3061,5.693,3062,6.63,3063,3.543,3064,3.02,3065,3.543,3066,3.543,3067,3.543,3068,5.046]],["title/modules/ImageViewerAccordionModule.html",[381,0.651,3069,3.236]],["body/modules/ImageViewerAccordionModule.html",[3,0.095,4,0.095,5,0.095,11,0.005,17,0.008,23,0.095,47,1.423,48,1.587,99,0.007,100,0.005,150,0.367,151,0.724,175,3.342,179,0.204,204,1.934,317,1.087,353,2.989,381,0.935,383,1.854,384,1.854,385,2.551,386,1.934,387,1.934,388,2.551,403,2.232,404,1.742,406,2.429,407,2.378,444,2.713,445,2.204,3045,3.342,3046,5.308,3069,6.647,3070,5.798,3071,5.798,3072,5.798,3073,5.798,3074,6.135,3075,6.542,3076,7.872,3077,6.542,3078,6.542,3079,4.942,3080,5.798]],["title/components/ImageViewerContentComponent.html",[101,0.726,355,1.436]],["body/components/ImageViewerContentComponent.html",[3,0.106,4,0.059,5,0.059,8,0.6,11,0.003,12,0.312,17,0.008,19,0.656,23,0.059,24,2.388,36,1.802,46,1.267,47,1.637,48,1.683,49,1.295,50,3.511,53,0.73,55,1.139,65,1.304,82,1.689,99,0.005,100,0.006,101,1.059,102,1.267,103,2.253,104,1.24,105,1.295,106,1.354,107,1.163,113,3.035,114,1.966,117,3.118,118,2.325,120,1.882,122,1.925,127,1.241,128,1.006,129,1.741,131,1.62,136,1.116,144,3.584,148,1.324,150,0.296,151,0.445,152,1.929,169,1.267,173,1.267,175,4.27,177,1.267,179,0.125,193,2.518,197,1.374,199,2.269,205,1.192,224,2.117,233,2.388,252,0.928,268,2.518,271,1.354,279,1.821,283,3.605,285,4.039,286,1.873,289,4.318,290,1.163,292,2.122,296,3.1,297,2.196,298,2.053,299,1.929,300,1.679,301,1.873,302,1.724,307,2.467,317,0.668,318,1.763,319,1.841,320,1.354,321,2.439,322,1.354,323,1.354,324,1.267,325,1.354,326,1.267,327,1.354,328,1.267,329,1.364,330,1.354,331,1.267,332,1.295,333,1.354,334,1.267,335,1.354,336,1.267,337,1.354,338,1.267,339,1.354,340,1.267,341,2.24,342,1.354,343,1.267,344,1.925,345,1.267,346,1.324,347,1.354,348,1.267,349,1.763,350,1.925,351,1.267,352,1.354,353,1.267,354,1.354,355,2.283,356,1.267,357,1.354,358,1.267,359,1.354,360,1.267,361,1.925,362,1.267,363,1.354,364,1.267,365,1.354,366,1.267,367,1.354,368,1.295,369,1.354,370,1.267,371,1.354,372,1.267,373,1.354,374,1.267,375,1.267,376,1.354,377,1.267,378,1.267,379,1.354,380,1.354,476,1.059,498,0.788,517,1.771,521,2.664,530,3.418,723,2.327,724,2.388,732,3.667,734,3.331,745,2.739,746,3.238,827,3.667,1315,1.873,1317,2.467,1318,2.467,1341,1.821,1348,3.123,1401,4.478,1402,3.397,1407,2.919,1410,2.467,1546,2.589,1560,2.919,1653,4.061,1665,5.535,1768,2.367,1808,5.394,2176,3.239,2343,3.561,2345,5.064,2349,3.561,2351,3.561,2352,3.561,2395,5.064,2402,3.561,2530,4.636,3045,4.27,3051,5.023,3052,5.023,3054,4.636,3058,4.636,3081,6.314,3082,7.65,3083,7.65,3084,4.018,3085,4.018,3086,4.018,3087,4.018,3088,4.018,3089,4.018,3090,5.713,3091,5.064,3092,4.018]],["title/modules/ImageViewerContentModule.html",[381,0.651,3093,3.067]],["body/modules/ImageViewerContentModule.html",[3,0.095,4,0.095,5,0.095,11,0.005,17,0.008,23,0.095,47,1.42,48,1.586,99,0.007,100,0.005,150,0.367,151,0.722,175,3.333,179,0.203,204,1.929,317,1.084,355,2.988,381,0.933,383,1.849,384,1.849,385,2.548,386,1.929,387,1.929,388,2.548,403,2.228,404,1.738,406,2.425,407,2.374,408,4.296,409,3.333,444,2.708,445,2.198,2377,5.782,2380,5.782,3045,3.333,3046,5.293,3069,6.47,3081,4.928,3093,6.297,3094,5.782,3095,5.782,3096,6.524,3097,5.782,3098,6.524]],["title/interfaces/ImageViewerData.html",[0,0.282,50,2.404]],["body/interfaces/ImageViewerData.html",[0,0.531,1,2.46,2,1.158,3,0.07,4,0.07,5,0.07,6,1.552,7,3.244,8,1.093,9,3.54,10,4.435,11,0.007,12,0.374,13,0.771,14,3.244,15,2.701,16,1.431,17,0.008,18,1.618,19,0.765,20,1.436,21,3.244,22,2.122,23,0.123,24,2.706,25,2.837,26,3.019,27,3.499,28,1.959,29,2.73,30,3.244,31,3.244,32,2.837,33,2.012,34,3.546,35,3.09,36,1.843,37,3.815,38,3.09,39,3.09,40,2.956,41,2.837,42,2.956,43,3.09,44,2.837,45,3.999,46,1.622,47,1.476,48,1.146,49,2.087,50,3.863,51,2.706,52,3.54,53,0.827,54,4.803,55,2.384,56,2.73,57,2.837,58,3.09,59,3.975,60,3.671,61,3.815,62,3.815,63,4.147,64,4.491,65,1.271,66,3.308,67,3.671,68,1.778,69,1.821,70,2.543,71,2.73,72,2.543,73,2.465,74,2.73,75,4.156,76,2.956,77,2.956,78,3.671,79,3.671,80,2.632,81,3.09,82,1.424,83,2.245,84,2.632,85,2.956,86,3.09,87,0.767,88,3.244,89,2.312,90,2.956,91,3.09,92,2.122,93,3.109,94,2.837,95,2.835,96,2.837,97,2.245,98,3.09,99,0.005,100,0.004,492,3.975]],["title/classes/ImageViewerLayer.html",[179,0.142,1402,2.326]],["body/classes/ImageViewerLayer.html",[0,0.291,3,0.069,4,0.069,5,0.069,11,0.004,12,0.562,13,0.759,15,2.447,16,1.342,17,0.008,18,1.705,19,0.735,20,1.893,23,0.113,28,1.76,33,3.022,36,1.502,46,1.796,48,1.637,53,0.601,82,2.138,87,0.75,99,0.005,100,0.004,127,1.814,129,1.96,145,1.334,150,0.193,179,0.147,180,2.197,197,1.533,199,1.869,219,1.06,224,1.926,226,5.174,227,6.29,228,5.14,239,3.614,247,1.357,248,3.485,252,1.472,253,1.926,272,2.802,298,4.139,300,3.022,329,1.742,449,2.404,470,1.551,472,1.824,474,1.179,498,1.521,565,2.992,603,3.345,716,2.889,726,4.817,1341,3.991,1345,3.614,1350,4.439,1351,2.773,1363,4.092,1373,3.02,1376,3.02,1380,3.258,1391,5.174,1402,3.258,1408,5.463,1541,5.51,1554,5.758,1602,5.51,1658,4.171,2680,3.17,3099,7.503,3100,5.14,3101,5.856,3102,5.51,3103,7.232,3104,6.87,3105,7.232,3106,6.29,3107,6.376,3108,5.651,3109,5.174,3110,4.706,3111,4.706,3112,4.706,3113,4.706,3114,4.706,3115,4.706,3116,4.706,3117,4.706,3118,4.706,3119,4.706,3120,4.171,3121,3.819,3122,4.171,3123,4.706,3124,6.409,3125,6.409,3126,4.706,3127,4.706,3128,4.706,3129,3.819,3130,4.171,3131,4.171,3132,4.171,3133,4.171,3134,4.171,3135,4.171,3136,4.171,3137,4.171,3138,4.171,3139,4.171,3140,4.171,3141,4.171,3142,4.171,3143,4.171]],["title/components/ImageViewerLayersComponent.html",[101,0.726,356,1.436]],["body/components/ImageViewerLayersComponent.html",[3,0.09,4,0.051,5,0.051,8,1.017,11,0.003,12,0.274,13,0.904,16,0.776,17,0.008,19,0.648,23,0.051,24,3.548,28,1.128,46,1.151,47,1.582,48,1.65,49,1.988,51,2.17,53,0.927,55,0.998,65,1.21,68,1.918,69,1.964,82,1.824,87,0.983,89,2.493,93,1.691,99,0.004,100,0.005,101,1.157,102,1.11,103,1.472,104,1.087,105,1.135,106,1.186,107,1.019,112,4.839,114,1.824,117,3.092,118,2.299,120,1.711,122,1.749,127,1.128,128,0.882,129,1.672,131,1.749,133,4.586,134,3.497,136,0.978,144,2.57,148,1.16,150,0.252,151,0.39,169,1.11,173,1.11,175,4.119,177,1.11,179,0.11,183,1.856,197,1.248,205,1.42,216,1.673,224,1.934,225,2.503,232,3.922,233,3.034,235,2.074,236,2.125,239,3.541,247,0.749,248,2.838,268,2.289,269,1.743,271,1.749,272,1.364,274,2.838,281,1.041,283,2.719,285,1.859,290,1.019,295,1.859,300,1.471,305,3.059,306,2.742,307,2.161,317,0.585,318,1.602,319,1.673,320,1.186,321,2.294,322,1.186,323,1.186,324,1.11,325,1.186,326,1.11,327,1.186,328,1.11,329,1.518,330,1.186,331,1.11,332,1.135,333,1.186,334,1.11,335,1.186,336,1.11,337,1.186,338,1.11,339,1.186,340,1.11,341,2.078,342,1.186,343,1.11,344,1.749,345,1.11,346,1.16,347,1.186,348,1.11,349,1.602,350,1.749,351,1.11,352,1.186,353,1.11,354,1.186,355,1.11,356,2.147,357,1.186,358,1.11,359,1.186,360,1.11,361,1.749,362,1.11,363,1.186,364,1.11,365,1.186,366,1.11,367,1.186,368,1.135,369,1.186,370,1.11,371,1.186,372,1.11,373,1.186,374,1.11,375,1.11,376,1.186,377,1.11,378,1.11,379,1.186,380,1.186,474,1.545,476,1.085,498,1.336,503,3.151,517,3.995,530,3.788,723,2.115,724,2.17,734,2.957,745,2.333,746,2.512,827,3.332,1132,2.653,1272,4.602,1289,4.839,1297,3.497,1298,3.922,1302,2.26,1315,2.421,1319,2.503,1332,1.595,1341,2.795,1348,2.838,1359,2.742,1372,2.074,1377,1.925,1401,4.155,1402,4.506,1406,3.922,1408,5.143,1410,2.161,1522,2.653,1548,5.143,1558,4.66,1559,4.011,1560,2.653,1645,4.602,1667,2.66,1720,3.922,1802,2.372,1889,3.691,1960,4.602,2219,3.691,2230,4.602,2332,2.742,2389,4.213,2390,4.602,2510,4.213,3045,4.119,3051,4.66,3052,4.66,3054,4.213,3079,6.091,3102,4.839,3122,4.602,3144,3.521,3145,5.192,3146,5.192,3147,5.192,3148,6.168,3149,5.192,3150,5.192,3151,5.192,3152,5.192,3153,3.521,3154,3.521,3155,5.192,3156,5.192,3157,5.192,3158,3.521,3159,5.192,3160,3.521,3161,5.192,3162,3.521,3163,4.602,3164,5.192,3165,5.192,3166,3.521,3167,5.192,3168,3.521,3169,5.192,3170,5.192,3171,3.497,3172,3.121,3173,3.521,3174,3.521,3175,2.66,3176,3.521,3177,3.521,3178,3.521,3179,4.602,3180,5.192,3181,3.121,3182,2.857]],["title/modules/ImageViewerLayersModule.html",[381,0.651,3074,3.067]],["body/modules/ImageViewerLayersModule.html",[3,0.093,4,0.093,5,0.093,11,0.005,17,0.008,23,0.093,47,1.154,48,1.479,99,0.006,100,0.005,150,0.371,151,0.707,175,3.262,179,0.199,204,1.888,224,1.7,317,1.061,329,1.202,332,2.5,356,2.98,381,0.913,383,1.81,384,1.81,385,2.524,386,1.888,387,1.888,388,2.524,403,2.199,404,1.7,406,2.394,407,2.343,444,2.673,445,2.151,1305,5.18,1329,6.875,1332,2.893,1389,5.18,1413,6.437,3045,3.262,3074,6.341,3079,4.823,3183,5.658,3184,5.658,3185,5.658,3186,5.658,3187,6.437,3188,6.384,3189,6.384,3190,5.18,3191,6.384,3192,6.384]],["title/components/ImageViewerLegendComponent.html",[101,0.726,358,1.436]],["body/components/ImageViewerLegendComponent.html",[3,0.102,4,0.065,5,0.065,8,0.664,11,0.004,12,0.345,13,0.73,17,0.008,19,0.579,23,0.065,24,2.933,47,1.642,48,1.671,49,2.262,53,0.896,55,1.26,56,3.979,65,1.377,68,1.641,87,0.708,93,2.944,99,0.005,100,0.006,101,1.118,102,1.401,103,2.251,104,1.371,105,1.432,106,1.497,107,1.286,114,2.075,117,3.14,118,2.338,120,2.02,122,2.065,128,1.113,129,1.611,131,1.99,136,1.234,148,1.464,150,0.251,151,0.492,169,1.401,173,1.401,175,4.056,177,1.401,179,0.138,199,2.435,205,0.927,224,1.87,239,2.858,247,0.946,268,3.499,269,2.2,270,2.618,271,2.365,272,1.722,281,1.314,284,2.376,285,2.346,290,1.286,292,2.346,293,2.27,297,2.429,300,1.857,305,3.612,306,3.237,317,1.398,318,1.892,319,1.976,320,1.497,321,2.549,322,1.497,323,1.497,324,1.401,325,1.497,326,1.401,327,1.497,328,1.401,329,1.495,330,1.497,331,1.401,332,1.432,333,1.497,334,1.401,335,1.497,336,1.401,337,1.497,338,1.401,339,1.497,340,1.401,341,2.365,342,1.497,343,1.401,344,2.065,345,1.401,346,1.464,347,1.497,348,1.401,349,1.892,350,2.065,351,1.401,352,1.497,353,1.401,354,1.497,355,1.401,356,1.401,357,1.497,358,2.386,359,1.497,360,1.401,361,2.065,362,1.401,363,1.497,364,1.401,365,1.497,366,1.401,367,1.497,368,1.432,369,1.497,370,1.401,371,1.497,372,1.401,373,1.497,374,1.401,375,1.401,376,1.497,377,1.401,378,1.401,379,1.497,380,1.497,455,2.12,474,1.113,498,0.872,517,1.959,530,3.717,544,2.134,545,2.429,546,2.014,649,2.618,723,2.497,732,4.505,745,2.319,1315,3.528,1320,4.358,1345,3.475,1351,3.612,1377,2.429,1396,3.475,1397,3.475,1402,4.056,1409,2.519,1410,2.728,1412,3.606,2159,3.606,3045,4.056,3064,3.357,3179,5.434,3193,6.442,3194,4.444,3195,5.434,3196,7.019,3197,6.131,3198,6.221,3199,6.131,3200,4.444,3201,3.939,3202,4.444,3203,3.939,3204,3.939,3205,5.434,3206,4.444,3207,4.444,3208,4.444,3209,4.444]],["title/modules/ImageViewerLegendModule.html",[381,0.651,3210,3.236]],["body/modules/ImageViewerLegendModule.html",[3,0.099,4,0.099,5,0.099,11,0.006,17,0.008,23,0.099,47,1.221,48,1.515,99,0.007,100,0.006,150,0.35,151,0.748,175,3.451,179,0.21,204,1.997,317,1.123,358,3.001,381,0.966,383,1.915,384,1.915,385,2.586,386,1.997,387,1.997,388,2.586,403,2.275,404,1.799,406,2.084,407,2.424,444,2.765,445,2.275,3045,3.451,3193,5.48,3210,6.589,3211,5.986,3212,5.986,3213,5.986,3214,6.754,3215,6.754]],["title/modules/ImageViewerModule.html",[381,0.651,398,3.236]],["body/modules/ImageViewerModule.html",[3,0.091,4,0.091,5,0.091,11,0.005,17,0.008,23,0.091,47,1.495,48,1.594,99,0.006,100,0.005,150,0.362,151,0.69,175,3.185,176,4.71,179,0.194,204,1.843,317,1.036,381,0.891,383,1.767,384,1.767,385,2.309,386,1.843,387,2.261,388,2.498,398,6.761,403,2.167,404,1.661,406,2.359,407,2.309,417,5.526,2416,5.059,3045,3.185,3074,6.348,3079,4.71,3080,5.526,3081,4.71,3093,6.348,3216,5.526,3217,5.526,3218,5.526,3219,6.698,3220,6.066,3221,6.234,3222,5.526]],["title/components/ImageViewerPopoverComponent.html",[101,0.726,173,1.436]],["body/components/ImageViewerPopoverComponent.html",[3,0.085,4,0.085,5,0.047,8,0.973,11,0.007,12,0.378,13,0.578,15,1.467,16,1.044,17,0.008,19,0.629,20,1.55,23,0.047,26,3.746,28,1.415,33,1.346,36,2.088,40,3.59,41,2.862,44,1.897,47,1.659,48,1.681,49,1.565,50,3.88,53,0.938,54,1.977,55,1.377,65,1.148,69,1.837,82,1.926,87,1.038,89,2.332,99,0.004,100,0.005,101,1.114,102,1.015,103,1.846,104,0.994,105,1.038,106,1.085,107,0.932,114,2.067,117,3.064,118,2.286,120,1.6,122,1.636,125,0.994,127,1.518,128,0.806,129,1.743,134,4.387,136,0.894,141,2.647,145,1.846,148,1.061,150,0.239,151,0.356,152,1.546,169,1.015,173,2.054,175,4.25,176,6.284,177,1.015,179,0.1,183,1.665,184,2.432,193,3.081,197,1.168,202,3.669,205,1.638,215,2.655,216,1.038,219,0.972,224,1.558,233,2.03,238,4.017,239,2.265,252,1.121,253,0.973,268,2.871,269,1.594,270,1.897,271,2.355,272,2.524,273,2.982,274,2.655,275,1.381,276,2.613,277,1.346,278,2.613,279,2.65,280,2.169,281,2.067,284,2.709,285,3.88,288,2.289,290,0.932,291,1.594,292,1.7,293,1.645,294,2.613,296,1.501,297,2.655,298,1.645,299,2.808,300,1.346,301,1.501,302,1.381,303,2.169,312,3.94,317,0.807,318,1.499,319,1.565,320,1.085,321,2.194,322,1.085,323,1.085,324,1.015,325,1.085,326,1.015,327,1.085,328,1.015,329,1.384,330,1.085,331,1.015,332,1.038,333,1.085,334,1.015,335,1.085,336,1.015,337,1.085,338,1.015,339,1.085,340,1.015,341,1.97,342,1.085,343,1.015,344,1.636,345,1.015,346,1.061,347,1.085,348,1.015,349,1.499,350,1.636,351,1.015,352,1.085,353,1.015,354,1.085,355,1.015,356,1.015,357,1.085,358,1.015,359,1.085,360,1.015,361,1.636,362,1.015,363,1.085,364,1.015,365,1.085,366,1.015,367,1.085,368,1.038,369,1.085,370,1.015,371,1.085,372,1.015,373,1.085,374,1.015,375,1.015,376,1.085,377,1.015,378,1.015,379,1.085,380,1.085,404,0.858,455,1.967,470,1.061,474,1.631,498,1.442,565,2.406,578,1.311,620,3.272,849,2.084,1100,2.289,1113,2.982,1132,3.754,1301,1.897,1336,3.117,1382,2.432,1392,3.452,1396,2.753,1397,2.753,1406,3.669,1409,1.825,1522,2.482,1615,1.76,1665,4.18,1707,4.63,1708,4.63,1712,3.452,1723,3.272,1786,4.746,1834,2.982,1839,3.446,1877,2.613,1879,2.854,1880,2.432,1897,1.897,2233,3.669,2381,2.854,2382,5.184,2383,4.305,2838,2.854,2913,4.921,3045,4.25,3051,4.418,3223,4.857,3224,4.857,3225,5.849,3226,5.849,3227,4.857,3228,4.857,3229,3.22,3230,4.63,3231,4.857,3232,3.22,3233,3.941,3234,4.857,3235,3.22,3236,2.289,3237,4.857,3238,3.22,3239,4.857,3240,3.22,3241,5.849,3242,3.22,3243,3.22,3244,4.305,3245,5.849,3246,3.22,3247,3.22,3248,3.22,3249,4.857,3250,3.22,3251,4.857,3252,3.22,3253,3.22,3254,4.857,3255,3.22,3256,3.22,3257,3.22,3258,3.22,3259,3.22,3260,3.22,3261,3.22,3262,3.22]],["title/modules/ImageViewerPopoverModule.html",[381,0.651,3219,3.236]],["body/modules/ImageViewerPopoverModule.html",[3,0.091,4,0.091,5,0.091,11,0.005,17,0.008,23,0.091,47,1.492,48,1.613,99,0.006,100,0.005,150,0.373,151,0.687,172,5.039,173,2.97,175,3.173,176,4.691,179,0.193,204,1.836,317,1.032,381,0.888,383,1.76,384,1.76,385,2.494,386,1.836,387,1.836,388,2.494,395,6.06,403,2.162,404,1.654,406,2.354,407,2.304,425,5.504,444,2.628,445,2.092,2415,5.504,2416,5.039,3045,3.173,3081,4.691,3093,6.06,3193,5.039,3210,6.394,3219,6.758,3220,6.06,3222,5.504,3263,5.504,3264,5.504,3265,6.21,3266,5.504,3267,6.21]],["title/interfaces/ImageViewerProps.html",[0,0.282,1158,2.795]],["body/interfaces/ImageViewerProps.html",[0,0.412,2,0.812,3,0.073,4,0.049,5,0.049,6,1.088,11,0.006,12,0.391,13,0.599,16,1.238,17,0.008,18,1.672,19,0.728,23,0.109,28,1.8,46,1.116,47,0.91,48,0.598,87,1.357,92,3.416,95,2.764,99,0.004,100,0.003,125,1.042,141,2.35,145,1.427,150,0.292,179,0.105,205,1.698,216,1.622,219,1.431,235,1.989,247,1.864,252,1.54,271,2.833,281,2.45,329,0.948,455,2.503,457,4.379,472,2.585,475,3.09,476,0.538,495,3.646,512,1.914,515,1.914,517,2.653,519,4.692,520,3.862,522,1.914,523,4.882,524,2.167,525,2.979,528,3.545,530,2.515,536,3.09,547,2.167,572,4.973,604,1.411,650,3.233,653,3.326,669,3.767,686,2.167,736,2.763,860,2.073,925,1.621,989,2.492,1129,3.23,1130,2.275,1131,2.073,1132,2.572,1133,2.492,1134,3.522,1135,4.493,1136,4.203,1137,3.862,1138,1.914,1139,2.167,1140,2.965,1141,3.09,1142,2.965,1143,3.09,1144,2.4,1145,2.4,1146,3.23,1147,4.379,1148,2.4,1149,2.4,1150,3.391,1151,4.054,1152,2.4,1153,3.23,1154,3.23,1155,4.277,1156,4.069,1157,3.09,1158,3.09,1159,4.095,1160,4.236,1161,5.661,1162,5.22,1163,3.578,1164,4.054,1165,2.4,1166,2.4,1167,2.4,1168,4.054,1169,1.914,1170,4.277,1171,4.277,1172,2.275,1173,2.275,1174,4.054,1175,4.28,1176,4.277,1177,2.167,1178,2.275,1179,2.4,1180,2.167,1181,4.741,1182,2.275,1183,5.465,1184,3.391,1185,3.391,1186,3.781,1187,2.167,1188,2.4,1189,2.4,1190,2.4,1191,2.4,1192,2.4,1193,2.4,1194,2.073,1195,4.277,1196,4.277,1197,4.277,1198,4.741,1199,5.071,1200,2.275,1201,2.4,1202,2.275,1203,3.578,1204,2.4,1205,2.4,1206,2.4,1207,2.275,1208,2.4,1209,2.4,1210,2.4,1211,2.275,1212,2.4,1213,2.4,1214,3.578,1215,2.4,1216,2.4,1217,2.275,1218,4.277,1219,2.4,1220,2.965,1221,2.4,1222,3.578,1223,2.167,1224,2.167,1225,2.4,1226,2.275,1227,2.4,1228,3.578,1229,2.275,1230,2.4,1231,2.4,1232,2.167,1233,3.23,1234,2.4,1235,2.4,1236,2.4,1237,2.4,1238,2.4,1239,2.275,1240,2.4,1241,1.914,1242,2.4,1243,2.4,1244,2.4,1245,2.4,1246,2.4,1247,2.275,1248,2.4,1249,2.275,1250,3.391,1251,2.4,1252,2.4,1253,2.4,1254,2.4,1255,2.275,1256,2.4,1257,2.4,1258,2.4,1259,2.4,1260,2.4,1261,2.167,1262,2.4,1263,2.4,1264,3.578,1265,2.4,1266,2.4]],["title/components/InfoButtonComponent.html",[101,0.726,360,1.436]],["body/components/InfoButtonComponent.html",[3,0.136,4,0.07,5,0.07,8,0.968,11,0.004,12,0.375,17,0.008,19,0.398,23,0.07,33,2.708,36,1.136,47,1.476,48,1.489,53,0.935,55,1.366,65,1.436,87,0.768,89,3.111,99,0.005,100,0.006,101,1.369,102,1.52,103,1.837,104,1.487,105,1.554,106,1.624,107,1.395,114,2.164,117,3.156,118,2.35,120,2.135,122,2.183,125,1.487,128,1.207,129,1.379,136,1.338,148,1.588,150,0.3,151,0.534,169,1.52,173,1.52,177,1.52,179,0.15,180,2.233,181,2.451,183,1.232,197,1.558,205,1.352,224,1.95,281,1.425,290,1.395,296,3.921,301,2.247,302,2.068,317,0.801,318,2,319,2.088,320,1.624,321,2.637,322,1.624,323,1.624,324,1.52,325,1.624,326,1.52,327,1.624,328,1.52,329,1.538,330,1.624,331,1.52,332,1.554,333,1.624,334,1.52,335,1.624,336,1.52,337,1.624,338,1.52,339,1.624,340,1.52,341,2.466,342,1.624,343,1.52,344,2.183,345,1.52,346,1.588,347,1.624,348,1.52,349,2,350,2.183,351,1.52,352,1.624,353,1.52,354,1.624,355,1.52,356,1.52,357,1.624,358,1.52,359,1.624,360,2.468,361,2.183,362,2.043,363,1.624,364,1.52,365,1.624,366,1.52,367,1.624,368,1.554,369,1.624,370,1.52,371,1.624,372,1.52,373,1.624,374,1.52,375,1.52,376,1.624,377,1.52,378,1.52,379,1.624,380,1.624,420,3.426,470,1.588,474,1.207,498,0.946,849,2.78,878,2.233,1006,2.732,1392,4.606,1545,4.606,1664,4.158,1839,2.84,2468,4.272,2489,5.94,3268,5.53,3269,4.272,3270,6.351,3271,6.938,3272,6.488,3273,5.743,3274,7.828,3275,4.82,3276,7.828,3277,4.82,3278,7.239,3279,4.606,3280,4.82,3281,6.48,3282,3.911,3283,4.272,3284,4.82,3285,4.82,3286,6.48]],["title/modules/InfoButtonModule.html",[381,0.651,2481,3.236]],["body/modules/InfoButtonModule.html",[3,0.124,4,0.096,5,0.096,11,0.005,17,0.008,23,0.096,99,0.007,100,0.005,150,0.368,151,0.729,179,0.205,204,1.948,317,1.095,360,2.992,381,0.942,383,1.867,384,1.867,385,2.558,386,1.948,387,1.948,388,2.558,399,6.145,403,2.241,404,1.754,406,2.439,407,2.388,408,4.321,409,3.365,420,4.682,421,5.838,444,2.724,445,2.219,2131,5.838,2481,6.655,2489,5.344,3268,4.976,3287,5.838,3288,5.838,3289,6.587,3290,5.838,3291,6.587]],["title/components/InfoDialogComponent.html",[101,0.726,362,1.436]],["body/components/InfoDialogComponent.html",[0,0.448,3,0.125,4,0.045,5,0.083,8,0.854,11,0.003,12,0.444,13,0.562,17,0.008,19,0.472,23,0.045,29,4.106,33,1.296,36,2.063,47,1.243,48,1.282,49,0.999,52,2.58,53,0.73,55,0.879,65,1.478,79,2.676,83,2.979,87,0.494,89,2.267,99,0.004,100,0.005,101,1.362,102,0.978,103,1.338,104,0.957,105,0.999,106,1.045,107,0.898,114,1.69,117,3.054,118,2.334,120,1.555,122,1.59,128,1.431,129,1.36,131,1.62,136,0.861,147,3.18,148,1.022,150,0.193,151,0.343,169,0.978,173,0.978,177,0.978,179,0.097,180,2.369,181,1.785,183,1.207,195,4.318,197,1.653,199,1.875,205,0.985,216,1.521,224,1.522,225,3.355,248,2.58,252,1.475,271,1.59,275,2.025,279,2.59,283,1.367,284,3.008,285,3.018,286,2.979,289,3.018,290,0.898,291,1.535,292,3.63,293,3.264,297,1.695,298,1.584,301,1.446,302,1.33,308,1.758,309,1.637,317,0.515,318,1.457,319,1.521,320,1.045,321,2.153,322,1.045,323,1.045,324,0.978,325,1.045,326,0.978,327,1.045,328,0.978,329,1.295,330,1.045,331,0.978,332,0.999,333,1.045,334,0.978,335,1.045,336,0.978,337,1.045,338,0.978,339,1.045,340,0.978,341,1.926,342,1.045,343,0.978,344,1.59,345,0.978,346,1.022,347,1.045,348,0.978,349,1.457,350,1.59,351,0.978,352,1.045,353,0.978,354,1.045,355,0.978,356,0.978,357,1.045,358,0.978,359,1.045,360,0.978,361,1.59,362,2.015,363,1.045,364,0.978,365,1.045,366,0.978,367,1.045,368,0.999,369,1.045,370,0.978,371,1.045,372,0.978,373,1.045,374,0.978,375,0.978,376,1.045,377,0.978,378,0.978,379,1.045,380,1.045,420,4.887,470,1.555,474,0.777,494,1.535,498,0.608,545,2.58,546,1.405,593,2.538,745,1.785,754,2.781,755,3.029,797,4.446,806,2.781,849,2.452,881,5.247,882,3.029,1068,3.566,1132,3.264,1194,2.898,1283,3.83,1287,4.446,1314,2.516,1315,2.979,1317,1.904,1318,1.904,1392,3.355,1427,4.827,1551,5.764,1617,2.204,1619,2.748,1654,3.566,1665,4.648,1682,2.343,1959,5.663,2054,3.355,2114,5.863,2118,2.516,2344,3.83,3064,2.343,3121,3.83,3195,4.184,3268,5.194,3270,6.297,3278,7.498,3282,2.516,3292,3.101,3293,4.721,3294,3.355,3295,4.721,3296,4.721,3297,5.716,3298,4.721,3299,6.875,3300,3.101,3301,6.875,3302,3.101,3303,5.716,3304,5.066,3305,5.716,3306,3.101,3307,4.721,3308,3.101,3309,3.101,3310,2.089,3311,3.101,3312,3.101,3313,7.761,3314,6.389,3315,7.243,3316,4.721,3317,4.721,3318,4.721,3319,4.721,3320,4.721,3321,4.721,3322,4.721,3323,4.721,3324,2.898,3325,4.721,3326,4.721,3327,4.184,3328,4.721,3329,4.721,3330,4.721,3331,4.721,3332,4.721,3333,5.877,3334,5.877,3335,5.184,3336,4.721,3337,4.721,3338,4.721,3339,4.721,3340,4.721,3341,4.184,3342,5.663,3343,4.721,3344,6.389,3345,6.389,3346,6.389,3347,5.663,3348,4.721,3349,6.389,3350,4.721,3351,3.83,3352,4.184,3353,4.721,3354,4.721,3355,4.721,3356,5.184,3357,6.297,3358,3.566,3359,6.389,3360,4.721,3361,4.721,3362,4.184,3363,4.721,3364,3.83,3365,4.721,3366,3.029,3367,4.721,3368,4.721,3369,4.721,3370,4.721,3371,4.721,3372,3.566,3373,4.721,3374,4.721,3375,4.721,3376,4.721,3377,4.184,3378,4.184,3379,4.184,3380,4.721,3381,4.721,3382,4.721,3383,4.721,3384,4.721,3385,4.721,3386,4.184,3387,6.674,3388,4.721,3389,4.721,3390,4.721,3391,4.721,3392,4.721,3393,4.721,3394,4.184,3395,4.184,3396,4.721,3397,4.721,3398,4.721,3399,4.721,3400,4.721,3401,4.721,3402,4.721,3403,4.721,3404,4.721,3405,4.721,3406,4.721,3407,4.721,3408,4.721,3409,6.389,3410,4.721,3411,4.184,3412,4.184,3413,4.721,3414,3.101,3415,4.721,3416,3.101,3417,3.101,3418,3.101,3419,3.101,3420,3.101]],["title/modules/InfoDialogModule.html",[381,0.651,399,3.067]],["body/modules/InfoDialogModule.html",[3,0.116,4,0.098,5,0.098,11,0.006,17,0.008,23,0.098,99,0.007,100,0.006,150,0.369,151,0.74,179,0.208,204,1.977,317,1.112,362,2.997,381,0.956,383,1.896,384,1.896,385,2.575,386,1.977,387,1.977,388,2.575,399,6.232,403,2.261,404,1.781,406,2.064,407,2.41,408,4.36,409,3.417,420,4.754,444,2.749,445,2.253,3268,5.052,3282,5.427,3283,5.927,3421,5.927,3422,5.927,3423,5.927,3424,6.688,3425,7.978]],["title/classes/InitializationState.html",[179,0.142,3426,4.036]],["body/classes/InitializationState.html",[3,0.036,4,0.036,5,0.036,8,0.37,11,0.002,12,0.192,13,0.471,17,0.008,18,0.745,19,0.544,20,1.37,23,0.036,46,1.753,53,0.632,68,2.869,82,2.047,95,3.011,99,0.003,100,0.002,101,1.051,103,0.702,105,0.798,114,2.679,117,0.815,118,0.971,120,0.815,122,0.834,125,1.744,127,1.228,129,1.404,131,1.122,141,2.832,145,2.202,146,1.759,150,0.253,151,0.274,153,1.091,177,1.56,179,0.154,180,0.853,181,0.936,183,1.77,193,1.745,194,3.166,197,0.952,199,1.572,205,1.698,215,4.45,216,1.594,219,1.264,223,2.99,225,2.814,233,1.034,236,1.364,247,1.804,252,1.855,277,2.362,281,2.408,284,3.155,290,0.716,299,1.188,312,2.666,318,1.222,319,2.231,404,1.054,449,1.264,455,2.677,474,0.991,476,1.103,498,1.294,503,2.888,544,3.798,546,3.584,565,2.656,593,0.983,606,2.18,649,4.369,650,2.561,653,2.306,716,1.121,717,2.814,722,1.759,734,1.008,736,1.827,740,2.814,745,2.138,746,2.82,763,1.458,765,1.307,786,2.43,810,2.99,849,1.698,872,2.527,878,0.853,1108,1.588,1121,1.188,1301,3.33,1302,1.588,1380,3.537,1396,1.403,1397,1.403,1409,1.403,1522,2.022,1545,1.759,1546,1.121,1558,1.87,1559,2.914,1654,1.87,1665,2.54,1668,2.008,1691,2.244,1692,2.193,1694,2.449,1697,2.449,1700,3.737,1702,1.403,1706,2.008,1707,2.814,1708,2.814,1711,2.022,1712,1.759,1715,2.449,1717,2.193,1719,1.87,1721,1.87,1723,2.666,1727,1.759,1730,2.09,1732,1.667,1745,2.99,1746,1.87,1749,3.212,1753,1.759,1767,4.237,1768,4.237,1772,1.759,1773,1.759,1777,1.667,1778,2.008,1779,2.193,1780,2.008,1781,1.87,1784,3.508,1789,1.87,1807,2.193,1825,2.008,1828,2.008,1834,4.769,1837,2.008,1838,2.193,1839,2.332,1840,2.193,1841,2.008,1856,2.008,1860,3.795,1862,2.54,1863,1.667,1880,2.99,1897,4.733,1902,3.516,2056,1.87,2060,1.519,2061,2.666,2071,2.54,2165,5.016,2233,1.87,2265,2.008,3233,6.018,3294,3.516,3426,4.384,3427,2.193,3428,3.958,3429,4.947,3430,6.923,3431,5.653,3432,5.653,3433,3.958,3434,4.947,3435,2.475,3436,2.475,3437,2.475,3438,2.475,3439,2.475,3440,2.475,3441,4.947,3442,2.475,3443,2.475,3444,2.193,3445,4.384,3446,6.136,3447,4.384,3448,4.384,3449,5.844,3450,4.384,3451,5.479,3452,3.508,3453,4.384,3454,5.653,3455,3.958,3456,5.653,3457,3.958,3458,2.475,3459,2.008,3460,2.475,3461,2.475,3462,2.475,3463,2.475,3464,2.475,3465,2.475,3466,2.475,3467,3.958,3468,2.475,3469,3.958,3470,2.475,3471,2.475,3472,2.475,3473,2.193,3474,6.182,3475,2.475,3476,2.475,3477,2.475,3478,4.384,3479,2.193,3480,3.508,3481,3.958,3482,2.475,3483,6.594,3484,2.475,3485,3.958,3486,2.475,3487,2.475,3488,2.475,3489,4.947,3490,2.475,3491,2.475,3492,2.475,3493,2.475,3494,4.947,3495,2.475,3496,2.475,3497,3.508,3498,2.475,3499,2.475,3500,2.475,3501,6.594,3502,3.958,3503,5.653,3504,3.958,3505,3.958,3506,2.475,3507,4.947,3508,3.958,3509,2.475,3510,2.475,3511,2.475,3512,2.475,3513,3.958,3514,3.958,3515,2.475,3516,2.475,3517,4.947,3518,2.475,3519,2.475,3520,2.475,3521,2.475,3522,2.475,3523,2.475,3524,2.193,3525,2.475,3526,2.475,3527,2.475,3528,5.01,3529,4.947,3530,5.653,3531,3.958,3532,3.958,3533,2.475,3534,2.475,3535,2.475,3536,2.475,3537,2.475,3538,2.475,3539,2.193,3540,2.193,3541,2.475,3542,6.594,3543,3.958,3544,2.475,3545,2.475,3546,2.475,3547,2.475,3548,2.475,3549,2.475,3550,2.475,3551,2.475,3552,1.759,3553,2.475,3554,2.475,3555,3.958,3556,2.475,3557,2.475,3558,2.475,3559,2.475,3560,2.475,3561,2.475,3562,3.958,3563,4.947,3564,2.475,3565,2.475,3566,3.958,3567,2.475,3568,2.475,3569,4.947,3570,4.947,3571,4.947,3572,4.384,3573,2.475,3574,4.947,3575,4.947,3576,2.475,3577,2.475]],["title/interfaces/JsonOntologyNode.html",[0,0.282,2964,3.067]],["body/interfaces/JsonOntologyNode.html",[0,0.513,2,1.211,3,0.074,4,0.074,5,0.074,8,0.753,11,0.004,12,0.392,13,0.794,15,2.504,16,1.118,17,0.008,19,0.617,20,1.888,22,3.654,23,0.116,28,1.888,51,2.789,53,1.059,65,1.671,87,1.063,99,0.006,100,0.004,150,0.273,154,2.494,183,1.288,216,2.745,219,1.499,247,1.073,472,2.586,498,0.989,508,3.938,521,4.204,604,2.789,754,4.694,1301,5.492,2422,3.41,2435,3.233,2554,6.411,2561,3.093,2680,3.394,2958,6.435,2959,4.088,2960,4.088,2961,6.465,2962,6.565,2963,5.416,2964,5.042,2965,6.726,2966,6.726,2967,5.663,2968,6.726,2969,4.088,2970,6.726,2971,6.726,2972,5.416,2973,4.088,2974,4.088,2975,6.073,2976,4.088,2977,4.088,2978,4.088,2979,4.088,2980,5.416,2981,4.088,2982,4.088,2983,4.088,2984,4.088,2985,4.088,2986,4.088,2987,4.088,2988,3.581,2989,5.416,2990,4.088,2991,4.088,2992,4.088,2993,4.088,2994,4.088,2995,3.394,2996,4.088]],["title/interfaces/ListResult.html",[0,0.282,26,2.123]],["body/interfaces/ListResult.html",[0,0.522,1,2.302,2,1.084,3,0.066,4,0.066,5,0.066,6,1.452,7,3.036,8,1.192,9,3.384,10,4.315,11,0.007,12,0.35,13,0.737,14,3.036,15,2.667,16,1.434,17,0.008,18,1.59,19,0.769,20,1.372,21,3.036,22,1.986,23,0.12,24,2.955,25,3.647,26,3.297,27,3.439,28,1.937,29,3.509,30,4.17,31,5.128,32,3.647,33,2.587,34,3.897,35,4.885,36,1.88,37,4.485,38,4.885,39,4.885,40,4.673,41,4.485,42,4.341,43,4.538,44,4.166,45,4.615,46,1.769,47,1.278,48,0.798,49,1.452,50,3.269,51,1.883,52,2.463,53,0.576,54,2.767,55,1.755,56,2.555,57,2.655,58,2.892,59,3.8,60,3.509,61,3.647,62,3.647,63,4.008,64,4.341,65,1.215,66,3.163,67,3.509,68,1.664,69,1.705,70,2.38,71,2.555,72,2.38,73,2.382,74,2.555,75,3.973,76,2.767,77,2.767,78,3.509,79,3.509,80,2.463,81,2.892,82,1.333,83,2.101,84,2.463,85,2.767,86,2.892,87,1.459,88,3.036,89,2.164,90,2.767,91,2.892,92,1.986,93,2.972,94,2.655,95,2.74,96,2.655,97,2.101,98,2.892,99,0.005,100,0.004]],["title/interfaces/Message.html",[0,0.282,1715,2.254]],["body/interfaces/Message.html",[0,0.368,2,1.022,3,0.062,4,0.133,5,0.062,8,0.635,11,0.004,12,0.33,13,0.708,17,0.008,18,1.471,19,0.668,23,0.118,27,3.024,28,1.758,36,1.4,46,0.942,69,1.608,73,1.432,82,1.257,87,0.947,97,1.982,99,0.005,100,0.004,104,2.115,119,3.037,125,2.115,127,0.923,131,1.205,137,4.902,145,1.205,150,0.28,151,0.47,153,1.873,156,1.926,179,0.185,180,2.362,181,1.608,183,2.202,194,3.291,205,1.24,219,0.988,247,1.663,252,0.981,455,2.445,470,1.4,476,1.245,483,4.373,498,1.533,521,3.642,593,3.301,606,1.873,716,1.926,754,2.504,823,2.863,838,3.502,878,2.921,887,2.728,925,2.041,989,4.113,1160,3.747,1220,3.502,1546,1.926,1559,4.038,1691,3.369,1694,2.942,1697,4.32,1702,2.409,1710,2.171,1711,4.506,1715,4.698,1730,3.139,1732,2.863,1759,2.728,1777,4.004,1817,2.863,1863,4.004,1883,4.769,1891,5.196,1912,4.225,1924,2.248,1946,3.815,2060,2.609,2071,2.728,2127,3.021,2128,4.225,3171,5,3236,3.021,3310,2.863,3552,3.021,3578,3.211,3579,4.491,3580,4.225,3581,3.211,3582,3.211,3583,5.902,3584,4.872,3585,3.211,3586,4.491,3587,3.021,3588,3.211,3589,3.211,3590,4.491,3591,3.211,3592,3.211,3593,3.211,3594,3.211,3595,3.211,3596,4.491,3597,3.211,3598,3.211,3599,3.211,3600,3.211,3601,4.225,3602,3.211,3603,4.491,3604,2.863,3605,3.211,3606,3.211,3607,3.211,3608,3.211,3609,3.211,3610,3.211,3611,5.179,3612,3.211,3613,3.211,3614,3.211,3615,3.211,3616,3.211,3617,3.211,3618,3.211,3619,3.211]],["title/classes/MessageChannel.html",[179,0.142,1730,2.404]],["body/classes/MessageChannel.html",[0,0.337,3,0.055,4,0.133,5,0.055,8,1.114,11,0.003,12,0.293,13,0.649,17,0.008,18,1.465,19,0.678,20,0.835,23,0.113,27,3.039,28,1.527,36,0.888,46,0.835,53,0.898,69,1.425,73,1.269,82,1.114,87,1.239,97,2.544,99,0.005,100,0.003,104,1.979,119,2.787,125,1.979,127,1.185,129,1.708,131,1.547,137,5.073,145,1.068,150,0.262,151,0.417,153,1.661,156,1.707,179,0.17,180,2.571,181,1.425,183,2.14,194,3.735,197,1.312,205,1.338,219,0.907,247,1.588,252,1.26,449,1.925,455,2.568,470,1.798,474,1.761,476,1.239,483,4.727,498,1.668,521,3.479,593,3.421,606,2.827,716,1.707,754,3.214,823,2.538,838,2.22,878,2.831,887,2.418,925,1.809,989,3.971,1160,4.252,1220,3.214,1546,1.707,1559,4.583,1691,3.093,1694,2.701,1697,4.349,1702,2.136,1710,2.787,1711,4.652,1715,4.687,1730,3.387,1732,2.538,1759,2.418,1777,3.675,1817,3.675,1863,3.675,1883,4.84,1891,5.074,1912,3.878,1924,2.064,1946,3.501,1986,3.339,2060,3.349,2071,2.418,2127,2.678,2128,3.878,3171,5.026,3236,2.678,3310,2.538,3552,3.878,3578,2.846,3579,2.846,3580,3.878,3581,2.846,3582,2.846,3583,5.637,3584,4.559,3585,2.846,3586,4.122,3587,2.678,3588,2.846,3589,4.122,3590,5.637,3591,4.122,3592,4.122,3593,4.122,3594,2.846,3595,2.846,3596,4.122,3597,4.122,3598,4.122,3599,5.311,3600,2.846,3601,4.997,3602,4.122,3603,4.122,3604,3.675,3605,4.122,3606,2.846,3607,5.311,3608,2.846,3609,2.846,3610,2.846,3611,4.845,3612,2.846,3613,2.846,3614,2.846,3615,2.846,3616,2.846,3617,2.846,3618,2.846,3619,2.846,3620,3.339,3621,5.456,3622,5.456,3623,5.456,3624,5.456,3625,3.768,3626,3.768,3627,3.768,3628,3.768,3629,3.768]],["title/injectables/MessageService.html",[1694,2.254,1924,1.722]],["body/injectables/MessageService.html",[0,0.353,3,0.059,4,0.131,5,0.059,8,0.993,11,0.003,12,0.312,13,0.68,17,0.008,18,1.252,19,0.656,20,0.89,23,0.116,27,2.707,28,1.444,36,0.946,46,0.89,53,0.729,69,1.519,73,1.353,82,1.187,87,1.153,97,1.872,99,0.005,100,0.003,104,2.051,119,2.917,125,2.051,127,1.24,129,1.628,131,1.138,137,4.891,145,1.138,150,0.272,151,0.444,153,1.77,156,1.819,179,0.178,180,2.494,181,2.16,183,2.173,194,3.191,197,1.373,205,1.386,219,0.949,247,1.628,252,0.927,455,2.604,470,1.881,474,1.43,476,1.303,483,4.505,498,1.604,521,3.896,593,3.247,606,1.77,716,1.819,754,2.365,798,5.061,823,3.846,838,2.365,878,3.036,887,2.576,925,3.191,989,3.785,1160,3.632,1220,3.915,1546,2.587,1559,3.915,1691,3.237,1694,3.785,1697,4.43,1702,4.103,1710,2.051,1711,4.572,1715,4.69,1730,3.509,1732,3.846,1759,3.664,1777,3.846,1817,2.704,1863,3.846,1883,4.682,1891,4.923,1912,4.059,1924,2.16,1925,2.365,1946,3.664,2060,2.465,2071,3.664,2127,2.854,2128,4.059,3171,4.476,3236,4.059,3310,2.704,3552,2.854,3578,3.033,3579,3.033,3580,4.059,3581,3.033,3582,3.033,3583,6.004,3584,5.436,3585,3.033,3586,4.314,3587,2.854,3588,3.033,3589,3.033,3590,4.314,3591,3.033,3592,3.033,3593,3.033,3594,3.033,3595,3.033,3596,4.314,3597,3.033,3598,3.033,3599,3.033,3600,3.033,3601,4.059,3602,3.033,3603,4.314,3604,2.704,3605,3.033,3606,3.033,3607,3.033,3608,3.033,3609,3.033,3610,3.033,3611,5.02,3612,3.033,3613,3.033,3614,3.033,3615,3.033,3616,4.314,3617,3.033,3618,4.314,3619,3.033,3620,3.558,3630,4.015,3631,5.71,3632,4.015,3633,4.015,3634,4.015]],["title/interfaces/MessageServiceConfig.html",[0,0.282,3584,3.236]],["body/interfaces/MessageServiceConfig.html",[0,0.371,2,1.038,3,0.063,4,0.131,5,0.063,8,0.645,11,0.004,12,0.335,13,0.715,17,0.008,18,1.302,19,0.617,23,0.119,27,2.815,28,1.501,36,1.017,46,1.532,69,2.272,73,1.454,82,1.776,87,0.957,97,2.012,99,0.005,100,0.004,104,2.133,119,3.069,125,2.133,127,0.937,131,1.223,137,4.914,145,1.223,150,0.283,151,0.478,153,1.902,156,1.955,179,0.187,180,2.381,181,1.632,183,2.21,194,3.318,205,1.253,219,0.999,247,1.672,252,0.996,455,2.457,470,1.422,476,1.252,483,4.402,498,1.541,521,3.792,593,3.12,606,1.902,716,1.955,754,2.542,823,2.907,838,2.542,878,2.978,887,2.769,925,2.072,989,3.889,1160,3.778,1220,3.539,1546,1.955,1559,4.071,1691,3.405,1694,2.974,1697,4.279,1702,2.446,1710,2.205,1711,4.559,1715,4.677,1730,3.172,1732,2.907,1759,2.769,1777,4.047,1817,2.907,1863,4.047,1883,4.628,1891,5.014,1912,4.27,1924,2.272,1946,3.855,2060,2.649,2071,2.769,2127,3.067,2128,4.27,3171,4.655,3236,3.067,3310,2.907,3552,3.067,3578,3.26,3579,3.26,3580,4.27,3581,3.26,3582,3.26,3583,6.145,3584,5.312,3585,4.539,3586,5.935,3587,3.067,3588,3.26,3589,3.26,3590,4.539,3591,3.26,3592,3.26,3593,3.26,3594,3.26,3595,3.26,3596,4.539,3597,3.26,3598,3.26,3599,3.26,3600,3.26,3601,4.27,3602,3.26,3603,4.539,3604,2.907,3605,3.26,3606,3.26,3607,3.26,3608,3.26,3609,3.26,3610,3.26,3611,5.221,3612,3.26,3613,3.26,3614,3.26,3615,3.26,3616,3.26,3617,3.26,3618,3.26,3619,3.26]],["title/interfaces/OMEZarrInfo.html",[0,0.282,1141,2.795]],["body/interfaces/OMEZarrInfo.html",[0,0.443,2,1.351,3,0.125,4,0.105,5,0.082,6,1.811,11,0.005,12,0.437,13,0.853,16,1.332,17,0.008,18,1.486,19,0.724,23,0.125,34,4.163,47,1.425,48,1.268,95,2.776,99,0.006,100,0.005,127,1.221,150,0.23,216,2.309,219,1.426,247,1.827,606,3.158,650,3.247,653,4.001,763,3.31,765,4.766,872,2.871,1121,2.698,1136,4.647,1138,3.185,1139,4.598,1140,4.221,1141,5.1,1142,4.647,1143,4.842,1241,3.185,1770,3.994,2052,4.245,2771,6.236,2946,4.245,3372,4.245,3635,4.245,3636,4.98,3637,4.98,3638,6.35,3639,6.4,3640,4.559,3641,4.559,3642,4.559,3643,4.559,3644,4.559,3645,4.559,3646,4.559,3647,4.559,3648,4.559,3649,4.98,3650,6.991,3651,4.98,3652,4.559,3653,4.98,3654,4.98,3655,4.98,3656,4.98,3657,4.98,3658,4.98,3659,4.98,3660,4.559,3661,4.98,3662,4.98,3663,4.98,3664,4.98,3665,4.98,3666,4.98,3667,4.98,3668,4.98,3669,4.98,3670,4.98,3671,4.98,3672,4.98,3673,4.98]],["title/interfaces/OldRuiData.html",[0,0.282,2566,3.695]],["body/interfaces/OldRuiData.html",[0,0.28,2,1.089,3,0.066,4,0.066,5,0.066,6,1.459,8,0.676,11,0.004,12,0.352,13,0.739,15,2.304,16,1.385,17,0.008,18,1.645,19,0.762,23,0.091,27,3.107,28,1.54,29,4.68,36,2.082,52,3.875,53,0.974,87,0.721,99,0.005,100,0.004,118,1.111,150,0.185,183,1.95,216,2.002,219,1.178,236,2.754,247,1.322,253,2.141,261,4.183,272,1.755,277,2.596,278,3.674,293,3.173,476,0.721,492,5.068,498,1.219,551,4.895,555,2.391,578,2.53,593,2.816,681,3.421,816,2.475,849,2.665,876,4.692,891,5.039,959,3.05,961,3.218,977,3.218,986,4.692,989,2.241,997,4.013,1052,6.009,1121,3.404,1290,5.504,1615,4.169,2426,3.421,2548,5.039,2556,5.039,2566,6.485,2567,5.504,2604,4.013,2680,3.05,2729,5.504,2767,6.761,2825,3.674,2848,5.681,2850,3.218,2883,3.674,3109,5.039,3279,4.414,3366,3.986,3674,4.528,3675,4.528,3676,6.211,3677,7.628,3678,7.628,3679,7.628,3680,7.628,3681,7.628,3682,7.628,3683,7.628,3684,7.993,3685,7.628,3686,4.692,3687,6.211,3688,6.211,3689,5.762,3690,4.013,3691,6.211,3692,4.528,3693,4.528,3694,4.528,3695,3.674,3696,4.528,3697,4.528,3698,4.528,3699,7.993,3700,6.211,3701,4.528,3702,4.528,3703,4.528,3704,4.528,3705,4.528,3706,4.528,3707,4.528,3708,4.528,3709,6.211,3710,6.211,3711,6.211,3712,6.211,3713,6.211,3714,6.211,3715,3.421,3716,3.421,3717,3.421,3718,4.528,3719,6.211,3720,4.528,3721,3.421,3722,4.528,3723,3.421,3724,4.528,3725,3.421,3726,4.528,3727,3.421,3728,4.528,3729,3.421,3730,3.421,3731,3.421,3732,3.421,3733,3.421,3734,4.528,3735,3.421,3736,4.528,3737,3.421,3738,4.528,3739,3.421,3740,4.528,3741,3.421,3742,4.528,3743,3.421,3744,4.528,3745,3.421,3746,4.528,3747,3.421,3748,4.528,3749,3.421,3750,4.528,3751,3.421]],["title/modules/OntologyExplorationModule.html",[381,0.651,400,3.236]],["body/modules/OntologyExplorationModule.html",[3,0.093,4,0.093,5,0.093,11,0.005,17,0.008,23,0.093,65,1.637,99,0.006,100,0.005,150,0.364,151,0.704,179,0.198,204,1.88,317,1.057,381,0.909,383,1.803,384,1.803,385,1.921,386,1.88,387,1.88,388,2.52,400,6.738,403,2.194,404,1.694,406,2.388,407,2.337,423,4.081,444,2.666,445,2.142,3752,5.636,3753,5.636,3754,5.636,3755,6.363,3756,6.715,3757,6.363,3758,4.283,3759,6.359,3760,3.904,3761,5.636,3762,5.159,3763,6.359,3764,4.804,3765,5.636]],["title/interfaces/OntologyNode.html",[0,0.282,2422,2.326]],["body/interfaces/OntologyNode.html",[0,0.393,2,1.529,3,0.093,4,0.093,5,0.093,8,0.95,11,0.005,12,0.494,13,0.921,15,2.792,16,1.424,17,0.008,19,0.734,23,0.093,27,3.536,28,1.886,65,1.637,99,0.006,100,0.005,107,1.841,119,3.954,249,4.086,508,4.264,521,4.218,578,3.152,1285,5.846,2176,4.387,2419,5.636,2422,3.954,2435,5.571,2967,5.5,2995,5.847,3171,5.213,3766,5.636,3767,6.279]],["title/components/OntologySearchComponent.html",[101,0.726,364,1.436]],["body/components/OntologySearchComponent.html",[3,0.079,4,0.042,5,0.042,8,1.048,11,0.006,12,0.345,13,0.529,15,1.851,16,0.99,17,0.008,18,0.836,19,0.624,20,1.9,22,3.562,23,0.042,28,0.964,47,1.198,48,1.242,49,1.975,53,0.935,55,0.812,57,2.616,65,1.682,73,1.832,87,1.057,99,0.004,100,0.007,101,1.166,102,0.903,103,1.259,104,0.884,105,0.923,106,0.965,107,0.829,114,1.608,117,3.031,118,2.266,120,1.463,122,1.496,127,0.964,128,0.717,129,1.72,136,0.795,137,3.835,144,2.198,148,0.943,150,0.31,151,0.317,153,1.262,154,1.417,156,1.297,158,2.323,169,0.903,173,0.903,177,0.903,179,0.089,180,1.53,181,2.938,183,1.695,193,1.957,194,2.942,197,1.068,198,3.935,205,1.656,215,2.973,216,2.261,219,0.738,224,1.449,239,3.413,240,2.198,247,1.158,252,1.942,253,2.119,268,1.262,271,2.064,272,1.109,273,1.758,275,1.228,279,2.464,280,1.929,281,2.075,284,2.719,285,2.872,286,2.536,290,0.829,291,4,297,1.565,299,3.184,300,3.377,303,4.726,308,3.083,309,2.872,315,2.323,317,0.476,318,1.37,319,1.431,320,0.965,321,2.064,322,0.965,323,0.965,324,0.903,325,0.965,326,0.903,327,0.965,328,0.903,329,1.154,330,0.965,331,0.903,332,0.923,333,0.965,334,0.903,335,0.965,336,0.903,337,0.965,338,0.903,339,0.965,340,0.903,341,1.832,342,0.965,343,0.903,344,1.496,345,0.903,346,0.943,347,0.965,348,0.903,349,1.37,350,1.496,351,0.903,352,0.965,353,0.903,354,0.965,355,0.903,356,0.903,357,0.965,358,0.903,359,0.965,360,0.903,361,1.496,362,0.903,363,0.965,364,1.932,365,0.965,366,0.903,367,0.965,368,0.923,369,0.965,370,0.903,371,0.965,372,0.903,373,0.965,374,0.903,375,0.903,376,0.965,377,0.903,378,0.903,379,0.965,380,0.965,423,5.266,453,1.929,470,0.943,474,1.661,476,0.867,498,1.484,503,3.13,508,3.179,565,1.64,716,2.012,724,1.856,734,2.215,745,1.083,746,2.496,765,2.344,797,2.726,806,5.338,824,1.837,843,1.758,847,5.038,878,1.53,894,2.163,1134,2.344,1241,1.623,1284,3.603,1287,3.761,1295,4.629,1315,2.857,1348,2.427,1350,2.726,1377,3.625,1381,1.565,1617,2.035,1620,2.323,1665,2.849,1755,3.935,1767,2.616,1768,2.616,2010,3.603,2044,2.323,2060,2.726,2070,4.413,2158,2.163,2162,2.323,2164,2.163,2173,3.603,2179,2.323,2224,3.354,2240,3.935,2329,2.323,2332,1.512,2422,3.13,2469,2.538,2561,1.758,2938,3.354,2967,3.156,3065,7.595,3067,2.538,3068,2.538,3379,3.935,3572,3.935,3601,3.156,3758,5.528,3760,5.104,3768,2.863,3769,4.44,3770,3.935,3771,4.82,3772,5.438,3773,4.44,3774,5.438,3775,5.438,3776,7.565,3777,7.319,3778,4.44,3779,5.431,3780,4.44,3781,4.44,3782,4.44,3783,2.863,3784,4.713,3785,4.44,3786,5.438,3787,5.381,3788,2.863,3789,4.44,3790,3.603,3791,4.44,3792,5.996,3793,2.863,3794,4.44,3795,4.44,3796,2.863,3797,4.44,3798,4.44,3799,4.44,3800,7.016,3801,2.863,3802,4.44,3803,4.44,3804,4.44,3805,2.863,3806,6.127,3807,4.44,3808,2.863,3809,4.44,3810,2.863,3811,5.438,3812,2.863,3813,4.44,3814,4.44,3815,2.863,3816,2.323,3817,2.538,3818,2.863,3819,2.538,3820,2.538,3821,2.863,3822,2.863,3823,2.863,3824,2.863,3825,2.863,3826,2.323,3827,2.863,3828,2.863,3829,2.863,3830,2.863,3831,2.863,3832,2.863,3833,2.863,3834,2.863,3835,2.863,3836,2.863,3837,2.863,3838,2.863,3839,2.863,3840,4.44,3841,4.44,3842,4.44,3843,4.44,3844,6.127,3845,2.323,3846,2.863,3847,2.863,3848,2.863,3849,4.44,3850,2.538]],["title/modules/OntologySearchModule.html",[381,0.651,3755,3.067]],["body/modules/OntologySearchModule.html",[3,0.094,4,0.094,5,0.094,11,0.005,17,0.008,22,2.852,23,0.094,65,1.27,99,0.007,100,0.005,150,0.379,151,0.716,179,0.202,204,1.913,317,1.076,364,2.985,381,0.925,383,1.834,384,1.834,385,2.539,386,1.913,387,1.913,388,2.539,403,2.217,404,1.723,406,1.997,407,2.362,408,4.275,409,3.306,423,4.152,444,2.695,445,2.18,2188,5.908,2189,4.888,3755,6.191,3758,4.359,3760,3.972,3816,5.25,3817,5.735,3851,5.735,3852,5.735,3853,5.735,3854,6.471,3855,7.821,3856,7.821,3857,7.821,3858,7.821,3859,6.471,3860,6.471]],["title/injectables/OntologySearchService.html",[1924,1.722,3784,3.236]],["body/injectables/OntologySearchService.html",[0,0.277,3,0.042,4,0.042,5,0.042,8,1.098,11,0.006,12,0.619,13,0.534,15,2.664,16,1.355,17,0.008,18,1.032,19,0.657,20,0.994,23,0.103,28,1.65,36,1.292,53,0.901,57,2.641,65,1.769,73,1.511,87,1.124,99,0.004,100,0.006,107,1.931,119,3.881,128,1.373,129,1.617,131,0.822,132,2.353,137,3.646,141,2.032,150,0.332,151,0.321,153,1.278,154,2.714,156,1.314,179,0.09,180,2.126,181,2.074,183,2.228,194,2.153,197,1.078,205,1.287,212,3.638,216,2.15,219,1.348,236,0.999,237,4.069,240,4.315,247,1.565,248,2.451,249,3.724,259,1.644,455,2.015,470,0.955,472,1.124,474,1.766,476,0.873,498,1.636,508,4.085,521,2.876,593,1.152,631,3.187,704,3.518,736,2.025,755,2.877,756,1.481,765,3.522,806,5.361,838,1.708,843,5.053,847,2.752,849,1.924,850,2.877,878,2.126,1006,1.644,1134,1.531,1300,2.19,1348,1.585,1546,2.032,1557,2.061,1643,1.861,1741,3.387,1911,2.353,1924,2.333,1925,1.708,1944,2.19,1946,1.861,1956,4.66,2038,1.481,2045,2.19,2051,2.19,2061,3.02,2073,2.19,2176,1.644,2224,4.66,2332,3.257,2422,4.551,2426,2.19,2435,5.111,2465,6.164,2554,1.953,2561,1.78,2631,3.974,2770,3.638,2964,1.953,2988,2.061,2995,1.953,3294,2.061,3324,1.78,3366,2.877,3459,2.353,3604,1.953,3760,4.786,3767,2.353,3784,4.385,3787,2.353,3790,2.353,3792,4.141,3826,3.638,3845,3.638,3861,6.326,3862,2.353,3863,3.974,3864,3.974,3865,4.141,3866,4.484,3867,4.484,3868,4.484,3869,5.467,3870,2.9,3871,5.467,3872,4.875,3873,4.484,3874,5.912,3875,3.974,3876,2.9,3877,3.974,3878,3.974,3879,7.672,3880,2.9,3881,3.974,3882,3.974,3883,5.467,3884,3.974,3885,3.974,3886,2.9,3887,3.974,3888,3.974,3889,2.9,3890,2.9,3891,3.974,3892,3.974,3893,5.467,3894,2.9,3895,3.974,3896,3.974,3897,2.19,3898,2.57,3899,2.57,3900,2.57,3901,2.57,3902,3.974,3903,2.57,3904,2.19,3905,4.155,3906,2.57,3907,2.57,3908,4.859,3909,1.953,3910,3.638,3911,2.353,3912,2.57,3913,5.912,3914,3.387,3915,3.387,3916,2.57,3917,2.57,3918,3.974,3919,2.57,3920,2.57,3921,2.57,3922,2.57,3923,2.57,3924,2.57,3925,2.57,3926,2.57,3927,2.57,3928,2.57,3929,2.57,3930,2.57,3931,5.467,3932,2.57,3933,2.57,3934,2.57,3935,4.859,3936,4.859,3937,3.974,3938,2.57,3939,2.57,3940,3.974,3941,2.57,3942,4.859,3943,2.57,3944,2.353,3945,2.57,3946,2.57,3947,2.57,3948,2.57,3949,2.57,3950,2.57,3951,2.57,3952,2.57,3953,2.57,3954,2.57,3955,2.57,3956,2.57,3957,2.57,3958,2.57,3959,2.57,3960,3.974,3961,2.57,3962,2.57,3963,2.57,3964,2.57,3965,2.57,3966,2.57,3967,2.57,3968,2.57,3969,2.57,3970,2.57,3971,2.57,3972,2.57,3973,3.974,3974,2.57,3975,3.974,3976,3.974,3977,3.974,3978,3.974,3979,2.57,3980,2.57,3981,2.57,3982,2.57,3983,2.57,3984,2.57,3985,3.974,3986,3.974,3987,2.57,3988,2.353,3989,2.57,3990,2.57]],["title/interfaces/OntologySelection.html",[0,0.282,157,3.44]],["body/interfaces/OntologySelection.html",[0,0.429,2,1.669,3,0.101,4,0.101,5,0.101,11,0.006,12,0.54,13,0.971,15,2.699,16,1.379,17,0.008,19,0.714,23,0.101,28,1.941,65,1.362,99,0.007,100,0.006,150,0.284,157,6.16,508,3.145,578,3.527,2422,4.565,2762,7.92,3766,6.151,3991,6.94]],["title/components/OntologySelectionComponent.html",[101,0.726,366,1.436]],["body/components/OntologySelectionComponent.html",[3,0.094,4,0.056,5,0.056,8,0.965,11,0.003,12,0.297,13,0.655,16,0.822,17,0.008,19,0.68,23,0.056,24,2.301,36,1.297,47,1.355,48,1.383,49,1.775,53,0.903,55,1.082,65,1.853,66,3.992,73,1.855,87,0.877,99,0.005,100,0.006,101,1.376,102,1.203,103,2.005,104,1.178,105,1.23,106,1.286,107,2.569,114,1.91,117,3.107,118,2.314,120,1.814,122,1.855,125,1.178,128,0.956,129,1.755,131,1.561,134,5.263,135,4.468,136,1.059,141,1.814,148,1.257,150,0.33,151,0.422,157,5.343,158,4.468,159,5.817,169,1.203,173,1.203,177,1.203,179,0.119,180,1.897,181,2.083,182,4.16,183,1.651,197,1.324,205,1.148,219,0.634,224,1.721,232,4.16,237,4.357,238,3.01,239,3.844,240,1.889,290,1.105,317,0.634,318,1.699,319,1.775,320,1.286,321,2.383,322,1.286,323,1.286,324,1.203,325,1.286,326,1.203,327,1.286,328,1.203,329,1.332,330,1.286,331,1.203,332,1.23,333,1.286,334,1.203,335,1.286,336,1.203,337,1.286,338,1.203,339,1.286,340,1.203,341,2.176,342,1.286,343,1.203,344,1.855,345,1.203,346,1.257,347,1.286,348,1.203,349,1.699,350,1.855,351,1.203,352,1.286,353,1.203,354,1.286,355,1.203,356,1.203,357,1.286,358,1.203,359,1.286,360,1.203,361,1.855,362,1.203,363,1.286,364,1.203,365,1.286,366,2.23,367,1.286,368,2.279,369,1.286,370,1.203,371,1.286,372,1.203,373,1.286,374,1.203,375,1.203,376,1.286,377,1.203,378,1.203,379,1.286,380,1.286,423,5.39,455,1.153,470,1.814,474,1.379,476,0.608,494,1.889,498,0.749,503,2.813,508,3.54,565,2.034,606,2.427,723,2.243,724,2.301,730,3.534,734,2.631,736,2.034,744,2.712,745,2.955,746,2.243,797,3.966,806,4.603,878,2.226,1134,2.907,1156,4.212,1405,4.88,1406,4.16,1407,2.813,1522,3.613,1956,4.16,2038,1.95,2176,3.121,2422,3.992,3758,5.658,3760,2.343,3762,6.815,3764,2.883,3770,5.725,3784,6.061,3819,3.382,3820,3.382,3872,2.449,3905,2.57,3988,3.096,3992,3.816,3993,5.506,3994,6.46,3995,5.506,3996,6.46,3997,6.46,3998,6.46,3999,3.816,4000,5.506,4001,3.816,4002,5.506,4003,3.816,4004,3.816,4005,5.506,4006,5.506,4007,3.816,4008,3.816,4009,5.506,4010,3.816,4011,3.816,4012,3.382,4013,3.816,4014,3.816]],["title/modules/OntologySelectionModule.html",[381,0.651,3756,3.236]],["body/modules/OntologySelectionModule.html",[3,0.094,4,0.094,5,0.094,11,0.005,17,0.008,23,0.094,65,1.649,99,0.007,100,0.005,150,0.366,151,0.716,179,0.202,204,1.913,317,1.076,366,2.985,381,0.925,383,1.834,384,1.834,385,2.539,386,1.913,387,1.913,388,2.539,403,2.217,404,1.723,406,2.413,407,2.362,423,4.152,444,2.695,445,2.18,3755,6.119,3756,6.703,3757,6.119,3758,4.359,3760,3.972,3761,5.735,3762,5.25,3764,4.888,3765,5.735,4015,5.735,4016,5.735,4017,6.471,4018,5.735,4019,6.471,4020,6.471]],["title/injectables/OntologyState.html",[1924,1.722,3872,2.922]],["body/injectables/OntologyState.html",[0,0.349,3,0.082,4,0.082,5,0.082,8,1.073,11,0.005,12,0.438,13,0.855,16,1.073,17,0.008,19,0.465,20,1.592,23,0.105,27,2.297,28,1.225,36,1.328,53,0.917,65,1.825,87,0.898,99,0.006,100,0.005,107,2.542,119,4.389,125,2.71,127,1.56,129,1.682,141,3.005,150,0.359,151,0.624,154,2.791,156,2.555,179,0.176,183,1.441,197,1.727,205,1.498,240,4.471,474,1.412,476,1.144,494,2.791,498,1.106,508,3.769,604,3.001,704,3.619,756,3.669,797,5.391,1723,4.837,1924,2.716,1925,3.322,1973,5.322,1996,4.85,2035,4.408,2036,3.462,2037,3.462,2038,2.881,2079,3.798,2422,3.669,3865,5.969,3872,4.608,3904,4.26,3905,5.603,3914,4.26,3915,4.26,4021,4.998,4022,7.181,4023,6.364,4024,5.639,4025,7.372,4026,6.364,4027,5.639,4028,6.364,4029,5.639,4030,4.998]],["title/interfaces/OntologyStateModel.html",[0,0.282,3905,3.067]],["body/interfaces/OntologyStateModel.html",[0,0.366,2,1.425,3,0.086,4,0.086,5,0.086,8,0.885,11,0.005,12,0.461,13,0.882,16,1.265,17,0.008,19,0.699,23,0.108,27,3.018,28,1.287,36,1.745,53,0.757,65,1.79,99,0.006,100,0.005,107,2.34,119,4.66,125,2.286,141,2.973,150,0.364,151,0.656,154,2.933,156,2.685,179,0.185,183,1.515,205,1.236,240,4.554,476,0.944,492,4.548,508,3.838,604,2.476,704,4.755,756,3.785,797,4.548,1723,3.991,1924,2.802,1973,4.991,1996,4.548,2035,4.548,2036,3.637,2037,3.637,2038,3.027,2079,3.991,2422,3.785,3865,4.476,3872,3.803,3904,4.476,3905,5.445,3914,5.597,3915,5.597,4021,5.252,4023,5.252,4025,6.566,4026,5.252,4028,5.252,4030,5.252]],["title/modules/OntologyTreeModule.html",[381,0.651,3757,3.067]],["body/modules/OntologyTreeModule.html",[3,0.095,4,0.095,5,0.095,11,0.005,17,0.008,23,0.095,65,1.284,99,0.007,100,0.005,150,0.377,151,0.724,179,0.204,204,1.934,317,1.087,368,3.055,381,0.935,383,1.854,384,1.854,385,2.551,386,1.934,387,1.934,388,2.551,403,2.232,404,1.742,406,2.019,407,2.378,408,4.303,409,3.342,423,4.198,444,2.713,445,2.204,2483,6.977,2484,5.798,2487,6.977,2488,5.798,3757,6.204,3758,4.406,3764,4.942,4012,5.798,4031,5.798,4032,5.798,4033,5.798,4034,6.542,4035,7.872,4036,6.542]],["title/classes/PictureInPictureViewer.html",[179,0.142,4037,3.44]],["body/classes/PictureInPictureViewer.html",[0,0.217,3,0.051,4,0.051,5,0.051,6,2.193,11,0.003,12,0.273,13,0.617,16,0.525,17,0.008,18,1.598,19,0.748,20,1.786,23,0.09,28,1.127,46,1.15,47,1.372,48,0.918,53,1.051,87,1.311,92,2.716,95,3.188,99,0.004,100,0.003,125,1.601,127,1.751,129,1.988,145,1.747,150,0.212,179,0.11,193,1.55,197,1.247,205,1.716,219,1.411,235,3.631,247,1.448,252,1.959,271,2.444,277,1.469,281,2.012,284,1.362,286,1.639,329,0.662,449,1.796,455,2.737,457,4.176,470,1.158,472,2.388,474,2.061,476,0.826,494,2.567,495,2.835,498,1.762,517,1.55,523,4.626,525,3.758,528,3.056,530,2.168,536,3.184,604,2.575,650,4.023,669,2.739,1112,2.656,1131,2.158,1132,1.796,1133,1.74,1134,1.856,1136,3.631,1137,3.328,1138,1.993,1146,3.328,1147,2.158,1153,3.328,1154,3.328,1156,3.476,1157,3.184,1158,3.184,1159,4.454,1160,1.922,1168,4.582,1169,5.293,1172,3.494,1173,3.494,1175,3.328,1177,3.328,1178,3.494,1180,2.256,1182,3.494,1183,5.981,1184,3.494,1185,3.494,1186,2.94,1187,3.328,1194,3.783,1200,4.151,1202,2.368,1207,2.368,1217,2.368,1223,5.039,1224,5.039,1229,4.151,1232,3.955,1239,3.494,1247,2.368,1249,2.368,1250,3.494,1255,4.151,1261,2.256,1697,2.567,2080,2.368,2559,2.656,2997,4.597,2998,4.597,2999,4.597,3000,4.597,3001,4.597,3019,3.116,3021,3.116,3030,3.116,4037,3.918,4038,5.52,4039,5.52,4040,5.52,4041,3.516,4042,9.283,4043,3.516,4044,3.516,4045,3.516,4046,3.516,4047,3.516,4048,3.516,4049,3.516,4050,3.516,4051,3.516,4052,3.516,4053,3.516,4054,3.516,4055,3.516,4056,3.516,4057,3.516,4058,3.516,4059,3.516,4060,3.516,4061,3.516,4062,3.516,4063,3.516,4064,3.516,4065,3.516,4066,3.516,4067,3.516,4068,3.516,4069,3.516,4070,3.516,4071,3.516,4072,3.516,4073,6.029,4074,6.029,4075,3.116,4076,4.208,4077,5.157,4078,4.597,4079,3.116,4080,3.116,4081,3.116,4082,4.597,4083,3.116,4084,3.116,4085,4.597,4086,5.462,4087,5.462,4088,5.462,4089,3.116,4090,3.116,4091,3.116,4092,3.116,4093,3.116,4094,5.52,4095,3.116,4096,3.116]],["title/interfaces/PictureInPictureViewerProps.html",[0,0.282,4040,3.695]],["body/interfaces/PictureInPictureViewerProps.html",[0,0.333,2,1.296,3,0.079,4,0.079,5,0.079,6,1.737,11,0.004,12,0.419,13,0.83,16,0.805,17,0.008,18,1.595,19,0.576,23,0.113,28,1.515,46,1.195,47,1.398,48,1.235,95,2.703,99,0.006,100,0.004,145,2.193,150,0.285,179,0.168,193,2.376,219,1.527,247,1.741,252,2.121,271,2.606,277,2.253,281,2.287,284,2.089,286,2.513,329,1.015,472,2.089,476,1.112,523,4.11,525,4.296,604,3.232,650,3.161,669,3.684,1112,4.073,1131,3.309,1132,2.754,1133,2.668,1136,4.11,1137,3.46,1138,3.056,1157,3.309,1158,4.748,1159,5.2,1169,3.955,1175,4.477,1180,3.46,1183,4.477,1187,3.46,1223,3.46,1224,3.46,1697,3.453,2080,3.631,2559,4.073,4037,4.073,4038,4.374,4039,4.374,4040,6.276,4073,7.249,4074,7.249,4075,4.778,4076,6.637,4077,6.362,4078,6.183,4079,4.778,4080,4.778,4081,4.778,4082,6.183,4083,4.778,4084,4.778,4085,6.183,4086,6.855,4087,6.855,4088,6.855,4089,4.778,4090,4.778,4091,4.778,4092,4.778,4093,4.778,4094,6.637,4095,4.778,4096,4.778]],["title/interfaces/PureImageViewerLayer.html",[0,0.282,3100,3.236]],["body/interfaces/PureImageViewerLayer.html",[0,0.335,2,1.304,3,0.079,4,0.079,5,0.079,11,0.005,12,0.603,13,0.833,15,2.625,16,1.388,17,0.008,18,1.775,19,0.763,23,0.12,28,1.888,33,2.266,36,1.277,46,1.96,48,0.96,82,1.603,99,0.006,100,0.005,145,1.537,150,0.222,179,0.169,180,1.868,199,2.153,219,1.164,224,1.865,227,5.681,228,3.853,239,3.957,247,1.49,248,2.963,252,1.252,253,1.637,272,2.713,298,3.577,300,2.266,329,1.732,472,2.101,565,2.864,603,3.853,716,2.457,726,4.096,1341,4.167,1350,3.328,1351,3.194,1363,4.493,1373,3.479,1376,3.479,1380,2.77,1391,4.399,1402,2.77,1408,4.096,1541,6.032,1554,6.032,1602,6.032,3099,4.399,3100,5.513,3101,6.411,3102,6.032,3104,4.805,3106,5.681,3108,4.805,3109,4.399,3124,4.805,3125,4.805,3129,4.399,3130,4.805,3131,4.805,3132,4.805,3133,4.805,3134,4.805,3135,4.805,3136,4.805,3137,4.805,3138,4.805,3139,4.805,3140,4.805,3141,4.805,3142,4.805,3143,4.805]],["title/components/ResultsBrowserComponent.html",[101,0.726,370,1.436]],["body/components/ResultsBrowserComponent.html",[1,3.183,3,0.091,4,0.052,5,0.052,8,0.785,11,0.007,12,0.278,13,0.626,15,1.588,16,0.785,17,0.008,19,0.652,20,1.166,23,0.052,24,3.055,26,3.408,36,1.722,46,1.166,47,1.321,48,1.434,49,2.212,53,0.796,55,1.015,65,1.222,68,1.942,82,2.26,87,0.571,89,2.525,93,2.525,99,0.004,100,0.008,101,1.258,102,1.129,103,1.491,104,1.105,105,1.154,106,1.207,107,1.037,112,3.737,114,1.842,117,3.091,118,2.306,120,1.732,122,1.771,127,0.778,128,0.897,129,1.725,131,2.297,133,4.624,136,2.365,141,1.732,148,1.18,150,0.215,151,0.396,152,1.72,169,1.129,173,1.129,177,1.129,179,0.112,183,0.916,197,1.264,199,2.088,205,1.097,213,4.266,219,0.874,224,1.659,238,2.874,239,2.451,247,0.762,249,2.776,252,0.827,259,2.98,268,3.481,269,3.084,270,2.11,271,2.099,273,2.199,274,1.958,275,2.673,277,1.497,279,2.383,281,1.842,284,2.414,285,3.624,286,3.854,289,1.891,290,1.037,292,1.891,299,2.525,302,1.537,305,2.11,312,2.413,313,3.174,315,2.906,317,0.595,318,1.623,319,2.008,320,1.207,321,2.312,322,1.207,323,1.207,324,1.129,325,1.207,326,1.129,327,1.207,328,1.129,329,1.293,330,1.207,331,1.129,332,1.154,333,1.207,334,1.129,335,1.207,336,1.129,337,1.207,338,1.129,339,1.207,340,1.129,341,2.099,342,1.207,343,1.129,344,1.771,345,1.129,346,1.18,347,1.207,348,1.129,349,1.623,350,1.771,351,1.129,352,1.207,353,1.129,354,1.207,355,1.129,356,1.129,357,1.207,358,1.129,359,1.207,360,1.129,361,1.771,362,1.129,363,1.207,364,1.129,365,1.207,366,1.129,367,1.207,368,1.154,369,1.207,370,2.164,371,1.207,372,1.129,373,1.207,374,1.129,375,1.129,376,1.207,377,1.129,378,1.129,379,1.207,380,1.207,430,6.399,474,0.897,476,0.571,498,0.703,503,3.904,546,1.623,551,2.298,565,1.942,723,2.142,724,2.197,730,3.374,732,3.374,734,2.537,745,3.223,746,2.796,1135,3.542,1283,4.266,1298,2.706,1315,1.67,1317,2.199,1318,2.199,1319,4.428,1320,3.737,1363,3.998,1364,4.66,1375,2.546,1548,5.185,1559,3.098,1606,2.199,1614,2.03,1621,3.972,1648,4.266,1653,3.737,1664,3.374,1803,4.66,1977,5.055,2219,3.737,2287,4.66,2332,1.891,2344,4.266,2389,5.569,3064,4.706,3163,4.66,3244,4.66,3850,3.174,4097,6.245,4098,3.582,4099,5.258,4100,6.864,4101,6.864,4102,5.258,4103,5.258,4104,6.23,4105,5.258,4106,6.23,4107,6.23,4108,5.258,4109,6.23,4110,7.311,4111,6.23,4112,3.582,4113,3.582,4114,3.582,4115,3.582,4116,5.258,4117,3.582,4118,5.258,4119,5.258,4120,6.23,4121,3.582,4122,8.405,4123,3.582,4124,5.258,4125,5.258,4126,5.258,4127,3.582,4128,4.66,4129,5.258,4130,5.258,4131,5.258,4132,3.582,4133,5.258,4134,5.258,4135,6.23,4136,3.174,4137,3.174,4138,3.174]],["title/components/ResultsBrowserItemComponent.html",[101,0.726,372,1.436]],["body/components/ResultsBrowserItemComponent.html",[3,0.111,4,0.058,5,0.058,8,1.079,11,0.007,12,0.311,15,2.002,17,0.008,19,0.469,23,0.058,26,3.09,36,1.701,37,4.254,41,3.904,42,2.452,43,2.564,44,2.353,47,1.575,48,1.477,49,1.834,51,2.378,53,0.727,55,1.132,56,4.094,65,1.3,68,1.475,89,2.732,93,2.732,99,0.005,100,0.007,101,1.301,102,1.26,103,1.613,104,1.233,105,1.287,106,1.346,107,1.156,112,4.044,114,1.959,117,3.117,118,2.324,120,1.875,122,1.917,127,1.236,128,1,129,1.411,131,2.047,136,2.536,148,1.316,150,0.233,151,0.442,152,1.918,169,1.26,173,1.26,177,1.26,179,0.124,183,1.021,193,1.761,197,1.368,199,1.587,205,1.187,215,4.172,224,1.765,236,2.283,248,3.11,268,2.921,269,1.977,271,2.233,272,1.548,273,3.493,274,2.183,279,1.81,280,2.691,281,2.257,284,2.205,285,2.109,289,2.109,290,1.156,292,3.499,293,2.041,295,2.109,300,1.669,301,2.653,302,2.441,317,0.664,318,1.756,319,1.834,320,1.346,321,2.433,322,1.346,323,1.346,324,1.26,325,1.346,326,1.26,327,1.346,328,1.26,329,1.36,330,1.346,331,1.26,332,1.287,333,1.346,334,1.26,335,1.346,336,1.26,337,1.346,338,1.26,339,1.346,340,1.26,341,2.233,342,1.346,343,1.26,344,1.917,345,1.26,346,1.316,347,1.346,348,1.26,349,1.756,350,1.917,351,1.26,352,1.346,353,1.26,354,1.346,355,1.26,356,1.26,357,1.346,358,1.26,359,1.346,360,1.26,361,1.917,362,1.26,363,1.346,364,1.26,365,1.346,366,1.26,367,1.346,368,1.287,369,1.346,370,2.09,371,1.346,372,2.277,373,1.346,374,1.26,375,1.26,376,1.346,377,1.26,378,1.26,379,1.346,380,1.346,430,5.133,476,0.907,498,0.784,546,1.81,723,2.317,724,2.378,734,2.699,736,1.475,745,2.732,746,2.941,763,2.353,765,3.499,769,5.133,1169,3.225,1284,4.616,1301,3.352,1314,3.241,1315,2.653,1317,3.493,1318,2.452,1319,2.839,1379,2.183,1381,2.183,1393,3.54,1546,2.578,1548,4.298,1613,3.241,1620,5.377,1642,2.452,1653,4.71,1664,2.564,2329,3.241,2332,2.109,2441,5.043,2460,6.401,3058,4.616,3066,3.54,3091,5.043,3181,3.54,3182,3.241,4097,5.456,4136,3.54,4139,5.86,4140,3.995,4141,6.627,4142,5.69,4143,7.222,4144,6.627,4145,3.995,4146,6.401,4147,3.995,4148,5.69,4149,3.995,4150,5.69,4151,5.69,4152,5.69,4153,3.995,4154,5.69,4155,5.69,4156,5.69,4157,3.995,4158,3.995,4159,3.995,4160,3.995,4161,3.995,4162,3.995,4163,3.995,4164,3.995,4165,3.995]],["title/modules/ResultsBrowserItemModule.html",[381,0.651,4166,3.236]],["body/modules/ResultsBrowserItemModule.html",[3,0.097,4,0.097,5,0.097,11,0.006,17,0.008,23,0.097,99,0.007,100,0.007,136,2.365,150,0.361,151,0.739,179,0.208,204,1.975,317,1.11,372,2.997,381,0.955,383,1.893,384,1.893,385,2.574,386,1.975,387,1.975,388,2.574,403,2.26,404,1.779,406,2.061,407,2.408,408,4.357,409,3.412,430,4.747,444,2.747,445,2.25,4097,5.045,4139,5.419,4166,6.574,4167,5.919,4168,5.919,4169,5.919,4170,6.679,4171,6.679]],["title/modules/ResultsBrowserModule.html",[381,0.651,401,3.236]],["body/modules/ResultsBrowserModule.html",[3,0.096,4,0.096,5,0.096,11,0.005,17,0.008,23,0.096,99,0.007,100,0.007,136,2.187,150,0.367,151,0.725,179,0.204,204,1.937,317,1.089,370,2.99,381,0.936,383,1.857,384,1.857,385,2.552,386,1.937,387,1.937,388,2.552,401,6.649,403,2.234,404,1.745,406,2.431,407,2.38,430,5.6,444,2.715,445,2.207,4097,4.949,4139,5.315,4166,6.476,4172,5.806,4173,5.806,4174,6.55,4175,5.806,4176,6.55,4177,6.55,4178,6.55,4179,7.879,4180,6.55]],["title/components/SchemeDropdownComponent.html",[101,0.726,374,1.436]],["body/components/SchemeDropdownComponent.html",[3,0.092,4,0.053,5,0.053,8,0.543,11,0.003,12,0.572,13,0.633,15,2.222,17,0.008,18,1.302,19,0.634,20,1.393,22,3.242,23,0.053,47,1.329,48,1.36,49,2.228,53,0.803,55,1.031,65,1.233,69,2.615,86,3.412,87,0.579,99,0.004,100,0.005,101,1.001,102,1.147,103,1.507,104,1.122,105,1.172,106,1.225,107,1.053,114,1.858,117,3.095,118,2.305,120,1.752,122,1.791,127,1.365,128,0.911,129,1.635,136,1.009,144,3.422,148,1.198,150,0.218,151,0.402,169,1.147,173,1.147,177,1.147,179,0.113,193,1.603,197,1.278,199,1.444,205,1.442,224,2.48,238,3.779,239,3.582,252,1.451,268,3.498,269,1.8,270,2.142,271,2.588,275,2.696,277,1.52,279,2.409,281,2.494,283,2.77,284,2.06,286,1.695,289,1.92,290,1.053,291,4.466,295,2.807,296,1.695,297,1.987,299,2.553,300,3.211,301,1.695,302,1.56,306,1.92,307,3.264,308,3.562,309,3.318,311,2.95,317,0.604,318,1.641,319,1.713,320,1.225,321,2.329,322,1.225,323,1.225,324,1.147,325,1.225,326,1.147,327,1.225,328,1.147,329,1.447,330,1.225,331,1.147,332,1.172,333,1.225,334,1.147,335,1.225,336,1.147,337,1.225,338,1.147,339,1.225,340,1.147,341,2.117,342,1.225,343,1.147,344,1.791,345,1.147,346,1.198,347,1.225,348,1.147,349,2.133,350,1.791,351,1.147,352,1.225,353,1.147,354,1.225,355,1.147,356,1.147,357,1.225,358,1.147,359,1.225,360,1.147,361,1.791,362,1.147,363,1.225,364,1.147,365,1.225,366,1.147,367,1.225,368,1.172,369,1.225,370,1.147,371,1.225,372,1.147,373,1.225,374,2.18,375,1.147,376,1.225,377,1.147,378,1.147,379,1.225,380,1.225,404,1.416,453,2.449,474,0.911,476,0.579,498,1.043,530,2.222,632,2.95,716,2.409,723,2.165,724,2.222,734,2.56,736,2.553,745,2.377,746,2.165,847,4.516,1108,2.333,1288,3.223,1295,4.747,1315,3.869,1332,1.648,1341,3.687,1359,2.807,1372,3.702,1374,3.223,1375,2.584,1376,4.033,1379,2.906,1380,2.716,1381,2.906,1382,2.747,1412,5.099,1520,4.033,1523,4.016,1527,4.314,1538,5.099,1551,3.779,1606,2.232,1607,2.449,1608,3.779,1609,2.584,1610,2.449,1611,2.449,1613,2.95,1614,2.061,1618,3.223,1621,4.016,1768,2.142,2133,5.61,2134,5.57,2135,4.712,2149,2.95,2158,2.747,2168,2.95,2176,2.061,2332,1.92,3052,4.747,3190,6.439,3771,5.57,3779,6.128,4137,4.712,4181,7.033,4182,3.636,4183,5.316,4184,6.284,4185,5.316,4186,4.314,4187,3.636,4188,3.636,4189,3.636,4190,3.636,4191,5.316,4192,3.636,4193,5.316,4194,3.636,4195,2.747,4196,3.636,4197,3.636,4198,3.636,4199,3.636,4200,3.636,4201,3.636,4202,3.636,4203,3.636,4204,3.636,4205,3.636,4206,3.636,4207,3.636,4208,8.434,4209,5.316]],["title/modules/SchemeDropdownModule.html",[381,0.651,3187,3.236]],["body/modules/SchemeDropdownModule.html",[3,0.094,4,0.094,5,0.094,11,0.005,17,0.008,22,2.837,23,0.094,99,0.006,100,0.005,150,0.376,151,0.712,179,0.2,204,1.903,224,1.714,317,1.07,374,2.983,381,0.92,383,1.824,384,1.824,385,2.533,386,1.903,387,1.903,388,2.533,403,2.21,404,1.714,406,2.406,407,2.355,444,2.686,445,2.168,1332,2.916,1333,4.862,1383,6.112,1632,5.704,2188,5.889,2189,4.862,2190,6.325,2191,5.222,2192,5.704,3187,6.63,3190,5.222,4181,5.704,4195,4.862,4210,5.704,4211,5.704,4212,6.436,4213,5.704,4214,6.436,4215,7.795,4216,6.436]],["title/interfaces/SearchResult.html",[0,0.282,3792,3.44]],["body/interfaces/SearchResult.html",[0,0.369,2,0.802,3,0.049,4,0.049,5,0.049,8,0.498,11,0.006,12,0.652,13,0.594,15,2.566,16,1.315,17,0.008,18,1.249,19,0.637,20,0.74,23,0.109,28,1.724,36,1.408,57,1.966,65,1.715,99,0.004,100,0.007,107,2.055,119,3.944,128,1.496,131,0.946,132,2.707,137,3.266,141,1.969,150,0.343,151,0.369,153,1.471,154,2.958,156,1.512,179,0.104,180,2.059,181,2.26,183,2.278,194,1.602,205,1.246,212,2.707,216,2.288,219,1.394,236,1.15,237,3.626,240,4.326,247,1.643,248,1.824,249,3.155,259,1.891,455,1.805,472,1.293,476,0.952,498,1.515,508,4.112,521,3.091,593,1.325,631,2.372,704,3.835,736,2.207,755,2.141,756,1.705,765,3.155,806,5.302,838,2.939,843,4.572,847,2.048,849,1.432,850,3.202,878,1.719,1006,1.891,1134,2.634,1300,2.521,1348,2.727,1546,1.512,1557,2.372,1643,2.141,1741,2.521,1911,2.707,1924,2.26,1944,2.521,1946,2.141,1956,3.769,2038,1.705,2045,2.521,2051,2.521,2061,2.248,2073,2.521,2176,1.891,2224,3.769,2332,2.634,2422,4.598,2426,2.521,2435,4.78,2465,6.043,2554,2.248,2561,2.048,2770,4.048,2964,2.248,2988,2.372,2995,2.248,3294,2.372,3324,3.063,3366,2.141,3459,2.707,3604,2.248,3760,2.048,3767,2.707,3784,3.546,3787,4.048,3790,2.707,3792,4.514,3826,2.707,3845,2.707,3861,2.707,3862,2.707,3863,2.957,3864,2.957,3865,2.521,3869,2.957,3871,4.422,3872,4.255,3874,5.296,3875,2.957,3877,2.957,3878,2.957,3879,7.434,3881,2.957,3882,2.957,3883,4.422,3884,2.957,3885,2.957,3887,2.957,3888,2.957,3891,2.957,3892,2.957,3893,4.422,3895,2.957,3896,2.957,3897,2.521,3898,2.957,3899,2.957,3900,2.957,3901,2.957,3902,4.422,3903,2.957,3904,2.521,3905,4.466,3906,2.957,3907,4.422,3908,6.601,3909,2.248,3910,4.048,3911,2.707,3912,2.957,3913,6.291,3914,3.769,3915,3.769,3916,2.957,3917,2.957,3918,4.422,3919,2.957,3920,2.957,3921,2.957,3922,2.957,3923,2.957,3924,2.957,3925,2.957,3926,2.957,3927,2.957,3928,2.957,3929,2.957,3930,2.957,3931,5.877,3932,2.957,3933,2.957,3934,2.957,3935,5.296,3936,5.296,3937,4.422,3938,2.957,3939,2.957,3940,4.422,3941,2.957,3942,5.296,3943,2.957,3944,2.707,3945,2.957,3946,2.957,3947,2.957,3948,2.957,3949,2.957,3950,2.957,3951,2.957,3952,2.957,3953,2.957,3954,2.957,3955,2.957,3956,2.957,3957,2.957,3958,2.957,3959,2.957,3960,4.422,3961,2.957,3962,2.957,3963,2.957,3964,2.957,3965,2.957,3966,2.957,3967,2.957,3968,2.957,3969,2.957,3970,2.957,3971,2.957,3972,2.957,3973,4.422,3974,2.957,3975,4.422,3976,4.422,3977,4.422,3978,4.422,3979,2.957,3980,2.957,3981,2.957,3982,2.957,3983,2.957,3984,2.957,3985,4.422,3986,4.422,3987,2.957,3988,2.707,3989,2.957,3990,2.957]],["title/interfaces/SearchableItem.html",[0,0.282,58,2.922]],["body/interfaces/SearchableItem.html",[0,0.531,1,2.458,2,1.157,3,0.07,4,0.07,5,0.07,6,1.55,7,3.24,8,1.092,9,3.537,10,4.433,11,0.007,12,0.374,13,0.77,14,3.24,15,2.539,16,1.419,17,0.008,18,1.698,19,0.738,20,1.435,21,3.24,22,2.12,23,0.123,24,2.704,25,2.834,26,3.017,27,3.424,28,1.897,29,2.727,30,3.24,31,3.24,32,2.834,33,2.01,34,3.544,35,3.087,36,1.723,37,3.812,38,3.087,39,3.087,40,2.953,41,2.834,42,2.953,43,3.087,44,2.834,45,3.997,46,1.621,47,1.322,48,0.852,49,1.55,50,3.417,51,2.01,52,2.629,53,0.614,54,2.953,55,1.834,56,3.668,57,3.812,58,4.153,59,4.489,60,4.626,61,4.608,62,4.608,63,4.869,64,5.273,65,1.435,66,3.736,67,4.626,68,2.701,69,1.819,70,2.54,71,2.727,72,2.54,73,2.464,74,2.727,75,4.153,76,2.953,77,2.953,78,3.668,79,3.668,80,2.629,81,3.087,82,1.422,83,2.243,84,2.629,85,2.953,86,3.087,87,1.41,88,3.24,89,2.31,90,2.953,91,3.087,92,2.12,93,3.107,94,2.834,95,2.834,96,2.834,97,2.243,98,3.087,99,0.005,100,0.004]],["title/interfaces/SpatialEntity.html",[0,0.282,816,2.489]],["body/interfaces/SpatialEntity.html",[0,0.432,2,1.059,3,0.064,4,0.102,5,0.11,6,1.419,8,0.658,11,0.004,12,0.342,13,0.725,15,2.472,16,1.428,17,0.008,18,1.789,19,0.775,23,0.102,27,3.334,28,1.778,36,1.776,53,1.109,70,2.325,83,3.514,84,4.853,87,1.473,99,0.005,100,0.004,217,3.909,236,2.727,261,4.104,329,1.42,551,5.078,555,3.217,639,4.837,816,4.325,955,5.818,959,4.104,961,4.33,1009,3.589,1115,4.33,1407,2.249,1615,4.325,2556,3.13,2848,6.365,2850,5.358,3279,4.33,3324,2.703,3358,4.602,3366,3.909,3686,5.978,3689,5.978,3715,5.694,3716,5.694,3717,5.694,3721,5.694,3723,5.694,3725,5.694,3727,5.694,3729,3.326,3730,3.326,3731,3.326,3732,3.326,3733,3.326,3735,3.326,3737,3.326,3739,3.326,3741,3.326,3743,3.326,3745,3.326,3747,3.326,3749,3.326,3751,3.326,4217,3.573,4218,3.573,4219,4.943,4220,5.668,4221,6.421,4222,7.44,4223,3.573,4224,3.573,4225,3.573,4226,3.573,4227,6.116,4228,5.668,4229,3.573,4230,3.573,4231,3.573,4232,6.116]],["title/interfaces/SpatialObjectReference.html",[0,0.282,955,3.236]],["body/interfaces/SpatialObjectReference.html",[0,0.457,2,1.182,3,0.072,4,0.108,5,0.13,6,1.584,8,0.734,11,0.004,12,0.382,13,0.781,15,1.983,16,1.423,17,0.008,18,1.757,19,0.76,23,0.108,27,3.348,28,1.837,36,1.937,53,1.121,70,2.595,83,3.446,84,4.72,87,1.046,99,0.005,100,0.004,217,3.154,236,2.547,261,3.31,329,0.926,551,5.063,555,3.466,639,3.154,816,4.312,849,2.108,955,5.843,959,4.422,961,4.666,1009,2.895,1115,3.493,1407,2.511,1615,4.312,2556,4.666,2848,5.843,2850,3.493,3279,3.493,3324,3.017,3358,3.713,3366,3.154,3686,6.21,3689,5.96,3715,3.713,3716,3.713,3717,3.713,3721,3.713,3723,3.713,3725,3.713,3727,3.713,3729,3.713,3730,3.713,3731,3.713,3732,3.713,3733,3.713,3735,3.713,3737,3.713,3739,3.713,3741,3.713,3743,3.713,3745,3.713,3747,3.713,3749,3.713,3751,3.713,4217,3.987,4218,3.987,4219,3.987,4220,5.326,4221,6.401,4222,7.44,4223,6.401,4224,5.326,4225,6.401,4226,3.987,4227,6.401,4228,5.998,4229,3.987,4230,3.987,4231,3.987,4232,6.401]],["title/interfaces/SpatialPlacement.html",[0,0.282,959,3.067]],["body/interfaces/SpatialPlacement.html",[0,0.425,2,1.026,3,0.062,4,0.121,5,0.109,6,1.376,8,0.638,11,0.004,12,0.332,13,0.71,15,1.801,16,1.416,17,0.008,18,1.797,19,0.779,23,0.1,27,3.187,28,1.761,36,1.619,53,1.063,70,3.149,83,2.78,84,4.774,87,1.185,99,0.005,100,0.004,217,2.74,236,2.368,261,2.876,329,0.804,551,5.339,555,4.281,639,2.74,816,4.639,955,5.762,959,4.629,961,5.287,1009,2.515,1115,3.035,1407,3.046,1615,4.548,2556,3.035,2848,5.562,2850,3.035,3279,3.035,3324,3.66,3358,3.225,3366,2.74,3686,6.599,3689,6.286,3715,3.225,3716,3.225,3717,3.225,3721,3.225,3723,3.225,3725,3.225,3727,3.225,3729,5.619,3730,5.619,3731,5.619,3732,5.619,3733,5.619,3735,5.619,3737,5.619,3739,5.619,3741,5.619,3743,5.619,3745,5.619,3747,5.619,3749,5.619,3751,5.619,4217,3.464,4218,3.464,4219,3.464,4220,5.575,4221,6.751,4222,7.585,4223,3.464,4224,3.464,4225,3.464,4226,4.838,4227,6.887,4228,6.578,4229,4.838,4230,6.035,4231,4.838,4232,6.887]],["title/interfaces/SpatialSceneNode.html",[0,0.282,480,2.581]],["body/interfaces/SpatialSceneNode.html",[0,0.262,2,1.019,3,0.087,4,0.062,5,0.062,6,1.366,11,0.004,12,0.33,13,0.706,16,1.399,17,0.008,18,1.718,19,0.756,23,0.087,28,1.804,36,1.956,46,1.972,53,0.541,69,2.244,87,1.466,95,1.643,99,0.005,100,0.004,125,1.308,128,1.062,141,1.397,145,2.213,150,0.34,179,0.132,205,0.884,216,1.912,219,1.38,236,1.461,240,2.098,247,1.661,252,1.712,253,1.28,282,2.497,329,1.47,450,3.202,454,2.855,456,4.217,476,1.091,480,4.424,512,2.403,513,4.758,514,2.602,525,3.863,530,1.772,544,3.287,545,3.243,546,2.689,561,4.482,565,2.528,578,3.02,593,2.719,599,3.202,603,3.013,604,1.772,605,5.259,606,1.868,607,3.757,609,3.757,610,3.757,612,3.757,616,3.757,617,5.259,618,6.067,619,3.439,620,2.855,621,3.757,622,3.439,623,5.259,624,3.757,625,3.439,626,6.067,627,3.439,628,5.259,629,3.439,630,3.757,631,3.013,632,3.439,633,3.757,634,3.757,635,3.757,636,3.757,637,3.757,638,3.757,639,4.758,640,5.602,641,6.273,642,5.896,643,5.896,644,6.273,645,5.602,646,5.602,647,5.896,648,5.602,649,4.368,650,1.921,651,5.259,652,5.259,653,1.976,654,3.757,655,3.757,656,3.757,657,6.067,658,3.757,659,3.757,660,5.259,661,3.757,662,3.757,663,3.757,664,5.259,665,4.217,666,5.259,667,3.439,668,3.757,669,2.238,670,3.757,671,6.067,672,3.757,673,3.757,674,3.757,675,3.757,676,3.202,677,5.259,678,5.259,679,3.757,680,5.259,681,5.602,682,3.757,683,5.259,684,3.757,685,3.202,686,2.72,687,3.757,688,3.757,689,3.757,690,3.757,691,5.259,692,6.067,693,6.067,694,5.259,695,5.259,696,5.259,697,3.757,698,3.757,699,3.757,700,3.757,701,3.757,702,3.757,703,3.757,704,2.72,705,3.757,706,3.757,707,3.202,708,3.757,709,3.757,710,3.202,711,3.757,712,3.757,713,3.757]],["title/interfaces/SpatialSceneNode-1.html",[0,0.235,253,1.146,480,2.15]],["body/interfaces/SpatialSceneNode-1.html",[0,0.232,2,1.308,3,0.055,4,0.055,5,0.055,6,1.21,11,0.005,12,0.292,13,0.648,16,1.37,17,0.008,18,1.654,19,0.744,23,0.079,28,1.618,45,2.051,46,1.928,61,3.205,62,3.205,66,1.917,73,2.617,74,3.084,83,2.536,87,1.444,90,2.304,99,0.005,100,0.003,118,1.335,127,1.39,128,2.056,145,2.327,150,0.318,152,1.802,179,0.117,219,1.431,237,1.917,240,2.693,247,1.706,252,2.082,253,2.346,272,1.454,329,1.679,472,1.454,476,0.867,480,4.931,513,4.504,514,2.304,525,4.539,555,1.982,578,3.343,639,4.781,640,6.319,641,6.319,642,5.628,643,5.628,644,5.628,645,5.628,646,6.054,647,5.628,648,5.628,676,2.835,685,4.11,707,2.835,710,5.628,763,3.77,765,4.417,769,5.946,792,3.491,793,2.668,815,2.668,816,4.072,845,2.835,850,2.409,864,2.528,871,2.668,872,1.917,929,3.867,950,2.835,967,3.045,977,2.668,978,3.045,983,6.045,985,3.045,986,2.835,987,2.835,988,3.045,1006,2.127,1008,3.045,1033,3.326,1040,3.326,1042,3.326,1044,3.326,1046,3.326,1049,3.326,1050,4.822,1052,2.668,1053,6.603,1054,4.822,1055,3.326,1056,3.326,1057,3.326,1058,6.22,1059,6.603,1060,4.822,1061,4.822,1062,7.102,1063,3.326,1064,4.822,1065,3.326,1066,3.326,1067,3.326,1068,2.835,1069,3.326,1070,3.326,1071,3.326,1072,3.326,1073,3.326,1074,3.045,1075,3.326,1076,3.326,1077,4.822,1078,3.326,1079,3.326,1080,7.274,1081,4.414,1082,4.822,1083,4.822,1084,4.414,1085,4.822,1086,3.326,1087,4.822,1088,3.326,1089,4.822,1090,4.822,1091,3.326,1092,3.326,1093,3.326,1094,3.326,1095,3.326,1096,3.326,1097,3.326,1098,3.326,1099,3.326,1100,3.867,1101,3.326,1102,6.603,1103,4.822,1104,3.326,1105,3.326,1106,3.326,1107,4.822,1108,4.504,1109,3.326,1110,3.326,1111,3.326,1112,4.11,1113,2.304,1114,3.326,1115,2.668,1116,3.326,1117,3.326,1118,3.326,1119,3.326,1120,3.326,1121,1.802,1122,3.326,1123,3.326,1124,3.326,1125,3.326,1126,3.326,1127,3.326,1128,3.326]],["title/components/SpinnerOverlayComponent.html",[101,0.726,375,1.436]],["body/components/SpinnerOverlayComponent.html",[3,0.104,4,0.067,5,0.067,8,1.197,11,0.004,12,0.485,16,0.933,17,0.008,19,0.376,20,1.384,23,0.067,47,1.448,48,1.465,49,1.47,53,0.797,55,1.293,65,1.396,82,1.846,87,1.219,93,2.191,99,0.005,100,0.006,101,1.277,102,1.439,103,1.77,104,1.408,105,1.47,106,1.537,107,1.321,114,2.104,117,3.145,118,2.347,120,2.057,122,2.103,125,1.408,127,1.356,128,1.143,129,1.515,136,1.267,147,5.81,148,3.035,150,0.187,151,0.505,169,1.439,173,1.439,177,1.439,179,0.25,224,1.896,252,1.441,253,1.886,268,2.752,269,2.258,270,2.688,271,1.537,272,2.419,274,2.494,277,1.907,279,2.067,280,4.205,281,1.349,282,4.875,283,2.011,284,1.768,286,2.127,290,1.321,291,3.09,299,2.191,302,2.679,305,2.688,306,3.297,307,2.801,312,3.073,317,0.758,318,2.361,319,2.012,320,1.537,321,2.578,322,1.537,323,1.537,324,1.439,325,1.537,326,1.439,327,1.537,328,1.439,329,1.441,330,1.537,331,1.439,332,1.47,333,1.537,334,1.439,335,1.537,336,1.439,337,1.537,338,1.439,339,1.537,340,1.439,341,2.398,342,1.537,343,1.439,344,2.103,345,1.439,346,1.503,347,1.537,348,1.439,349,1.927,350,2.103,351,1.439,352,1.537,353,1.439,354,1.537,355,1.439,356,1.439,357,1.537,358,1.439,359,1.537,360,1.439,361,2.103,362,1.439,363,1.537,364,1.439,365,1.537,366,1.439,367,1.537,368,1.47,369,1.537,370,1.439,371,1.537,372,1.439,373,1.537,374,1.439,375,2.413,376,1.537,377,1.439,378,1.439,379,1.537,380,1.537,404,1.663,433,6.209,565,2.306,723,2.543,745,2.692,1113,2.801,1132,3.91,1298,4.716,1315,2.127,1348,3.412,1392,4.437,1396,3.539,1397,3.539,1409,2.586,1614,2.586,1615,2.494,1617,3.243,1667,5.376,1704,4.716,1753,3.243,1772,3.243,1773,3.243,1802,3.073,1839,3.678,1880,4.716,2166,4.716,2332,4.62,4233,6.782,4234,4.563,4235,6.243,4236,7.117,4237,6.243,4238,4.563,4239,6.243,4240,4.563,4241,6.243,4242,4.563,4243,4.563,4244,4.563,4245,4.563]],["title/modules/SpinnerOverlayModule.html",[381,0.651,402,3.236]],["body/modules/SpinnerOverlayModule.html",[3,0.098,4,0.098,5,0.098,11,0.006,17,0.008,23,0.098,99,0.007,100,0.006,148,2.637,150,0.362,151,0.744,179,0.21,204,1.989,317,1.118,375,2.999,381,0.961,383,1.907,384,1.907,385,2.581,386,1.989,387,1.989,388,2.581,402,6.583,403,2.269,404,1.791,406,2.075,407,2.418,433,5.457,444,2.758,445,2.266,4233,5.961,4246,5.961,4247,5.961,4248,5.961,4249,6.726,4250,8.004,4251,6.726,4252,6.726]],["title/modules/StoreModule.html",[381,0.651,1907,3.236]],["body/modules/StoreModule.html",[3,0.095,4,0.095,5,0.095,11,0.005,17,0.008,23,0.115,33,2.723,36,1.535,99,0.007,100,0.005,150,0.38,151,0.721,167,5.29,179,0.203,182,4.922,219,1.083,237,3.328,381,0.931,383,1.847,406,2.01,407,2.372,756,3.328,1186,3.693,1907,5.582,1944,4.922,1945,5.774,1963,5.774,2038,3.328,2900,5.286,2908,5.933,3230,5.582,3304,5.774,3872,5.04,4253,6.515,4254,6.515,4255,5.774,4256,6.515,4257,6.515,4258,6.515,4259,6.515,4260,6.515,4261,6.515,4262,6.515,4263,6.515,4264,6.515,4265,6.515,4266,6.515,4267,6.515,4268,6.515,4269,6.515,4270,6.515,4271,6.515,4272,6.515,4273,6.515,4274,6.515,4275,6.515,4276,6.515]],["title/modules/ThemingModule.html",[381,0.651,1908,3.236]],["body/modules/ThemingModule.html",[3,0.101,4,0.101,5,0.101,11,0.006,17,0.008,23,0.101,99,0.007,100,0.006,145,1.953,150,0.332,151,0.763,164,6.551,179,0.215,204,2.037,317,1.145,381,0.985,383,1.953,384,1.953,385,2.081,386,2.037,387,2.553,388,2.081,403,2.302,404,1.835,407,2.452,437,5.591,438,5.591,1908,6.551,4277,6.107,4278,6.107,4279,6.89,4280,8.12,4281,6.89,4282,6.89,4283,6.89]],["title/injectables/ThemingService.html",[164,3.236,1924,1.722]],["body/injectables/ThemingService.html",[3,0.061,4,0.061,5,0.061,8,1.16,11,0.003,12,0.326,13,0.7,16,1.353,17,0.008,19,0.697,20,0.928,23,0.086,53,0.992,68,2.172,70,3.106,71,3.334,82,1.739,87,1.386,99,0.005,100,0.003,101,1.426,103,1.667,119,2.139,127,1.835,129,1.852,147,3.962,150,0.241,151,0.463,164,4.181,179,0.279,180,2.027,183,1.986,185,6.886,191,4.773,197,1.414,205,1.815,219,1.376,231,7.682,238,4.617,247,1.57,259,4.788,279,3.342,386,1.739,435,3.711,455,2.737,470,1.38,474,1.946,476,1.175,498,1.581,522,2.373,606,2.997,825,5.984,878,2.677,887,2.687,925,3.541,1132,4.315,1297,5.233,1300,6.086,1546,2.665,1557,4.181,1723,3.962,1737,5.213,1761,3.711,1762,3.711,1770,2.976,1860,3.611,1916,3.163,1924,2.225,1925,2.467,2000,4.181,2061,3.962,2250,5.213,2273,3.397,2423,5.984,2930,3.397,3310,2.82,3580,2.976,3587,2.976,4284,4.187,4285,5.882,4286,8.275,4287,5.882,4288,7.375,4289,5.882,4290,7.375,4291,5.882,4292,4.187,4293,4.187,4294,5.882,4295,4.187,4296,5.882,4297,7.769,4298,4.187,4299,5.882,4300,8.585,4301,4.187,4302,5.882,4303,5.882,4304,4.187,4305,4.187,4306,5.882,4307,4.187,4308,4.187,4309,5.882,4310,4.187,4311,4.187,4312,4.187,4313,4.187,4314,4.187,4315,4.187,4316,4.187,4317,4.187,4318,4.187,4319,7.375,4320,5.882,4321,4.187,4322,4.187,4323,6.8,4324,4.187,4325,5.882,4326,4.187,4327,4.187,4328,4.187,4329,4.187,4330,4.187,4331,4.187,4332,4.187,4333,4.187]],["title/interfaces/TiffInfo.html",[0,0.282,1142,2.682]],["body/interfaces/TiffInfo.html",[0,0.439,2,1.331,3,0.125,4,0.104,5,0.081,6,1.784,11,0.005,12,0.43,13,0.845,16,1.358,17,0.008,18,1.609,19,0.733,23,0.125,34,4.152,47,1.415,48,1.256,87,1.131,95,2.75,99,0.006,100,0.005,127,1.202,150,0.226,216,2.287,219,1.42,247,1.818,606,3.127,650,3.215,653,3.982,763,3.26,765,4.752,872,2.828,1121,2.657,1136,4.614,1138,3.137,1139,4.553,1140,4.18,1141,4.808,1142,4.866,1143,4.808,1241,3.137,1770,3.934,2052,4.181,2771,6.211,2946,4.181,3372,4.181,3635,4.181,3636,4.905,3637,4.905,3638,6.289,3639,6.355,3640,4.491,3641,4.491,3642,4.491,3643,4.491,3644,4.491,3645,4.491,3646,4.491,3647,4.491,3648,4.491,3649,4.905,3650,7.745,3651,4.905,3652,4.491,3653,4.905,3654,4.905,3655,4.905,3656,4.905,3657,4.905,3658,4.905,3659,4.905,3660,4.491,3661,4.905,3662,4.905,3663,4.905,3664,4.905,3665,4.905,3666,4.905,3667,4.905,3668,4.905,3669,4.905,3670,4.905,3671,4.905,3672,4.905,3673,4.905]],["title/components/ToggleButtonComponent.html",[101,0.726,377,1.436]],["body/components/ToggleButtonComponent.html",[3,0.086,4,0.048,5,0.048,8,0.882,11,0.003,12,0.254,13,0.585,16,0.734,17,0.008,19,0.542,20,1.455,23,0.048,33,3.436,46,1.455,47,1.272,48,1.308,49,1.584,53,0.944,55,0.927,65,1.158,82,1.941,87,0.783,99,0.004,100,0.005,101,1.286,102,1.031,103,1.393,104,1.009,105,1.054,106,1.102,107,0.947,114,2.725,117,3.068,118,2.3,120,1.619,122,1.656,125,1.009,127,1.426,128,0.819,129,1.777,131,1.393,136,0.908,141,1.619,145,1.674,148,1.078,150,0.269,151,0.362,153,1.442,169,1.031,173,1.031,177,2.219,179,0.219,180,1.693,181,1.859,183,1.678,192,2.895,193,2.166,194,2.36,197,1.182,199,2.607,205,1.542,219,0.981,224,1.573,247,1.397,271,1.102,277,3.373,279,2.227,281,0.967,290,2.61,291,1.619,296,4.061,297,1.788,300,2.054,301,1.525,302,1.403,317,0.544,318,2.026,319,1.584,320,1.102,321,2.212,322,1.102,323,1.102,324,1.031,325,1.102,326,1.031,327,1.102,328,1.031,329,1.236,330,1.102,331,1.031,332,1.054,333,1.102,334,1.031,335,1.102,336,1.031,337,1.102,338,1.031,339,1.102,340,1.031,341,1.989,342,1.102,343,1.031,344,1.656,345,1.031,346,1.078,347,1.102,348,1.031,349,1.517,350,1.656,351,1.031,352,1.102,353,1.031,354,1.102,355,1.031,356,1.031,357,1.102,358,1.031,359,1.102,360,1.031,361,1.656,362,1.031,363,1.102,364,1.031,365,1.102,366,1.031,367,1.102,368,1.054,369,1.102,370,1.031,371,1.102,372,1.031,373,1.102,374,1.031,375,1.031,376,1.102,377,2.07,378,1.031,379,1.102,380,1.102,455,2.483,470,1.078,474,1.231,476,0.783,498,1.45,503,3.777,544,1.57,546,1.482,565,2.181,649,1.927,716,2.975,717,4.196,722,4.666,786,2.008,849,2.109,878,1.693,1006,1.854,1108,2.099,1315,1.525,1345,2.786,1359,2.595,1377,2.686,1379,1.788,1396,2.786,1397,2.786,1409,1.854,1522,3.354,1546,2.227,1612,5.327,1614,1.854,1691,3.347,1694,3.905,1697,1.619,1700,5.793,1701,3.988,1702,3.721,1704,3.713,1707,4.666,1708,4.666,1710,2.511,1711,3.016,1712,3.493,1715,3.659,1719,3.713,1720,3.713,1721,3.713,1727,3.493,1745,4.46,1746,3.713,1753,2.325,1757,2.471,1767,3.867,1768,4.918,1772,2.325,1773,2.325,1778,2.654,1780,2.654,1781,2.471,1786,2.654,1789,2.471,1802,2.203,1817,3.31,1825,3.988,1827,3.988,1828,3.988,1834,4.707,1837,5.998,1856,2.654,1862,2.099,1897,2.895,2130,7.496,2175,5.327,2233,3.713,2463,2.899,3063,4.356,3269,2.899,3272,5.233,3273,4.356,3473,2.899,3478,2.899,3479,2.899,3480,5.233,3497,4.356,3524,2.899,3528,4.356,3539,6.552,3540,6.552,4334,8.458,4335,4.915,4336,3.271,4337,4.915,4338,7.392,4339,3.271,4340,3.271,4341,4.915,4342,3.271,4343,3.271,4344,3.271,4345,3.271,4346,3.271,4347,3.271,4348,3.271,4349,3.271,4350,3.271,4351,3.271,4352,3.271,4353,3.271,4354,3.271,4355,3.271,4356,3.271,4357,3.271,4358,3.271,4359,3.271,4360,4.915,4361,3.271,4362,4.915,4363,3.271]],["title/interfaces/ValueObject.html",[0,0.282,2962,3.44]],["body/interfaces/ValueObject.html",[0,0.531,2,1.246,3,0.076,4,0.076,5,0.076,8,0.774,11,0.004,12,0.403,13,0.809,15,2.433,16,1.249,17,0.008,19,0.427,20,2.024,22,3.687,23,0.118,28,1.9,51,3.171,53,1.068,65,1.641,99,0.006,100,0.004,150,0.278,154,2.564,183,1.324,216,2.767,219,1.506,247,1.103,472,2.634,498,1.016,508,3.89,521,4.002,604,2.165,754,4.745,1301,5.49,2422,3.473,2435,3.325,2554,6.405,2561,3.18,2680,3.49,2958,5.732,2959,4.203,2960,4.203,2961,6.536,2962,6.085,2963,4.203,2964,4.579,2965,5.516,2966,5.516,2967,5.393,2968,5.516,2969,4.203,2970,6.787,2971,6.787,2972,5.516,2973,4.203,2974,4.203,2975,6.156,2976,4.203,2977,4.203,2978,4.203,2979,4.203,2980,5.516,2981,4.203,2982,4.203,2983,4.203,2984,4.203,2985,4.203,2986,4.203,2987,4.203,2988,3.682,2989,5.516,2990,4.203,2991,4.203,2992,4.203,2993,4.203,2994,4.203,2995,3.49,2996,4.203]],["title/components/ViewerComponent.html",[101,0.726,378,1.436]],["body/components/ViewerComponent.html",[3,0.099,4,0.044,5,0.044,11,0.004,12,0.359,13,0.549,16,1.069,17,0.008,18,1.404,19,0.701,20,1.652,23,0.044,28,0.654,34,2.092,46,0.667,47,1.479,48,1.553,53,0.914,55,0.854,65,1.101,68,1.705,72,1.59,87,1.003,92,3.156,95,2.438,99,0.004,100,0.005,101,0.894,102,0.949,103,1.308,104,0.929,105,0.97,106,1.014,107,0.872,114,1.66,117,3.046,118,2.273,120,1.521,122,1.555,125,0.929,127,1.219,128,0.754,129,1.888,136,0.836,145,1.591,148,0.992,150,0.257,151,0.333,169,0.949,173,0.949,177,0.949,179,0.094,193,1.327,197,1.11,199,1.196,205,1.604,216,1.488,219,1.38,224,1.495,247,1.678,252,1.653,253,1.394,271,2.12,272,2.438,275,2.7,277,1.929,279,1.364,281,1.66,290,0.872,295,1.59,305,2.719,306,1.59,317,0.501,318,1.424,319,2.308,320,1.014,321,2.12,322,1.014,323,1.014,324,0.949,325,1.014,326,0.949,327,1.014,328,0.949,329,1.278,330,1.014,331,0.949,332,0.97,333,1.014,334,0.949,335,1.014,336,0.949,337,1.014,338,0.949,339,1.014,340,0.949,341,1.891,342,1.014,343,0.949,344,1.555,345,0.949,346,0.992,347,1.014,348,0.949,349,1.424,350,1.555,351,0.949,352,1.014,353,0.949,354,1.014,355,0.949,356,0.949,357,1.014,358,0.949,359,1.014,360,0.949,361,1.555,362,0.949,363,1.014,364,0.949,365,1.014,366,0.949,367,1.014,368,0.97,369,1.014,370,0.949,371,1.014,372,0.949,373,1.014,374,0.949,375,0.949,376,1.014,377,0.949,378,1.984,379,1.014,380,1.014,403,0.854,455,2.726,470,0.992,474,1.576,476,0.894,494,1.49,498,1.509,517,2.034,519,4.218,525,3.544,530,3.214,544,2.695,545,2.523,546,2.092,555,1.59,565,1.705,578,1.226,649,2.719,650,3.377,653,2.934,667,2.443,716,2.092,717,3.99,722,4.473,723,1.88,724,1.929,734,2.286,740,5.466,742,3.487,744,2.14,745,2.123,746,1.88,786,1.848,1006,1.707,1121,1.446,1129,1.932,1132,2.358,1133,1.49,1140,1.774,1142,1.774,1156,1.538,1159,1.848,1160,3.913,1162,2.028,1169,3.182,1174,3.109,1177,4.038,1194,3.863,1211,2.028,1226,3.109,1232,4.038,1261,1.932,1345,2.616,1396,2.616,1397,2.616,1402,3.467,1409,1.707,1410,1.848,1614,1.707,1615,1.646,1673,4.091,1691,3.182,1702,3.567,1802,2.028,2332,2.437,2884,2.669,2913,3.487,3037,2.669,3045,4.554,3120,2.669,3172,2.669,3175,2.275,3198,4.975,3201,2.669,3203,2.669,3204,2.669,3205,4.091,3372,5.409,3660,3.745,4037,3.487,4077,2.14,4094,3.745,4128,4.975,4364,3.011,4365,5.613,4366,4.616,4367,5.613,4368,5.613,4369,4.616,4370,6.293,4371,6.293,4372,3.011,4373,4.616,4374,4.616,4375,4.616,4376,3.011,4377,3.011,4378,3.011,4379,3.011,4380,4.616,4381,3.011,4382,3.011,4383,3.011,4384,3.011,4385,3.011,4386,4.616,4387,3.011,4388,3.011,4389,5.613,4390,3.011,4391,3.011,4392,3.011,4393,3.011,4394,2.669,4395,5.613,4396,3.011,4397,3.011,4398,3.011,4399,3.011,4400,4.616,4401,3.011,4402,3.011,4403,3.011,4404,5.613,4405,3.011,4406,4.616,4407,5.613,4408,4.616,4409,2.443,4410,4.616,4411,3.011,4412,3.011,4413,4.616,4414,3.011,4415,3.011,4416,3.011,4417,3.011,4418,4.616,4419,3.011,4420,4.616,4421,4.091,4422,4.616,4423,3.011,4424,4.616,4425,3.011,4426,3.011,4427,5.613,4428,3.011,4429,2.443,4430,3.011,4431,3.011,4432,3.011,4433,3.011,4434,3.011,4435,3.011,4436,3.011,4437,3.011,4438,3.011,4439,3.011,4440,3.011,4441,3.011,4442,3.011,4443,3.011,4444,3.011,4445,3.011,4446,3.011,4447,3.011,4448,3.011,4449,3.011,4450,3.011,4451,4.975,4452,3.011]],["title/modules/ViewerModule.html",[381,0.651,3220,3.067]],["body/modules/ViewerModule.html",[3,0.099,4,0.099,5,0.099,11,0.006,17,0.008,23,0.099,99,0.007,100,0.006,150,0.362,151,0.748,179,0.21,204,1.997,317,1.123,378,3.001,381,0.966,383,1.915,384,1.915,385,2.586,386,1.997,387,1.997,388,2.586,403,2.275,404,1.799,406,2.084,407,2.424,408,4.386,409,3.451,444,2.765,445,2.275,3045,3.451,3220,6.244,4453,5.986,4454,5.986,4455,5.986,4456,6.754,4457,6.754]],["title/injectables/ViewerState.html",[1924,1.722,3230,3.236]],["body/injectables/ViewerState.html",[0,0.276,3,0.065,4,0.065,5,0.065,11,0.004,12,0.618,13,0.732,15,1.347,16,1.258,17,0.008,18,1.586,19,0.625,20,1.363,23,0.09,28,1.785,48,1.088,53,1.015,80,2.438,87,1.208,99,0.005,100,0.004,125,2.536,127,1.335,129,1.749,141,2.025,150,0.361,151,0.494,154,2.208,156,2.021,179,0.139,197,1.478,205,1.714,219,1.502,224,2.019,233,3.434,247,0.949,252,1.624,253,2.401,272,1.728,329,1.497,455,2.124,472,2.382,474,1.898,476,0.979,494,3.481,498,1.487,517,3.1,530,2.939,565,1.647,597,4.14,604,2.939,756,3.872,835,3.619,1121,2.951,1233,2.862,1332,2.021,1341,3.816,1351,2.628,1372,2.628,1402,2.279,1441,3.17,1520,2.862,1537,5.448,1541,3.17,1554,3.17,1602,3.17,1924,2.325,1925,2.628,1996,5.045,2035,3.773,2036,2.738,2037,2.738,2038,2.279,2079,3.005,2588,3.619,3100,3.17,3101,5.726,3102,3.17,3175,4.644,3230,4.369,3324,2.738,3897,3.37,4186,3.619,4195,3.37,4429,3.619,4458,3.953,4459,6.233,4460,6.233,4461,6.147,4462,6.147,4463,6.147,4464,5.448,4465,4.46,4466,5.448,4467,4.46,4468,5.448,4469,4.46,4470,4.46,4471,4.46,4472,5.448,4473,6.718,4474,5.448,4475,4.46,4476,5.448,4477,5.448,4478,5.448,4479,5.448,4480,5.448,4481,4.46,4482,5.448,4483,5.448,4484,5.448,4485,3.953,4486,3.953,4487,3.953,4488,5.448,4489,3.953,4490,3.37,4491,3.619,4492,7.284,4493,7.284,4494,7.284,4495,3.953,4496,6.233,4497,3.953,4498,3.953,4499,3.953,4500,3.953,4501,3.953,4502,3.953,4503,5.448,4504,5.448,4505,3.953,4506,3.953,4507,3.953,4508,6.233,4509,3.953,4510,3.953,4511,3.953,4512,3.953,4513,3.953,4514,3.953,4515,3.953,4516,3.953]],["title/interfaces/ViewerStateModel.html",[0,0.282,4491,3.695]],["body/interfaces/ViewerStateModel.html",[0,0.303,2,1.178,3,0.071,4,0.071,5,0.071,11,0.004,12,0.613,13,0.78,15,1.48,16,0.978,17,0.008,18,1.672,19,0.609,23,0.096,28,1.784,48,1.16,53,0.626,80,2.678,99,0.005,100,0.004,125,2.022,141,2.158,150,0.367,151,0.542,154,2.425,156,2.22,179,0.153,205,1.539,219,1.524,224,1.966,233,3.293,247,1.043,252,1.704,253,2.48,272,1.899,329,1.547,455,1.48,476,0.781,517,3.253,530,2.047,565,1.809,597,4.413,604,3.084,756,4.026,1121,3.145,1233,3.144,1332,2.22,1341,3.91,1351,2.886,1372,2.886,1402,2.503,1441,3.482,1520,3.144,1541,3.482,1554,3.482,1602,3.482,1924,2.478,1996,4.531,2035,4.022,2036,3.008,2037,3.008,2038,2.503,2079,3.3,2588,3.975,3100,3.482,3101,5.952,3102,3.482,3175,3.701,3230,3.482,3324,3.008,3897,3.701,4186,3.975,4195,3.701,4429,3.975,4458,4.342,4459,5.806,4460,4.342,4464,4.342,4466,4.342,4468,4.342,4472,4.342,4473,5.806,4474,4.342,4476,4.342,4477,4.342,4478,4.342,4479,4.342,4480,4.342,4482,5.806,4483,6.541,4484,5.806,4485,4.342,4486,4.342,4487,4.342,4488,5.806,4489,4.342,4490,3.701,4491,5.315,4492,7.87,4493,7.87,4494,7.87,4495,4.342,4496,6.541,4497,4.342,4498,4.342,4499,4.342,4500,4.342,4501,4.342,4502,4.342,4503,5.806,4504,5.806,4505,4.342,4506,4.342,4507,4.342,4508,6.541,4509,4.342,4510,4.342,4511,4.342,4512,4.342,4513,4.342,4514,4.342,4515,4.342,4516,4.342]],["title/changelog.html",[3909,2.555,4517,2.865,4518,3.077]],["body/changelog.html",[0,0.436,10,2.543,11,0.004,17,0.006,25,3.635,29,4.87,33,1.875,36,2.054,37,3.635,47,1.488,48,1.457,49,1.989,52,4.354,55,2.154,56,2.543,59,2.754,63,2.543,65,1.384,68,1.657,73,2.376,78,2.543,79,2.543,99,0.005,100,0.005,105,1.446,107,1.299,110,3.976,118,2.139,128,2.062,129,0.955,131,1.272,136,1.713,152,2.154,199,1.782,225,3.188,238,3.373,253,1.864,264,3.976,274,2.452,290,1.299,296,2.877,298,2.292,329,1.328,384,1.272,454,5.545,476,0.715,528,3.635,545,3.373,597,3.021,755,2.879,797,2.754,806,5.136,827,2.879,848,5.723,880,3.389,881,4.664,882,2.879,982,3.976,1052,3.188,1121,2.963,1134,2.369,1287,4.33,1289,3.188,1336,2.879,1348,3.373,1359,3.725,1372,2.643,1428,3.64,1546,2.796,1560,3.153,1606,2.754,1827,3.64,2007,3.389,2054,5.014,2057,6.165,2058,3.64,2259,6.252,2265,3.64,2353,3.976,2370,3.976,2423,5.007,2497,5.469,2510,6.165,2530,3.64,2558,5.469,2581,3.976,2591,3.976,2600,3.976,2763,3.976,2771,5.4,2825,3.64,2883,5.007,2938,3.389,3121,3.64,3182,3.64,3270,5.723,3271,3.976,3327,5.469,3333,3.64,3334,3.64,3335,3.64,3341,3.976,3342,3.976,3347,5.469,3351,6.165,3356,3.64,3357,5.007,3362,3.976,3364,3.64,3652,3.64,3690,5.469,3695,5.007,3911,3.64,3944,7.585,4138,3.976,4409,3.64,4421,5.469,4451,5.469,4490,3.389,4517,5.329,4518,5.007,4519,5.469,4520,4.486,4521,6.171,4522,6.171,4523,6.171,4524,4.486,4525,4.486,4526,4.486,4527,4.486,4528,4.486,4529,4.486,4530,4.486,4531,3.976,4532,4.486,4533,4.486,4534,4.486,4535,7.054,4536,4.486,4537,6.171,4538,8.822,4539,7.054,4540,6.171,4541,7.598,4542,4.486,4543,6.171,4544,7.598,4545,4.486,4546,4.486,4547,4.486,4548,4.486,4549,6.171,4550,4.486,4551,4.486,4552,6.171,4553,4.486,4554,4.486,4555,4.486,4556,4.486,4557,6.171,4558,7.474,4559,7.054,4560,6.171,4561,4.486,4562,4.486,4563,4.486,4564,7.598,4565,4.486,4566,4.486,4567,4.486,4568,7.598,4569,4.486,4570,4.486,4571,6.171,4572,7.054,4573,4.486,4574,4.486,4575,4.486,4576,6.171,4577,4.486,4578,4.486,4579,4.486,4580,6.171,4581,6.171,4582,6.171,4583,6.171,4584,4.486,4585,4.486,4586,4.486,4587,4.486,4588,4.486,4589,4.486,4590,4.486,4591,4.486,4592,4.486,4593,4.486,4594,4.486,4595,3.976,4596,4.486,4597,4.486,4598,4.486,4599,4.486,4600,4.486,4601,4.486,4602,3.976,4603,4.486,4604,4.486,4605,4.486,4606,4.486,4607,4.486,4608,4.486,4609,4.486,4610,4.486,4611,4.486,4612,4.486,4613,6.171,4614,7.966,4615,4.486,4616,4.486,4617,4.486,4618,4.486,4619,4.486,4620,4.486,4621,6.171,4622,4.486,4623,3.976,4624,4.486,4625,4.486,4626,4.486,4627,4.486,4628,4.486,4629,4.486,4630,4.486,4631,4.486,4632,4.486]],["title/dependencies.html",[384,1.554,4633,3.793]],["body/dependencies.html",[11,0.005,17,0.008,47,1.115,48,1.092,72,3.258,99,0.006,100,0.005,136,2.109,151,0.683,153,2.72,319,1.989,384,1.749,411,5.4,445,2.079,492,3.788,495,3.373,512,3.497,514,3.788,515,3.497,530,3.175,619,5.006,622,5.006,625,5.006,627,5.006,629,5.006,704,3.96,756,3.152,864,4.156,968,6.733,970,5.468,973,6.733,975,5.468,976,5.468,1028,5.006,1133,3.054,1138,3.497,1369,5.468,1581,4.386,1841,5.006,1943,5.468,2038,3.152,2548,5.006,2561,3.788,3695,5.006,3816,5.006,4255,5.468,4394,5.468,4519,5.468,4634,9.192,4635,6.17,4636,7.597,4637,6.17,4638,6.17,4639,6.17,4640,8.591,4641,6.17,4642,6.17,4643,6.17,4644,8.232,4645,6.17,4646,6.17,4647,6.17,4648,6.17,4649,6.17,4650,6.17,4651,6.17,4652,6.17,4653,6.17,4654,6.17,4655,6.17,4656,6.17,4657,6.17,4658,6.17,4659,6.17,4660,6.17,4661,6.17,4662,6.17,4663,6.17,4664,6.17,4665,6.17,4666,6.17,4667,6.17,4668,6.17,4669,6.17,4670,6.17,4671,6.17]],["title/miscellaneous/enumerations.html",[4672,2.865,4673,4.858]],["body/miscellaneous/enumerations.html",[6,2.211,11,0.006,12,0.533,17,0.008,20,2.098,36,1.616,47,1.24,72,3.623,99,0.007,100,0.006,141,2.26,166,6.118,606,3.57,736,2.534,1121,3.294,1140,4.771,1971,5.567,2055,6.572,2056,6.118,2771,6.544,3635,5.183,3639,6.992,3640,5.567,3641,5.567,3642,5.567,3643,5.567,3644,5.567,3645,5.567,3646,5.567,3647,5.567,3648,5.567,4672,5.183,4673,6.081,4674,6.861,4675,6.081]],["title/index.html",[12,0.295,3909,2.555,4517,2.865]],["body/index.html",[0,0.507,11,0.006,17,0.007,89,3.935,99,0.007,100,0.006,118,2.241,298,3.577,306,3.697,881,4.298,882,4.493,1287,5.032,1522,3.577,2007,5.289,2054,5.826,3333,6.65,3334,6.65,3335,6.65,3352,7.264,3356,6.65,3357,7.271,3377,6.205,3378,6.205,3386,6.205,3387,6.205,3394,6.205,3395,6.205,4518,5.681,4595,6.205,4676,7.001,4677,7.001,4678,7.001,4679,7.001,4680,7.001,4681,7.001,4682,7.001]],["title/license.html",[3909,2.555,4517,2.865,4683,3.361]],["body/license.html",[11,0.005,17,0.007,82,1.942,99,0.007,100,0.005,112,4.669,404,1.75,483,3.87,503,3.356,755,4.215,838,3.87,881,4.032,1642,4.845,1741,6.391,2920,5.33,3351,5.33,3364,6.403,3412,5.822,4146,5.822,4531,5.822,4558,5.822,4602,5.822,4683,5.822,4684,6.568,4685,8.46,4686,6.568,4687,6.568,4688,7.892,4689,6.568,4690,6.568,4691,6.568,4692,6.568,4693,6.568,4694,7.892,4695,9.358,4696,6.568,4697,6.568,4698,6.568,4699,6.568,4700,6.568,4701,6.568,4702,6.568,4703,6.568,4704,6.568,4705,6.568,4706,6.568,4707,6.568,4708,7.892,4709,6.568,4710,6.568,4711,6.568,4712,6.568,4713,6.568,4714,7.892,4715,7.892,4716,6.568,4717,6.568,4718,6.568,4719,6.568,4720,6.568,4721,6.568,4722,6.568,4723,6.568,4724,6.568,4725,6.568,4726,6.568,4727,6.568,4728,6.568,4729,6.568,4730,6.568,4731,6.568,4732,6.568,4733,6.568,4734,6.568,4735,6.568,4736,6.568,4737,6.568,4738,6.568]],["title/modules.html",[383,1.767]],["body/modules.html",[11,0.005,17,0.006,99,0.006,100,0.005,136,2.69,382,4.487,383,1.684,393,4.222,394,4.222,395,4.001,396,3.812,397,4.222,398,4.222,399,4.001,400,4.222,401,4.222,402,4.222,442,4.222,796,4.222,1324,4.222,1383,4.001,1413,4.222,1418,4.222,1551,4.222,1624,4.222,1906,4.222,1907,4.222,1908,4.222,2112,7.319,2183,4.222,2372,4.222,2481,4.222,3069,4.222,3074,4.001,3093,4.001,3187,4.222,3210,4.222,3219,4.222,3220,4.001,3411,8.587,3755,4.001,3756,4.222,3757,4.001,4166,4.222,4739,9.694]],["title/overview.html",[4077,4.431]],["body/overview.html",[2,0.806,11,0.003,17,0.008,99,0.004,100,0.003,102,2.438,103,0.951,164,4.26,169,2.438,173,2.438,177,2.438,204,0.991,317,0.557,324,2.438,326,2.438,328,2.438,331,2.438,334,2.438,336,2.438,338,2.438,340,2.438,343,2.438,345,2.438,348,2.438,351,2.438,353,2.438,355,2.438,356,2.438,358,2.438,360,2.438,362,2.438,364,2.438,366,2.438,368,2.492,370,2.438,372,2.438,374,2.438,375,2.438,377,2.438,378,2.438,381,0.479,382,6.927,383,0.951,384,0.951,385,1.013,386,0.991,387,0.991,388,1.013,389,2.972,390,2.972,391,2.972,392,2.972,393,5.303,394,5.88,395,5.935,396,5.101,397,5.649,398,6.167,399,5.208,400,6.044,401,5.649,402,5.303,403,1.419,404,0.893,439,2.972,440,2.972,441,2.972,442,5.88,449,1.713,787,2.972,788,2.972,789,2.972,1324,5.303,1325,2.972,1326,2.972,1327,2.972,1383,5.208,1384,2.972,1385,2.972,1386,2.972,1413,5.649,1414,2.972,1415,2.972,1416,2.972,1417,2.972,1418,5.649,1624,5.88,1625,2.972,1626,2.972,1628,2.972,1683,2.972,1684,2.972,1686,2.972,1903,2.972,1904,2.972,1905,2.972,1906,6.044,1907,4.26,1908,5.056,1925,1.975,2123,2.972,2124,2.972,2125,2.972,2183,5.303,2184,2.972,2185,2.972,2186,2.972,2334,2.972,2335,2.972,2336,2.972,2372,6.044,2373,2.972,2374,2.972,2376,2.972,2411,2.972,2412,2.972,2414,2.972,2477,2.972,2478,2.972,2479,2.972,2480,2.972,2481,5.649,3069,5.649,3070,2.972,3071,2.972,3072,2.972,3073,2.972,3074,5.892,3093,5.79,3094,2.972,3095,2.972,3097,2.972,3183,2.972,3184,2.972,3185,2.972,3186,2.972,3187,5.649,3210,5.303,3211,2.972,3212,2.972,3213,2.972,3216,2.972,3217,2.972,3218,2.972,3219,6.339,3220,5.208,3263,2.972,3264,2.972,3266,2.972,3287,2.972,3288,2.972,3290,2.972,3421,2.972,3422,2.972,3423,2.972,3752,2.972,3753,2.972,3754,2.972,3755,5.656,3756,6.167,3757,5.656,3851,2.972,3852,2.972,3853,2.972,4015,2.972,4016,2.972,4018,2.972,4031,2.972,4032,2.972,4033,2.972,4077,2.383,4166,5.303,4167,2.972,4168,2.972,4169,2.972,4172,2.972,4173,2.972,4175,2.972,4210,2.972,4211,2.972,4213,2.972,4246,2.972,4247,2.972,4248,2.972,4277,2.972,4278,2.972,4409,2.721,4453,2.972,4454,2.972,4455,2.972,4490,2.533,4623,2.972,4740,3.353,4741,3.353]],["title/miscellaneous/typealiases.html",[4672,2.865,4742,5.482]],["body/miscellaneous/typealiases.html",[6,2.704,11,0.005,12,0.449,17,0.008,19,0.74,28,1.255,47,1.444,48,1.414,97,3.725,99,0.006,100,0.005,103,1.637,114,2.362,116,3.89,141,2.851,192,3.402,215,4.586,216,2.35,240,2.859,275,2.478,475,4.475,492,3.545,508,2.617,521,2.693,603,5.678,786,3.545,872,3.725,878,1.99,989,2.859,1130,3.89,1131,5.664,1143,4.475,1146,4.678,1151,5.381,1153,4.678,1154,4.678,1156,3.725,1157,4.475,1341,2.617,1694,3.609,1697,2.859,1711,3.725,1715,3.954,1730,3.849,1881,3.89,1882,4.105,1883,4.295,1884,4.105,1885,4.105,1886,4.105,1888,3.89,1891,5.097,1892,5.678,1895,3.89,1896,3.89,1897,3.402,1900,5.678,1901,3.706,2176,3.274,2493,5.118,2494,6.461,2516,6.461,2559,4.363,3099,4.686,3106,5.915,3129,5.915,3233,5.915,3294,4.105,3427,5.118,3444,5.118,3445,6.461,3446,6.461,3447,5.118,3448,6.461,3449,5.118,3450,6.461,3451,5.118,3452,5.118,3453,5.118,3635,4.363,3760,3.545,3861,4.686,3862,5.915,3909,3.89,3910,5.915,4038,4.686,4039,5.915,4076,5.915,4672,4.363,4675,5.118,4743,5.775,4744,8.836,4745,8.972,4746,7.989,4747,5.775,4748,7.29,4749,5.775,4750,5.775]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/BodyModule.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"modules/CoreModule.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"modules/DrawerModule.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"modules/OntologyExplorationModule.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"modules/OntologyTreeModule.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":252,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/ColorBarComponent.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource-1.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["0).tolocaledatestring",{"_index":2852,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["0.095rem",{"_index":2330,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["0.1.0",{"_index":4621,"title":{},"body":{"changelog.html":{}}}],["0.10.3",{"_index":4671,"title":{},"body":{"dependencies.html":{}}}],["0.15",{"_index":4080,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["0.15rem",{"_index":1622,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["0.17.1",{"_index":4654,"title":{},"body":{"dependencies.html":{}}}],["0.1rem",{"_index":1623,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/FiltersContentComponent.html":{}}}],["0.2",{"_index":598,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["0.2.0",{"_index":4613,"title":{},"body":{"changelog.html":{}}}],["0.25rem",{"_index":4362,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["0.2rem",{"_index":2365,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["0.3.2",{"_index":4643,"title":{},"body":{"dependencies.html":{}}}],["0.3s",{"_index":2166,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["0.4em",{"_index":2366,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["0.4rem",{"_index":1608,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["0.4s",{"_index":4245,"title":{},"body":{"components/SpinnerOverlayComponent.html":{}}}],["0.5",{"_index":556,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["0.5*255",{"_index":710,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["0.5.0",{"_index":3695,"title":{},"body":{"interfaces/OldRuiData.html":{},"changelog.html":{},"dependencies.html":{}}}],["0.5em",{"_index":1316,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["0.5rem",{"_index":1619,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/InfoDialogComponent.html":{}}}],["0.6.0",{"_index":4583,"title":{},"body":{"changelog.html":{}}}],["0.6s",{"_index":4244,"title":{},"body":{"components/SpinnerOverlayComponent.html":{}}}],["0.75rem",{"_index":1621,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["0.8",{"_index":688,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["0.875rem",{"_index":3415,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["0.8rem",{"_index":1609,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["0.9*255",{"_index":685,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["000000",{"_index":1611,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["020202",{"_index":1510,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["03",{"_index":4572,"title":{},"body":{"changelog.html":{}}}],["03b3d854",{"_index":2606,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["04",{"_index":4622,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":4559,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":4540,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":4520,"title":{},"body":{"changelog.html":{}}}],["07a29e4c",{"_index":2612,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["08",{"_index":4560,"title":{},"body":{"changelog.html":{}}}],["0a7c1eab007a",{"_index":2626,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["0c1687",{"_index":1519,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["0e368f3075e8",{"_index":2610,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["0e8017bdda58",{"_index":2615,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["0em",{"_index":2404,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["0px",{"_index":2175,"title":{},"body":{"components/DropdownComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["0rem",{"_index":1610,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["0s",{"_index":2408,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["0xff",{"_index":4407,"title":{},"body":{"components/ViewerComponent.html":{}}}],["1",{"_index":253,"title":{"interfaces/ColorScheme-1.html":{},"interfaces/DataSource-1.html":{},"interfaces/SpatialSceneNode-1.html":{}},"body":{"components/AppComponent.html":{},"classes/BodyUILayer.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/OldRuiData.html":{},"components/OntologySearchComponent.html":{},"interfaces/PureImageViewerLayer.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"changelog.html":{}}}],["1)[0].split('?')[0].replace('.ome.tif",{"_index":2828,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["1*255",{"_index":1077,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["1.0",{"_index":599,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/SpatialSceneNode.html":{}}}],["1.0.0",{"_index":4538,"title":{},"body":{"changelog.html":{}}}],["1.0.11",{"_index":4651,"title":{},"body":{"dependencies.html":{}}}],["1.0625rem",{"_index":4360,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["1.1.0",{"_index":4519,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["1.1.1",{"_index":4660,"title":{},"body":{"dependencies.html":{}}}],["1.1.2",{"_index":4650,"title":{},"body":{"dependencies.html":{}}}],["1.125rem",{"_index":1616,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["1.13.0",{"_index":4669,"title":{},"body":{"dependencies.html":{}}}],["1.2.3",{"_index":4653,"title":{},"body":{"dependencies.html":{}}}],["1.2.4",{"_index":4659,"title":{},"body":{"dependencies.html":{}}}],["1.25",{"_index":4136,"title":{},"body":{"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["1.3.3",{"_index":4655,"title":{},"body":{"dependencies.html":{}}}],["1.3.6",{"_index":4664,"title":{},"body":{"dependencies.html":{}}}],["1.4.0",{"_index":4658,"title":{},"body":{"dependencies.html":{}}}],["1.55rem",{"_index":2172,"title":{},"body":{"components/DropdownComponent.html":{}}}],["1.5em",{"_index":1321,"title":{},"body":{"components/CheckboxComponent.html":{},"components/DualSliderComponent.html":{}}}],["1.5rem",{"_index":285,"title":{},"body":{"components/AppComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["1.5s",{"_index":1878,"title":{},"body":{"components/ContentComponent.html":{}}}],["10",{"_index":1100,"title":{},"body":{"classes/CCFSpatialScene.html":{},"components/FiltersPopoverComponent.html":{},"classes/HuBMAPEntity.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["10.0",{"_index":527,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["100",{"_index":272,"title":{},"body":{"components/AppComponent.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"components/ImageViewerAccordionComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/OldRuiData.html":{},"components/OntologySearchComponent.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["1000",{"_index":987,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["10000",{"_index":2884,"title":{},"body":{"classes/HuBMAPEntity.html":{},"components/ViewerComponent.html":{}}}],["101",{"_index":2598,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["103",{"_index":2595,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["104",{"_index":4203,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["10px",{"_index":1378,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["10rem",{"_index":1613,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["10x",{"_index":4526,"title":{},"body":{"changelog.html":{}}}],["10x.svg",{"_index":2807,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["11",{"_index":2600,"title":{},"body":{"classes/HuBMAPEntity.html":{},"changelog.html":{}}}],["11.5",{"_index":575,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["110",{"_index":2048,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["11e8",{"_index":2608,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["12",{"_index":4623,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["1234",{"_index":3701,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["12rem",{"_index":4205,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["13",{"_index":2049,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["136",{"_index":675,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["14px",{"_index":2159,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerLegendComponent.html":{}}}],["15",{"_index":553,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["1500",{"_index":1165,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["152px",{"_index":2174,"title":{},"body":{"components/DropdownComponent.html":{}}}],["1565c0",{"_index":1436,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["15px",{"_index":2328,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["15rem",{"_index":2329,"title":{},"body":{"components/DualSliderComponent.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["16",{"_index":4404,"title":{},"body":{"components/ViewerComponent.html":{}}}],["16.13.1",{"_index":4666,"title":{},"body":{"dependencies.html":{}}}],["16.5rem",{"_index":2405,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["166",{"_index":1439,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["16px",{"_index":2161,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["16px/20px",{"_index":2473,"title":{},"body":{"components/HeaderComponent.html":{}}}],["172",{"_index":2589,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["18rem",{"_index":3848,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["1].rotation",{"_index":663,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["1a9850",{"_index":1461,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["1e88e5",{"_index":3261,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["1em",{"_index":2157,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerAccordionComponent.html":{}}}],["1px",{"_index":1379,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["1rem",{"_index":1315,"title":{},"body":{"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["1s",{"_index":2468,"title":{},"body":{"components/HeaderComponent.html":{},"components/InfoButtonComponent.html":{}}}],["2",{"_index":1121,"title":{},"body":{"classes/CCFSpatialScene.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContentComponent.html":{},"components/DualSliderComponent.html":{},"classes/HuBMAPEntity.html":{},"classes/InitializationState.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialSceneNode-1.html":{},"interfaces/TiffInfo.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["2.0625rem",{"_index":4359,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["2.2.8",{"_index":4644,"title":{},"body":{"dependencies.html":{}}}],["2.25rem",{"_index":3420,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["2.2rem",{"_index":3262,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["2.5rem",{"_index":304,"title":{},"body":{"components/AppComponent.html":{}}}],["20",{"_index":3108,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["20000",{"_index":1166,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["2019",{"_index":4558,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2020",{"_index":3347,"title":{},"body":{"components/InfoDialogComponent.html":{},"changelog.html":{}}}],["203",{"_index":2594,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["20em",{"_index":2323,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["21",{"_index":2575,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["2166ac",{"_index":1453,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["21908a",{"_index":1498,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["22",{"_index":2581,"title":{},"body":{"classes/HuBMAPEntity.html":{},"changelog.html":{}}}],["22.5rem",{"_index":2406,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["225",{"_index":3142,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["229",{"_index":676,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["24",{"_index":4604,"title":{},"body":{"changelog.html":{}}}],["24rem",{"_index":2407,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["25",{"_index":4079,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["25.5rem",{"_index":3259,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["25000",{"_index":4430,"title":{},"body":{"components/ViewerComponent.html":{}}}],["255",{"_index":525,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/ViewerComponent.html":{}}}],["25rem",{"_index":3067,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{},"components/OntologySearchComponent.html":{}}}],["27",{"_index":4573,"title":{},"body":{"changelog.html":{}}}],["275s",{"_index":2167,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["28.5rem",{"_index":287,"title":{},"body":{"components/AppComponent.html":{}}}],["28px",{"_index":2333,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["2d6379",{"_index":1499,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["2em",{"_index":2363,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["2px",{"_index":2164,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/HeaderComponent.html":{},"components/OntologySearchComponent.html":{}}}],["2rem",{"_index":294,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerPopoverComponent.html":{}}}],["3",{"_index":597,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"classes/HuBMAPEntity.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"changelog.html":{}}}],["3.0.5",{"_index":4647,"title":{},"body":{"dependencies.html":{}}}],["3.1.1",{"_index":4656,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":4646,"title":{},"body":{"dependencies.html":{}}}],["3.5rem",{"_index":3258,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["3.6.2",{"_index":4648,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":674,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["308f5ffc",{"_index":2617,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["31",{"_index":4490,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"changelog.html":{},"overview.html":{}}}],["32",{"_index":2574,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["32px",{"_index":2331,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["33",{"_index":2371,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["333",{"_index":1440,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["34",{"_index":4740,"title":{},"body":{"overview.html":{}}}],["35rem",{"_index":2409,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["380px",{"_index":3849,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["393768",{"_index":1500,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["3d",{"_index":848,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"changelog.html":{}}}],["3d121f",{"_index":1509,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["3rem",{"_index":297,"title":{},"body":{"components/AppComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["3s",{"_index":2169,"title":{},"body":{"components/DropdownComponent.html":{}}}],["4",{"_index":2588,"title":{},"body":{"classes/HuBMAPEntity.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["4.17.15",{"_index":4657,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":4652,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":2472,"title":{},"body":{"components/HeaderComponent.html":{}}}],["403",{"_index":2597,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["404",{"_index":3672,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["40px",{"_index":3846,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["42",{"_index":4741,"title":{},"body":{"overview.html":{}}}],["450b57",{"_index":1501,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["4a2484",{"_index":1518,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["4em",{"_index":2403,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["4px",{"_index":1612,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/FiltersContentComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["4rem",{"_index":280,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["5",{"_index":1441,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"components/FiltersPopoverComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["5.5rem",{"_index":313,"title":{},"body":{"components/AppComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["50",{"_index":3068,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{},"components/OntologySearchComponent.html":{}}}],["500",{"_index":921,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["500px",{"_index":3844,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["542788",{"_index":1470,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["5678",{"_index":3702,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["5bd084c8",{"_index":2619,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["5em",{"_index":2182,"title":{},"body":{"components/DropdownComponent.html":{},"components/FiltersContentComponent.html":{}}}],["5rem",{"_index":1620,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["5s",{"_index":3255,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["6",{"_index":4429,"title":{},"body":{"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["6.5.5",{"_index":4667,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":3109,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/OldRuiData.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["60em",{"_index":3285,"title":{},"body":{"components/InfoButtonComponent.html":{}}}],["625rem",{"_index":4163,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["64b5f6",{"_index":1449,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["666",{"_index":1442,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["66bb6a",{"_index":1432,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["67a9cf",{"_index":1454,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["69f0ae",{"_index":2368,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["6bab65",{"_index":1497,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["6e016b",{"_index":1486,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["6rem",{"_index":2463,"title":{},"body":{"components/HeaderComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["7",{"_index":4402,"title":{},"body":{"components/ViewerComponent.html":{}}}],["7.5rem",{"_index":316,"title":{},"body":{"components/AppComponent.html":{}}}],["70px",{"_index":2325,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["73bb26e4",{"_index":2624,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["75",{"_index":2602,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["75rem",{"_index":2326,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["76",{"_index":2603,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["78223c",{"_index":1508,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["7rem",{"_index":1375,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContentComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["8",{"_index":4409,"title":{},"body":{"components/ViewerComponent.html":{},"changelog.html":{},"overview.html":{}}}],["8.2.0",{"_index":4645,"title":{},"body":{"dependencies.html":{}}}],["8.2.3",{"_index":4640,"title":{},"body":{"dependencies.html":{}}}],["8.25rem",{"_index":2467,"title":{},"body":{"components/HeaderComponent.html":{}}}],["8.9",{"_index":596,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["802f",{"_index":2621,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["80cbc4",{"_index":1447,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["83",{"_index":2050,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["833",{"_index":1443,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["85",{"_index":2591,"title":{},"body":{"classes/HuBMAPEntity.html":{},"changelog.html":{}}}],["86",{"_index":2592,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["883381",{"_index":1517,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["88419d",{"_index":1487,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["8bce",{"_index":2609,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["8c6bb1",{"_index":1488,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["8c96c6",{"_index":1489,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["8em",{"_index":1322,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["8f19",{"_index":2625,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["8rem",{"_index":3257,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["9",{"_index":2719,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["9.1.11",{"_index":4634,"title":{},"body":{"dependencies.html":{}}}],["9.2.4",{"_index":4636,"title":{},"body":{"dependencies.html":{}}}],["9.5",{"_index":559,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["9.85rem",{"_index":2155,"title":{},"body":{"components/DropdownComponent.html":{}}}],["90",{"_index":2370,"title":{},"body":{"components/FiltersContentComponent.html":{},"changelog.html":{}}}],["91cf60",{"_index":1462,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["95",{"_index":4138,"title":{},"body":{"components/ResultsBrowserComponent.html":{},"changelog.html":{}}}],["990000",{"_index":1478,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["998ec3",{"_index":1471,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["9e9e9e",{"_index":3260,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["9ebcda",{"_index":1490,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["9rem",{"_index":4137,"title":{},"body":{"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["_afterconnected",{"_index":1928,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["_aggregatedataquerystatus",{"_index":1974,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["_blank",{"_index":4157,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["_channelconfigs",{"_index":1182,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["_error",{"_index":2937,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["_expanded",{"_index":3492,"title":{},"body":{"classes/InitializationState.html":{}}}],["_height",{"_index":1173,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["_layers",{"_index":3198,"title":{},"body":{"components/ImageViewerLegendComponent.html":{},"components/ViewerComponent.html":{}}}],["_lighting",{"_index":642,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["_listdataquerystatus",{"_index":1975,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["_loaders",{"_index":1178,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["_measuredmargin",{"_index":3521,"title":{},"body":{"classes/InitializationState.html":{}}}],["_measuredwidth",{"_index":3515,"title":{},"body":{"classes/InitializationState.html":{}}}],["_msg",{"_index":1718,"title":{},"body":{"components/ContainerComponent.html":{}}}],["_onclick",{"_index":465,"title":{},"body":{"classes/BodyUI.html":{}}}],["_onclick(e",{"_index":491,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["_onhover",{"_index":466,"title":{},"body":{"classes/BodyUI.html":{}}}],["_onhover(e",{"_index":499,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["_onviewstatechange",{"_index":467,"title":{},"body":{"classes/BodyUI.html":{}}}],["_onviewstatechange(event",{"_index":501,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["_opened",{"_index":3488,"title":{},"body":{"classes/InitializationState.html":{}}}],["_placement",{"_index":3728,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["_position",{"_index":3484,"title":{},"body":{"classes/InitializationState.html":{}}}],["_self",{"_index":4158,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["_source",{"_index":2689,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["_sources",{"_index":1177,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"components/ViewerComponent.html":{}}}],["_termoccurencesdataquerystatus",{"_index":1976,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["_thumbnail.png",{"_index":2829,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["_width",{"_index":1172,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["a.highlighted",{"_index":937,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["ability",{"_index":3145,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["about.wrapper",{"_index":3414,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["above",{"_index":4602,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["absolute",{"_index":1614,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["abstract",{"_index":1168,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["acc",{"_index":3942,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["acc[current.id",{"_index":3946,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["accelerate",{"_index":3325,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["accent",{"_index":1311,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["accepting",{"_index":3571,"title":{},"body":{"classes/InitializationState.html":{}}}],["accessible",{"_index":1962,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["accessors",{"_index":1345,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContainerComponent.html":{},"components/DualSliderComponent.html":{},"classes/FlatNode.html":{},"classes/ImageViewer.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLegendComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["accordingly",{"_index":2390,"title":{},"body":{"components/FiltersPopoverComponent.html":{},"components/ImageViewerLayersComponent.html":{}}}],["accordion",{"_index":3048,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{}}}],["accordion'},{'name",{"_index":354,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["accordion.component",{"_index":3078,"title":{},"body":{"modules/ImageViewerAccordionModule.html":{}}}],["accordion.component.html",{"_index":3050,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{}}}],["accordion.component.scss",{"_index":3049,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{}}}],["accordion.component.ts",{"_index":3047,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{}}}],["accordion.component.ts:20",{"_index":3056,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{}}}],["accordion.component.ts:25",{"_index":3055,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{}}}],["accordion.component.ts:30",{"_index":3053,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{}}}],["accordion.component.ts:35",{"_index":3057,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{}}}],["accordion.component.ts:38",{"_index":3059,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{}}}],["accordion.module",{"_index":3098,"title":{},"body":{"modules/ImageViewerContentModule.html":{}}}],["accordion.module.ts",{"_index":3075,"title":{},"body":{"modules/ImageViewerAccordionModule.html":{}}}],["accordion/image",{"_index":3046,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{}}}],["accumulated",{"_index":3943,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["accumulator",{"_index":3941,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["acknowledgements",{"_index":3375,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["action",{"_index":4146,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{},"license.html":{}}}],["activate",{"_index":149,"title":{},"body":{"components/AppComponent.html":{}}}],["active",{"_index":1132,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoDialogComponent.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"components/ViewerComponent.html":{}}}],["active/showing",{"_index":4239,"title":{},"body":{"components/SpinnerOverlayComponent.html":{}}}],["activelayers",{"_index":4460,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["actual_component",{"_index":380,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["add",{"_index":259,"title":{},"body":{"components/AppComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"components/CheckboxComponent.html":{},"interfaces/DefaultIconDefinition.html":{},"injectables/OntologySearchService.html":{},"components/ResultsBrowserComponent.html":{},"interfaces/SearchResult.html":{},"injectables/ThemingService.html":{}}}],["addclass",{"_index":4330,"title":{},"body":{"injectables/ThemingService.html":{}}}],["added",{"_index":3944,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"changelog.html":{}}}],["addhubmapdatatostore",{"_index":861,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/HuBMAPEntity.html":{}}}],["additional",{"_index":4603,"title":{},"body":{"changelog.html":{}}}],["addjsonldtostore",{"_index":856,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/HuBMAPEntity.html":{}}}],["addjsonldtostore(hubmapresponseasjsonld(hubmapdata",{"_index":2897,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["addn3tostore",{"_index":857,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["addrdfxmltostore",{"_index":858,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["adds",{"_index":1557,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"classes/HuBMAPEntity.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"injectables/ThemingService.html":{}}}],["addspatialentity",{"_index":943,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["addspatialentity(entity",{"_index":952,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["addspatialobjectreference",{"_index":944,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["addspatialobjectreference(ref",{"_index":954,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["addspatialplacement",{"_index":945,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["addspatialplacement(placement",{"_index":958,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["addsubtree",{"_index":3945,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["addsubtree(model.nodes",{"_index":3939,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["addsubtree(nodes",{"_index":3948,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["addsvgicon",{"_index":2941,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["aed581",{"_index":1451,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["af.svg",{"_index":2810,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["af_preims_registered_thumbnail.png",{"_index":2576,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["af_premxif_registered_thumbnail.png",{"_index":2582,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["afterviewinit",{"_index":717,"title":{},"body":{"components/BodyUiComponent.html":{},"components/ContainerComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["against",{"_index":3560,"title":{},"body":{"classes/InitializationState.html":{}}}],["age",{"_index":63,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"changelog.html":{}}}],["agematch",{"_index":2717,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["agerange",{"_index":76,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["aggregate",{"_index":9,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["aggregatedata",{"_index":1977,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/ResultsBrowserComponent.html":{}}}],["aggregatedata(filter",{"_index":1988,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["aggregatedataquerystatus",{"_index":1978,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["aggregateresult",{"_index":1,"title":{"interfaces/AggregateResult.html":{}},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"components/ResultsBrowserComponent.html":{},"interfaces/SearchableItem.html":{}}}],["aims",{"_index":3336,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["aliases",{"_index":4743,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":305,"title":{},"body":{"components/AppComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DualSliderComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ViewerComponent.html":{}}}],["alignment_datetime",{"_index":3677,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["alignment_id",{"_index":3678,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["alignment_operator_first_name",{"_index":3679,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["alignment_operator_last_name",{"_index":3680,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["allcompleted(states",{"_index":2026,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["allergy",{"_index":3403,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["allow",{"_index":917,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["allowing",{"_index":4116,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["allows",{"_index":729,"title":{},"body":{"components/BodyUiComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{}}}],["along",{"_index":1406,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/OntologySelectionComponent.html":{}}}],["alongside",{"_index":4241,"title":{},"body":{"components/SpinnerOverlayComponent.html":{}}}],["alpha",{"_index":4596,"title":{},"body":{"changelog.html":{}}}],["alpha.1",{"_index":4576,"title":{},"body":{"changelog.html":{}}}],["alpha.2",{"_index":4571,"title":{},"body":{"changelog.html":{}}}],["alpha.3",{"_index":4557,"title":{},"body":{"changelog.html":{}}}],["already",{"_index":1737,"title":{},"body":{"components/ContainerComponent.html":{},"injectables/ThemingService.html":{}}}],["always",{"_index":1764,"title":{},"body":{"components/ContainerComponent.html":{},"components/HeaderComponent.html":{}}}],["ambientlight",{"_index":509,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["analysis",{"_index":3319,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["ancestor_ids",{"_index":2889,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["ancestors",{"_index":2498,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["and/or",{"_index":4706,"title":{},"body":{"license.html":{}}}],["angular",{"_index":110,"title":{},"body":{"components/AppComponent.html":{},"changelog.html":{}}}],["angular's",{"_index":2239,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["angular/animations",{"_index":1841,"title":{},"body":{"components/ContentComponent.html":{},"classes/InitializationState.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":4635,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/coercion",{"_index":3443,"title":{},"body":{"classes/InitializationState.html":{}}}],["angular/cdk/overlay",{"_index":2273,"title":{},"body":{"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"injectables/ThemingService.html":{}}}],["angular/cdk/portal",{"_index":2274,"title":{},"body":{"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{}}}],["angular/cdk/scrolling",{"_index":4180,"title":{},"body":{"modules/ResultsBrowserModule.html":{}}}],["angular/common",{"_index":445,"title":{},"body":{"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/ViewerModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":1911,"title":{},"body":{"modules/CoreModule.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["angular/compiler",{"_index":4637,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":151,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/BodyModule.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"modules/CoreModule.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"modules/DrawerModule.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"modules/OntologyExplorationModule.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"modules/OntologyTreeModule.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"interfaces/SearchResult.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":3816,"title":{},"body":{"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"dependencies.html":{}}}],["angular/material",{"_index":4638,"title":{},"body":{"dependencies.html":{}}}],["angular/material/autocomplete",{"_index":3817,"title":{},"body":{"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{}}}],["angular/material/button",{"_index":2484,"title":{},"body":{"modules/HeaderModule.html":{},"modules/OntologyTreeModule.html":{}}}],["angular/material/checkbox",{"_index":1305,"title":{},"body":{"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"modules/ImageViewerLayersModule.html":{}}}],["angular/material/dialog",{"_index":3282,"title":{},"body":{"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{}}}],["angular/material/expansion",{"_index":3077,"title":{},"body":{"modules/ImageViewerAccordionModule.html":{}}}],["angular/material/form",{"_index":2189,"title":{},"body":{"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/OntologySearchModule.html":{},"modules/SchemeDropdownModule.html":{}}}],["angular/material/icon",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"modules/DrawerModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"modules/ImageViewerContentModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ViewerModule.html":{}}}],["angular/material/input",{"_index":3859,"title":{},"body":{"modules/OntologySearchModule.html":{}}}],["angular/material/progress",{"_index":4251,"title":{},"body":{"modules/SpinnerOverlayModule.html":{}}}],["angular/material/radio",{"_index":4216,"title":{},"body":{"modules/SchemeDropdownModule.html":{}}}],["angular/material/select",{"_index":2191,"title":{},"body":{"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/SchemeDropdownModule.html":{}}}],["angular/material/theming",{"_index":4159,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["angular/material/toolbar",{"_index":2486,"title":{},"body":{"modules/HeaderModule.html":{}}}],["angular/material/tooltip",{"_index":2488,"title":{},"body":{"modules/HeaderModule.html":{},"modules/OntologyTreeModule.html":{}}}],["angular/material/tree",{"_index":4036,"title":{},"body":{"modules/OntologyTreeModule.html":{}}}],["angular/platform",{"_index":411,"title":{},"body":{"modules/AppModule.html":{},"modules/DrawerModule.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"dependencies.html":{}}}],["angular/router",{"_index":4639,"title":{},"body":{"dependencies.html":{}}}],["animate",{"_index":1838,"title":{},"body":{"components/ContentComponent.html":{},"classes/InitializationState.html":{}}}],["animate('1.5s",{"_index":3469,"title":{},"body":{"classes/InitializationState.html":{}}}],["animate('1s",{"_index":1846,"title":{},"body":{"components/ContentComponent.html":{}}}],["animate(0",{"_index":3468,"title":{},"body":{"classes/InitializationState.html":{}}}],["animation",{"_index":2165,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"classes/InitializationState.html":{}}}],["animations",{"_index":1807,"title":{},"body":{"components/ContentComponent.html":{},"classes/InitializationState.html":{}}}],["animationsenabled",{"_index":1848,"title":{},"body":{"components/ContentComponent.html":{}}}],["annotate",{"_index":3338,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["api",{"_index":880,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/HuBMAPEntity.html":{},"changelog.html":{}}}],["api.hubmapconsortium.org/entities",{"_index":2570,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["app",{"_index":182,"title":{},"body":{"components/AppComponent.html":{},"interfaces/DefaultIconDefinition.html":{},"components/OntologySelectionComponent.html":{},"modules/StoreModule.html":{}}}],["app.component",{"_index":414,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":123,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":121,"title":{},"body":{"components/AppComponent.html":{}}}],["app/core/services/theming/theming.service",{"_index":436,"title":{},"body":{"modules/AppModule.html":{}}}],["app_bootstrap_listener",{"_index":4280,"title":{},"body":{"modules/ThemingModule.html":{}}}],["appcomponent",{"_index":102,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["appearance",{"_index":3843,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["application/json",{"_index":2876,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["applied",{"_index":70,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"injectables/ThemingService.html":{}}}],["apply",{"_index":2355,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["applybuttonclick",{"_index":2346,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["applyfilter",{"_index":721,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["applyfilter(filter",{"_index":737,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["applyfilters",{"_index":2347,"title":{},"body":{"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{}}}],["applyfilters(filters",{"_index":2393,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["applypropdefaults(props",{"_index":1163,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["applyspatialplacement(tx",{"_index":981,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["applythemeclass",{"_index":4287,"title":{},"body":{"injectables/ThemingService.html":{}}}],["applythemeclass(cls",{"_index":4294,"title":{},"body":{"injectables/ThemingService.html":{}}}],["appmodule",{"_index":382,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":4620,"title":{},"body":{"changelog.html":{}}}],["area",{"_index":4160,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["args",{"_index":1147,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["args.filter(value",{"_index":2948,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["argsgenerator",{"_index":1240,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["argument",{"_index":2946,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["arguments",{"_index":1647,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["arising",{"_index":4736,"title":{},"body":{"license.html":{}}}],["array",{"_index":249,"title":{},"body":{"components/AppComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DualSliderComponent.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/OntologyNode.html":{},"injectables/OntologySearchService.html":{},"components/ResultsBrowserComponent.html":{},"interfaces/SearchResult.html":{}}}],["array.from(searchresults.values",{"_index":3981,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["arrow",{"_index":2180,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["arxiv",{"_index":3355,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["asking",{"_index":1281,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["assay_types",{"_index":2864,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["assaytype",{"_index":2792,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["assaytypes",{"_index":2499,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["assaytypes.keys()].sort",{"_index":2800,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["assaytypes.set(assaytype",{"_index":2794,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["assets",{"_index":885,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["assets/histology3.jpg",{"_index":2824,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["assets/icons/app/hubmap",{"_index":2119,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{}}}],["assets/icons/filter.svg",{"_index":2121,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{}}}],["assets/icons/ico",{"_index":2806,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["assets/thumbnails/dr1",{"_index":2831,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["assetsapi",{"_index":2500,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["associated",{"_index":838,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"license.html":{}}}],["async",{"_index":650,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"interfaces/ExtDeckProps.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/InitializationState.html":{},"interfaces/OMEZarrInfo.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/TiffInfo.html":{},"components/ViewerComponent.html":{}}}],["at(model.nodes",{"_index":3934,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["at(nodes",{"_index":3989,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["atlas",{"_index":3315,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["atscrollbottom",{"_index":4106,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["attach",{"_index":4341,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["authentication",{"_index":2466,"title":{},"body":{"components/HeaderComponent.html":{}}}],["authorgroup",{"_index":2847,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["authors",{"_index":4729,"title":{},"body":{"license.html":{}}}],["auto",{"_index":1617,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/ContentComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["autocolorindex",{"_index":4493,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["autocomplete",{"_index":3811,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["autocompleteopen",{"_index":3774,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["autohighlight",{"_index":672,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["available",{"_index":1551,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/InfoDialogComponent.html":{},"components/SchemeDropdownComponent.html":{},"modules.html":{}}}],["await",{"_index":653,"title":{},"body":{"classes/BodyUILayer.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"interfaces/ExtDeckProps.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/InitializationState.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/TiffInfo.html":{},"components/ViewerComponent.html":{}}}],["awaited",{"_index":3428,"title":{},"body":{"classes/InitializationState.html":{}}}],["award",{"_index":3394,"title":{},"body":{"components/InfoDialogComponent.html":{},"index.html":{}}}],["b",{"_index":936,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["b.highlighted",{"_index":938,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["b2182b",{"_index":1459,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["b35806",{"_index":1475,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["b39ddb",{"_index":1433,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["b4335a",{"_index":1507,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["b56a",{"_index":2614,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["b5c740",{"_index":1496,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["backend",{"_index":91,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["background",{"_index":298,"title":{},"body":{"components/AppComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/PureImageViewerLayer.html":{},"changelog.html":{},"index.html":{}}}],["backing",{"_index":2923,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["bar",{"_index":1335,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DualSliderComponent.html":{}}}],["bar'},{'name",{"_index":330,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["bar.component",{"_index":1388,"title":{},"body":{"modules/ColorBarModule.html":{}}}],["bar.component.html",{"_index":1338,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["bar.component.scss",{"_index":1337,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["bar.component.ts",{"_index":1334,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["bar.component.ts:18",{"_index":1347,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["bar.component.ts:23",{"_index":1352,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["bar.component.ts:28",{"_index":1353,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["bar.component.ts:33",{"_index":1349,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["bar.component.ts:38",{"_index":1355,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["bar.component.ts:43",{"_index":1367,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["bar.component.ts:55",{"_index":1362,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["bar.component.ts:64",{"_index":1358,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["bar.module",{"_index":1632,"title":{},"body":{"modules/ColorSchemeContentsModule.html":{},"modules/SchemeDropdownModule.html":{}}}],["bar.module.ts",{"_index":1387,"title":{},"body":{"modules/ColorBarModule.html":{}}}],["bar/color",{"_index":1333,"title":{},"body":{"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/SchemeDropdownModule.html":{}}}],["bars",{"_index":1371,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["base",{"_index":4581,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":248,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/InfoDialogComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchResult.html":{}}}],["bbox",{"_index":3509,"title":{},"body":{"classes/InitializationState.html":{}}}],["bbox.left",{"_index":3512,"title":{},"body":{"classes/InitializationState.html":{}}}],["bbox.right",{"_index":3511,"title":{},"body":{"classes/InitializationState.html":{}}}],["bcbb",{"_index":3410,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["bearer",{"_index":2879,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["became",{"_index":3345,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["becomes",{"_index":3371,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["before",{"_index":1558,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"interfaces/DefaultIconDefinition.html":{},"components/ImageViewerLayersComponent.html":{},"classes/InitializationState.html":{}}}],["being",{"_index":3304,"title":{},"body":{"components/InfoDialogComponent.html":{},"modules/StoreModule.html":{}}}],["between",{"_index":225,"title":{},"body":{"components/AppComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"changelog.html":{}}}],["bf",{"_index":3645,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/enumerations.html":{}}}],["bfd3e6",{"_index":1491,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["bftiff",{"_index":3644,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/enumerations.html":{}}}],["bind",{"_index":495,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"dependencies.html":{}}}],["biomolecular",{"_index":3314,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["bioportal",{"_index":3350,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["bitwise",{"_index":4400,"title":{},"body":{"components/ViewerComponent.html":{}}}],["bl",{"_index":2641,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["black",{"_index":2163,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{}}}],["bladder",{"_index":2671,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["block",{"_index":1682,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/InfoDialogComponent.html":{}}}],["blue",{"_index":4410,"title":{},"body":{"components/ViewerComponent.html":{}}}],["bluered",{"_index":1452,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["bmi",{"_index":64,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["bmi.tofixed(1",{"_index":2733,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["bmirange",{"_index":77,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["board",{"_index":4575,"title":{},"body":{"changelog.html":{}}}],["body",{"_index":128,"title":{},"body":{"components/AppComponent.html":{},"modules/BodyModule.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialScene.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"changelog.html":{}}}],["body.id",{"_index":3936,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["bodycanvas",{"_index":720,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["bodyid",{"_index":1053,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["bodymodule",{"_index":393,"title":{"modules/BodyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BodyModule.html":{},"modules.html":{},"overview.html":{}}}],["bodyui",{"_index":448,"title":{"classes/BodyUI.html":{}},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{}}}],["bodyuicomponent",{"_index":324,"title":{"components/BodyUiComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["bodyuilayer",{"_index":456,"title":{"classes/BodyUILayer.html":{}},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/SpatialSceneNode.html":{}}}],["bodyuimodule",{"_index":442,"title":{"modules/BodyUiModule.html":{}},"body":{"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules.html":{},"overview.html":{}}}],["bodyuiprops",{"_index":518,"title":{"interfaces/BodyUIProps.html":{}},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["bold",{"_index":1318,"title":{},"body":{"components/CheckboxComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/InfoDialogComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["boolean",{"_index":46,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"interfaces/ImageViewerProps.html":{},"classes/InitializationState.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["booleaninput",{"_index":3441,"title":{},"body":{"classes/InitializationState.html":{}}}],["boolean}).zoomopacity",{"_index":563,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["bootstrap",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules/CoreModule.html":{},"modules/DrawerModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/ThemingModule.html":{},"injectables/ThemingService.html":{},"modules/ViewerModule.html":{},"overview.html":{}}}],["border",{"_index":300,"title":{},"body":{"components/AppComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/OntologySearchComponent.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["both",{"_index":74,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFSpatialScene.html":{},"interfaces/DataSource.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["bottom",{"_index":286,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["bound",{"_index":2256,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["bounding",{"_index":1089,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["box",{"_index":1606,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{},"changelog.html":{}}}],["boxes",{"_index":1090,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["branch",{"_index":111,"title":{},"body":{"components/AppComponent.html":{}}}],["break",{"_index":769,"title":{},"body":{"components/BodyUiComponent.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["brightness",{"_index":1554,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["brightness/transparency",{"_index":1528,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["brightness[0",{"_index":4414,"title":{},"body":{"components/ViewerComponent.html":{}}}],["brightness[1",{"_index":4415,"title":{},"body":{"components/ViewerComponent.html":{}}}],["brightness_2",{"_index":266,"title":{},"body":{"components/AppComponent.html":{}}}],["brightness_5",{"_index":267,"title":{},"body":{"components/AppComponent.html":{}}}],["brightnesschanged",{"_index":1535,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["brightnesshigh",{"_index":1540,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["brightnesshigh(value",{"_index":1587,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["brightnesslow",{"_index":1539,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["brightnesslow(value",{"_index":1583,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["brightnessslideroptions",{"_index":1533,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["brightnesstoslider(brightness",{"_index":4411,"title":{},"body":{"components/ViewerComponent.html":{}}}],["brightnesstoslider(layer.brightness",{"_index":4446,"title":{},"body":{"components/ViewerComponent.html":{}}}],["browse",{"_index":4739,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":136,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"modules/DrawerModule.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"changelog.html":{},"dependencies.html":{},"modules.html":{}}}],["browser'},{'name",{"_index":371,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["browser.component",{"_index":4178,"title":{},"body":{"modules/ResultsBrowserModule.html":{}}}],["browser.component.html",{"_index":4105,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["browser.component.scss",{"_index":4104,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["browser.component.ts",{"_index":4098,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["browser.component.ts:20",{"_index":4113,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["browser.component.ts:25",{"_index":4112,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["browser.component.ts:30",{"_index":4115,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["browser.component.ts:35",{"_index":4114,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["browser.component.ts:41",{"_index":4117,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["browser.component.ts:47",{"_index":4123,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["browser.component.ts:52",{"_index":4127,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["browser.component.ts:59",{"_index":4121,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["browser.module",{"_index":431,"title":{},"body":{"modules/AppModule.html":{}}}],["browser.module.ts",{"_index":4176,"title":{},"body":{"modules/ResultsBrowserModule.html":{}}}],["browser/animations",{"_index":413,"title":{},"body":{"modules/AppModule.html":{},"modules/DrawerModule.html":{}}}],["browser/results",{"_index":430,"title":{},"body":{"modules/AppModule.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{}}}],["browseranimationsmodule",{"_index":412,"title":{},"body":{"modules/AppModule.html":{},"modules/DrawerModule.html":{}}}],["browsermodule",{"_index":410,"title":{},"body":{"modules/AppModule.html":{},"modules/DrawerModule.html":{}}}],["browsing",{"_index":3342,"title":{},"body":{"components/InfoDialogComponent.html":{},"changelog.html":{}}}],["bug",{"_index":4535,"title":{},"body":{"changelog.html":{}}}],["bulk",{"_index":2550,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["button",{"_index":296,"title":{},"body":{"components/AppComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ToggleButtonComponent.html":{},"changelog.html":{}}}],["button'},{'name",{"_index":361,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["button.component",{"_index":2131,"title":{},"body":{"modules/DrawerModule.html":{},"modules/InfoButtonModule.html":{}}}],["button.component.html",{"_index":3273,"title":{},"body":{"components/InfoButtonComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["button.component.scss",{"_index":3272,"title":{},"body":{"components/InfoButtonComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["button.component.ts",{"_index":3269,"title":{},"body":{"components/InfoButtonComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["button.component.ts:15",{"_index":3277,"title":{},"body":{"components/InfoButtonComponent.html":{}}}],["button.component.ts:19",{"_index":4339,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["button.component.ts:22",{"_index":4340,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["button.component.ts:25",{"_index":4349,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["button.component.ts:26",{"_index":3280,"title":{},"body":{"components/InfoButtonComponent.html":{}}}],["button.component.ts:34",{"_index":4347,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["button.component.ts:36",{"_index":4346,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["button.component.ts:38",{"_index":4337,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["button.component.ts:59",{"_index":4343,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["button.component.ts:69",{"_index":4344,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["button.component.ts:79",{"_index":4342,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["button.component.ts:91",{"_index":4345,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["button.module",{"_index":2490,"title":{},"body":{"modules/HeaderModule.html":{}}}],["button.module.ts",{"_index":3291,"title":{},"body":{"modules/InfoButtonModule.html":{}}}],["button/info",{"_index":2489,"title":{},"body":{"modules/HeaderModule.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{}}}],["button/toggle",{"_index":2130,"title":{},"body":{"modules/DrawerModule.html":{},"components/ToggleButtonComponent.html":{}}}],["button:active",{"_index":2367,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["c",{"_index":4686,"title":{},"body":{"license.html":{}}}],["c6427e",{"_index":1516,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["ca7670",{"_index":1506,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["cached",{"_index":3513,"title":{},"body":{"classes/InitializationState.html":{}}}],["calc",{"_index":4361,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["calc(100",{"_index":312,"title":{},"body":{"components/AppComponent.html":{},"components/ContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/ResultsBrowserComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["calc(50",{"_index":3473,"title":{},"body":{"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["calculated",{"_index":3505,"title":{},"body":{"classes/InitializationState.html":{}}}],["calculates",{"_index":1658,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"classes/ImageViewerLayer.html":{}}}],["call",{"_index":195,"title":{},"body":{"components/AppComponent.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/InfoDialogComponent.html":{}}}],["callback",{"_index":3802,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["called",{"_index":2061,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"classes/InitializationState.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"injectables/ThemingService.html":{}}}],["calls",{"_index":214,"title":{},"body":{"components/AppComponent.html":{}}}],["caltech",{"_index":2618,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["candidate",{"_index":4542,"title":{},"body":{"changelog.html":{}}}],["canvas",{"_index":519,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"components/ViewerComponent.html":{}}}],["canvas.addeventlistener('contextmenu",{"_index":749,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["captures",{"_index":232,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/OntologySelectionComponent.html":{}}}],["case",{"_index":765,"title":{},"body":{"components/BodyUiComponent.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/ContentComponent.html":{},"classes/InitializationState.html":{},"interfaces/OMEZarrInfo.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode-1.html":{},"interfaces/TiffInfo.html":{}}}],["catch",{"_index":2936,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["ccf",{"_index":118,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/OldRuiData.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"changelog.html":{},"index.html":{}}}],["ccf.spatial.body.id",{"_index":1063,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccf.spatial.bothsexes.id",{"_index":1057,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccf.spatial.female.id",{"_index":1056,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccf.spatial.femaleorgans.id",{"_index":1061,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccf.spatial.male.id",{"_index":1055,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccf.spatial.maleorgans.id",{"_index":1060,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccf.spatialentity",{"_index":1016,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["ccf.spatialobjectreference",{"_index":1014,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["ccf.spatialplacement",{"_index":1019,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["ccf.x('vhkidney').id",{"_index":3703,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["ccf.x('vhleftkidney').id",{"_index":1084,"title":{},"body":{"classes/CCFSpatialScene.html":{},"classes/HuBMAPEntity.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccf.x('vhrightkidney').id",{"_index":1081,"title":{},"body":{"classes/CCFSpatialScene.html":{},"classes/HuBMAPEntity.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccf.x('vhspleen').id",{"_index":1086,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccf.x('vhspleencc1').id",{"_index":1092,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccf.x('vhspleencc2').id",{"_index":1093,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccf.x('vhspleencc3').id",{"_index":1094,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccf_annotations",{"_index":3720,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["ccfcontexturl",{"_index":877,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["ccfdatabase",{"_index":792,"title":{"classes/CCFDatabase.html":{}},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"injectables/DataSourceService.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccfdatabaseoptions",{"_index":808,"title":{"interfaces/CCFDatabaseOptions.html":{}},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"injectables/DataSourceService.html":{}}}],["ccfdrawer",{"_index":3461,"title":{},"body":{"classes/InitializationState.html":{}}}],["ccfdrawercontainer",{"_index":1693,"title":{},"body":{"components/ContainerComponent.html":{}}}],["ccfowlurl",{"_index":875,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["ccfowlurl.endswith('.n3",{"_index":904,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["ccfspatialgraph",{"_index":811,"title":{"classes/CCFSpatialGraph.html":{}},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{}}}],["ccfspatialgraph(this",{"_index":897,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["ccfspatialscene",{"_index":815,"title":{"classes/CCFSpatialScene.html":{}},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["ccfspatialscene(this",{"_index":899,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["cdk",{"_index":2177,"title":{},"body":{"components/DropdownComponent.html":{}}}],["cdkportal",{"_index":2266,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["cdr",{"_index":1707,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["cdr.markforcheck",{"_index":1781,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["ceil",{"_index":1593,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DualSliderComponent.html":{}}}],["cell",{"_index":3327,"title":{},"body":{"components/InfoDialogComponent.html":{},"changelog.html":{}}}],["center",{"_index":306,"title":{},"body":{"components/AppComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContentComponent.html":{},"components/DualSliderComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ViewerComponent.html":{},"index.html":{}}}],["centers",{"_index":3384,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["centimeter",{"_index":985,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["cff",{"_index":310,"title":{},"body":{"components/AppComponent.html":{},"components/ContentComponent.html":{}}}],["change",{"_index":1522,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/OntologySelectionComponent.html":{},"components/ToggleButtonComponent.html":{},"index.html":{}}}],["changed",{"_index":1560,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"changelog.html":{}}}],["changedetection",{"_index":1396,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["changedetectionstrategy",{"_index":1409,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":1397,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["changedetectorref",{"_index":1708,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["changelog",{"_index":4518,"title":{"changelog.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["changes",{"_index":233,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/ContentContainerChanged.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["changes.color",{"_index":4501,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["changes.customizedcolor",{"_index":4505,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["changes.push",{"_index":4512,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["changes.selected",{"_index":4506,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["changes.selection",{"_index":2286,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["changes.valuerange",{"_index":2284,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["channel",{"_index":1697,"title":{},"body":{"components/ContainerComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ToggleButtonComponent.html":{},"miscellaneous/typealiases.html":{}}}],["channelconfig",{"_index":1129,"title":{"interfaces/ChannelConfig.html":{}},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"components/ViewerComponent.html":{}}}],["channelconfigs",{"_index":1180,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["channelison",{"_index":4086,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["channelison.push(active",{"_index":4091,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["channelnames",{"_index":1161,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["channelnames.length",{"_index":1257,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["channels",{"_index":3236,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["channelschange",{"_index":4371,"title":{},"body":{"components/ViewerComponent.html":{}}}],["channelschange.emit(!isrgb",{"_index":4441,"title":{},"body":{"components/ViewerComponent.html":{}}}],["charge",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"license.html":{}}}],["checkbox",{"_index":1272,"title":{},"body":{"components/CheckboxComponent.html":{},"components/ImageViewerLayersComponent.html":{}}}],["checkbox'},{'name",{"_index":327,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["checkbox.component",{"_index":1330,"title":{},"body":{"modules/CheckboxModule.html":{}}}],["checkbox.component.html",{"_index":1274,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["checkbox.component.scss",{"_index":1273,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["checkbox.mat",{"_index":1310,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["checkboxcomponent",{"_index":326,"title":{"components/CheckboxComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["checkboxes",{"_index":1270,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["checkboxmodule",{"_index":1324,"title":{"modules/CheckboxModule.html":{}},"body":{"modules/CheckboxModule.html":{},"modules/FiltersContentModule.html":{},"modules.html":{},"overview.html":{}}}],["checkboxonchange",{"_index":3150,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["checkboxonchange(layer",{"_index":3161,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["checked",{"_index":1288,"title":{},"body":{"components/CheckboxComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["checkmark",{"_index":1312,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["checks",{"_index":1831,"title":{},"body":{"components/ContentComponent.html":{}}}],["child",{"_index":2176,"title":{},"body":{"components/DropdownComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/OntologyNode.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"miscellaneous/typealiases.html":{}}}],["children",{"_index":2435,"title":{},"body":{"classes/FlatNode.html":{},"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/OntologyNode.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/ValueObject.html":{}}}],["choices",{"_index":2142,"title":{},"body":{"components/DropdownComponent.html":{}}}],["choose",{"_index":1645,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/ImageViewerLayersComponent.html":{}}}],["chronological",{"_index":2727,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["circle",{"_index":1412,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["claim",{"_index":4732,"title":{},"body":{"license.html":{}}}],["class",{"_index":179,"title":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"classes/CCFDatabase.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"classes/ImageViewerLayer.html":{},"classes/InitializationState.html":{},"classes/MessageChannel.html":{},"classes/PictureInPictureViewer.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/BodyModule.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"modules/CoreModule.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"modules/DrawerModule.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"interfaces/ExtDeckProps.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"modules/OntologyExplorationModule.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"modules/OntologyTreeModule.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["class.ccf",{"_index":4335,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["class.cff",{"_index":1812,"title":{},"body":{"components/ContentComponent.html":{}}}],["classend",{"_index":3479,"title":{},"body":{"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["classes",{"_index":449,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"classes/CCFDatabase.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"classes/ImageViewerLayer.html":{},"classes/InitializationState.html":{},"classes/MessageChannel.html":{},"classes/PictureInPictureViewer.html":{},"overview.html":{}}}],["classname",{"_index":1773,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["clean",{"_index":3616,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["cleans",{"_index":1727,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DualSliderComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["clear",{"_index":1194,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoDialogComponent.html":{},"classes/PictureInPictureViewer.html":{},"components/ViewerComponent.html":{}}}],["click",{"_index":1653,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["clicked",{"_index":1664,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/HeaderComponent.html":{},"components/InfoButtonComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["clickpos",{"_index":1677,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["clicks",{"_index":1655,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["clientheight",{"_index":4128,"title":{},"body":{"components/ResultsBrowserComponent.html":{},"components/ViewerComponent.html":{}}}],["clientwidth",{"_index":4427,"title":{},"body":{"components/ViewerComponent.html":{}}}],["close",{"_index":1665,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{}}}],["close(target",{"_index":1672,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["closed",{"_index":3233,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"miscellaneous/typealiases.html":{}}}],["closeexpanded",{"_index":3537,"title":{},"body":{"classes/InitializationState.html":{}}}],["closeopendone",{"_index":3545,"title":{},"body":{"classes/InitializationState.html":{}}}],["closes",{"_index":1654,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{}}}],["closesliderpopover(target",{"_index":2301,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["closeviewer",{"_index":3083,"title":{},"body":{"components/ImageViewerContentComponent.html":{}}}],["cloud_download",{"_index":2460,"title":{},"body":{"components/HeaderComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["cls",{"_index":4297,"title":{},"body":{"injectables/ThemingService.html":{}}}],["cluster_appmodule",{"_index":389,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":391,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_bodymodule",{"_index":439,"title":{},"body":{"modules/BodyModule.html":{},"overview.html":{}}}],["cluster_bodymodule_exports",{"_index":441,"title":{},"body":{"modules/BodyModule.html":{},"overview.html":{}}}],["cluster_bodymodule_imports",{"_index":440,"title":{},"body":{"modules/BodyModule.html":{},"overview.html":{}}}],["cluster_bodyuimodule",{"_index":787,"title":{},"body":{"modules/BodyUiModule.html":{},"overview.html":{}}}],["cluster_bodyuimodule_declarations",{"_index":788,"title":{},"body":{"modules/BodyUiModule.html":{},"overview.html":{}}}],["cluster_bodyuimodule_exports",{"_index":789,"title":{},"body":{"modules/BodyUiModule.html":{},"overview.html":{}}}],["cluster_checkboxmodule",{"_index":1325,"title":{},"body":{"modules/CheckboxModule.html":{},"overview.html":{}}}],["cluster_checkboxmodule_declarations",{"_index":1326,"title":{},"body":{"modules/CheckboxModule.html":{},"overview.html":{}}}],["cluster_checkboxmodule_exports",{"_index":1327,"title":{},"body":{"modules/CheckboxModule.html":{},"overview.html":{}}}],["cluster_colorbarmodule",{"_index":1384,"title":{},"body":{"modules/ColorBarModule.html":{},"overview.html":{}}}],["cluster_colorbarmodule_declarations",{"_index":1385,"title":{},"body":{"modules/ColorBarModule.html":{},"overview.html":{}}}],["cluster_colorbarmodule_exports",{"_index":1386,"title":{},"body":{"modules/ColorBarModule.html":{},"overview.html":{}}}],["cluster_colorpickerlaunchermodule",{"_index":1414,"title":{},"body":{"modules/ColorPickerLauncherModule.html":{},"overview.html":{}}}],["cluster_colorpickerlaunchermodule_declarations",{"_index":1415,"title":{},"body":{"modules/ColorPickerLauncherModule.html":{},"overview.html":{}}}],["cluster_colorpickerlaunchermodule_exports",{"_index":1417,"title":{},"body":{"modules/ColorPickerLauncherModule.html":{},"overview.html":{}}}],["cluster_colorpickerlaunchermodule_imports",{"_index":1416,"title":{},"body":{"modules/ColorPickerLauncherModule.html":{},"overview.html":{}}}],["cluster_colorschemecontentsmodule",{"_index":1625,"title":{},"body":{"modules/ColorSchemeContentsModule.html":{},"overview.html":{}}}],["cluster_colorschemecontentsmodule_declarations",{"_index":1626,"title":{},"body":{"modules/ColorSchemeContentsModule.html":{},"overview.html":{}}}],["cluster_colorschemecontentsmodule_exports",{"_index":1628,"title":{},"body":{"modules/ColorSchemeContentsModule.html":{},"overview.html":{}}}],["cluster_colorschemecontentsmodule_imports",{"_index":1627,"title":{},"body":{"modules/ColorSchemeContentsModule.html":{}}}],["cluster_colorschemepopupmodule",{"_index":1683,"title":{},"body":{"modules/ColorSchemePopupModule.html":{},"overview.html":{}}}],["cluster_colorschemepopupmodule_declarations",{"_index":1684,"title":{},"body":{"modules/ColorSchemePopupModule.html":{},"overview.html":{}}}],["cluster_colorschemepopupmodule_exports",{"_index":1686,"title":{},"body":{"modules/ColorSchemePopupModule.html":{},"overview.html":{}}}],["cluster_colorschemepopupmodule_imports",{"_index":1685,"title":{},"body":{"modules/ColorSchemePopupModule.html":{}}}],["cluster_coremodule",{"_index":1903,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_exports",{"_index":1905,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_imports",{"_index":1904,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_drawermodule",{"_index":2123,"title":{},"body":{"modules/DrawerModule.html":{},"overview.html":{}}}],["cluster_drawermodule_declarations",{"_index":2124,"title":{},"body":{"modules/DrawerModule.html":{},"overview.html":{}}}],["cluster_drawermodule_exports",{"_index":2125,"title":{},"body":{"modules/DrawerModule.html":{},"overview.html":{}}}],["cluster_dropdownmodule",{"_index":2184,"title":{},"body":{"modules/DropdownModule.html":{},"overview.html":{}}}],["cluster_dropdownmodule_declarations",{"_index":2185,"title":{},"body":{"modules/DropdownModule.html":{},"overview.html":{}}}],["cluster_dropdownmodule_exports",{"_index":2186,"title":{},"body":{"modules/DropdownModule.html":{},"overview.html":{}}}],["cluster_dualslidermodule",{"_index":2334,"title":{},"body":{"modules/DualSliderModule.html":{},"overview.html":{}}}],["cluster_dualslidermodule_declarations",{"_index":2335,"title":{},"body":{"modules/DualSliderModule.html":{},"overview.html":{}}}],["cluster_dualslidermodule_exports",{"_index":2336,"title":{},"body":{"modules/DualSliderModule.html":{},"overview.html":{}}}],["cluster_filterscontentmodule",{"_index":2373,"title":{},"body":{"modules/FiltersContentModule.html":{},"overview.html":{}}}],["cluster_filterscontentmodule_declarations",{"_index":2374,"title":{},"body":{"modules/FiltersContentModule.html":{},"overview.html":{}}}],["cluster_filterscontentmodule_exports",{"_index":2376,"title":{},"body":{"modules/FiltersContentModule.html":{},"overview.html":{}}}],["cluster_filterscontentmodule_imports",{"_index":2375,"title":{},"body":{"modules/FiltersContentModule.html":{}}}],["cluster_filterspopovermodule",{"_index":2411,"title":{},"body":{"modules/FiltersPopoverModule.html":{},"overview.html":{}}}],["cluster_filterspopovermodule_declarations",{"_index":2412,"title":{},"body":{"modules/FiltersPopoverModule.html":{},"overview.html":{}}}],["cluster_filterspopovermodule_exports",{"_index":2414,"title":{},"body":{"modules/FiltersPopoverModule.html":{},"overview.html":{}}}],["cluster_filterspopovermodule_imports",{"_index":2413,"title":{},"body":{"modules/FiltersPopoverModule.html":{}}}],["cluster_headermodule",{"_index":2477,"title":{},"body":{"modules/HeaderModule.html":{},"overview.html":{}}}],["cluster_headermodule_declarations",{"_index":2478,"title":{},"body":{"modules/HeaderModule.html":{},"overview.html":{}}}],["cluster_headermodule_exports",{"_index":2480,"title":{},"body":{"modules/HeaderModule.html":{},"overview.html":{}}}],["cluster_headermodule_imports",{"_index":2479,"title":{},"body":{"modules/HeaderModule.html":{},"overview.html":{}}}],["cluster_imagevieweraccordionmodule",{"_index":3070,"title":{},"body":{"modules/ImageViewerAccordionModule.html":{},"overview.html":{}}}],["cluster_imagevieweraccordionmodule_declarations",{"_index":3071,"title":{},"body":{"modules/ImageViewerAccordionModule.html":{},"overview.html":{}}}],["cluster_imagevieweraccordionmodule_exports",{"_index":3073,"title":{},"body":{"modules/ImageViewerAccordionModule.html":{},"overview.html":{}}}],["cluster_imagevieweraccordionmodule_imports",{"_index":3072,"title":{},"body":{"modules/ImageViewerAccordionModule.html":{},"overview.html":{}}}],["cluster_imageviewercontentmodule",{"_index":3094,"title":{},"body":{"modules/ImageViewerContentModule.html":{},"overview.html":{}}}],["cluster_imageviewercontentmodule_declarations",{"_index":3095,"title":{},"body":{"modules/ImageViewerContentModule.html":{},"overview.html":{}}}],["cluster_imageviewercontentmodule_exports",{"_index":3097,"title":{},"body":{"modules/ImageViewerContentModule.html":{},"overview.html":{}}}],["cluster_imageviewercontentmodule_imports",{"_index":3096,"title":{},"body":{"modules/ImageViewerContentModule.html":{}}}],["cluster_imageviewerlayersmodule",{"_index":3183,"title":{},"body":{"modules/ImageViewerLayersModule.html":{},"overview.html":{}}}],["cluster_imageviewerlayersmodule_declarations",{"_index":3184,"title":{},"body":{"modules/ImageViewerLayersModule.html":{},"overview.html":{}}}],["cluster_imageviewerlayersmodule_exports",{"_index":3186,"title":{},"body":{"modules/ImageViewerLayersModule.html":{},"overview.html":{}}}],["cluster_imageviewerlayersmodule_imports",{"_index":3185,"title":{},"body":{"modules/ImageViewerLayersModule.html":{},"overview.html":{}}}],["cluster_imageviewerlegendmodule",{"_index":3211,"title":{},"body":{"modules/ImageViewerLegendModule.html":{},"overview.html":{}}}],["cluster_imageviewerlegendmodule_declarations",{"_index":3212,"title":{},"body":{"modules/ImageViewerLegendModule.html":{},"overview.html":{}}}],["cluster_imageviewerlegendmodule_exports",{"_index":3213,"title":{},"body":{"modules/ImageViewerLegendModule.html":{},"overview.html":{}}}],["cluster_imageviewermodule",{"_index":3216,"title":{},"body":{"modules/ImageViewerModule.html":{},"overview.html":{}}}],["cluster_imageviewermodule_exports",{"_index":3218,"title":{},"body":{"modules/ImageViewerModule.html":{},"overview.html":{}}}],["cluster_imageviewermodule_imports",{"_index":3217,"title":{},"body":{"modules/ImageViewerModule.html":{},"overview.html":{}}}],["cluster_imageviewerpopovermodule",{"_index":3263,"title":{},"body":{"modules/ImageViewerPopoverModule.html":{},"overview.html":{}}}],["cluster_imageviewerpopovermodule_declarations",{"_index":3264,"title":{},"body":{"modules/ImageViewerPopoverModule.html":{},"overview.html":{}}}],["cluster_imageviewerpopovermodule_exports",{"_index":3266,"title":{},"body":{"modules/ImageViewerPopoverModule.html":{},"overview.html":{}}}],["cluster_imageviewerpopovermodule_imports",{"_index":3265,"title":{},"body":{"modules/ImageViewerPopoverModule.html":{}}}],["cluster_infobuttonmodule",{"_index":3287,"title":{},"body":{"modules/InfoButtonModule.html":{},"overview.html":{}}}],["cluster_infobuttonmodule_declarations",{"_index":3288,"title":{},"body":{"modules/InfoButtonModule.html":{},"overview.html":{}}}],["cluster_infobuttonmodule_exports",{"_index":3290,"title":{},"body":{"modules/InfoButtonModule.html":{},"overview.html":{}}}],["cluster_infobuttonmodule_imports",{"_index":3289,"title":{},"body":{"modules/InfoButtonModule.html":{}}}],["cluster_infodialogmodule",{"_index":3421,"title":{},"body":{"modules/InfoDialogModule.html":{},"overview.html":{}}}],["cluster_infodialogmodule_declarations",{"_index":3422,"title":{},"body":{"modules/InfoDialogModule.html":{},"overview.html":{}}}],["cluster_infodialogmodule_exports",{"_index":3423,"title":{},"body":{"modules/InfoDialogModule.html":{},"overview.html":{}}}],["cluster_ontologyexplorationmodule",{"_index":3752,"title":{},"body":{"modules/OntologyExplorationModule.html":{},"overview.html":{}}}],["cluster_ontologyexplorationmodule_exports",{"_index":3754,"title":{},"body":{"modules/OntologyExplorationModule.html":{},"overview.html":{}}}],["cluster_ontologyexplorationmodule_imports",{"_index":3753,"title":{},"body":{"modules/OntologyExplorationModule.html":{},"overview.html":{}}}],["cluster_ontologysearchmodule",{"_index":3851,"title":{},"body":{"modules/OntologySearchModule.html":{},"overview.html":{}}}],["cluster_ontologysearchmodule_declarations",{"_index":3852,"title":{},"body":{"modules/OntologySearchModule.html":{},"overview.html":{}}}],["cluster_ontologysearchmodule_exports",{"_index":3853,"title":{},"body":{"modules/OntologySearchModule.html":{},"overview.html":{}}}],["cluster_ontologyselectionmodule",{"_index":4015,"title":{},"body":{"modules/OntologySelectionModule.html":{},"overview.html":{}}}],["cluster_ontologyselectionmodule_declarations",{"_index":4016,"title":{},"body":{"modules/OntologySelectionModule.html":{},"overview.html":{}}}],["cluster_ontologyselectionmodule_exports",{"_index":4018,"title":{},"body":{"modules/OntologySelectionModule.html":{},"overview.html":{}}}],["cluster_ontologyselectionmodule_imports",{"_index":4017,"title":{},"body":{"modules/OntologySelectionModule.html":{}}}],["cluster_ontologytreemodule",{"_index":4031,"title":{},"body":{"modules/OntologyTreeModule.html":{},"overview.html":{}}}],["cluster_ontologytreemodule_declarations",{"_index":4032,"title":{},"body":{"modules/OntologyTreeModule.html":{},"overview.html":{}}}],["cluster_ontologytreemodule_exports",{"_index":4033,"title":{},"body":{"modules/OntologyTreeModule.html":{},"overview.html":{}}}],["cluster_resultsbrowseritemmodule",{"_index":4167,"title":{},"body":{"modules/ResultsBrowserItemModule.html":{},"overview.html":{}}}],["cluster_resultsbrowseritemmodule_declarations",{"_index":4168,"title":{},"body":{"modules/ResultsBrowserItemModule.html":{},"overview.html":{}}}],["cluster_resultsbrowseritemmodule_exports",{"_index":4169,"title":{},"body":{"modules/ResultsBrowserItemModule.html":{},"overview.html":{}}}],["cluster_resultsbrowsermodule",{"_index":4172,"title":{},"body":{"modules/ResultsBrowserModule.html":{},"overview.html":{}}}],["cluster_resultsbrowsermodule_declarations",{"_index":4173,"title":{},"body":{"modules/ResultsBrowserModule.html":{},"overview.html":{}}}],["cluster_resultsbrowsermodule_exports",{"_index":4175,"title":{},"body":{"modules/ResultsBrowserModule.html":{},"overview.html":{}}}],["cluster_resultsbrowsermodule_imports",{"_index":4174,"title":{},"body":{"modules/ResultsBrowserModule.html":{}}}],["cluster_schemedropdownmodule",{"_index":4210,"title":{},"body":{"modules/SchemeDropdownModule.html":{},"overview.html":{}}}],["cluster_schemedropdownmodule_declarations",{"_index":4211,"title":{},"body":{"modules/SchemeDropdownModule.html":{},"overview.html":{}}}],["cluster_schemedropdownmodule_exports",{"_index":4213,"title":{},"body":{"modules/SchemeDropdownModule.html":{},"overview.html":{}}}],["cluster_schemedropdownmodule_imports",{"_index":4212,"title":{},"body":{"modules/SchemeDropdownModule.html":{}}}],["cluster_spinneroverlaymodule",{"_index":4246,"title":{},"body":{"modules/SpinnerOverlayModule.html":{},"overview.html":{}}}],["cluster_spinneroverlaymodule_declarations",{"_index":4247,"title":{},"body":{"modules/SpinnerOverlayModule.html":{},"overview.html":{}}}],["cluster_spinneroverlaymodule_exports",{"_index":4248,"title":{},"body":{"modules/SpinnerOverlayModule.html":{},"overview.html":{}}}],["cluster_themingmodule",{"_index":4277,"title":{},"body":{"modules/ThemingModule.html":{},"overview.html":{}}}],["cluster_themingmodule_providers",{"_index":4278,"title":{},"body":{"modules/ThemingModule.html":{},"overview.html":{}}}],["cluster_viewermodule",{"_index":4453,"title":{},"body":{"modules/ViewerModule.html":{},"overview.html":{}}}],["cluster_viewermodule_declarations",{"_index":4454,"title":{},"body":{"modules/ViewerModule.html":{},"overview.html":{}}}],["cluster_viewermodule_exports",{"_index":4455,"title":{},"body":{"modules/ViewerModule.html":{},"overview.html":{}}}],["code",{"_index":3121,"title":{},"body":{"classes/ImageViewerLayer.html":{},"components/InfoDialogComponent.html":{},"changelog.html":{}}}],["codex",{"_index":4525,"title":{},"body":{"changelog.html":{}}}],["codex.svg",{"_index":2812,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["codifies",{"_index":4589,"title":{},"body":{"changelog.html":{}}}],["coercebooleanproperty",{"_index":3442,"title":{},"body":{"classes/InitializationState.html":{}}}],["collapse",{"_index":3540,"title":{},"body":{"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["collapsed",{"_index":3451,"title":{},"body":{"classes/InitializationState.html":{},"miscellaneous/typealiases.html":{}}}],["collapses",{"_index":3536,"title":{},"body":{"classes/InitializationState.html":{}}}],["color",{"_index":329,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource-1.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"changelog.html":{}}}],["colorbarcomponent",{"_index":328,"title":{"components/ColorBarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["colorbarmodule",{"_index":1383,"title":{"modules/ColorBarModule.html":{}},"body":{"modules/ColorBarModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/SchemeDropdownModule.html":{},"modules.html":{},"overview.html":{}}}],["colorchange",{"_index":1344,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["colorchanged",{"_index":1339,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{}}}],["colorchanged(color",{"_index":1357,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{}}}],["coloridx",{"_index":1524,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["coloring",{"_index":4219,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["colorizing",{"_index":4534,"title":{},"body":{"changelog.html":{}}}],["colorpickerlaunchercomponent",{"_index":331,"title":{"components/ColorPickerLauncherComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["colorpickerlaunchermodule",{"_index":1413,"title":{"modules/ColorPickerLauncherModule.html":{}},"body":{"modules/ColorPickerLauncherModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules.html":{},"overview.html":{}}}],["colors",{"_index":1351,"title":{},"body":{"components/ColorBarComponent.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLegendComponent.html":{},"interfaces/PureImageViewerLayer.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["colors.foreach((color",{"_index":3140,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["colors[order[index",{"_index":4515,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["colorscheme",{"_index":1341,"title":{"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{}},"body":{"components/ColorBarComponent.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"interfaces/PureImageViewerLayer.html":{},"components/SchemeDropdownComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"miscellaneous/typealiases.html":{}}}],["colorscheme.colors",{"_index":1354,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["colorschemecontentscomponent",{"_index":334,"title":{"components/ColorSchemeContentsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["colorschemecontentsmodule",{"_index":1624,"title":{"modules/ColorSchemeContentsModule.html":{}},"body":{"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules.html":{},"overview.html":{}}}],["colorschemepopupcomponent",{"_index":336,"title":{"components/ColorSchemePopupComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["colorschemepopupmodule",{"_index":1418,"title":{"modules/ColorSchemePopupModule.html":{}},"body":{"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules.html":{},"overview.html":{}}}],["colorschemeselection",{"_index":1523,"title":{"interfaces/ColorSchemeSelection.html":{}},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"components/SchemeDropdownComponent.html":{}}}],["colorvalues",{"_index":4087,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["colorvalues.push(color",{"_index":4092,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["column",{"_index":270,"title":{},"body":{"components/AppComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["combined",{"_index":1901,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"miscellaneous/typealiases.html":{}}}],["combinelatest",{"_index":2020,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["combines",{"_index":2066,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["come",{"_index":2763,"title":{},"body":{"classes/HuBMAPEntity.html":{},"changelog.html":{}}}],["coming",{"_index":2497,"title":{},"body":{"classes/HuBMAPEntity.html":{},"changelog.html":{}}}],["comlink",{"_index":1943,"title":{},"body":{"injectables/DataSourceService.html":{},"dependencies.html":{}}}],["comma",{"_index":260,"title":{},"body":{"components/AppComponent.html":{}}}],["common",{"_index":3333,"title":{},"body":{"components/InfoDialogComponent.html":{},"changelog.html":{},"index.html":{}}}],["common_options",{"_index":1591,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["commonmodule",{"_index":444,"title":{},"body":{"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/ViewerModule.html":{}}}],["compare",{"_index":2090,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["compatibility",{"_index":4274,"title":{},"body":{"modules/StoreModule.html":{}}}],["completed",{"_index":2056,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"classes/InitializationState.html":{},"miscellaneous/enumerations.html":{}}}],["completion",{"_index":3543,"title":{},"body":{"classes/InitializationState.html":{}}}],["componenet",{"_index":3769,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["component",{"_index":101,"title":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["component's",{"_index":2218,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["component.injector.get(overlaycontainer",{"_index":4328,"title":{},"body":{"injectables/ThemingService.html":{}}}],["component.injector.get(renderer2",{"_index":4326,"title":{},"body":{"injectables/ThemingService.html":{}}}],["component.injector.get(themingservice",{"_index":4315,"title":{},"body":{"injectables/ThemingService.html":{}}}],["component.location.nativeelement",{"_index":4327,"title":{},"body":{"injectables/ThemingService.html":{}}}],["component_template",{"_index":322,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["componentref",{"_index":4300,"title":{},"body":{"injectables/ThemingService.html":{}}}],["components",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["composes",{"_index":3896,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["compositelayer",{"_index":605,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["computational",{"_index":3320,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["computations",{"_index":3864,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["computes",{"_index":2271,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["concept",{"_index":3368,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["condition",{"_index":3973,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["conditions",{"_index":4713,"title":{},"body":{"license.html":{}}}],["config",{"_index":1220,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["config.isolated",{"_index":3610,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["configs",{"_index":1261,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"components/ViewerComponent.html":{}}}],["configuration",{"_index":3583,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["connect",{"_index":798,"title":{},"body":{"classes/CCFDatabase.html":{},"injectables/MessageService.html":{}}}],["connect(options",{"_index":821,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["connect(source",{"_index":3618,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["connected",{"_index":1732,"title":{},"body":{"components/ContainerComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["connectedposition",{"_index":2272,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["connecting",{"_index":1957,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["connection",{"_index":4737,"title":{},"body":{"license.html":{}}}],["connects",{"_index":823,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["consider",{"_index":4272,"title":{},"body":{"modules/StoreModule.html":{}}}],["console.warn(`unable",{"_index":2898,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["consortium",{"_index":4687,"title":{},"body":{"license.html":{}}}],["const",{"_index":219,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"modules/StoreModule.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["construction",{"_index":3326,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["constructor",{"_index":470,"title":{},"body":{"classes/BodyUI.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"components/DualSliderComponent.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"classes/PictureInPictureViewer.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["constructor(@inject(message_service_config",{"_index":3609,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["constructor(@optional",{"_index":1916,"title":{},"body":{"modules/CoreModule.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"injectables/ThemingService.html":{}}}],["constructor(config",{"_index":3630,"title":{},"body":{"injectables/MessageService.html":{}}}],["constructor(container",{"_index":4372,"title":{},"body":{"components/ViewerComponent.html":{}}}],["constructor(data",{"_index":726,"title":{},"body":{"components/BodyUiComponent.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["constructor(db",{"_index":948,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{}}}],["constructor(deckprops",{"_index":471,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["constructor(defaulttheme",{"_index":4292,"title":{},"body":{"injectables/ThemingService.html":{}}}],["constructor(dialog",{"_index":3275,"title":{},"body":{"components/InfoButtonComponent.html":{}}}],["constructor(dialogref",{"_index":3300,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["constructor(drawer",{"_index":4336,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["constructor(http",{"_index":3870,"title":{},"body":{"injectables/OntologySearchService.html":{}}}],["constructor(messageservice",{"_index":1706,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"classes/InitializationState.html":{}}}],["constructor(ontologysearchservice",{"_index":3999,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["constructor(ontologyservice",{"_index":3783,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["constructor(options",{"_index":807,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["constructor(original",{"_index":2421,"title":{},"body":{"classes/FlatNode.html":{}}}],["constructor(overlay",{"_index":2215,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["constructor(private",{"_index":1006,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/InfoButtonComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["constructor(props",{"_index":1187,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["constructor(public",{"_index":894,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/HuBMAPEntity.html":{},"components/OntologySearchComponent.html":{}}}],["constructor(readonly",{"_index":184,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"classes/FlatNode.html":{},"components/ImageViewerPopoverComponent.html":{}}}],["constructor(registry",{"_index":2950,"title":{},"body":{"injectables/IconRegistryState.html":{}}}],["constructor(source",{"_index":1986,"title":{},"body":{"injectables/DataState.html":{},"classes/MessageChannel.html":{}}}],["constructor(state",{"_index":3229,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["constructorparameters[0",{"_index":1149,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["contain",{"_index":1889,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/ImageViewerLayersComponent.html":{}}}],["container",{"_index":275,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContainerComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ViewerComponent.html":{},"miscellaneous/typealiases.html":{}}}],["container'},{'name",{"_index":339,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["container.component.html",{"_index":1696,"title":{},"body":{"components/ContainerComponent.html":{}}}],["container.component.scss",{"_index":1695,"title":{},"body":{"components/ContainerComponent.html":{}}}],["container/container.component",{"_index":2129,"title":{},"body":{"modules/DrawerModule.html":{}}}],["containercomponent",{"_index":338,"title":{"components/ContainerComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"modules/DrawerModule.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["containerpayload",{"_index":1892,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"miscellaneous/typealiases.html":{}}}],["containers",{"_index":1785,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{}}}],["containing",{"_index":51,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"interfaces/DataSource.html":{},"interfaces/DefaultIconDefinition.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"components/FiltersPopoverComponent.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerLayersComponent.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchableItem.html":{},"interfaces/ValueObject.html":{}}}],["contains",{"_index":1302,"title":{},"body":{"components/CheckboxComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/FiltersContentComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerLayersComponent.html":{},"classes/InitializationState.html":{}}}],["contains_sequence",{"_index":2867,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["containshumangeneticsequences",{"_index":2501,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["containssequence",{"_index":2788,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["content",{"_index":283,"title":{},"body":{"components/AppComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/InfoDialogComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["content'},{'name",{"_index":341,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["content.component",{"_index":2380,"title":{},"body":{"modules/FiltersContentModule.html":{},"modules/ImageViewerContentModule.html":{}}}],["content.component.html",{"_index":2345,"title":{},"body":{"components/FiltersContentComponent.html":{},"components/ImageViewerContentComponent.html":{}}}],["content.component.scss",{"_index":1808,"title":{},"body":{"components/ContentComponent.html":{},"components/FiltersContentComponent.html":{},"components/ImageViewerContentComponent.html":{}}}],["content.component.ts",{"_index":2343,"title":{},"body":{"components/FiltersContentComponent.html":{},"components/ImageViewerContentComponent.html":{}}}],["content.component.ts:16",{"_index":2350,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["content.component.ts:21",{"_index":2349,"title":{},"body":{"components/FiltersContentComponent.html":{},"components/ImageViewerContentComponent.html":{}}}],["content.component.ts:26",{"_index":2352,"title":{},"body":{"components/FiltersContentComponent.html":{},"components/ImageViewerContentComponent.html":{}}}],["content.component.ts:31",{"_index":2351,"title":{},"body":{"components/FiltersContentComponent.html":{},"components/ImageViewerContentComponent.html":{}}}],["content.component.ts:36",{"_index":3084,"title":{},"body":{"components/ImageViewerContentComponent.html":{}}}],["content.component.ts:38",{"_index":2357,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["content.component.ts:41",{"_index":3085,"title":{},"body":{"components/ImageViewerContentComponent.html":{}}}],["content.component.ts:44",{"_index":3086,"title":{},"body":{"components/ImageViewerContentComponent.html":{}}}],["content.component.ts:46",{"_index":2354,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["content.component.ts:49",{"_index":3087,"title":{},"body":{"components/ImageViewerContentComponent.html":{}}}],["content.module",{"_index":2416,"title":{},"body":{"modules/FiltersPopoverModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{}}}],["content.module.ts",{"_index":2377,"title":{},"body":{"modules/FiltersContentModule.html":{},"modules/ImageViewerContentModule.html":{}}}],["content/content.component",{"_index":1756,"title":{},"body":{"components/ContainerComponent.html":{},"modules/DrawerModule.html":{}}}],["content/filters",{"_index":2342,"title":{},"body":{"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{}}}],["content/image",{"_index":3081,"title":{},"body":{"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{}}}],["content1",{"_index":1698,"title":{},"body":{"components/ContainerComponent.html":{}}}],["content2",{"_index":1699,"title":{},"body":{"components/ContainerComponent.html":{}}}],["content?.contains(target",{"_index":1674,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["contentchildren",{"_index":1752,"title":{},"body":{"components/ContainerComponent.html":{}}}],["contentchildren(contentcomponent",{"_index":1734,"title":{},"body":{"components/ContainerComponent.html":{}}}],["contentchildren(drawercomponent",{"_index":1743,"title":{},"body":{"components/ContainerComponent.html":{}}}],["contentcomponent",{"_index":340,"title":{"components/ContentComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"modules/DrawerModule.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["contentcontainerchanged",{"_index":1881,"title":{"interfaces/ContentContainerChanged.html":{}},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"miscellaneous/typealiases.html":{}}}],["contentelement",{"_index":1636,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["contents",{"_index":1530,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["contents'},{'name",{"_index":335,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["contents.component",{"_index":1631,"title":{},"body":{"modules/ColorSchemeContentsModule.html":{}}}],["contents.component.html",{"_index":1532,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.scss",{"_index":1531,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts",{"_index":1526,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:106",{"_index":1555,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:118",{"_index":1563,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:21",{"_index":1544,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:26",{"_index":1550,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:31",{"_index":1547,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:36",{"_index":1552,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:41",{"_index":1565,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:46",{"_index":1566,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:51",{"_index":1568,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:52",{"_index":1571,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:59",{"_index":1573,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:60",{"_index":1576,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:67",{"_index":1578,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:68",{"_index":1580,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:70",{"_index":1542,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:91",{"_index":1553,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.component.ts:98",{"_index":1561,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["contents.module",{"_index":1689,"title":{},"body":{"modules/ColorSchemePopupModule.html":{}}}],["contents.module.ts",{"_index":1629,"title":{},"body":{"modules/ColorSchemeContentsModule.html":{}}}],["contents/color",{"_index":1525,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{}}}],["contentsvisible",{"_index":2198,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["context",{"_index":876,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{}}}],["context.jsonld",{"_index":891,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/OldRuiData.html":{}}}],["continues",{"_index":3369,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["contract",{"_index":3412,"title":{},"body":{"components/InfoDialogComponent.html":{},"license.html":{}}}],["control",{"_index":198,"title":{},"body":{"components/AppComponent.html":{},"components/OntologySearchComponent.html":{}}}],["controller",{"_index":529,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["controls",{"_index":1660,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DropdownComponent.html":{}}}],["convenience",{"_index":452,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["converted",{"_index":2682,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["convertoldruitojsonld",{"_index":2565,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["convertoldruitojsonld(data",{"_index":3698,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["convertoldruitojsonld(ruilocation",{"_index":2769,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["converts",{"_index":2680,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/IdObject.html":{},"classes/ImageViewerLayer.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/OldRuiData.html":{},"interfaces/ValueObject.html":{}}}],["coordinate",{"_index":3334,"title":{},"body":{"components/InfoDialogComponent.html":{},"changelog.html":{},"index.html":{}}}],["coordinate_system",{"_index":616,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["coordinate_system.cartesian",{"_index":678,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["coordinatesystem",{"_index":677,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["coordination/office",{"_index":3392,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["copied",{"_index":3651,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["copies",{"_index":4708,"title":{},"body":{"license.html":{}}}],["copy",{"_index":4694,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":4685,"title":{},"body":{"license.html":{}}}],["core",{"_index":1917,"title":{},"body":{"modules/CoreModule.html":{}}}],["core/core.module",{"_index":415,"title":{},"body":{"modules/AppModule.html":{}}}],["core/models/color",{"_index":3088,"title":{},"body":{"components/ImageViewerContentComponent.html":{}}}],["core/models/image",{"_index":1410,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ViewerComponent.html":{}}}],["core/models/ontology",{"_index":158,"title":{},"body":{"components/AppComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{}}}],["core/services/data",{"_index":161,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{}}}],["core/services/ontology",{"_index":3819,"title":{},"body":{"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{}}}],["core/services/theming/theming.service",{"_index":165,"title":{},"body":{"components/AppComponent.html":{}}}],["core/store/data/data.state",{"_index":168,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{}}}],["core/store/ontology/ontology.state",{"_index":4011,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["core/store/viewer/viewer.state",{"_index":3248,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["coremodule",{"_index":394,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["corresponds",{"_index":1395,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{}}}],["count",{"_index":14,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["counter",{"_index":3590,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["counts",{"_index":844,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"injectables/DataSourceService.html":{}}}],["cover",{"_index":4162,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["coverage",{"_index":4568,"title":{},"body":{"changelog.html":{}}}],["covid",{"_index":3647,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/enumerations.html":{}}}],["covidtiff",{"_index":3646,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/enumerations.html":{}}}],["create",{"_index":2217,"title":{},"body":{"components/DualSliderComponent.html":{},"classes/FlatNode.html":{}}}],["create(original",{"_index":2427,"title":{},"body":{"classes/FlatNode.html":{}}}],["created",{"_index":2257,"title":{},"body":{"components/DualSliderComponent.html":{},"classes/FlatNode.html":{}}}],["createentitycollections",{"_index":4484,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["creategraph",{"_index":946,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["createlayerconfigs",{"_index":1224,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["createlayers",{"_index":4461,"title":{},"body":{"injectables/ViewerState.html":{}}}],["createlayers(ids",{"_index":4464,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["createloader",{"_index":1139,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["createloader(source.type",{"_index":1210,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["createmodel(nodemap",{"_index":3925,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["createometiffloader",{"_index":3638,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["createruiorganlookup",{"_index":2630,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["creates",{"_index":180,"title":{},"body":{"components/AppComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/CheckboxComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DualSliderComponent.html":{},"classes/FlatNode.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewerLayer.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"interfaces/PureImageViewerLayer.html":{},"interfaces/SearchResult.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{}}}],["createselectionlabel(ontolgyselection",{"_index":250,"title":{},"body":{"components/AppComponent.html":{}}}],["createvivviews",{"_index":1223,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["createzarrloader",{"_index":3636,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["createzarrloader(info",{"_index":3655,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["creating",{"_index":1759,"title":{},"body":{"components/ContainerComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["creation",{"_index":3279,"title":{},"body":{"components/InfoButtonComponent.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["creation_date",{"_index":2850,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["creator",{"_index":2848,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["creator_first_name",{"_index":3715,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["creator_last_name",{"_index":3716,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["creator_orcid",{"_index":3717,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["credits",{"_index":4678,"title":{},"body":{"index.html":{}}}],["criteria",{"_index":2221,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["css",{"_index":4394,"title":{},"body":{"components/ViewerComponent.html":{},"dependencies.html":{}}}],["ctrlclick",{"_index":587,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{}}}],["ctrlkey",{"_index":585,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["cubegeometry",{"_index":628,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["cubes",{"_index":691,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["cuboid",{"_index":4567,"title":{},"body":{"changelog.html":{}}}],["cuboids",{"_index":4566,"title":{},"body":{"changelog.html":{}}}],["current",{"_index":736,"title":{},"body":{"components/BodyUiComponent.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/InitializationState.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"miscellaneous/enumerations.html":{}}}],["currently",{"_index":238,"title":{},"body":{"components/AppComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"injectables/DataSourceService.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{},"injectables/ThemingService.html":{},"changelog.html":{}}}],["currentstate",{"_index":592,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["currentstate.data",{"_index":601,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["currentstate.zoomopacity",{"_index":600,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["currentstates",{"_index":1242,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["currentstates[view.id",{"_index":1244,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["currentviewstate",{"_index":1266,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["cursor",{"_index":301,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["customizable",{"_index":3180,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["customizedcolor",{"_index":1602,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["cyberinfrastructure",{"_index":4680,"title":{},"body":{"index.html":{}}}],["d",{"_index":681,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialSceneNode.html":{}}}],["d.organ",{"_index":2752,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["d.scenegraph",{"_index":693,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["d.uuid",{"_index":2784,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["d.wireframe",{"_index":694,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["d.x",{"_index":3722,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["d.y",{"_index":3724,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["d.z",{"_index":3726,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["d1e5f0",{"_index":1455,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["d47d60",{"_index":1515,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["d7301f",{"_index":1479,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["d73027",{"_index":1467,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["d8daeb",{"_index":1472,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["d9ef8b",{"_index":1463,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["damages",{"_index":4733,"title":{},"body":{"license.html":{}}}],["dark",{"_index":227,"title":{},"body":{"components/AppComponent.html":{},"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["data",{"_index":36,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OldRuiData.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"modules/StoreModule.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["data.aggregatedata$.subscribe",{"_index":187,"title":{},"body":{"components/AppComponent.html":{}}}],["data.alignment_datetime",{"_index":3719,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["data.alignment_id",{"_index":3712,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["data.alignment_operator_first_name",{"_index":3713,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["data.alignment_operator_last_name",{"_index":3714,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["data.alignment_operator_orcid",{"_index":3718,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["data.colorscheme.colors[0",{"_index":3133,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["data.created_by_user_displayname",{"_index":2849,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.description",{"_index":2742,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.display_doi",{"_index":2740,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.filter$.pipe(pluck('ontologyterms",{"_index":190,"title":{},"body":{"components/AppComponent.html":{}}}],["data.group_name",{"_index":2748,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.group_uuid",{"_index":2744,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.id",{"_index":3132,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["data.label",{"_index":3091,"title":{},"body":{"components/ImageViewerContentComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["data.length",{"_index":670,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["data.listdata$.subscribe",{"_index":186,"title":{},"body":{"components/AppComponent.html":{}}}],["data.organname",{"_index":3090,"title":{},"body":{"components/ImageViewerContentComponent.html":{}}}],["data.reference_organ_id",{"_index":3700,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["data.rui_location",{"_index":2760,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.specimen_type",{"_index":2709,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.storage.googleapis.com/test",{"_index":4397,"title":{},"body":{"components/ViewerComponent.html":{}}}],["data.termoccurencesdata$.subscribe",{"_index":188,"title":{},"body":{"components/AppComponent.html":{}}}],["data.tissue_object_rotation",{"_index":3707,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["data.tissue_object_size",{"_index":3706,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["data.tissue_position_mass_point",{"_index":3708,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["data.tissue_position_mass_point.x",{"_index":3692,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["data.tissue_position_mass_point.y",{"_index":3693,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["data.tissue_position_mass_point.z",{"_index":3694,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["data.ts",{"_index":2494,"title":{},"body":{"classes/HuBMAPEntity.html":{},"miscellaneous/typealiases.html":{}}}],["data.ts:100",{"_index":2543,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:101",{"_index":2520,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:102",{"_index":2526,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:104",{"_index":2536,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:105",{"_index":2532,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:107",{"_index":2547,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:108",{"_index":2519,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:109",{"_index":2523,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:110",{"_index":2533,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:111",{"_index":2539,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:112",{"_index":2527,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:113",{"_index":2528,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:115",{"_index":2535,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:116",{"_index":2534,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:117",{"_index":2545,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:118",{"_index":2544,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:120",{"_index":2538,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:121",{"_index":2537,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:123",{"_index":2540,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:124",{"_index":2541,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:125",{"_index":2542,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:126",{"_index":2549,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:127",{"_index":2525,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:128",{"_index":2521,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:129",{"_index":2524,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:130",{"_index":2551,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:131",{"_index":2552,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:132",{"_index":2546,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:133",{"_index":2518,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:135",{"_index":2522,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:309",{"_index":2553,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data.ts:99",{"_index":2529,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["data/data.state",{"_index":4257,"title":{},"body":{"modules/StoreModule.html":{}}}],["data/hubmap/pyramid_0.0.2/spraggins.ome.tif",{"_index":4398,"title":{},"body":{"components/ViewerComponent.html":{}}}],["data?.length",{"_index":560,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["data_types",{"_index":2862,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["dataaction",{"_index":1996,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["database",{"_index":152,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SpatialSceneNode-1.html":{},"changelog.html":{}}}],["database.ts",{"_index":794,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["database.ts:106",{"_index":834,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database.ts:116",{"_index":829,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database.ts:126",{"_index":854,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database.ts:136",{"_index":852,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database.ts:147",{"_index":839,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database.ts:161",{"_index":832,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database.ts:171",{"_index":841,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database.ts:181",{"_index":837,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database.ts:190",{"_index":846,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database.ts:47",{"_index":819,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database.ts:49",{"_index":812,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database.ts:51",{"_index":809,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database.ts:58",{"_index":814,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database.ts:70",{"_index":822,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["database/src/lib/ccf",{"_index":793,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["database/src/lib/hubmap/hubmap",{"_index":2493,"title":{},"body":{"classes/HuBMAPEntity.html":{},"miscellaneous/typealiases.html":{}}}],["database/src/lib/hubmap/old",{"_index":3674,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["database/src/lib/interfaces.ts",{"_index":7,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["database/src/lib/interfaces.ts:90",{"_index":1923,"title":{},"body":{"interfaces/DataSource.html":{}}}],["database/src/lib/interfaces.ts:92",{"_index":1921,"title":{},"body":{"interfaces/DataSource.html":{}}}],["database/src/lib/interfaces.ts:94",{"_index":1922,"title":{},"body":{"interfaces/DataSource.html":{}}}],["database/src/lib/spatial",{"_index":4217,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["datafactory",{"_index":859,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["dataloading",{"_index":4109,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["dataquerystate",{"_index":166,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"miscellaneous/enumerations.html":{}}}],["dataquerystate.completed",{"_index":2027,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["dataquerystate.running",{"_index":142,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["dataset",{"_index":2531,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["datasets",{"_index":4527,"title":{},"body":{"changelog.html":{}}}],["datasource",{"_index":92,"title":{"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{}},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/ListResult.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/SearchableItem.html":{},"components/ViewerComponent.html":{}}}],["datasourceservice",{"_index":160,"title":{"injectables/DataSourceService.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["datastate",{"_index":167,"title":{"injectables/DataState.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"modules/StoreModule.html":{}}}],["datastatemodel",{"_index":2078,"title":{"interfaces/DataStateModel.html":{}},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["datatypes",{"_index":2502,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["datatypes.get('codex_cytokit')?.uuid",{"_index":2834,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["datatypes.get('salmon_rnaseq_10x')?.uuid",{"_index":2837,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["datatypes.has('codex_cytokit",{"_index":2833,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["datatypes.has('salmon_rnaseq_10x",{"_index":2836,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["datatypes.keys()].sort",{"_index":2798,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["datatypes.set(t",{"_index":2791,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["dataurl",{"_index":2868,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["date",{"_index":4220,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["date(data.create_timestamp",{"_index":2851,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["date(data.last_modified_timestamp",{"_index":2854,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["db",{"_index":950,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"injectables/DataSourceService.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["db.getaggregateresults(filter",{"_index":1968,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["db.getimageviewerdata(iri",{"_index":1970,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["db.getlistresults(filter",{"_index":1967,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["db.getontologytermoccurences(filter",{"_index":1969,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["dboptions",{"_index":1929,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["deal",{"_index":4697,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":4738,"title":{},"body":{"license.html":{}}}],["debug",{"_index":90,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFSpatialScene.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["debugging",{"_index":88,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["decided",{"_index":4150,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["decides",{"_index":1299,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["decisions",{"_index":3157,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["deck",{"_index":457,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["deck(props",{"_index":548,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["deck.gl/core",{"_index":512,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/SpatialSceneNode.html":{},"dependencies.html":{}}}],["deck.gl/geo",{"_index":4641,"title":{},"body":{"dependencies.html":{}}}],["deck.gl/layers",{"_index":4642,"title":{},"body":{"dependencies.html":{}}}],["deck.gl/mesh",{"_index":619,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{},"dependencies.html":{}}}],["deckcallbackargs",{"_index":1151,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"miscellaneous/typealiases.html":{}}}],["deckprops",{"_index":475,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"miscellaneous/typealiases.html":{}}}],["declarations",{"_index":385,"title":{},"body":{"modules/AppModule.html":{},"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules/CoreModule.html":{},"modules/DrawerModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/ThemingModule.html":{},"modules/ViewerModule.html":{},"overview.html":{}}}],["decompress",{"_index":655,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["decoration",{"_index":2469,"title":{},"body":{"components/HeaderComponent.html":{},"components/OntologySearchComponent.html":{}}}],["decorator",{"_index":515,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"dependencies.html":{}}}],["decorators",{"_index":494,"title":{},"body":{"classes/BodyUI.html":{},"components/BodyUiComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"injectables/DataState.html":{},"components/DualSliderComponent.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"components/InfoDialogComponent.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"classes/PictureInPictureViewer.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{}}}],["deep",{"_index":309,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["def5fd76",{"_index":2628,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["default",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologyState.html":{},"classes/PictureInPictureViewer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{}}}],["default_ccf_db_options",{"_index":813,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["default_color_schemes",{"_index":1520,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/SchemeDropdownComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["default_color_schemes[0",{"_index":4186,"title":{},"body":{"components/SchemeDropdownComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["default_filter",{"_index":2047,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["default_icons",{"_index":2117,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["default_theme",{"_index":435,"title":{},"body":{"modules/AppModule.html":{},"injectables/ThemingService.html":{}}}],["defaultchannelconfig",{"_index":1162,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"components/ViewerComponent.html":{}}}],["defaulticondefinition",{"_index":2099,"title":{"interfaces/DefaultIconDefinition.html":{}},"body":{"interfaces/DefaultIconDefinition.html":{}}}],["defaultorder",{"_index":3101,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["defaults",{"_index":2079,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["defaultscheme",{"_index":4492,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["defaulttheme",{"_index":4286,"title":{},"body":{"injectables/ThemingService.html":{}}}],["deferred",{"_index":3429,"title":{},"body":{"classes/InitializationState.html":{}}}],["deficient",{"_index":637,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["defined",{"_index":129,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"classes/PictureInPictureViewer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"changelog.html":{}}}],["definition",{"_index":2103,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["definition.html",{"_index":2928,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["definition.url",{"_index":2927,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["degree",{"_index":3744,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["delay",{"_index":916,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{}}}],["delete",{"_index":3929,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["demo",{"_index":3372,"title":{},"body":{"components/InfoDialogComponent.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"components/ViewerComponent.html":{}}}],["demo_source",{"_index":4395,"title":{},"body":{"components/ViewerComponent.html":{}}}],["department",{"_index":3407,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["dependencies",{"_index":384,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules/CoreModule.html":{},"modules/DrawerModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/ThemingModule.html":{},"modules/ViewerModule.html":{},"changelog.html":{},"dependencies.html":{},"overview.html":{}}}],["derived",{"_index":2495,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["descendant_ids",{"_index":2890,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["descendants",{"_index":1735,"title":{},"body":{"components/ContainerComponent.html":{},"classes/HuBMAPEntity.html":{}}}],["describes",{"_index":1278,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["describing",{"_index":4226,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OldRuiData.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{}}}],["desired",{"_index":1114,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["detail",{"_index":4083,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["detailed",{"_index":3223,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["detailheight",{"_index":4432,"title":{},"body":{"components/ViewerComponent.html":{}}}],["details",{"_index":3271,"title":{},"body":{"components/InfoButtonComponent.html":{},"changelog.html":{}}}],["detailview",{"_index":4073,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["detailwidth",{"_index":4431,"title":{},"body":{"components/ViewerComponent.html":{}}}],["detect",{"_index":2287,"title":{},"body":{"components/DualSliderComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["detected",{"_index":2237,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["detection",{"_index":1719,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["detector",{"_index":1712,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["determine",{"_index":4126,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["determines",{"_index":1350,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/OntologySearchComponent.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["develop",{"_index":3316,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["developed",{"_index":4679,"title":{},"body":{"index.html":{}}}],["development",{"_index":1959,"title":{},"body":{"injectables/DataSourceService.html":{},"components/InfoDialogComponent.html":{}}}],["developmentmode",{"_index":4271,"title":{},"body":{"modules/StoreModule.html":{}}}],["developments",{"_index":4595,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dialog",{"_index":3278,"title":{},"body":{"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{}}}],["dialog's",{"_index":3303,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["dialog'},{'name",{"_index":363,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["dialog.component",{"_index":3283,"title":{},"body":{"components/InfoButtonComponent.html":{},"modules/InfoDialogModule.html":{}}}],["dialog.component.html",{"_index":3298,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["dialog.component.scss",{"_index":3297,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["dialog.component.ts",{"_index":3292,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["dialog.component.ts:13",{"_index":3302,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["dialog.component.ts:20",{"_index":3309,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["dialog.component.ts:21",{"_index":3308,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["dialog.component.ts:27",{"_index":3306,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["dialog.module",{"_index":421,"title":{},"body":{"modules/AppModule.html":{},"modules/InfoButtonModule.html":{}}}],["dialog.module.ts",{"_index":3424,"title":{},"body":{"modules/InfoDialogModule.html":{}}}],["dialog/info",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{}}}],["dialogref",{"_index":3299,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["dialogue",{"_index":3281,"title":{},"body":{"components/InfoButtonComponent.html":{}}}],["didzoom",{"_index":564,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["diff",{"_index":4131,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["different",{"_index":3572,"title":{},"body":{"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{}}}],["dim",{"_index":1120,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["dimension",{"_index":4222,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["dimension_units",{"_index":3727,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["dimensions",{"_index":1115,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["direct",{"_index":4610,"title":{},"body":{"changelog.html":{}}}],["directedgraph",{"_index":951,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["direction",{"_index":269,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["directive",{"_index":320,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["directives",{"_index":379,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["directly",{"_index":4523,"title":{},"body":{"changelog.html":{}}}],["director",{"_index":3393,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["disable",{"_index":632,"title":{},"body":{"classes/BodyUILayer.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SpatialSceneNode.html":{}}}],["disabled",{"_index":4420,"title":{},"body":{"components/ViewerComponent.html":{}}}],["discrete",{"_index":1376,"title":{},"body":{"components/ColorBarComponent.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{},"components/SchemeDropdownComponent.html":{}}}],["diseases",{"_index":3405,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["display",{"_index":49,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/ListResult.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchableItem.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"changelog.html":{}}}],["displayed",{"_index":1348,"title":{},"body":{"components/ColorBarComponent.html":{},"components/DropdownComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"components/SpinnerOverlayComponent.html":{},"changelog.html":{}}}],["displayformatter",{"_index":3778,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["displayformatter(option",{"_index":3791,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["displaying",{"_index":3195,"title":{},"body":{"components/ImageViewerLegendComponent.html":{},"components/InfoDialogComponent.html":{}}}],["displaylabel",{"_index":3908,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["displays",{"_index":1392,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["distinct",{"_index":2028,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["distribute",{"_index":4704,"title":{},"body":{"license.html":{}}}],["div",{"_index":1393,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["doc",{"_index":4578,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":1652,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{}}}],["document:click",{"_index":1640,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{}}}],["document:click(target",{"_index":1649,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{}}}],["documentation",{"_index":3351,"title":{},"body":{"components/InfoDialogComponent.html":{},"changelog.html":{},"license.html":{}}}],["docvalue_fields",{"_index":2893,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["doi",{"_index":2503,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["dom",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["domsanitizer",{"_index":2906,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["don't",{"_index":258,"title":{},"body":{"components/AppComponent.html":{}}}],["donor",{"_index":2504,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["donor_id",{"_index":2855,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["donordescription",{"_index":2712,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["donordescription.includes('female",{"_index":2715,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["donordescription.includes('male",{"_index":2716,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["donordescription.match(/age",{"_index":2718,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["down",{"_index":135,"title":{},"body":{"components/AppComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/OntologySelectionComponent.html":{}}}],["download",{"_index":37,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"components/HeaderComponent.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchableItem.html":{},"changelog.html":{}}}],["downloadclicked",{"_index":2446,"title":{},"body":{"components/HeaderComponent.html":{}}}],["downloadtooltip",{"_index":39,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["downloadurl",{"_index":38,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["dr1_vu_thumbs",{"_index":2571,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["dr1_vu_thumbs.has(thumb",{"_index":2830,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["dracoloader",{"_index":623,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["dracoworkerloader",{"_index":624,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["drawer",{"_index":114,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"miscellaneous/typealiases.html":{}}}],["drawer'},{'name",{"_index":342,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["drawer.close",{"_index":4357,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["drawer.closeexpanded",{"_index":4356,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["drawer.component.html",{"_index":3462,"title":{},"body":{"classes/InitializationState.html":{}}}],["drawer.component.scss",{"_index":3463,"title":{},"body":{"classes/InitializationState.html":{}}}],["drawer.open",{"_index":4358,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["drawer.position",{"_index":1794,"title":{},"body":{"components/ContainerComponent.html":{}}}],["drawer/drawer.component",{"_index":1757,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"modules/DrawerModule.html":{},"components/ToggleButtonComponent.html":{}}}],["drawercomponent",{"_index":177,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"modules/DrawerModule.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["drawercomponent).position",{"_index":1864,"title":{},"body":{"components/ContentComponent.html":{}}}],["drawercontainerschanged",{"_index":1888,"title":{"interfaces/DrawerContainersChanged.html":{}},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"miscellaneous/typealiases.html":{}}}],["drawerexpanded",{"_index":2387,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["drawerinitialized",{"_index":1895,"title":{"interfaces/DrawerInitialized.html":{}},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"miscellaneous/typealiases.html":{}}}],["drawermodule",{"_index":395,"title":{"modules/DrawerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DrawerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules.html":{},"overview.html":{}}}],["drawerpayload",{"_index":1900,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"miscellaneous/typealiases.html":{}}}],["drawers",{"_index":192,"title":{},"body":{"components/AppComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/ToggleButtonComponent.html":{},"miscellaneous/typealiases.html":{}}}],["drawers.filter(drawer",{"_index":1793,"title":{},"body":{"components/ContainerComponent.html":{}}}],["drawertoggled",{"_index":1896,"title":{"interfaces/DrawerToggled.html":{}},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"miscellaneous/typealiases.html":{}}}],["dropdown",{"_index":2133,"title":{},"body":{"components/DropdownComponent.html":{},"components/FiltersContentComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["dropdown'},{'name",{"_index":344,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["dropdown.component",{"_index":2192,"title":{},"body":{"modules/DropdownModule.html":{},"modules/SchemeDropdownModule.html":{}}}],["dropdown.component.html",{"_index":2135,"title":{},"body":{"components/DropdownComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["dropdown.component.scss",{"_index":2134,"title":{},"body":{"components/DropdownComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["dropdown.component.ts",{"_index":4182,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["dropdown.component.ts:18",{"_index":4188,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["dropdown.component.ts:23",{"_index":4187,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["dropdown.component.ts:28",{"_index":4189,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["dropdown.component.ts:33",{"_index":4194,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["dropdown.component.ts:38",{"_index":4190,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["dropdown.component.ts:46",{"_index":4192,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["dropdown.module",{"_index":3191,"title":{},"body":{"modules/ImageViewerLayersModule.html":{}}}],["dropdown.module.ts",{"_index":4214,"title":{},"body":{"modules/SchemeDropdownModule.html":{}}}],["dropdown/scheme",{"_index":3190,"title":{},"body":{"modules/ImageViewerLayersModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{}}}],["dropdowncomponent",{"_index":343,"title":{"components/DropdownComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["dropdownmodule",{"_index":2183,"title":{"modules/DropdownModule.html":{}},"body":{"modules/DropdownModule.html":{},"modules/FiltersContentModule.html":{},"modules.html":{},"overview.html":{}}}],["dual",{"_index":346,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["dualslidercomponent",{"_index":345,"title":{"components/DualSliderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["dualslidermodule",{"_index":396,"title":{"modules/DualSliderModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules.html":{},"overview.html":{}}}],["due",{"_index":636,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["duration",{"_index":1877,"title":{},"body":{"components/ContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerPopoverComponent.html":{}}}],["during",{"_index":71,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"injectables/ThemingService.html":{}}}],["dynamic",{"_index":1369,"title":{},"body":{"components/ColorBarComponent.html":{},"dependencies.html":{}}}],["dynamically",{"_index":1391,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["e",{"_index":497,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/HuBMAPEntity.html":{}}}],["e.contains_human_genetic_sequences",{"_index":2795,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["e.data_types",{"_index":2789,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["e.entity_type",{"_index":2708,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["e.info",{"_index":713,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["e.isdragging",{"_index":541,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["e.object",{"_index":579,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["e.object['@id",{"_index":580,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["e.picked",{"_index":577,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["e.specimen_type",{"_index":2711,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["e1b986",{"_index":1505,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["e3b842",{"_index":1514,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["e65100",{"_index":1438,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["e91e63",{"_index":1437,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["each",{"_index":3592,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["ease",{"_index":1880,"title":{},"body":{"components/ContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/SpinnerOverlayComponent.html":{}}}],["ed43",{"_index":2613,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["ed44",{"_index":2607,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["edc2",{"_index":2620,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["edf8fb",{"_index":1492,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["ef6548",{"_index":1480,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["ef8a62",{"_index":1458,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["ef9a9a",{"_index":1448,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["effect",{"_index":2149,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["effects",{"_index":524,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["efficient",{"_index":3340,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["effort",{"_index":3381,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["element",{"_index":319,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"dependencies.html":{}}}],["element.getboundingclientrect",{"_index":3510,"title":{},"body":{"classes/InitializationState.html":{}}}],["element.nativeelement.contains(target",{"_index":2302,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["elementref",{"_index":740,"title":{},"body":{"components/BodyUiComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"classes/InitializationState.html":{},"components/ViewerComponent.html":{}}}],["ellipsis",{"_index":3066,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["emit",{"_index":1292,"title":{},"body":{"components/CheckboxComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{}}}],["emits",{"_index":144,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/OntologySearchComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["emitted",{"_index":1521,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/HeaderComponent.html":{}}}],["emitter",{"_index":3789,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["emitters",{"_index":4102,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["emitting",{"_index":1559,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"injectables/DataSourceService.html":{},"components/ImageViewerLayersComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/ResultsBrowserComponent.html":{}}}],["empty",{"_index":3887,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["empty_data",{"_index":3241,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["empty_result",{"_index":3245,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["enable",{"_index":3795,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["enabled",{"_index":1822,"title":{},"body":{"components/ContentComponent.html":{}}}],["enables",{"_index":1368,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["enableselection",{"_index":1342,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["encapsulates",{"_index":3993,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["encoded",{"_index":2989,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["end",{"_index":1768,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["end?.expanded",{"_index":1875,"title":{},"body":{"components/ContentComponent.html":{}}}],["end?.opened",{"_index":1874,"title":{},"body":{"components/ContentComponent.html":{}}}],["enddrawers",{"_index":1795,"title":{},"body":{"components/ContainerComponent.html":{}}}],["enddrawers.length",{"_index":1798,"title":{},"body":{"components/ContainerComponent.html":{}}}],["enddrawers[0",{"_index":1801,"title":{},"body":{"components/ContainerComponent.html":{}}}],["endexpanded",{"_index":1873,"title":{},"body":{"components/ContentComponent.html":{}}}],["enough",{"_index":3124,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["ensures",{"_index":3907,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["enter",{"_index":2245,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["entire",{"_index":4262,"title":{},"body":{"modules/StoreModule.html":{}}}],["entities",{"_index":80,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["entity",{"_index":84,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFSpatialGraph.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["entity.owl",{"_index":2692,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["entityid",{"_index":639,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["entitytype",{"_index":2505,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["entityupdate",{"_index":4482,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["entries",{"_index":2684,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["entries.map(e",{"_index":2695,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["entry",{"_index":3065,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{},"components/OntologySearchComponent.html":{}}}],["entry.displaylabel.join().includes",{"_index":3835,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["entry.label",{"_index":3060,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{}}}],["entry.node.label.tolowercase",{"_index":3836,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["entry.value",{"_index":3061,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{}}}],["enum",{"_index":2052,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["enumerations",{"_index":4673,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":1944,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"modules/StoreModule.html":{}}}],["environment.dboptions",{"_index":1954,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["environment.disabledbworker",{"_index":1948,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["environment.organnodes",{"_index":3965,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["environment.production",{"_index":1963,"title":{},"body":{"injectables/DataSourceService.html":{},"modules/StoreModule.html":{}}}],["environments/environment",{"_index":1945,"title":{},"body":{"injectables/DataSourceService.html":{},"modules/StoreModule.html":{}}}],["error",{"_index":1762,"title":{},"body":{"components/ContainerComponent.html":{},"injectables/ThemingService.html":{}}}],["error('the",{"_index":1918,"title":{},"body":{"modules/CoreModule.html":{}}}],["error('theming",{"_index":4324,"title":{},"body":{"injectables/ThemingService.html":{}}}],["error(`multiple",{"_index":1771,"title":{},"body":{"components/ContainerComponent.html":{}}}],["error(`pyramid",{"_index":3666,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["errors",{"_index":1760,"title":{},"body":{"components/ContainerComponent.html":{}}}],["etc",{"_index":1899,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{}}}],["ethnicity",{"_index":2506,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["eui",{"_index":3357,"title":{},"body":{"components/InfoDialogComponent.html":{},"changelog.html":{},"index.html":{}}}],["euler",{"_index":975,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"dependencies.html":{}}}],["event",{"_index":503,"title":{},"body":{"classes/BodyUI.html":{},"components/CheckboxComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerLayersComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ToggleButtonComponent.html":{},"license.html":{}}}],["event.checked",{"_index":1306,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["event.interactionstate?.iszooming",{"_index":591,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["event.key",{"_index":2314,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["event.pagey",{"_index":1678,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["event.target",{"_index":1648,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["event.viewstate",{"_index":602,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["event.viewstate.zoom",{"_index":595,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["eventemitter",{"_index":734,"title":{},"body":{"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ViewerComponent.html":{}}}],["eventemitter(true",{"_index":3494,"title":{},"body":{"classes/InitializationState.html":{}}}],["events",{"_index":1298,"title":{},"body":{"components/CheckboxComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["everything",{"_index":2081,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["evolve",{"_index":3370,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["evt",{"_index":750,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["evt.preventdefault",{"_index":751,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["example",{"_index":3620,"title":{},"body":{"classes/MessageChannel.html":{},"injectables/MessageService.html":{}}}],["except",{"_index":3597,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["excludes",{"_index":2885,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["executionstrategy",{"_index":4275,"title":{},"body":{"modules/StoreModule.html":{}}}],["exists",{"_index":2894,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["expand",{"_index":3539,"title":{},"body":{"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["expand/collapse",{"_index":3547,"title":{},"body":{"classes/InitializationState.html":{}}}],["expand_collapse_params_default",{"_index":3454,"title":{},"body":{"classes/InitializationState.html":{}}}],["expandable",{"_index":2420,"title":{},"body":{"classes/FlatNode.html":{},"components/ImageViewerAccordionComponent.html":{}}}],["expandcollapsedone",{"_index":3549,"title":{},"body":{"classes/InitializationState.html":{}}}],["expanded",{"_index":1897,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{},"miscellaneous/typealiases.html":{}}}],["expanded(value",{"_index":3490,"title":{},"body":{"classes/InitializationState.html":{}}}],["expanded/collapsed",{"_index":3447,"title":{},"body":{"classes/InitializationState.html":{},"miscellaneous/typealiases.html":{}}}],["expandedchange",{"_index":3495,"title":{},"body":{"classes/InitializationState.html":{}}}],["expandedstate",{"_index":3448,"title":{},"body":{"classes/InitializationState.html":{},"miscellaneous/typealiases.html":{}}}],["expandedstate2",{"_index":3450,"title":{},"body":{"classes/InitializationState.html":{},"miscellaneous/typealiases.html":{}}}],["expandedstateobj",{"_index":3500,"title":{},"body":{"classes/InitializationState.html":{}}}],["expands",{"_index":3533,"title":{},"body":{"classes/InitializationState.html":{}}}],["expansion",{"_index":3062,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{}}}],["expert",{"_index":3382,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["exploration",{"_index":3356,"title":{},"body":{"components/InfoDialogComponent.html":{},"changelog.html":{},"index.html":{}}}],["exploration.module",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["exploration.module.ts",{"_index":3759,"title":{},"body":{"modules/OntologyExplorationModule.html":{}}}],["exploration/ontology",{"_index":423,"title":{},"body":{"modules/AppModule.html":{},"modules/OntologyExplorationModule.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{}}}],["export",{"_index":23,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/BodyModule.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"modules/CoreModule.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"modules/DrawerModule.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"modules/OntologyExplorationModule.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"modules/OntologyTreeModule.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["exportas",{"_index":1692,"title":{},"body":{"components/ContainerComponent.html":{},"classes/InitializationState.html":{}}}],["exports",{"_index":388,"title":{},"body":{"modules/AppModule.html":{},"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules/CoreModule.html":{},"modules/DrawerModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/ThemingModule.html":{},"modules/ViewerModule.html":{},"overview.html":{}}}],["express",{"_index":4721,"title":{},"body":{"license.html":{}}}],["expressed",{"_index":4228,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["extdeckprops",{"_index":1150,"title":{"interfaces/ExtDeckProps.html":{}},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["extended",{"_index":3453,"title":{},"body":{"classes/InitializationState.html":{},"miscellaneous/typealiases.html":{}}}],["extends",{"_index":604,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/JsonOntologyNode.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/ValueObject.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["external_link",{"_index":42,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchableItem.html":{}}}],["externalid",{"_index":3696,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["extracting",{"_index":2970,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["f",{"_index":758,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["f1a340",{"_index":1474,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["f2f424",{"_index":1513,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["f7f7f7",{"_index":1456,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["f8fc9d",{"_index":1504,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["factor",{"_index":983,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["factory",{"_index":3588,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["fade",{"_index":2148,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["faded",{"_index":1832,"title":{},"body":{"components/ContentComponent.html":{}}}],["fadein",{"_index":2156,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["fadeinout",{"_index":1811,"title":{},"body":{"components/ContentComponent.html":{}}}],["fafafa",{"_index":1323,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["fake",{"_index":3918,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["false",{"_index":565,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContentComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"interfaces/SpatialSceneNode.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["fc8d59",{"_index":1466,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["fdbb84",{"_index":1481,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["fdd49e",{"_index":1482,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["fddbc7",{"_index":1457,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["features",{"_index":4630,"title":{},"body":{"changelog.html":{}}}],["fee08b",{"_index":1465,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["fee0b6",{"_index":1473,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["fef0d9",{"_index":1483,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["female",{"_index":62,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFSpatialScene.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["feminine",{"_index":2725,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["fetch",{"_index":2115,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["fetch(dataurl",{"_index":2880,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["fetch(dataurl).then(r",{"_index":2871,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["fetch(url",{"_index":3670,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["fetches",{"_index":212,"title":{},"body":{"components/AppComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["few",{"_index":634,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["ffb74d",{"_index":1450,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["ffcc80",{"_index":1434,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["ffe31c",{"_index":1495,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["ffff8d",{"_index":1435,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["ffffbf",{"_index":1464,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["field",{"_index":22,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IdObject.html":{},"interfaces/ImageViewerData.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"interfaces/SearchableItem.html":{},"interfaces/ValueObject.html":{}}}],["fields",{"_index":2971,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/BodyModule.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"modules/CoreModule.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"modules/DrawerModule.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"modules/OntologyExplorationModule.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"modules/OntologyTreeModule.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["file_format",{"_index":4223,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["file_subpath",{"_index":4225,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["files",{"_index":4696,"title":{},"body":{"license.html":{}}}],["fill",{"_index":2170,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["filler",{"_index":2471,"title":{},"body":{"components/HeaderComponent.html":{}}}],["filter",{"_index":73,"title":{"interfaces/Filter.html":{}},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialScene.html":{},"components/CheckboxComponent.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialSceneNode-1.html":{},"changelog.html":{}}}],["filter's",{"_index":201,"title":{},"body":{"components/AppComponent.html":{}}}],["filter(f",{"_index":2776,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["filter(l",{"_index":711,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["filter(s",{"_index":1101,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["filter(value",{"_index":3826,"title":{},"body":{"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["filter?.debug",{"_index":1088,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["filter?.ontologyterms",{"_index":1065,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["filter?.sex",{"_index":1054,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["filterbox",{"_index":200,"title":{},"body":{"components/AppComponent.html":{}}}],["filterbox.removebox",{"_index":211,"title":{},"body":{"components/AppComponent.html":{}}}],["filterchange",{"_index":725,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["filtered",{"_index":3601,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{}}}],["filteredresults",{"_index":3775,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["filtering",{"_index":3343,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["filteronchange",{"_index":1275,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["filteronchange(event",{"_index":1293,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["filters",{"_index":349,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["filters?.agerange[0",{"_index":2456,"title":{},"body":{"components/HeaderComponent.html":{}}}],["filters?.agerange[1",{"_index":2457,"title":{},"body":{"components/HeaderComponent.html":{}}}],["filters?.bmirange[0",{"_index":2458,"title":{},"body":{"components/HeaderComponent.html":{}}}],["filters?.bmirange[1",{"_index":2459,"title":{},"body":{"components/HeaderComponent.html":{}}}],["filters?.sex",{"_index":2455,"title":{},"body":{"components/HeaderComponent.html":{}}}],["filterschange",{"_index":2348,"title":{},"body":{"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{}}}],["filterscontentcomponent",{"_index":348,"title":{"components/FiltersContentComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["filterscontentmodule",{"_index":2372,"title":{"modules/FiltersContentModule.html":{}},"body":{"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules.html":{},"overview.html":{}}}],["filterspopovercomponent",{"_index":169,"title":{"components/FiltersPopoverComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["filterspopovermodule",{"_index":397,"title":{"modules/FiltersPopoverModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FiltersPopoverModule.html":{},"modules.html":{},"overview.html":{}}}],["filtersvisible",{"_index":2384,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["finalize",{"_index":1200,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["find",{"_index":2770,"title":{},"body":{"classes/HuBMAPEntity.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["find((organ",{"_index":2753,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["find(nodemap[''].children",{"_index":3926,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["findids",{"_index":865,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["findids(this.store",{"_index":923,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["finished",{"_index":1893,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{}}}],["fired",{"_index":1669,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{}}}],["first",{"_index":3366,"title":{},"body":{"components/InfoDialogComponent.html":{},"interfaces/OldRuiData.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["fit",{"_index":4161,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["fitness",{"_index":4725,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":278,"title":{},"body":{"components/AppComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/OldRuiData.html":{}}}],["fixes",{"_index":3690,"title":{},"body":{"interfaces/OldRuiData.html":{},"changelog.html":{}}}],["fixes/performance",{"_index":4536,"title":{},"body":{"changelog.html":{}}}],["fixoldruikidneydata(data",{"_index":3691,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["fixuflruilocation",{"_index":2562,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["fixuflruilocation(ruilocation",{"_index":2766,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["flat",{"_index":2425,"title":{},"body":{"classes/FlatNode.html":{}}}],["flatmap",{"_index":1144,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["flatmap(loaders",{"_index":1258,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["flatmap(vivviews",{"_index":1235,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["flatnode",{"_index":2417,"title":{"classes/FlatNode.html":{}},"body":{"classes/FlatNode.html":{}}}],["flatnode(original",{"_index":2438,"title":{},"body":{"classes/FlatNode.html":{}}}],["flex",{"_index":268,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["float",{"_index":3417,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["floor",{"_index":1592,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DualSliderComponent.html":{}}}],["florida",{"_index":2616,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["flow",{"_index":2961,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["fly",{"_index":4619,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":4712,"title":{},"body":{"license.html":{}}}],["font",{"_index":292,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoDialogComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["footer",{"_index":3419,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["foreach",{"_index":3898,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["foreach(current.children",{"_index":3947,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["foreach(nodemap",{"_index":3923,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["foreach(organnodes",{"_index":3937,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["foreach(t",{"_index":2790,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["form",{"_index":847,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{}}}],["format",{"_index":2556,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["formatlabel",{"_index":3866,"title":{},"body":{"injectables/OntologySearchService.html":{}}}],["formatlabel(label",{"_index":3878,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["formats",{"_index":3881,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["formatter",{"_index":3794,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["formcontrol",{"_index":3776,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["formsmodule",{"_index":3855,"title":{},"body":{"modules/OntologySearchModule.html":{}}}],["forwards",{"_index":2171,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["found",{"_index":3882,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["foundational",{"_index":3322,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["framework",{"_index":3335,"title":{},"body":{"components/InfoDialogComponent.html":{},"changelog.html":{},"index.html":{}}}],["free",{"_index":4691,"title":{},"body":{"license.html":{}}}],["from(this.getdb().then((db",{"_index":1966,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["fromeuler",{"_index":972,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["full",{"_index":3294,"title":{},"body":{"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"miscellaneous/typealiases.html":{}}}],["fullscreen",{"_index":264,"title":{},"body":{"components/AppComponent.html":{},"changelog.html":{}}}],["fullscreen_exit",{"_index":263,"title":{},"body":{"components/AppComponent.html":{}}}],["fully",{"_index":4551,"title":{},"body":{"changelog.html":{}}}],["function",{"_index":216,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUILayer.html":{},"components/BodyUiComponent.html":{},"classes/CCFSpatialGraph.html":{},"interfaces/ChannelConfig.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/ExtDeckProps.html":{},"components/FiltersPopoverComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/TiffInfo.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":2070,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/OntologySearchComponent.html":{}}}],["fund",{"_index":3388,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["funded",{"_index":3386,"title":{},"body":{"components/InfoDialogComponent.html":{},"index.html":{}}}],["furnished",{"_index":4711,"title":{},"body":{"license.html":{}}}],["further",{"_index":4570,"title":{},"body":{"changelog.html":{}}}],["future",{"_index":4594,"title":{},"body":{"changelog.html":{}}}],["gender",{"_index":59,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"changelog.html":{}}}],["generate",{"_index":1283,"title":{},"body":{"components/CheckboxComponent.html":{},"components/InfoDialogComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["generation",{"_index":3317,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["genericmessage",{"_index":1884,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"miscellaneous/typealiases.html":{}}}],["genericmessagechannel",{"_index":1885,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"miscellaneous/typealiases.html":{}}}],["genericmessageservice",{"_index":1886,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"miscellaneous/typealiases.html":{}}}],["get(d",{"_index":2773,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["get(data",{"_index":2685,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["get(e",{"_index":2688,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["get(event",{"_index":3837,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["get(id",{"_index":828,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["get(this.donor",{"_index":2722,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["getaggregateresults",{"_index":799,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{}}}],["getaggregateresults(filter",{"_index":96,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["getaggregateresults(this.getids(filter",{"_index":939,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["getarguments",{"_index":2947,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["getarguments(undefined",{"_index":2952,"title":{},"body":{"injectables/IconRegistryState.html":{}}}],["getautocolor",{"_index":4462,"title":{},"body":{"injectables/ViewerState.html":{}}}],["getautocolor(index",{"_index":4466,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["getbackground",{"_index":3127,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["getbrightness",{"_index":3103,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["getbrightnesshigh",{"_index":1572,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["getbrightnesslow",{"_index":1567,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["getchannelconfigs",{"_index":3043,"title":{},"body":{"classes/ImageViewer.html":{}}}],["getchannelnames",{"_index":3041,"title":{},"body":{"classes/ImageViewer.html":{}}}],["getchildren",{"_index":3867,"title":{},"body":{"injectables/OntologySearchService.html":{}}}],["getchildren(node",{"_index":3885,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["getchildrenfunc",{"_index":3910,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"miscellaneous/typealiases.html":{}}}],["getcolor",{"_index":683,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["getcontent",{"_index":1747,"title":{},"body":{"components/ContainerComponent.html":{}}}],["getcursor",{"_index":538,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["getdb",{"_index":1930,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["getentityscenenodes",{"_index":1034,"title":{},"body":{"classes/CCFSpatialScene.html":{}}}],["getentityscenenodes(filter",{"_index":1040,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["getexpandable",{"_index":2432,"title":{},"body":{"classes/FlatNode.html":{}}}],["getgradientstyle",{"_index":1366,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["gethaswrappedcontent",{"_index":1750,"title":{},"body":{"components/ContainerComponent.html":{}}}],["getheight",{"_index":3035,"title":{},"body":{"classes/ImageViewer.html":{}}}],["geticon",{"_index":4348,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["getids",{"_index":800,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["getids(filter",{"_index":833,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["getimageviewerdata",{"_index":801,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{}}}],["getimageviewerdata(id",{"_index":836,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["getimageviewerdata(iri",{"_index":98,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["getindexofmatch",{"_index":3868,"title":{},"body":{"injectables/OntologySearchService.html":{}}}],["getindexofmatch(label",{"_index":3888,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["getlabel",{"_index":2429,"title":{},"body":{"classes/FlatNode.html":{}}}],["getlayers",{"_index":3201,"title":{},"body":{"components/ImageViewerLegendComponent.html":{},"components/ViewerComponent.html":{}}}],["getlistresult",{"_index":868,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["getlistresult(this.store",{"_index":931,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["getlistresults",{"_index":802,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{}}}],["getlistresults(filter",{"_index":94,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["getloaders",{"_index":3039,"title":{},"body":{"classes/ImageViewer.html":{}}}],["getmessages",{"_index":3599,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["getmessagesfromsource",{"_index":3621,"title":{},"body":{"classes/MessageChannel.html":{}}}],["getmessagesfromsource(source",{"_index":3602,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["getmessagesfromsources",{"_index":3622,"title":{},"body":{"classes/MessageChannel.html":{}}}],["getmessagesfromsources(sources",{"_index":3605,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["getmethodname",{"_index":2939,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["getmethodname(undefined",{"_index":2954,"title":{},"body":{"injectables/IconRegistryState.html":{}}}],["getontologytermoccurences",{"_index":803,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"injectables/DataSourceService.html":{}}}],["getontologytermoccurences(filter",{"_index":840,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"injectables/DataSourceService.html":{}}}],["getontologytermoccurences(this.getids(filter",{"_index":940,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["getpickinginfo",{"_index":608,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["getpickinginfo(e",{"_index":612,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["getrangelabel",{"_index":2269,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["getreferencebody",{"_index":1035,"title":{},"body":{"classes/CCFSpatialScene.html":{}}}],["getreferencebody(filter",{"_index":1042,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["getreferenceorgans",{"_index":1036,"title":{},"body":{"classes/CCFSpatialScene.html":{}}}],["getreferenceorgans(filter",{"_index":1044,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["getreferencescenenodes",{"_index":1037,"title":{},"body":{"classes/CCFSpatialScene.html":{}}}],["getreferencescenenodes(filter",{"_index":1046,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["gets",{"_index":194,"title":{},"body":{"components/AppComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/ColorPickerLauncherComponent.html":{},"injectables/DataSourceService.html":{},"classes/FlatNode.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"components/ToggleButtonComponent.html":{}}}],["getscene",{"_index":804,"title":{},"body":{"classes/CCFDatabase.html":{},"classes/CCFSpatialScene.html":{}}}],["getscene(filter",{"_index":845,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["getscenenode",{"_index":1038,"title":{},"body":{"classes/CCFSpatialScene.html":{}}}],["getscenenode(source",{"_index":1049,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["getsources",{"_index":3037,"title":{},"body":{"classes/ImageViewer.html":{},"components/ViewerComponent.html":{}}}],["getspatialentities",{"_index":805,"title":{},"body":{"classes/CCFDatabase.html":{}}}],["getspatialentities(filter",{"_index":851,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["getspatialentity",{"_index":978,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["getspatialentity(this.db.store",{"_index":1058,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["getspatialentityforentity",{"_index":870,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["getspatialentityforentity(this.store",{"_index":928,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["getspatialobjectreference",{"_index":979,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["getspatialplacement",{"_index":980,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["getter/setter",{"_index":3483,"title":{},"body":{"classes/InitializationState.html":{}}}],["gettheme",{"_index":4288,"title":{},"body":{"injectables/ThemingService.html":{}}}],["getting",{"_index":3909,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"miscellaneous/typealiases.html":{}}}],["gettransformationmatrix",{"_index":947,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["gettransformationmatrix(sourceiri",{"_index":963,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["gettransformmatrix",{"_index":680,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["gettransparency",{"_index":1577,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["getvivid",{"_index":1145,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["getwidth",{"_index":3033,"title":{},"body":{"classes/ImageViewer.html":{}}}],["github",{"_index":3349,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["give",{"_index":3591,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["global",{"_index":1956,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"interfaces/SearchResult.html":{}}}],["globally",{"_index":1961,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["globalthis",{"_index":1955,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["globalthis.dboptions",{"_index":1958,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["globalthis.getcomputedstyle(element",{"_index":3518,"title":{},"body":{"classes/InitializationState.html":{}}}],["gloptions",{"_index":1253,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["gltf",{"_index":652,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["gltf.nodes?.find((n",{"_index":658,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["gltf.scene",{"_index":664,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["gltf.scene.nodes[gltf.scene.nodes.length",{"_index":662,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["gltf.scene?.nodes?.length",{"_index":661,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["gltf.scenes",{"_index":666,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["gltfloader",{"_index":626,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["grab",{"_index":543,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["grabbing",{"_index":542,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["gradient",{"_index":1363,"title":{},"body":{"components/ColorBarComponent.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{}}}],["gradient(to",{"_index":3139,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["gradienthighlight",{"_index":1340,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["gradientstyle",{"_index":1346,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["grant",{"_index":3399,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["granted",{"_index":4690,"title":{},"body":{"license.html":{}}}],["graph",{"_index":796,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/HuBMAPEntity.html":{},"modules.html":{}}}],["graph.ts",{"_index":942,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["graph.ts:38",{"_index":949,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["graph.ts:44",{"_index":962,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["graph.ts:63",{"_index":953,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["graph.ts:66",{"_index":956,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["graph.ts:69",{"_index":960,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["graph.ts:73",{"_index":965,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["graphology",{"_index":968,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"dependencies.html":{}}}],["greeenorange",{"_index":1430,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["green",{"_index":4408,"title":{},"body":{"components/ViewerComponent.html":{}}}],["greenred",{"_index":1460,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["group",{"_index":1269,"title":{},"body":{"components/CheckboxComponent.html":{},"classes/HuBMAPEntity.html":{}}}],["group_uuid_mapping",{"_index":2605,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["group_uuid_mapping[groupuuid",{"_index":2747,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["groupname",{"_index":2507,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["groupuuid",{"_index":2508,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["grow",{"_index":276,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerPopoverComponent.html":{}}}],["half",{"_index":3452,"title":{},"body":{"classes/InitializationState.html":{},"miscellaneous/typealiases.html":{}}}],["hand",{"_index":2110,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{}}}],["handlemessage",{"_index":1701,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["handlemessage(_msg",{"_index":1714,"title":{},"body":{"components/ContainerComponent.html":{}}}],["handlemessage(msg",{"_index":1825,"title":{},"body":{"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["handler",{"_index":2252,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["handles",{"_index":2344,"title":{},"body":{"components/FiltersContentComponent.html":{},"components/InfoDialogComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["handling",{"_index":2219,"title":{},"body":{"components/DualSliderComponent.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/ImageViewerLayersComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["happen",{"_index":2353,"title":{},"body":{"components/FiltersContentComponent.html":{},"changelog.html":{}}}],["happy",{"_index":4267,"title":{},"body":{"modules/StoreModule.html":{}}}],["has3dobject",{"_index":1102,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["hash",{"_index":3914,"title":{},"body":{"injectables/OntologySearchService.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{}}}],["hasimage",{"_index":2693,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["hasimageprovider",{"_index":2694,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["hasspatialentity",{"_index":85,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["hasterm",{"_index":1066,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["hasterm.kidney",{"_index":1082,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["hasterm.left_kidney",{"_index":1085,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["hasterm.right_kidney",{"_index":1083,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["hasterm.spleen",{"_index":1087,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["haswrappedcontent",{"_index":1705,"title":{},"body":{"components/ContainerComponent.html":{}}}],["hbm",{"_index":2622,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["hbm_organ_labels",{"_index":2670,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["hbm_organ_labels[this.organname",{"_index":2845,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["hbm_organs",{"_index":2640,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["hbm_organs[this.organname",{"_index":2754,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["hbm_prefix",{"_index":2568,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["header",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{}}}],["header'},{'name",{"_index":352,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["header.component",{"_index":2491,"title":{},"body":{"modules/HeaderModule.html":{}}}],["header.component.html",{"_index":2444,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header.component.scss",{"_index":2443,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header/header.module",{"_index":1913,"title":{},"body":{"modules/CoreModule.html":{}}}],["headercomponent",{"_index":351,"title":{"components/HeaderComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["headermodule",{"_index":1906,"title":{"modules/HeaderModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/HeaderModule.html":{},"modules.html":{},"overview.html":{}}}],["headers",{"_index":2875,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["headers.authorization",{"_index":2878,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["heading",{"_index":3416,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["health",{"_index":3408,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["heart",{"_index":2672,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["height",{"_index":271,"title":{},"body":{"components/AppComponent.html":{},"interfaces/ChannelConfig.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource-1.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["helper",{"_index":1758,"title":{},"body":{"components/ContainerComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["here",{"_index":2122,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{}}}],["hereby",{"_index":4689,"title":{},"body":{"license.html":{}}}],["hex",{"_index":3120,"title":{},"body":{"classes/ImageViewerLayer.html":{},"components/ViewerComponent.html":{}}}],["hex.length",{"_index":4401,"title":{},"body":{"components/ViewerComponent.html":{}}}],["hextorgbtriple(hex",{"_index":4399,"title":{},"body":{"components/ViewerComponent.html":{}}}],["hextorgbtriple(layer.color",{"_index":4445,"title":{},"body":{"components/ViewerComponent.html":{}}}],["hhsn316201300006w/hhsn27200002",{"_index":3413,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["hidden",{"_index":274,"title":{},"body":{"components/AppComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SpinnerOverlayComponent.html":{},"changelog.html":{}}}],["hide",{"_index":2410,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["hidelimitlabels",{"_index":1595,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DualSliderComponent.html":{}}}],["hidepointerlabels",{"_index":1596,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DualSliderComponent.html":{}}}],["hides",{"_index":2395,"title":{},"body":{"components/FiltersPopoverComponent.html":{},"components/ImageViewerContentComponent.html":{}}}],["hiding",{"_index":3293,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["high",{"_index":1574,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DualSliderComponent.html":{}}}],["highlightcolor",{"_index":673,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["highlighted",{"_index":45,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialScene.html":{},"components/ColorBarComponent.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["highlighted.has(entity.entityid",{"_index":1099,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["highlighted.has(s['@id",{"_index":934,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["highlightedentities",{"_index":81,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/BodyUiComponent.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["highlightedentities.concat([node.entityid",{"_index":782,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["highlightedentities.length",{"_index":779,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["highlightedentities[0",{"_index":780,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["highlighting",{"_index":1364,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["highvalue",{"_index":2199,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["hits.hits",{"_index":2686,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["hive",{"_index":3380,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["holders",{"_index":4730,"title":{},"body":{"license.html":{}}}],["hook",{"_index":2240,"title":{},"body":{"components/DualSliderComponent.html":{},"components/OntologySearchComponent.html":{}}}],["hooked",{"_index":4561,"title":{},"body":{"changelog.html":{}}}],["host",{"_index":1802,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["hostbinding",{"_index":1753,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["hostbinding('@expandcollapse",{"_index":3499,"title":{},"body":{"classes/InitializationState.html":{}}}],["hostbinding('@fadeinout",{"_index":1852,"title":{},"body":{"components/ContentComponent.html":{}}}],["hostbinding('@openclose",{"_index":3498,"title":{},"body":{"classes/InitializationState.html":{}}}],["hostbinding('class",{"_index":1772,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["hostbinding('class.active",{"_index":4243,"title":{},"body":{"components/SpinnerOverlayComponent.html":{}}}],["hostbinding('class.ccf",{"_index":3478,"title":{},"body":{"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["hostbinding('class.cff",{"_index":1847,"title":{},"body":{"components/ContentComponent.html":{}}}],["hostbinding('style.margin",{"_index":1849,"title":{},"body":{"components/ContentComponent.html":{}}}],["hostbindings",{"_index":1704,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["hostlistener",{"_index":1668,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"classes/InitializationState.html":{}}}],["hostlistener('@expandcollapse.done",{"_index":3548,"title":{},"body":{"classes/InitializationState.html":{}}}],["hostlistener('@openclose.done",{"_index":3544,"title":{},"body":{"classes/InitializationState.html":{}}}],["hostlistener('document:click",{"_index":1670,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{}}}],["hostlistener('document:mousemove",{"_index":2299,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["hostlistener('document:touchstart",{"_index":2300,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["hostlisteners",{"_index":1639,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{}}}],["hover",{"_index":1382,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["ht",{"_index":2647,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["html",{"_index":318,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DefaultIconDefinition.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["htmlcanvaselement",{"_index":520,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["htmlelement",{"_index":522,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/DataSource-1.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"injectables/ThemingService.html":{}}}],["htmlinputelement).value",{"_index":2313,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["http",{"_index":3874,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["http://purl.obolibrary.org/obo/uberon_0002106",{"_index":776,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["http://purl.obolibrary.org/obo/uberon_0004538",{"_index":771,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["http://purl.obolibrary.org/obo/uberon_0004539",{"_index":768,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["http://purl.obolibrary.org/obo/uberon_0013702",{"_index":2051,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["http://purl.org/ccf/0.5",{"_index":3711,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["http://purl.org/ccf/latest/ccf",{"_index":2691,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["http://purl.org/ccf/latest/ccf.owl#vhleftkidney",{"_index":770,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["http://purl.org/ccf/latest/ccf.owl#vhrightkidney",{"_index":766,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["http://purl.org/ccf/latest/ccf.owl#vhspleen",{"_index":772,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["http://purl.org/ccf/latest/ccf.owl#vhspleencc1",{"_index":773,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["http://purl.org/ccf/latest/ccf.owl#vhspleencc2",{"_index":774,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["http://purl.org/ccf/latest/ccf.owl#vhspleencc3",{"_index":775,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["http://www.geneontology.org/formats/oboinowl#hasexactsynonym",{"_index":2968,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["http://www.w3.org/2000/01/rdf",{"_index":2965,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["httpclient",{"_index":3871,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["httpclientmodule",{"_index":1910,"title":{},"body":{"modules/CoreModule.html":{}}}],["https://assets.hubmapconsortium.org",{"_index":893,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["https://entity",{"_index":2569,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["https://github.com/hubmapconsortium/commons/blob/master/hubmap_commons/hubmap_const.py#l101",{"_index":2638,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["https://hubmapconsortium.github.io/ccf",{"_index":4676,"title":{},"body":{"index.html":{}}}],["https://hubmapconsortium.github.io/hubmap",{"_index":3709,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["https://hubmapconsortium.org",{"_index":3332,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["https://portal.hubmapconsortium.org",{"_index":892,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["https://purl.org/ccf/latest/ccf",{"_index":890,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["https://purl.org/ccf/latest/ccf.owl",{"_index":889,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["https://sampledata.hubmapconsortium.org",{"_index":4612,"title":{},"body":{"changelog.html":{}}}],["https://vitessce",{"_index":4396,"title":{},"body":{"components/ViewerComponent.html":{}}}],["https://www.ngxs.io/advanced/options",{"_index":4276,"title":{},"body":{"modules/StoreModule.html":{}}}],["hubmap",{"_index":881,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"components/InfoDialogComponent.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["hubmap/hubmap",{"_index":862,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["hubmap/vitessce",{"_index":1138,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/OMEZarrInfo.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/TiffInfo.html":{},"dependencies.html":{}}}],["hubmapassetsurl",{"_index":886,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["hubmapdata",{"_index":2870,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["hubmapdataservice",{"_index":879,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["hubmapdataurl",{"_index":884,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["hubmapentity",{"_index":2492,"title":{"classes/HuBMAPEntity.html":{}},"body":{"classes/HuBMAPEntity.html":{}}}],["hubmapentity(e",{"_index":2696,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["hubmapportalurl",{"_index":883,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/HeaderComponent.html":{}}}],["hubmapresponseasjsonld(data",{"_index":2683,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["hubmaptoken",{"_index":888,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["human",{"_index":3313,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["icon",{"_index":33,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/DataSource.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/Filter.html":{},"components/HeaderComponent.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/ListResult.html":{},"interfaces/PureImageViewerLayer.html":{},"interfaces/SearchableItem.html":{},"modules/StoreModule.html":{},"components/ToggleButtonComponent.html":{},"changelog.html":{}}}],["icondefinition",{"_index":2899,"title":{"interfaces/IconDefinition.html":{}},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["iconregistry",{"_index":2907,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["iconregistrystate",{"_index":2908,"title":{"injectables/IconRegistryState.html":{}},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"modules/StoreModule.html":{}}}],["icons",{"_index":288,"title":{},"body":{"components/AppComponent.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/ImageViewerPopoverComponent.html":{}}}],["icons.ts",{"_index":2102,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{}}}],["id",{"_index":28,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OldRuiData.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"miscellaneous/typealiases.html":{}}}],["identifier",{"_index":27,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OldRuiData.html":{},"interfaces/OntologyNode.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["identifiers",{"_index":3767,"title":{},"body":{"interfaces/OntologyNode.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["identity",{"_index":1024,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["idextractor",{"_index":2972,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["idextractor(json",{"_index":2992,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["idobject",{"_index":2958,"title":{"interfaces/IdObject.html":{}},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["idproperty",{"_index":2969,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["ids",{"_index":835,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"injectables/ViewerState.html":{}}}],["ids.length",{"_index":4497,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["idx",{"_index":4193,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["iec",{"_index":4556,"title":{},"body":{"changelog.html":{}}}],["if(data.reference_organ_id",{"_index":3704,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["if(this.handlemessage(msg",{"_index":1855,"title":{},"body":{"components/ContentComponent.html":{}}}],["image",{"_index":47,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/ListResult.html":{},"interfaces/OMEZarrInfo.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchableItem.html":{},"components/SpinnerOverlayComponent.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["image_viewer",{"_index":44,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ListResult.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchableItem.html":{}}}],["image_viewer_layer_defaults",{"_index":4489,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["imageproviders",{"_index":2509,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["imageproviders.push(hbm_prefix",{"_index":2783,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["images",{"_index":2510,"title":{},"body":{"classes/HuBMAPEntity.html":{},"components/ImageViewerLayersComponent.html":{},"changelog.html":{}}}],["images.concat(tiffs",{"_index":2782,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["images.length",{"_index":2785,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["images[0",{"_index":2822,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["imageviewer",{"_index":1169,"title":{"classes/ImageViewer.html":{}},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ResultsBrowserItemComponent.html":{},"components/ViewerComponent.html":{}}}],["imageviewer:110",{"_index":4060,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:114",{"_index":4065,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:133",{"_index":4066,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:148",{"_index":4068,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:168",{"_index":4059,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:169",{"_index":4058,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:171",{"_index":4067,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:181",{"_index":4072,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:185",{"_index":4070,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:195",{"_index":4071,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:208",{"_index":4069,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:212",{"_index":4061,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:231",{"_index":4064,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:244",{"_index":4062,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:250",{"_index":4063,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:64",{"_index":4051,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:68",{"_index":4047,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:69",{"_index":4044,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:73",{"_index":4046,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:74",{"_index":4045,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:78",{"_index":4043,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:80",{"_index":4054,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:81",{"_index":4053,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:82",{"_index":4050,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:83",{"_index":4049,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:84",{"_index":4052,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:86",{"_index":4048,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imageviewer:99",{"_index":4057,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["imagevieweraccordioncomponent",{"_index":353,"title":{"components/ImageViewerAccordionComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["imagevieweraccordionmodule",{"_index":3069,"title":{"modules/ImageViewerAccordionModule.html":{}},"body":{"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules.html":{},"overview.html":{}}}],["imageviewercontentcomponent",{"_index":355,"title":{"components/ImageViewerContentComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["imageviewercontentmodule",{"_index":3093,"title":{"modules/ImageViewerContentModule.html":{}},"body":{"modules/ImageViewerContentModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules.html":{},"overview.html":{}}}],["imageviewerdata",{"_index":50,"title":{"interfaces/ImageViewerData.html":{}},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"interfaces/Filter.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["imageviewerlayer",{"_index":1402,"title":{"classes/ImageViewerLayer.html":{}},"body":{"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["imageviewerlayer(layer",{"_index":4480,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["imageviewerlayerargs",{"_index":3106,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{},"miscellaneous/typealiases.html":{}}}],["imageviewerlayerrequiredargnames",{"_index":3129,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{},"miscellaneous/typealiases.html":{}}}],["imageviewerlayerscomponent",{"_index":356,"title":{"components/ImageViewerLayersComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["imageviewerlayersmodule",{"_index":3074,"title":{"modules/ImageViewerLayersModule.html":{}},"body":{"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerModule.html":{},"modules.html":{},"overview.html":{}}}],["imageviewerlegendcomponent",{"_index":358,"title":{"components/ImageViewerLegendComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["imageviewerlegendmodule",{"_index":3210,"title":{"modules/ImageViewerLegendModule.html":{}},"body":{"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules.html":{},"overview.html":{}}}],["imageviewermodule",{"_index":398,"title":{"modules/ImageViewerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ImageViewerModule.html":{},"modules.html":{},"overview.html":{}}}],["imageviewerpopovercomponent",{"_index":173,"title":{"components/ImageViewerPopoverComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["imageviewerpopovermodule",{"_index":3219,"title":{"modules/ImageViewerPopoverModule.html":{}},"body":{"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules.html":{},"overview.html":{}}}],["imageviewerprops",{"_index":1158,"title":{"interfaces/ImageViewerProps.html":{}},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["imc.svg",{"_index":2814,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["immediate_ancestors",{"_index":2886,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["immediate_descendants",{"_index":2887,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["immutable",{"_index":3893,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["implementation",{"_index":2000,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"injectables/ThemingService.html":{}}}],["implemented",{"_index":4617,"title":{},"body":{"changelog.html":{}}}],["implementing",{"_index":4577,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":716,"title":{},"body":{"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DualSliderComponent.html":{},"classes/ImageViewerLayer.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{},"interfaces/PureImageViewerLayer.html":{},"components/SchemeDropdownComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["implied",{"_index":4722,"title":{},"body":{"license.html":{}}}],["implies",{"_index":1898,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{}}}],["import",{"_index":150,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/BodyModule.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"modules/CoreModule.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"modules/DrawerModule.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"interfaces/ExtDeckProps.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"modules/OntologyExplorationModule.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"modules/OntologyTreeModule.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["important",{"_index":295,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ViewerComponent.html":{}}}],["imported",{"_index":1919,"title":{},"body":{"modules/CoreModule.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["imports",{"_index":406,"title":{},"body":{"modules/AppModule.html":{},"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules/CoreModule.html":{},"modules/DrawerModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ViewerModule.html":{}}}],["improved",{"_index":4569,"title":{},"body":{"changelog.html":{}}}],["ims_negmode_multilayer_thumbnail.png",{"_index":2578,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["ims_posmode_multilayer_thumbnail.png",{"_index":2579,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["include",{"_index":86,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchableItem.html":{}}}],["included",{"_index":4716,"title":{},"body":{"license.html":{}}}],["includes",{"_index":4624,"title":{},"body":{"changelog.html":{}}}],["including",{"_index":3364,"title":{},"body":{"components/InfoDialogComponent.html":{},"changelog.html":{},"license.html":{}}}],["increased",{"_index":4574,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indiana",{"_index":3377,"title":{},"body":{"components/InfoDialogComponent.html":{},"index.html":{}}}],["indicates",{"_index":2434,"title":{},"body":{"classes/FlatNode.html":{}}}],["indicator",{"_index":1938,"title":{},"body":{"injectables/DataSourceService.html":{},"components/ImageViewerAccordionComponent.html":{}}}],["individual",{"_index":1284,"title":{},"body":{"components/CheckboxComponent.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["infectious",{"_index":3404,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["infix",{"_index":2158,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/OntologySearchComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/BodyModule.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"modules/CoreModule.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"modules/DrawerModule.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"modules/OntologyExplorationModule.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"modules/OntologyTreeModule.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["info_outline",{"_index":3286,"title":{},"body":{"components/InfoButtonComponent.html":{}}}],["infobuttoncomponent",{"_index":360,"title":{"components/InfoButtonComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["infobuttonmodule",{"_index":2481,"title":{"modules/InfoButtonModule.html":{}},"body":{"modules/HeaderModule.html":{},"modules/InfoButtonModule.html":{},"modules.html":{},"overview.html":{}}}],["infodialogcomponent",{"_index":362,"title":{"components/InfoDialogComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["infodialogmodule",{"_index":399,"title":{"modules/InfoDialogModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules.html":{},"overview.html":{}}}],["information",{"_index":89,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/CheckboxComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/ListResult.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchableItem.html":{},"index.html":{}}}],["infrastructure",{"_index":4524,"title":{},"body":{"changelog.html":{}}}],["inherit",{"_index":2402,"title":{},"body":{"components/FiltersPopoverComponent.html":{},"components/ImageViewerContentComponent.html":{}}}],["inherited",{"_index":4042,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["init",{"_index":3797,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["initial",{"_index":4564,"title":{},"body":{"changelog.html":{}}}],["initialization",{"_index":810,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"injectables/DataSourceService.html":{},"classes/InitializationState.html":{}}}],["initializationstate",{"_index":3426,"title":{"classes/InitializationState.html":{}},"body":{"classes/InitializationState.html":{}}}],["initialize",{"_index":825,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"injectables/ThemingService.html":{}}}],["initialize(component",{"_index":4299,"title":{},"body":{"injectables/ThemingService.html":{}}}],["initialized",{"_index":1860,"title":{},"body":{"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DualSliderComponent.html":{},"classes/InitializationState.html":{},"injectables/ThemingService.html":{}}}],["initializedeck",{"_index":2997,"title":{},"body":{"classes/ImageViewer.html":{},"classes/PictureInPictureViewer.html":{}}}],["initializedeck(props",{"_index":1249,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["initializeimpl",{"_index":4289,"title":{},"body":{"injectables/ThemingService.html":{}}}],["initializeimpl(component",{"_index":4303,"title":{},"body":{"injectables/ThemingService.html":{}}}],["initializer",{"_index":4302,"title":{},"body":{"injectables/ThemingService.html":{}}}],["initializes",{"_index":2233,"title":{},"body":{"components/DualSliderComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["initializesliderpopover",{"_index":2206,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["initializestate",{"_index":609,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["initializing",{"_index":1894,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{}}}],["initialviewstate",{"_index":1159,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ViewerComponent.html":{}}}],["initiates",{"_index":1543,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["inject",{"_index":3310,"title":{},"body":{"components/InfoDialogComponent.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"injectables/ThemingService.html":{}}}],["inject(default_theme",{"_index":4317,"title":{},"body":{"injectables/ThemingService.html":{}}}],["inject(mat_dialog_data",{"_index":3307,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["injectable",{"_index":1924,"title":{"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"injectables/IconRegistryState.html":{},"injectables/MessageService.html":{},"injectables/OntologySearchService.html":{},"injectables/OntologyState.html":{},"injectables/ThemingService.html":{},"injectables/ViewerState.html":{}},"body":{"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"injectables/OntologySearchService.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{},"injectables/ThemingService.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["injectables",{"_index":1925,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"injectables/IconRegistryState.html":{},"injectables/MessageService.html":{},"injectables/OntologySearchService.html":{},"injectables/OntologyState.html":{},"injectables/ThemingService.html":{},"injectables/ViewerState.html":{},"overview.html":{}}}],["injected",{"_index":3305,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["injectiontoken",{"_index":3580,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"injectables/ThemingService.html":{}}}],["injectiontoken('default",{"_index":4314,"title":{},"body":{"injectables/ThemingService.html":{}}}],["inner",{"_index":311,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["input",{"_index":745,"title":{},"body":{"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ViewerComponent.html":{}}}],["inputeventsinterval",{"_index":1598,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["inputs",{"_index":723,"title":{},"body":{"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ViewerComponent.html":{}}}],["inserted",{"_index":3927,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["inside",{"_index":2320,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["instance",{"_index":181,"title":{},"body":{"components/AppComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DualSliderComponent.html":{},"classes/FlatNode.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"interfaces/SearchResult.html":{},"components/ToggleButtonComponent.html":{}}}],["instances",{"_index":3170,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["instant",{"_index":3446,"title":{},"body":{"classes/InitializationState.html":{},"miscellaneous/typealiases.html":{}}}],["instead",{"_index":2327,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["institute",{"_index":3402,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["integrated",{"_index":4552,"title":{},"body":{"changelog.html":{}}}],["integration",{"_index":4548,"title":{},"body":{"changelog.html":{}}}],["intensity",{"_index":526,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["intent",{"_index":4148,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["inter",{"_index":2474,"title":{},"body":{"components/HeaderComponent.html":{}}}],["interactions",{"_index":4547,"title":{},"body":{"changelog.html":{}}}],["interactionstate",{"_index":589,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["interest",{"_index":4609,"title":{},"body":{"changelog.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AggregateResult.html":{},"interfaces/BodyUIProps.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/ChannelConfig.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"interfaces/IconDefinition.html":{},"interfaces/IdObject.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"interfaces/OntologyNode.html":{},"interfaces/OntologySelection.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"interfaces/TiffInfo.html":{},"interfaces/ValueObject.html":{},"interfaces/ViewerStateModel.html":{}},"body":{"interfaces/AggregateResult.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoDialogComponent.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"interfaces/OntologyNode.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"interfaces/TiffInfo.html":{},"interfaces/ValueObject.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"changelog.html":{},"index.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"interfaces/IconDefinition.html":{},"interfaces/IdObject.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"interfaces/OntologyNode.html":{},"interfaces/OntologySelection.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"interfaces/TiffInfo.html":{},"interfaces/ValueObject.html":{},"interfaces/ViewerStateModel.html":{},"overview.html":{}}}],["intestine",{"_index":2674,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["invisible",{"_index":1819,"title":{},"body":{"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["iri",{"_index":217,"title":{},"body":{"components/AppComponent.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"classes/HuBMAPEntity.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["isdark",{"_index":3104,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["isdemo",{"_index":4367,"title":{},"body":{"components/ViewerComponent.html":{}}}],["isdragging",{"_index":539,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["islight",{"_index":3105,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["isloading",{"_index":3051,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{}}}],["isolated",{"_index":3586,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["isrgb",{"_index":4094,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ViewerComponent.html":{}}}],["issliderinitialized",{"_index":2200,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["isslideropen",{"_index":2201,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["issues",{"_index":4554,"title":{},"body":{"changelog.html":{}}}],["iszooming",{"_index":590,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["it's",{"_index":196,"title":{},"body":{"components/AppComponent.html":{}}}],["item",{"_index":56,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerLegendComponent.html":{},"interfaces/ListResult.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchableItem.html":{},"changelog.html":{}}}],["item'},{'name",{"_index":373,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["item.component",{"_index":4171,"title":{},"body":{"modules/ResultsBrowserItemModule.html":{}}}],["item.component.html",{"_index":4142,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["item.component.scss",{"_index":4141,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["item.component.ts",{"_index":4140,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["item.component.ts:19",{"_index":4145,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["item.component.ts:24",{"_index":4147,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["item.component.ts:30",{"_index":4149,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["item.module",{"_index":4177,"title":{},"body":{"modules/ResultsBrowserModule.html":{}}}],["item.module.ts",{"_index":4170,"title":{},"body":{"modules/ResultsBrowserItemModule.html":{}}}],["item/results",{"_index":4139,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{}}}],["items",{"_index":93,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/DataSource.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"components/HeaderComponent.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"interfaces/ListResult.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchableItem.html":{},"components/SpinnerOverlayComponent.html":{}}}],["iu",{"_index":4592,"title":{},"body":{"changelog.html":{}}}],["join",{"_index":3834,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["json",{"_index":2554,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/ValueObject.html":{}}}],["json.parse(ruilocation",{"_index":2765,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["json.stringify",{"_index":2882,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["jsondict",{"_index":2516,"title":{},"body":{"classes/HuBMAPEntity.html":{},"miscellaneous/typealiases.html":{}}}],["jsonld",{"_index":2548,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{},"dependencies.html":{}}}],["jsonld/jsonld",{"_index":2557,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["jsonontology",{"_index":3954,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["jsonontology.pipe",{"_index":3957,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["jsonontologynode",{"_index":2964,"title":{"interfaces/JsonOntologyNode.html":{}},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/ValueObject.html":{}}}],["jsontoontologynode",{"_index":3902,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["jsontoontologynode(json",{"_index":2991,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["july",{"_index":4546,"title":{},"body":{"changelog.html":{}}}],["jump",{"_index":4599,"title":{},"body":{"changelog.html":{}}}],["june",{"_index":3346,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["justify",{"_index":307,"title":{},"body":{"components/AppComponent.html":{},"components/DualSliderComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["keep",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["keeping",{"_index":2019,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["keeps",{"_index":2389,"title":{},"body":{"components/FiltersPopoverComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["key",{"_index":669,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"components/FiltersContentComponent.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/SpatialSceneNode.html":{}}}],["key/value",{"_index":2358,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["keyboard",{"_index":4598,"title":{},"body":{"changelog.html":{}}}],["keyboard_arrow_left",{"_index":4351,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["keyboard_arrow_right",{"_index":4350,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["keyboardevent",{"_index":2242,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["keyby",{"_index":3899,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["keyby(nodes",{"_index":3961,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["keyframes",{"_index":2153,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["keys",{"_index":1256,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["keys.reduce((configs",{"_index":1260,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["kidney",{"_index":1068,"title":{},"body":{"classes/CCFSpatialScene.html":{},"classes/HuBMAPEntity.html":{},"components/InfoDialogComponent.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["kind",{"_index":4720,"title":{},"body":{"license.html":{}}}],["known",{"_index":4553,"title":{},"body":{"changelog.html":{}}}],["l",{"_index":712,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["l.tolowercase()).join",{"_index":2803,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["label",{"_index":15,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/DataSource.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IdObject.html":{},"components/ImageViewerAccordionComponent.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/OldRuiData.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/ValueObject.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["label.length",{"_index":3987,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["label.substr(0",{"_index":3984,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["label.substr(index",{"_index":3985,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["label.tolowercase().includes(searchvalue",{"_index":3980,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["label.tolowercase().indexof(searchvalue",{"_index":3982,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["labeled",{"_index":1268,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["labelextractor",{"_index":2982,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["labelextractor(json",{"_index":2994,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["labelproperty",{"_index":2981,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["labels",{"_index":1285,"title":{},"body":{"components/CheckboxComponent.html":{},"components/DualSliderComponent.html":{},"components/HeaderComponent.html":{},"interfaces/OntologyNode.html":{}}}],["labs/data",{"_index":4255,"title":{},"body":{"modules/StoreModule.html":{},"dependencies.html":{}}}],["labs/data/decorators",{"_index":2036,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["labs/data/repositories",{"_index":2037,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["labs/data/typings",{"_index":3897,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["labs/data/utils",{"_index":4485,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["large",{"_index":2673,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["large_intestine",{"_index":2651,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["last",{"_index":261,"title":{},"body":{"components/AppComponent.html":{},"components/DropdownComponent.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["lasthovered",{"_index":458,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["later",{"_index":3922,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["latest",{"_index":2007,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"changelog.html":{},"index.html":{}}}],["launch",{"_index":1411,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{}}}],["launcher",{"_index":1398,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{}}}],["launcher'},{'name",{"_index":333,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["launcher.component",{"_index":1420,"title":{},"body":{"modules/ColorPickerLauncherModule.html":{}}}],["launcher.component.html",{"_index":1400,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{}}}],["launcher.component.scss",{"_index":1399,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{}}}],["launcher.component.ts",{"_index":1390,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{}}}],["launcher.component.ts:20",{"_index":1403,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{}}}],["launcher.component.ts:25",{"_index":1404,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{}}}],["launcher.module",{"_index":3192,"title":{},"body":{"modules/ImageViewerLayersModule.html":{}}}],["launcher.module.ts",{"_index":1419,"title":{},"body":{"modules/ColorPickerLauncherModule.html":{}}}],["launcher/color",{"_index":1389,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ImageViewerLayersModule.html":{}}}],["launchinfodialog",{"_index":3274,"title":{},"body":{"components/InfoButtonComponent.html":{}}}],["layer",{"_index":517,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["layer's",{"_index":1408,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["layer.color",{"_index":4502,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["layer.colorscheme.colors.indexof(layer.color",{"_index":4511,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["layer.customizedcolor",{"_index":4504,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["layer.defaultorder",{"_index":4503,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["layer.id",{"_index":3172,"title":{},"body":{"components/ImageViewerLayersComponent.html":{},"components/ViewerComponent.html":{}}}],["layer.id.includes(getvivid(viewportid",{"_index":1263,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["layer.label",{"_index":3179,"title":{},"body":{"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{}}}],["layer.selected",{"_index":3175,"title":{},"body":{"components/ImageViewerLayersComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["layer.ts",{"_index":603,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/typealiases.html":{}}}],["layer.ts:102",{"_index":3123,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layer.ts:109",{"_index":613,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["layer.ts:24",{"_index":3114,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layer.ts:25",{"_index":3115,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layer.ts:27",{"_index":3112,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layer.ts:28",{"_index":3111,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layer.ts:29",{"_index":3110,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layer.ts:30",{"_index":3118,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layer.ts:32",{"_index":3116,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layer.ts:33",{"_index":3113,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layer.ts:34",{"_index":3117,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layer.ts:35",{"_index":3107,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layer.ts:47",{"_index":3128,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layer.ts:70",{"_index":3119,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layer.ts:72",{"_index":611,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["layer.ts:74",{"_index":614,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["layer.ts:82",{"_index":615,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["layer.ts:95",{"_index":3126,"title":{},"body":{"classes/ImageViewerLayer.html":{}}}],["layerchange",{"_index":1401,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{}}}],["layerchange.emit(layer",{"_index":1605,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["layerchanged",{"_index":3151,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["layerchanged(layer",{"_index":3165,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["layerconfig",{"_index":1157,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"miscellaneous/typealiases.html":{}}}],["layerconfigs",{"_index":1185,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["layerconfigs.length",{"_index":1234,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["layerconfigs[index",{"_index":1238,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["layerfilter",{"_index":1250,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["layerfilter(undefined",{"_index":3019,"title":{},"body":{"classes/ImageViewer.html":{},"classes/PictureInPictureViewer.html":{}}}],["layerfilterargs",{"_index":1153,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"miscellaneous/typealiases.html":{}}}],["layername",{"_index":607,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["layers",{"_index":530,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"interfaces/ColorScheme-1.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SpatialSceneNode.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"dependencies.html":{}}}],["layers'},{'name",{"_index":357,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["layers(layers",{"_index":3204,"title":{},"body":{"components/ImageViewerLegendComponent.html":{},"components/ViewerComponent.html":{}}}],["layers.component",{"_index":3189,"title":{},"body":{"modules/ImageViewerLayersModule.html":{}}}],["layers.component.html",{"_index":3149,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["layers.component.scss",{"_index":3148,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["layers.component.ts",{"_index":3144,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["layers.component.ts:21",{"_index":3154,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["layers.component.ts:26",{"_index":3153,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["layers.component.ts:31",{"_index":3158,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["layers.component.ts:36",{"_index":3160,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["layers.component.ts:44",{"_index":3168,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["layers.component.ts:54",{"_index":3162,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["layers.component.ts:67",{"_index":3166,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["layers.filter(layer",{"_index":4474,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["layers.length",{"_index":4443,"title":{},"body":{"components/ViewerComponent.html":{}}}],["layers.map(layer",{"_index":4479,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["layers.module",{"_index":3080,"title":{},"body":{"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerModule.html":{}}}],["layers.module.ts",{"_index":3188,"title":{},"body":{"modules/ImageViewerLayersModule.html":{}}}],["layers.reduce((result",{"_index":4444,"title":{},"body":{"components/ViewerComponent.html":{}}}],["layers/image",{"_index":3079,"title":{},"body":{"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerModule.html":{}}}],["layers].sort((v1",{"_index":3206,"title":{},"body":{"components/ImageViewerLegendComponent.html":{}}}],["lc.svg",{"_index":2816,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["ld",{"_index":2555,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["left",{"_index":193,"title":{},"body":{"components/AppComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/HuBMAPEntity.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["left.closeexpanded",{"_index":208,"title":{},"body":{"components/AppComponent.html":{}}}],["left.open",{"_index":207,"title":{},"body":{"components/AppComponent.html":{}}}],["left.px",{"_index":1814,"title":{},"body":{"components/ContentComponent.html":{}}}],["left_kidney",{"_index":1072,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["leftmargin",{"_index":1850,"title":{},"body":{"components/ContentComponent.html":{}}}],["legend",{"_index":317,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/BodyModule.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"modules/CoreModule.html":{},"modules/DrawerModule.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"modules/ThemingModule.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"overview.html":{}}}],["legend'},{'name",{"_index":359,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["legend.component",{"_index":3215,"title":{},"body":{"modules/ImageViewerLegendModule.html":{}}}],["legend.component.html",{"_index":3197,"title":{},"body":{"components/ImageViewerLegendComponent.html":{}}}],["legend.component.scss",{"_index":3196,"title":{},"body":{"components/ImageViewerLegendComponent.html":{}}}],["legend.component.ts",{"_index":3194,"title":{},"body":{"components/ImageViewerLegendComponent.html":{}}}],["legend.component.ts:18",{"_index":3199,"title":{},"body":{"components/ImageViewerLegendComponent.html":{}}}],["legend.component.ts:21",{"_index":3202,"title":{},"body":{"components/ImageViewerLegendComponent.html":{}}}],["legend.component.ts:22",{"_index":3200,"title":{},"body":{"components/ImageViewerLegendComponent.html":{}}}],["legend.module",{"_index":3267,"title":{},"body":{"modules/ImageViewerPopoverModule.html":{}}}],["legend.module.ts",{"_index":3214,"title":{},"body":{"modules/ImageViewerLegendModule.html":{}}}],["legend/image",{"_index":3193,"title":{},"body":{"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerPopoverModule.html":{}}}],["length",{"_index":1233,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["level",{"_index":2423,"title":{},"body":{"classes/FlatNode.html":{},"injectables/ThemingService.html":{},"changelog.html":{}}}],["levels",{"_index":4606,"title":{},"body":{"changelog.html":{}}}],["lexically",{"_index":3809,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["li",{"_index":2649,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["liability",{"_index":4734,"title":{},"body":{"license.html":{}}}],["liable",{"_index":4731,"title":{},"body":{"license.html":{}}}],["license",{"_index":4683,"title":{"license.html":{}},"body":{"license.html":{}}}],["lifecycle",{"_index":3798,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["light",{"_index":226,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"classes/ImageViewerLayer.html":{}}}],["lighter",{"_index":4165,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["lightingeffect",{"_index":510,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["limitation",{"_index":4699,"title":{},"body":{"license.html":{}}}],["limited",{"_index":4531,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["line",{"_index":546,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFSpatialGraph.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SpatialSceneNode.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["line:no",{"_index":1671,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{}}}],["linear",{"_index":3138,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["link",{"_index":2441,"title":{},"body":{"components/HeaderComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["linkage",{"_index":4550,"title":{},"body":{"changelog.html":{}}}],["linkchildren",{"_index":3928,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["linkchildren(nodemap",{"_index":3916,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["links",{"_index":3911,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"changelog.html":{}}}],["list",{"_index":24,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/CheckboxComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"interfaces/ListResult.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"interfaces/SearchableItem.html":{}}}],["listdata",{"_index":1979,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["listdata(filter",{"_index":1991,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["listdataquerystatus",{"_index":1980,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["listen",{"_index":3585,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["listener",{"_index":2071,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["listeners",{"_index":1724,"title":{},"body":{"components/ContainerComponent.html":{}}}],["listens",{"_index":1651,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{}}}],["listresult",{"_index":26,"title":{"interfaces/ListResult.html":{}},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ListResult.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchableItem.html":{}}}],["literal",{"_index":492,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"components/ImageViewerAccordionComponent.html":{},"interfaces/ImageViewerData.html":{},"interfaces/OldRuiData.html":{},"interfaces/OntologyStateModel.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["liver",{"_index":2679,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["lk",{"_index":2573,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["ll",{"_index":2654,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["load",{"_index":620,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/HuBMAPEntity.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/SpatialSceneNode.html":{}}}],["load(model.scenegraph",{"_index":654,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["loaded",{"_index":827,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DefaultIconDefinition.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"changelog.html":{}}}],["loader",{"_index":1136,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/OMEZarrInfo.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/TiffInfo.html":{}}}],["loader.channelnames",{"_index":1259,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["loader.isrgb",{"_index":4440,"title":{},"body":{"components/ViewerComponent.html":{}}}],["loaderpromises",{"_index":1208,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["loaders",{"_index":1175,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["loaders.gl/core",{"_index":622,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{},"dependencies.html":{}}}],["loaders.gl/draco",{"_index":625,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{},"dependencies.html":{}}}],["loaders.gl/gltf",{"_index":627,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{},"dependencies.html":{}}}],["loaders.length",{"_index":4082,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["loaders[0",{"_index":4084,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["loaders[0].isrgb",{"_index":4095,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["loaderselection",{"_index":4085,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["loaderselection.push",{"_index":4090,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["loadertype",{"_index":1140,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"components/ViewerComponent.html":{},"miscellaneous/enumerations.html":{}}}],["loadertype.bftiff",{"_index":3662,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["loadertype.covidtiff",{"_index":3663,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["loadertype.omezarr",{"_index":3656,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["loadertype.statictiff",{"_index":3664,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["loadertype.staticzarr",{"_index":3654,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["loadertype.tiff",{"_index":3660,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"components/ViewerComponent.html":{}}}],["loadertype.tiff2",{"_index":3661,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["loadertype.zarr",{"_index":3653,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["loadgltf(model",{"_index":651,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["loading",{"_index":3244,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["loadoffsets(offsets",{"_index":3665,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["loadoffsets(url",{"_index":3668,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["loadontology",{"_index":3869,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["loads",{"_index":3891,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["local_link",{"_index":43,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchableItem.html":{}}}],["located",{"_index":3477,"title":{},"body":{"classes/InitializationState.html":{}}}],["location",{"_index":2762,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/OntologySelection.html":{}}}],["lodash",{"_index":2561,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/ValueObject.html":{},"dependencies.html":{}}}],["log",{"_index":4677,"title":{},"body":{"index.html":{}}}],["logged",{"_index":2451,"title":{},"body":{"components/HeaderComponent.html":{}}}],["loggedin",{"_index":2445,"title":{},"body":{"components/HeaderComponent.html":{}}}],["logic",{"_index":3459,"title":{},"body":{"classes/InitializationState.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["login",{"_index":2461,"title":{},"body":{"components/HeaderComponent.html":{}}}],["logo",{"_index":2118,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{},"components/HeaderComponent.html":{},"components/InfoDialogComponent.html":{}}}],["logo.svg",{"_index":2120,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{}}}],["logout",{"_index":2462,"title":{},"body":{"components/HeaderComponent.html":{}}}],["lomap",{"_index":3900,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["lomap(ontology",{"_index":3959,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["looks",{"_index":3895,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["lookup",{"_index":2631,"title":{},"body":{"classes/HuBMAPEntity.html":{},"injectables/OntologySearchService.html":{}}}],["lookup(nodes",{"_index":3892,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["lookup[k",{"_index":2634,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["low",{"_index":1569,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DualSliderComponent.html":{}}}],["low/high",{"_index":2288,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["lower",{"_index":2224,"title":{},"body":{"components/DualSliderComponent.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["lowvalue",{"_index":2202,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["luma.gl/core",{"_index":629,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{},"dependencies.html":{}}}],["lung",{"_index":2675,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["lv",{"_index":2667,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["ly",{"_index":2659,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["lymph",{"_index":2676,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["made",{"_index":1407,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/OntologySelectionComponent.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["magma",{"_index":1503,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["main",{"_index":109,"title":{},"body":{"components/AppComponent.html":{},"components/ContainerComponent.html":{}}}],["make",{"_index":1960,"title":{},"body":{"injectables/DataSourceService.html":{},"components/ImageViewerLayersComponent.html":{}}}],["male",{"_index":61,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFSpatialScene.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["managed",{"_index":1746,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["manages",{"_index":4285,"title":{},"body":{"injectables/ThemingService.html":{}}}],["many",{"_index":115,"title":{},"body":{"components/AppComponent.html":{}}}],["map",{"_index":154,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{},"interfaces/ValueObject.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["map((d",{"_index":2751,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["map((s",{"_index":932,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["map(createmodel",{"_index":3963,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["map(e",{"_index":2687,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["map(entities",{"_index":4477,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["map(f",{"_index":2778,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["map(layers",{"_index":4473,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["map(nodes",{"_index":3960,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["map(ontology",{"_index":3958,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["map(partial(prunemodel",{"_index":3964,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["map(searchresults",{"_index":3829,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["map(state",{"_index":140,"title":{},"body":{"components/AppComponent.html":{}}}],["map(states",{"_index":2025,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["mapping",{"_index":1427,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"classes/HuBMAPEntity.html":{},"components/InfoDialogComponent.html":{}}}],["maps",{"_index":3323,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["margin",{"_index":284,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["margin2",{"_index":3456,"title":{},"body":{"classes/InitializationState.html":{}}}],["masculine",{"_index":2726,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["mass",{"_index":2729,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{}}}],["mat",{"_index":291,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/HeaderComponent.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["mat_dialog_data",{"_index":3311,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["matautocompletemodule",{"_index":3857,"title":{},"body":{"modules/OntologySearchModule.html":{}}}],["matautocompleteselectedevent",{"_index":3800,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["matbuttonmodule",{"_index":2483,"title":{},"body":{"modules/HeaderModule.html":{},"modules/OntologyTreeModule.html":{}}}],["match",{"_index":2465,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["matcheckboxchange",{"_index":1294,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["matcheckboxmodule",{"_index":1329,"title":{},"body":{"modules/CheckboxModule.html":{},"modules/ImageViewerLayersModule.html":{}}}],["matching",{"_index":99,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/BodyModule.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"modules/CoreModule.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"modules/DrawerModule.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"modules/OntologyExplorationModule.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"modules/OntologyTreeModule.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["matdialog",{"_index":3276,"title":{},"body":{"components/InfoButtonComponent.html":{}}}],["matdialogmodule",{"_index":3425,"title":{},"body":{"modules/InfoDialogModule.html":{}}}],["matdialogref",{"_index":3301,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["material",{"_index":2910,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["matexpansionmodule",{"_index":3076,"title":{},"body":{"modules/ImageViewerAccordionModule.html":{}}}],["matformfieldmodule",{"_index":2188,"title":{},"body":{"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/OntologySearchModule.html":{},"modules/SchemeDropdownModule.html":{}}}],["math.gl/core",{"_index":514,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"dependencies.html":{}}}],["math.max(...this.selection",{"_index":2292,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["math.min(...this.selection",{"_index":2290,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["math.min(math.max(1",{"_index":594,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["math.trunc(slider_max",{"_index":4413,"title":{},"body":{"components/ViewerComponent.html":{}}}],["maticonmodule",{"_index":408,"title":{},"body":{"modules/AppModule.html":{},"modules/DrawerModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ViewerModule.html":{}}}],["maticonregistry",{"_index":2905,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["matinputmodule",{"_index":3858,"title":{},"body":{"modules/OntologySearchModule.html":{}}}],["matprogressspinnermodule",{"_index":4250,"title":{},"body":{"modules/SpinnerOverlayModule.html":{}}}],["matradiomodule",{"_index":4215,"title":{},"body":{"modules/SchemeDropdownModule.html":{}}}],["matrix",{"_index":569,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["matrix.gettranslation",{"_index":574,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["matrix4",{"_index":513,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["matrix4().rotatex(toradians(90)).multiplyleft(transform",{"_index":1111,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["matrix4(node.transformmatrix",{"_index":570,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["matselectmodule",{"_index":2190,"title":{},"body":{"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/SchemeDropdownModule.html":{}}}],["mattoolbarmodule",{"_index":2485,"title":{},"body":{"modules/HeaderModule.html":{}}}],["mattooltipmodule",{"_index":2487,"title":{},"body":{"modules/HeaderModule.html":{},"modules/OntologyTreeModule.html":{}}}],["mattreemodule",{"_index":4035,"title":{},"body":{"modules/OntologyTreeModule.html":{}}}],["max",{"_index":2173,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/OntologySearchComponent.html":{}}}],["maxrotationx",{"_index":554,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["maxselected",{"_index":4495,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["mc",{"_index":4591,"title":{},"body":{"changelog.html":{}}}],["md",{"_index":2721,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["md.grouping_concept_preferred_term",{"_index":2730,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["md.preferred_term",{"_index":2724,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["measured",{"_index":3514,"title":{},"body":{"classes/InitializationState.html":{}}}],["measuredmargin",{"_index":3516,"title":{},"body":{"classes/InitializationState.html":{}}}],["measuredwidth",{"_index":3506,"title":{},"body":{"classes/InitializationState.html":{}}}],["medicine",{"_index":3398,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["member",{"_index":3574,"title":{},"body":{"classes/InitializationState.html":{}}}],["menu",{"_index":1527,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["merchantability",{"_index":4724,"title":{},"body":{"license.html":{}}}],["merge",{"_index":4702,"title":{},"body":{"license.html":{}}}],["mergeall",{"_index":3581,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["mesh",{"_index":679,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["meshlayer('cubes",{"_index":697,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["meshlayer('wireframes",{"_index":698,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["meshlayer(id",{"_index":668,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["message",{"_index":1715,"title":{"interfaces/Message.html":{}},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/ToggleButtonComponent.html":{},"miscellaneous/typealiases.html":{}}}],["message_service_config",{"_index":2127,"title":{},"body":{"modules/DrawerModule.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["message_service_default_config",{"_index":2128,"title":{},"body":{"modules/DrawerModule.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["messagechannel",{"_index":1730,"title":{"classes/MessageChannel.html":{}},"body":{"components/ContainerComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["messagechannel(source",{"_index":3619,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["messagechannel.counter",{"_index":3608,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["messages",{"_index":1711,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/ToggleButtonComponent.html":{},"miscellaneous/typealiases.html":{}}}],["messageservice",{"_index":1694,"title":{"injectables/MessageService.html":{}},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/ToggleButtonComponent.html":{},"miscellaneous/typealiases.html":{}}}],["messageservice.connect(this",{"_index":1778,"title":{},"body":{"components/ContainerComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["messageservice.connect(this).getmessages",{"_index":1853,"title":{},"body":{"components/ContentComponent.html":{}}}],["messageserviceconfig",{"_index":3584,"title":{"interfaces/MessageServiceConfig.html":{}},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["messagess",{"_index":2062,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["metadata",{"_index":55,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/ListResult.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchableItem.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"changelog.html":{}}}],["metadata.files",{"_index":2774,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["metadata.organ_donor_data",{"_index":2723,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["metadata?.metadata?.assay_type",{"_index":2793,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["meter",{"_index":988,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["method",{"_index":1297,"title":{},"body":{"components/CheckboxComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/ImageViewerLayersComponent.html":{},"injectables/ThemingService.html":{}}}],["method.apply(registry",{"_index":2935,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["methodname",{"_index":2930,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"injectables/ThemingService.html":{}}}],["methods",{"_index":197,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"components/ImageViewerContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"classes/PictureInPictureViewer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{}}}],["millimeter",{"_index":986,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["min",{"_index":2179,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/OntologySearchComponent.html":{}}}],["minor",{"_index":4543,"title":{},"body":{"changelog.html":{}}}],["minrotationx",{"_index":552,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["miscellaneous",{"_index":4672,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":4684,"title":{},"body":{"license.html":{}}}],["mock",{"_index":4587,"title":{},"body":{"changelog.html":{}}}],["modal",{"_index":3296,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["mode",{"_index":228,"title":{},"body":{"components/AppComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["model",{"_index":704,"title":{},"body":{"classes/BodyUILayer.html":{},"injectables/OntologySearchService.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode.html":{},"dependencies.html":{}}}],["model._lighting",{"_index":706,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["model.color",{"_index":709,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["model.scenegraph",{"_index":705,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["model.scenegraphnode",{"_index":657,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["model.subscribe(ontology",{"_index":3966,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["model.transformmatrix",{"_index":708,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["model.unpickable",{"_index":703,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["model.zoombasedopacity",{"_index":701,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["model['@id",{"_index":700,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["models",{"_index":696,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["models.map((model",{"_index":699,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["models/color",{"_index":4486,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["models/image",{"_index":4487,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["models/json",{"_index":3903,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["models/ontology",{"_index":3904,"title":{},"body":{"injectables/OntologySearchService.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{}}}],["modified_date",{"_index":2853,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["modify",{"_index":4701,"title":{},"body":{"license.html":{}}}],["module",{"_index":381,"title":{"modules/AppModule.html":{},"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules/CoreModule.html":{},"modules/DrawerModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"modules/ViewerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules/CoreModule.html":{},"injectables/DataSourceService.html":{},"modules/DrawerModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"modules/ViewerModule.html":{},"overview.html":{}}}],["modules",{"_index":383,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules/CoreModule.html":{},"modules/DrawerModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"modules/ViewerModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/body/body.module",{"_index":416,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/color",{"_index":4195,"title":{},"body":{"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["modules/filters/filters",{"_index":170,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["modules/image",{"_index":174,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["modules/info/info",{"_index":419,"title":{},"body":{"modules/AppModule.html":{},"modules/HeaderModule.html":{}}}],["modules/ontology",{"_index":422,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/results",{"_index":429,"title":{},"body":{"modules/AppModule.html":{}}}],["molecular",{"_index":3318,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["more",{"_index":2054,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/InfoDialogComponent.html":{},"changelog.html":{},"index.html":{}}}],["mouse",{"_index":2228,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["mouseevent",{"_index":493,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/ColorSchemePopupComponent.html":{}}}],["mouseevent?.srcevent?.ctrlkey",{"_index":588,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["moved",{"_index":4601,"title":{},"body":{"changelog.html":{}}}],["movement",{"_index":2229,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["msg",{"_index":1828,"title":{},"body":{"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["msg.payload",{"_index":1865,"title":{},"body":{"components/ContentComponent.html":{}}}],["msg.payload.drawers",{"_index":1858,"title":{},"body":{"components/ContentComponent.html":{}}}],["msg.payload.opened",{"_index":4354,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["msg.payload.type",{"_index":1856,"title":{},"body":{"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["msg.source",{"_index":1863,"title":{},"body":{"components/ContentComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["multi",{"_index":4283,"title":{},"body":{"modules/ThemingModule.html":{}}}],["multiple",{"_index":3359,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["mxif_cyc1_registered_thumbnail.png",{"_index":2583,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["mxif_cyc2_registered_thumbnail.png",{"_index":2584,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["mxif_cyc3_registered_thumbnail.png",{"_index":2585,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["n.name",{"_index":659,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["n3",{"_index":864,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{},"dependencies.html":{}}}],["n3store",{"_index":818,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/HuBMAPEntity.html":{}}}],["name",{"_index":53,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/OldRuiData.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"classes/PictureInPictureViewer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["names",{"_index":2639,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["namespace",{"_index":2111,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["national",{"_index":3401,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["nativeelement",{"_index":1673,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/ViewerComponent.html":{}}}],["navigation",{"_index":3362,"title":{},"body":{"components/InfoDialogComponent.html":{},"changelog.html":{}}}],["necessary",{"_index":2250,"title":{},"body":{"components/DualSliderComponent.html":{},"injectables/ThemingService.html":{}}}],["need",{"_index":1643,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"components/FiltersPopoverComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["needed",{"_index":3156,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["needs",{"_index":1720,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["nested",{"_index":2319,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["network",{"_index":4681,"title":{},"body":{"index.html":{}}}],["never",{"_index":1769,"title":{},"body":{"components/ContainerComponent.html":{}}}],["new",{"_index":476,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"modules/CoreModule.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"interfaces/ImageViewerProps.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OldRuiData.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"changelog.html":{}}}],["newconfigs",{"_index":1218,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["newfilter",{"_index":783,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["newly",{"_index":1356,"title":{},"body":{"components/ColorBarComponent.html":{},"classes/FlatNode.html":{}}}],["newvalue",{"_index":2311,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["next",{"_index":545,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFSpatialGraph.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/ImageViewerLegendComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/SpatialSceneNode.html":{},"components/ViewerComponent.html":{},"changelog.html":{}}}],["nextmessageid",{"_index":3607,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["ng",{"_index":308,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["ng5",{"_index":1581,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"dependencies.html":{}}}],["ng5slidermodule",{"_index":1630,"title":{},"body":{"modules/ColorSchemeContentsModule.html":{},"modules/DualSliderModule.html":{}}}],["ngacceptinputtype_expanded",{"_index":3577,"title":{},"body":{"classes/InitializationState.html":{}}}],["ngacceptinputtype_opened",{"_index":3576,"title":{},"body":{"classes/InitializationState.html":{}}}],["ngacceptinputtype_position",{"_index":3573,"title":{},"body":{"classes/InitializationState.html":{}}}],["ngafterviewinit",{"_index":722,"title":{},"body":{"components/BodyUiComponent.html":{},"components/ContainerComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["ngfor",{"_index":3169,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["ngmodule",{"_index":407,"title":{},"body":{"modules/AppModule.html":{},"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules/CoreModule.html":{},"modules/DrawerModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"modules/ViewerModule.html":{}}}],["ngonchanges",{"_index":2207,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["ngonchanges(changes",{"_index":2234,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["ngondestroy",{"_index":1702,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DualSliderComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["ngoninit",{"_index":3779,"title":{},"body":{"components/OntologySearchComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["ngxs",{"_index":756,"title":{},"body":{"components/BodyUiComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"injectables/OntologySearchService.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{},"modules/StoreModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"dependencies.html":{}}}],["ngxs/store",{"_index":2038,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{},"modules/StoreModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"dependencies.html":{}}}],["ngxsdataentitycollectionsrepository",{"_index":4459,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["ngxsdatapluginmodule",{"_index":4254,"title":{},"body":{"modules/StoreModule.html":{}}}],["ngxsdatapluginmodule.forroot",{"_index":4269,"title":{},"body":{"modules/StoreModule.html":{}}}],["ngxsdatarepository",{"_index":1973,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{}}}],["ngxsentitycollections",{"_index":4483,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["ngxsmodule",{"_index":4256,"title":{},"body":{"modules/StoreModule.html":{}}}],["ngxsmodule.forroot(root_states",{"_index":4270,"title":{},"body":{"modules/StoreModule.html":{}}}],["niaid",{"_index":3406,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["niddk",{"_index":3396,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["nih",{"_index":3387,"title":{},"body":{"components/InfoDialogComponent.html":{},"index.html":{}}}],["node",{"_index":508,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{},"interfaces/ValueObject.html":{},"miscellaneous/typealiases.html":{}}}],["node's",{"_index":2431,"title":{},"body":{"classes/FlatNode.html":{}}}],["node.children",{"_index":3990,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["node.entityid",{"_index":777,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["node.label.tolowercase().includes(searchvalue",{"_index":3974,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["node.parent",{"_index":3938,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["node.synonymlabels.find((label",{"_index":3979,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["node.ts",{"_index":2419,"title":{},"body":{"classes/FlatNode.html":{},"interfaces/OntologyNode.html":{}}}],["node.ts:11",{"_index":2430,"title":{},"body":{"classes/FlatNode.html":{}}}],["node.ts:16",{"_index":2433,"title":{},"body":{"classes/FlatNode.html":{}}}],["node.ts:27",{"_index":2428,"title":{},"body":{"classes/FlatNode.html":{}}}],["node.ts:29",{"_index":2424,"title":{},"body":{"classes/FlatNode.html":{}}}],["node.zoomtoonload",{"_index":566,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["node['@id",{"_index":764,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["nodeattrs",{"_index":1050,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["nodeclick",{"_index":459,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["nodeclicksubject",{"_index":460,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["nodehoverstart",{"_index":461,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["nodehoverstartsubject",{"_index":462,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["nodehoverstop",{"_index":463,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["nodehoverstopsubject",{"_index":464,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["nodemap",{"_index":3913,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["nodemap[parent].children.push(id",{"_index":3924,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["nodes",{"_index":240,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUILayer.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialScene.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"miscellaneous/typealiases.html":{}}}],["nodes.concat",{"_index":1091,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["nodes.filter(s",{"_index":1095,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["nodes.foreach((node",{"_index":3972,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["nodes[id",{"_index":3949,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["nodes[node.parent",{"_index":4014,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["none",{"_index":299,"title":{},"body":{"components/AppComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["noninfringement",{"_index":4728,"title":{},"body":{"license.html":{}}}],["normally",{"_index":733,"title":{},"body":{"components/BodyUiComponent.html":{},"components/FiltersPopoverComponent.html":{}}}],["not(:last",{"_index":2470,"title":{},"body":{"components/HeaderComponent.html":{}}}],["note",{"_index":631,"title":{},"body":{"classes/BodyUILayer.html":{},"components/DualSliderComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode.html":{}}}],["notice",{"_index":4714,"title":{},"body":{"license.html":{}}}],["now",{"_index":4544,"title":{},"body":{"changelog.html":{}}}],["nowrap",{"_index":4164,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["null",{"_index":925,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"injectables/ThemingService.html":{}}}],["null)?.getcontainerelement",{"_index":4329,"title":{},"body":{"injectables/ThemingService.html":{}}}],["num_layers_selected_on_creation",{"_index":4488,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["number",{"_index":18,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"interfaces/ImageViewerProps.html":{},"classes/InitializationState.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"interfaces/TiffInfo.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["number((event.target",{"_index":2312,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["number(this.options.floor",{"_index":2315,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["number(value.slice(0",{"_index":3520,"title":{},"body":{"classes/InitializationState.html":{}}}],["number.isnan(value",{"_index":4405,"title":{},"body":{"components/ViewerComponent.html":{}}}],["number.parseint(hex.slice(1",{"_index":4403,"title":{},"body":{"components/ViewerComponent.html":{}}}],["number[][]}).transformmatrix",{"_index":682,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["number]}).color",{"_index":684,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["o",{"_index":2073,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["object",{"_index":236,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"components/CheckboxComponent.html":{},"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"injectables/DataSourceService.html":{},"interfaces/DefaultIconDefinition.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/ImageViewerLayersComponent.html":{},"classes/InitializationState.html":{},"interfaces/OldRuiData.html":{},"injectables/OntologySearchService.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{}}}],["object.assign",{"_index":2091,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["object.assign(s",{"_index":933,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["object.assign(this",{"_index":3131,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["object.entries(channelconfigs",{"_index":4089,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["object.entries(configs).reduce((result",{"_index":1219,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["object.entries(entities",{"_index":4510,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["object.entries(rui).foreach(([k",{"_index":2632,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["object.keys(this.channelconfigs",{"_index":1179,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["object.values(entities",{"_index":4478,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["object.values(state.nodes",{"_index":4026,"title":{},"body":{"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{}}}],["objects",{"_index":855,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["observable",{"_index":137,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["observableinput",{"_index":1990,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["observedvalueof",{"_index":2039,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["obtaining",{"_index":4693,"title":{},"body":{"license.html":{}}}],["occurencedata",{"_index":3996,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["occurences",{"_index":874,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["occurrences",{"_index":842,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["occurs",{"_index":2231,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["office",{"_index":3390,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["official",{"_index":4545,"title":{},"body":{"changelog.html":{}}}],["offset",{"_index":1867,"title":{},"body":{"components/ContentComponent.html":{}}}],["offsets",{"_index":3650,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["old",{"_index":2567,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{}}}],["oldruidata",{"_index":2566,"title":{"interfaces/OldRuiData.html":{}},"body":{"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{}}}],["oldviewstate",{"_index":1264,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["ome",{"_index":3641,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/enumerations.html":{}}}],["ome\\.tif|ome\\.tiff)$/.test(f.rel_path",{"_index":2777,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["omezarr",{"_index":3640,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/enumerations.html":{}}}],["omezarrinfo",{"_index":1141,"title":{"interfaces/OMEZarrInfo.html":{}},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["omezarrreader",{"_index":3637,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["omezarrreader.fromurl(url",{"_index":3658,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["omit",{"_index":2559,"title":{},"body":{"classes/HuBMAPEntity.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"miscellaneous/typealiases.html":{}}}],["omit(this",{"_index":2839,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["once",{"_index":1920,"title":{},"body":{"modules/CoreModule.html":{}}}],["onchanges",{"_index":2195,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["onchannelschange",{"_index":3227,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["onchannelschange(channels",{"_index":3234,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["onclick",{"_index":534,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["ondestroy",{"_index":1691,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DualSliderComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["one",{"_index":2053,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["ones",{"_index":3146,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["onhover",{"_index":532,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["oninit",{"_index":3771,"title":{},"body":{"components/OntologySearchComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["onkeyhigh",{"_index":2208,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["onkeyhigh(event",{"_index":2241,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["onkeylow",{"_index":2209,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["onkeylow(event",{"_index":2247,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["online",{"_index":4563,"title":{},"body":{"changelog.html":{}}}],["onscroll",{"_index":4108,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["onscroll(event",{"_index":4119,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["onselect",{"_index":3780,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["onselect(event",{"_index":3799,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["ontolgyselection.foreach((selection",{"_index":256,"title":{},"body":{"components/AppComponent.html":{}}}],["ontolgyselection.length",{"_index":251,"title":{},"body":{"components/AppComponent.html":{}}}],["ontolgyselection[0].label",{"_index":254,"title":{},"body":{"components/AppComponent.html":{}}}],["ontological",{"_index":4616,"title":{},"body":{"changelog.html":{}}}],["ontology",{"_index":65,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"interfaces/IdObject.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"modules/OntologyExplorationModule.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"modules/OntologyTreeModule.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"changelog.html":{}}}],["ontology.ts",{"_index":2960,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["ontology/ccf",{"_index":3710,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["ontology/ontology.state",{"_index":4259,"title":{},"body":{"modules/StoreModule.html":{}}}],["ontologyexplorationmodule",{"_index":400,"title":{"modules/OntologyExplorationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OntologyExplorationModule.html":{},"modules.html":{},"overview.html":{}}}],["ontologyfilter",{"_index":3997,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["ontologynode",{"_index":2422,"title":{"interfaces/OntologyNode.html":{}},"body":{"classes/FlatNode.html":{},"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{},"interfaces/ValueObject.html":{}}}],["ontologysearchcomponent",{"_index":364,"title":{"components/OntologySearchComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["ontologysearchmodule",{"_index":3755,"title":{"modules/OntologySearchModule.html":{}},"body":{"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules.html":{},"overview.html":{}}}],["ontologysearchservice",{"_index":3784,"title":{"injectables/OntologySearchService.html":{}},"body":{"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"interfaces/SearchResult.html":{}}}],["ontologyselected(ontologyselection",{"_index":241,"title":{},"body":{"components/AppComponent.html":{}}}],["ontologyselection",{"_index":157,"title":{"interfaces/OntologySelection.html":{}},"body":{"components/AppComponent.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{}}}],["ontologyselection.map(selection",{"_index":243,"title":{},"body":{"components/AppComponent.html":{}}}],["ontologyselectioncomponent",{"_index":366,"title":{"components/OntologySelectionComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["ontologyselectionlabel",{"_index":124,"title":{},"body":{"components/AppComponent.html":{}}}],["ontologyselectionmodule",{"_index":3756,"title":{"modules/OntologySelectionModule.html":{}},"body":{"modules/OntologyExplorationModule.html":{},"modules/OntologySelectionModule.html":{},"modules.html":{},"overview.html":{}}}],["ontologyselections",{"_index":4005,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["ontologyservice",{"_index":3777,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["ontologystate",{"_index":3872,"title":{"injectables/OntologyState.html":{}},"body":{"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{},"modules/StoreModule.html":{}}}],["ontologystatemodel",{"_index":3905,"title":{"interfaces/OntologyStateModel.html":{}},"body":{"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{}}}],["ontologyterms",{"_index":67,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"interfaces/DataSource.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["ontologytermsdata",{"_index":2085,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["ontologytermsfulldata",{"_index":1981,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["ontologytreecomponent",{"_index":368,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologyTreeModule.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["ontologytreemodule",{"_index":3757,"title":{"modules/OntologyTreeModule.html":{}},"body":{"modules/OntologyExplorationModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules.html":{},"overview.html":{}}}],["onviewstatechange",{"_index":536,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["onviewstatechange(undefined",{"_index":3021,"title":{},"body":{"classes/ImageViewer.html":{},"classes/PictureInPictureViewer.html":{}}}],["onviewstatechangeargs",{"_index":1154,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"miscellaneous/typealiases.html":{}}}],["opacity",{"_index":282,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUILayer.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"interfaces/SpatialSceneNode.html":{},"components/SpinnerOverlayComponent.html":{}}}],["open",{"_index":215,"title":{},"body":{"components/AppComponent.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"miscellaneous/typealiases.html":{}}}],["open(data",{"_index":3237,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["open(event",{"_index":1656,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["open/close",{"_index":3497,"title":{},"body":{"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["openapi",{"_index":4584,"title":{},"body":{"changelog.html":{}}}],["opened",{"_index":1834,"title":{},"body":{"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["opened(value",{"_index":3486,"title":{},"body":{"classes/InitializationState.html":{}}}],["opened/closed",{"_index":3444,"title":{},"body":{"classes/InitializationState.html":{},"miscellaneous/typealiases.html":{}}}],["openedchange",{"_index":3493,"title":{},"body":{"classes/InitializationState.html":{}}}],["openedstate",{"_index":3445,"title":{},"body":{"classes/InitializationState.html":{},"miscellaneous/typealiases.html":{}}}],["openexpanded",{"_index":3534,"title":{},"body":{"classes/InitializationState.html":{}}}],["openimageviewer",{"_index":4144,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["opening",{"_index":4118,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["opening/closing/expanding",{"_index":3460,"title":{},"body":{"classes/InitializationState.html":{}}}],["openresult",{"_index":4143,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["opens",{"_index":1545,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DropdownComponent.html":{},"components/InfoButtonComponent.html":{},"classes/InitializationState.html":{}}}],["openviewer(viewer",{"_index":218,"title":{},"body":{"components/AppComponent.html":{}}}],["operator",{"_index":2065,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["operatorfunction",{"_index":2040,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["opposite",{"_index":3449,"title":{},"body":{"classes/InitializationState.html":{},"miscellaneous/typealiases.html":{}}}],["ops",{"_index":902,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["ops.push(addhubmapdatatostore",{"_index":910,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["ops.push(addjsonldtostore(this.options.hubmapdataurl",{"_index":909,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["ops.push(addn3tostore(this.options.ccfowlurl",{"_index":905,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["ops.push(addrdfxmltostore(this.options.ccfowlurl",{"_index":906,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["optimizations",{"_index":4537,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":1295,"title":{},"body":{"components/CheckboxComponent.html":{},"components/DropdownComponent.html":{},"components/OntologySearchComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["option.displaylabel[0",{"_index":3840,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["option.displaylabel[1",{"_index":3841,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["option.displaylabel[2",{"_index":3842,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["option:first",{"_index":4206,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["option:last",{"_index":4207,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["option?.displaylabel",{"_index":3833,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["optional",{"_index":87,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"modules/CoreModule.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OldRuiData.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"classes/PictureInPictureViewer.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{}}}],["options",{"_index":69,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/BodyUILayer.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/CheckboxComponent.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialSceneNode.html":{}}}],["options.ceil",{"_index":2317,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["options.floor",{"_index":2316,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["optionschanged",{"_index":2210,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["optionsvisible",{"_index":2136,"title":{},"body":{"components/DropdownComponent.html":{}}}],["orbitaxis",{"_index":550,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["orbitview",{"_index":511,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["order",{"_index":3324,"title":{},"body":{"components/InfoDialogComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["order.length",{"_index":4516,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["ordering",{"_index":3575,"title":{},"body":{"classes/InitializationState.html":{}}}],["organ",{"_index":52,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"components/InfoDialogComponent.html":{},"interfaces/ListResult.html":{},"interfaces/OldRuiData.html":{},"interfaces/SearchableItem.html":{},"changelog.html":{}}}],["organ_id",{"_index":2857,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["organ_sample",{"_index":2840,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["organids",{"_index":3931,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["organization",{"_index":3331,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["organname",{"_index":54,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["organnodes",{"_index":3933,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["organs",{"_index":850,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialScene.html":{},"classes/HuBMAPEntity.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["organsample",{"_index":2511,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["organsid",{"_index":1059,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["origin_sample",{"_index":2888,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["original",{"_index":2426,"title":{},"body":{"classes/FlatNode.html":{},"interfaces/OldRuiData.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["originx",{"_index":2275,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["originy",{"_index":2276,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["ot",{"_index":2108,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{},"classes/HuBMAPEntity.html":{}}}],["ot2od026671",{"_index":3395,"title":{},"body":{"components/InfoDialogComponent.html":{},"index.html":{}}}],["other.expanded",{"_index":3562,"title":{},"body":{"classes/InitializationState.html":{}}}],["other.expandedstate2",{"_index":3563,"title":{},"body":{"classes/InitializationState.html":{}}}],["other.margin2",{"_index":3568,"title":{},"body":{"classes/InitializationState.html":{}}}],["other.measuredmargin",{"_index":3566,"title":{},"body":{"classes/InitializationState.html":{}}}],["other.measuredwidth",{"_index":3565,"title":{},"body":{"classes/InitializationState.html":{}}}],["other.opened",{"_index":3564,"title":{},"body":{"classes/InitializationState.html":{}}}],["other.width",{"_index":3567,"title":{},"body":{"classes/InitializationState.html":{}}}],["other_organ",{"_index":2669,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["otherwise",{"_index":2920,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"license.html":{}}}],["out",{"_index":404,"title":{},"body":{"modules/AppModule.html":{},"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"components/ContentComponent.html":{},"modules/CoreModule.html":{},"modules/DrawerModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"classes/InitializationState.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"modules/ThemingModule.html":{},"modules/ViewerModule.html":{},"license.html":{},"overview.html":{}}}],["outer",{"_index":4209,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["outline",{"_index":303,"title":{},"body":{"components/AppComponent.html":{},"components/ColorBarComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/OntologySearchComponent.html":{}}}],["output",{"_index":746,"title":{},"body":{"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ViewerComponent.html":{}}}],["outputs",{"_index":724,"title":{},"body":{"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ViewerComponent.html":{}}}],["outside",{"_index":730,"title":{},"body":{"components/BodyUiComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["overall",{"_index":1279,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["overflow",{"_index":273,"title":{},"body":{"components/AppComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["overlay",{"_index":147,"title":{},"body":{"components/AppComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/InfoDialogComponent.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{}}}],["overlay'},{'name",{"_index":376,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["overlay.component",{"_index":4252,"title":{},"body":{"modules/SpinnerOverlayModule.html":{}}}],["overlay.component.html",{"_index":4237,"title":{},"body":{"components/SpinnerOverlayComponent.html":{}}}],["overlay.component.scss",{"_index":4236,"title":{},"body":{"components/SpinnerOverlayComponent.html":{}}}],["overlay.component.ts",{"_index":4234,"title":{},"body":{"components/SpinnerOverlayComponent.html":{}}}],["overlay.component.ts:16",{"_index":4242,"title":{},"body":{"components/SpinnerOverlayComponent.html":{}}}],["overlay.component.ts:19",{"_index":4238,"title":{},"body":{"components/SpinnerOverlayComponent.html":{}}}],["overlay.component.ts:22",{"_index":4240,"title":{},"body":{"components/SpinnerOverlayComponent.html":{}}}],["overlay.create",{"_index":2282,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["overlay.module",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["overlay.module.ts",{"_index":4249,"title":{},"body":{"modules/SpinnerOverlayModule.html":{}}}],["overlay.position().flexibleconnectedto(element).withpositions([position",{"_index":2280,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["overlay/spinner",{"_index":433,"title":{},"body":{"modules/AppModule.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{}}}],["overlaycontainer",{"_index":4312,"title":{},"body":{"injectables/ThemingService.html":{}}}],["overlaymodule",{"_index":2338,"title":{},"body":{"modules/DualSliderModule.html":{}}}],["overlayref",{"_index":2203,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["overlayref.attach(popoverportal",{"_index":2309,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["overlayref.updateposition",{"_index":2310,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["overlays",{"_index":4607,"title":{},"body":{"changelog.html":{}}}],["overlayx",{"_index":2277,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["overlayy",{"_index":2278,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["overview",{"_index":4077,"title":{"overview.html":{}},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["overview_defaults",{"_index":4078,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["overviewargs",{"_index":4076,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"miscellaneous/typealiases.html":{}}}],["overviewview",{"_index":4074,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["overviewviewnewargs",{"_index":4075,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["owl",{"_index":3348,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["owner",{"_index":1637,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["owner?.contains(target",{"_index":1675,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["owning",{"_index":4338,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["p",{"_index":982,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"changelog.html":{}}}],["p.translation_units",{"_index":984,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["p.x_rotation",{"_index":994,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["p.x_scaling",{"_index":1002,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["p.x_translation",{"_index":990,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["p.y_rotation",{"_index":995,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["p.y_scaling",{"_index":1003,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["p.y_translation",{"_index":991,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["p.z_rotation].map(toradians",{"_index":996,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["p.z_scaling",{"_index":1004,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["p.z_translation].map(t",{"_index":992,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["package",{"_index":4633,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":289,"title":{},"body":{"components/AppComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/InfoDialogComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["page",{"_index":2442,"title":{},"body":{"components/HeaderComponent.html":{}}}],["pair",{"_index":3570,"title":{},"body":{"classes/InitializationState.html":{}}}],["pane",{"_index":2178,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["panel",{"_index":2168,"title":{},"body":{"components/DropdownComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["panelclass",{"_index":2283,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["param",{"_index":183,"title":{},"body":{"components/AppComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/CheckboxComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OldRuiData.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchResult.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{}}}],["parameters",{"_index":474,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"classes/PictureInPictureViewer.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{}}}],["parameters>[0",{"_index":1152,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["parameters[0",{"_index":3649,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["params",{"_index":3455,"title":{},"body":{"classes/InitializationState.html":{}}}],["parent",{"_index":521,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/CheckboxComponent.html":{},"interfaces/IdObject.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OntologyNode.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/ValueObject.html":{},"miscellaneous/typealiases.html":{}}}],["parent.messages.pipe(takewhile",{"_index":3613,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["parentextractor",{"_index":2978,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["parentextractor(json",{"_index":2993,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["parentproperty",{"_index":2977,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["parents",{"_index":3912,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["parser",{"_index":4663,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":3379,"title":{},"body":{"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{}}}],["partial",{"_index":472,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"classes/ImageViewerLayer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/JsonOntologyNode.html":{},"injectables/OntologySearchService.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode-1.html":{},"interfaces/ValueObject.html":{},"injectables/ViewerState.html":{}}}],["partial.placeholder",{"_index":2988,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/ValueObject.html":{}}}],["partial[0",{"_index":1603,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["particular",{"_index":4726,"title":{},"body":{"license.html":{}}}],["partonomy",{"_index":4549,"title":{},"body":{"changelog.html":{}}}],["parts",{"_index":2940,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["parts.join",{"_index":2945,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["parts.push('innamespace",{"_index":2944,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["parts.push('literal",{"_index":2943,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["parts.push('set",{"_index":2942,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["pas_registered_thumbnail.png",{"_index":2580,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["pass",{"_index":3058,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["passed",{"_index":134,"title":{},"body":{"components/AppComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/OntologySelectionComponent.html":{}}}],["passes",{"_index":1405,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{},"components/OntologySelectionComponent.html":{}}}],["patch",{"_index":2564,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["path",{"_index":1028,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"components/CheckboxComponent.html":{},"dependencies.html":{}}}],["path.length",{"_index":1030,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["path.reverse",{"_index":1031,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["path/unweighted",{"_index":971,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["patient",{"_index":2369,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["payload",{"_index":1891,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["pbr",{"_index":707,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["permission",{"_index":4688,"title":{},"body":{"license.html":{}}}],["permit",{"_index":4709,"title":{},"body":{"license.html":{}}}],["person",{"_index":4692,"title":{},"body":{"license.html":{}}}],["persons",{"_index":4710,"title":{},"body":{"license.html":{}}}],["physiologic",{"_index":3365,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["pick",{"_index":3130,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["pickable",{"_index":671,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["picked",{"_index":576,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["picker",{"_index":332,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["picture",{"_index":4039,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"miscellaneous/typealiases.html":{}}}],["pictureinpictureviewer",{"_index":4037,"title":{"classes/PictureInPictureViewer.html":{}},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ViewerComponent.html":{}}}],["pictureinpictureviewerprops",{"_index":4040,"title":{"interfaces/PictureInPictureViewerProps.html":{}},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["pipe",{"_index":2024,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["pipe(mergeall",{"_index":3615,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["placed",{"_index":4268,"title":{},"body":{"modules/StoreModule.html":{}}}],["placeholder",{"_index":3182,"title":{},"body":{"components/ImageViewerLayersComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"changelog.html":{}}}],["placement",{"_index":961,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["placement.target['@id",{"_index":1023,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["placement_date",{"_index":3729,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["placements",{"_index":1017,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["placementtarget",{"_index":3699,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["placementtarget?.endswith('kidney",{"_index":3705,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["places",{"_index":635,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["plasma",{"_index":1512,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["pluck",{"_index":155,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["plugin",{"_index":4266,"title":{},"body":{"modules/StoreModule.html":{}}}],["point",{"_index":3687,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["pointer",{"_index":302,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["popover",{"_index":202,"title":{},"body":{"components/AppComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerPopoverComponent.html":{}}}],["popover's",{"_index":203,"title":{},"body":{"components/AppComponent.html":{}}}],["popover'},{'name",{"_index":350,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["popover.component",{"_index":172,"title":{},"body":{"components/AppComponent.html":{},"modules/FiltersPopoverModule.html":{},"modules/ImageViewerPopoverModule.html":{}}}],["popover.component.html",{"_index":2383,"title":{},"body":{"components/FiltersPopoverComponent.html":{},"components/ImageViewerPopoverComponent.html":{}}}],["popover.component.scss",{"_index":2382,"title":{},"body":{"components/FiltersPopoverComponent.html":{},"components/ImageViewerPopoverComponent.html":{}}}],["popover.component.ts",{"_index":2381,"title":{},"body":{"components/FiltersPopoverComponent.html":{},"components/ImageViewerPopoverComponent.html":{}}}],["popover.component.ts:15",{"_index":2391,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["popover.component.ts:21",{"_index":2388,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["popover.component.ts:26",{"_index":2392,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["popover.component.ts:31",{"_index":2398,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["popover.component.ts:36",{"_index":2397,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["popover.component.ts:37",{"_index":3242,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["popover.component.ts:42",{"_index":3246,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["popover.component.ts:43",{"_index":2396,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["popover.component.ts:47",{"_index":3247,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["popover.component.ts:51",{"_index":2394,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["popover.component.ts:52",{"_index":3243,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["popover.component.ts:57",{"_index":3231,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["popover.component.ts:70",{"_index":3232,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["popover.component.ts:79",{"_index":3238,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["popover.component.ts:88",{"_index":3235,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["popover.component.ts:99",{"_index":3240,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["popover.module",{"_index":417,"title":{},"body":{"modules/AppModule.html":{},"modules/ImageViewerModule.html":{}}}],["popover.module.ts",{"_index":2415,"title":{},"body":{"modules/FiltersPopoverModule.html":{},"modules/ImageViewerPopoverModule.html":{}}}],["popover/filters",{"_index":171,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{}}}],["popover/image",{"_index":176,"title":{},"body":{"components/AppComponent.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{}}}],["popoverelement",{"_index":2204,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["popoverelement.nativeelement.contains(target",{"_index":2303,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["popoverportal",{"_index":2205,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["popup",{"_index":1336,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"changelog.html":{}}}],["popup'},{'name",{"_index":337,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["popup.component",{"_index":1688,"title":{},"body":{"modules/ColorSchemePopupModule.html":{}}}],["popup.component.html",{"_index":1635,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["popup.component.scss",{"_index":1634,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["popup.component.ts",{"_index":1633,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["popup.component.ts:20",{"_index":1644,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["popup.component.ts:25",{"_index":1641,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["popup.component.ts:30",{"_index":1646,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["popup.component.ts:32",{"_index":1662,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["popup.component.ts:37",{"_index":1666,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["popup.component.ts:40",{"_index":1663,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["popup.component.ts:45",{"_index":1659,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["popup.component.ts:53",{"_index":1650,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["popup.component.ts:64",{"_index":1657,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["popup.module",{"_index":1422,"title":{},"body":{"modules/ColorPickerLauncherModule.html":{}}}],["popup.module.ts",{"_index":1687,"title":{},"body":{"modules/ColorSchemePopupModule.html":{}}}],["popup/color",{"_index":1421,"title":{},"body":{"modules/ColorPickerLauncherModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{}}}],["popupvisible",{"_index":1638,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["portal",{"_index":882,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"components/InfoDialogComponent.html":{},"changelog.html":{},"index.html":{}}}],["portal's",{"_index":4528,"title":{},"body":{"changelog.html":{}}}],["portalmodule",{"_index":2339,"title":{},"body":{"modules/DualSliderModule.html":{}}}],["portalurl",{"_index":2512,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["portalurl}browse/dataset/${uuid}#visualization",{"_index":2835,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["portalurl}browse/sample/${this.id",{"_index":2819,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["portalurl}search?ancestor_ids[0]=${this.id}&entity_type[0]=dataset",{"_index":2820,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["portions",{"_index":4718,"title":{},"body":{"license.html":{}}}],["position",{"_index":277,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"interfaces/OldRuiData.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["position(value",{"_index":3482,"title":{},"body":{"classes/InitializationState.html":{}}}],["positions",{"_index":1373,"title":{},"body":{"components/ColorBarComponent.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["positions[index",{"_index":3141,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["positionstrategy",{"_index":2279,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["post",{"_index":2881,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["postprocess",{"_index":656,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["precision",{"_index":3397,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["prefix",{"_index":3884,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["preparation",{"_index":4593,"title":{},"body":{"changelog.html":{}}}],["preprint",{"_index":3353,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["presented",{"_index":4605,"title":{},"body":{"changelog.html":{}}}],["pressed",{"_index":2246,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["private",{"_index":455,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"interfaces/ChannelConfig.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/SearchResult.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["process",{"_index":1827,"title":{},"body":{"components/ContentComponent.html":{},"components/ToggleButtonComponent.html":{},"changelog.html":{}}}],["processed",{"_index":4522,"title":{},"body":{"changelog.html":{}}}],["processes",{"_index":1717,"title":{},"body":{"components/ContainerComponent.html":{},"classes/InitializationState.html":{}}}],["programmers",{"_index":630,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["progress",{"_index":4235,"title":{},"body":{"components/SpinnerOverlayComponent.html":{}}}],["project",{"_index":3270,"title":{},"body":{"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"changelog.html":{}}}],["projected",{"_index":1725,"title":{},"body":{"components/ContainerComponent.html":{}}}],["projects/.../hubmap",{"_index":4749,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../image",{"_index":4745,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../loader.ts",{"_index":4675,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../picture",{"_index":4750,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/ccf",{"_index":6,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/ListResult.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["promise",{"_index":95,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/BodyUILayer.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ImageViewerProps.html":{},"classes/InitializationState.html":{},"interfaces/ListResult.html":{},"interfaces/OMEZarrInfo.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/TiffInfo.html":{},"components/ViewerComponent.html":{}}}],["promise(r",{"_index":919,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["promise(resolve",{"_index":3433,"title":{},"body":{"classes/InitializationState.html":{}}}],["promise.all(loaderpromises",{"_index":1212,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["promise.all(ops",{"_index":915,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["proof",{"_index":3367,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["prop",{"_index":2929,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["properties",{"_index":13,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"interfaces/ChannelConfig.html":{},"components/ColorPickerLauncherComponent.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersPopoverComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["property",{"_index":1301,"title":{},"body":{"components/CheckboxComponent.html":{},"components/ContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"interfaces/IdObject.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/ValueObject.html":{}}}],["property(0",{"_index":2980,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["property(idproperty",{"_index":2973,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["property(labelproperty",{"_index":2983,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["property(parentproperty",{"_index":2979,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["property(synonymsproperty",{"_index":2986,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["property(valueproperty",{"_index":2976,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["props",{"_index":523,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["props.defaultchannelconfig",{"_index":1167,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["props.overview",{"_index":4081,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["protected",{"_index":1183,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["protocolurl",{"_index":2513,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["provide",{"_index":437,"title":{},"body":{"modules/AppModule.html":{},"modules/DrawerModule.html":{},"modules/ThemingModule.html":{}}}],["provided",{"_index":755,"title":{},"body":{"components/BodyUiComponent.html":{},"components/ContainerComponent.html":{},"components/InfoDialogComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"changelog.html":{},"license.html":{}}}],["providedin",{"_index":1946,"title":{},"body":{"injectables/DataSourceService.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["provider",{"_index":795,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["providers",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"components/ContainerComponent.html":{},"modules/CoreModule.html":{},"modules/DrawerModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/ThemingModule.html":{},"modules/ViewerModule.html":{},"overview.html":{}}}],["provides",{"_index":3787,"title":{},"body":{"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["providing",{"_index":1806,"title":{},"body":{"components/ContentComponent.html":{}}}],["prunednodes",{"_index":3935,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["prunemodel(model",{"_index":3932,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["public",{"_index":797,"title":{},"body":{"classes/CCFDatabase.html":{},"classes/HuBMAPEntity.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"changelog.html":{}}}],["publication",{"_index":3354,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["publish",{"_index":4703,"title":{},"body":{"license.html":{}}}],["publishreplay",{"_index":2042,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["publishreplay(1",{"_index":2077,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["pull",{"_index":1549,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{}}}],["pureimageviewerlayer",{"_index":3100,"title":{"interfaces/PureImageViewerLayer.html":{}},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["purplebrown",{"_index":1469,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["purplelightblue",{"_index":1485,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["purpose",{"_index":4727,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1365,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["px",{"_index":3474,"title":{},"body":{"classes/InitializationState.html":{}}}],["quad",{"_index":831,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["qualitative",{"_index":1428,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"changelog.html":{}}}],["qualitative1",{"_index":1431,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["qualitative2",{"_index":1446,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["quaternion",{"_index":973,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"dependencies.html":{}}}],["queried",{"_index":21,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["queries",{"_index":72,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"components/ViewerComponent.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["queries/aggregate",{"_index":863,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["queries/find",{"_index":866,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["queries/image",{"_index":867,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["queries/list",{"_index":869,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["queries/ontology",{"_index":873,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["queries/spatial",{"_index":871,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["query",{"_index":10,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"changelog.html":{}}}],["querydata",{"_index":2072,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["querying",{"_index":2067,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["querylist",{"_index":1733,"title":{},"body":{"components/ContainerComponent.html":{}}}],["querystatus",{"_index":1982,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["question",{"_index":1280,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["r",{"_index":997,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"interfaces/OldRuiData.html":{}}}],["r.json",{"_index":2873,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["r.ok",{"_index":2872,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["r.x",{"_index":3736,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["r.y",{"_index":3738,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["r.z",{"_index":3740,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["r_rad",{"_index":993,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["r_rad[0",{"_index":999,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["r_rad[2",{"_index":1000,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["race",{"_index":2732,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["racial",{"_index":2731,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["radio",{"_index":4208,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["radius",{"_index":1377,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/FiltersContentComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/OntologySearchComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["range",{"_index":75,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["rangelabel",{"_index":2214,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["ratio",{"_index":3734,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["raw",{"_index":2496,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rc.1",{"_index":4539,"title":{},"body":{"changelog.html":{}}}],["rdf",{"_index":976,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"dependencies.html":{}}}],["rdf.type",{"_index":1013,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["rdfjs/data",{"_index":4649,"title":{},"body":{"dependencies.html":{}}}],["rdfxml",{"_index":4661,"title":{},"body":{"dependencies.html":{}}}],["react",{"_index":4665,"title":{},"body":{"dependencies.html":{}}}],["reactiveformsmodule",{"_index":3856,"title":{},"body":{"modules/OntologySearchModule.html":{}}}],["read",{"_index":742,"title":{},"body":{"components/BodyUiComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"components/ViewerComponent.html":{}}}],["reader",{"_index":3657,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["reader.loadomezarr",{"_index":3659,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["readonly",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"interfaces/ChannelConfig.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DropdownComponent.html":{},"interfaces/ExtDeckProps.html":{},"classes/FlatNode.html":{},"classes/ImageViewer.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/SpatialSceneNode.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["ready",{"_index":1934,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["real",{"_index":4562,"title":{},"body":{"changelog.html":{}}}],["reason",{"_index":4265,"title":{},"body":{"modules/StoreModule.html":{}}}],["receive",{"_index":1817,"title":{},"body":{"components/ContentComponent.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/ToggleButtonComponent.html":{}}}],["receiving",{"_index":3589,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["record",{"_index":1156,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"components/OntologySelectionComponent.html":{},"classes/PictureInPictureViewer.html":{},"components/ViewerComponent.html":{},"miscellaneous/typealiases.html":{}}}],["red",{"_index":4406,"title":{},"body":{"components/ViewerComponent.html":{}}}],["redtan",{"_index":1477,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["ref",{"_index":957,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["refcount",{"_index":2043,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["reference",{"_index":849,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"injectables/DataSourceService.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/OldRuiData.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialObjectReference.html":{},"components/ToggleButtonComponent.html":{}}}],["reference_organ_id",{"_index":3681,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["referencelayer",{"_index":3176,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["references",{"_index":1009,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["referencing",{"_index":3177,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["reforganid",{"_index":2767,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{}}}],["refresh",{"_index":2454,"title":{},"body":{"components/HeaderComponent.html":{}}}],["refreshclicked",{"_index":2447,"title":{},"body":{"components/HeaderComponent.html":{}}}],["region",{"_index":3092,"title":{},"body":{"components/ImageViewerContentComponent.html":{}}}],["regions",{"_index":4608,"title":{},"body":{"changelog.html":{}}}],["register",{"_index":2113,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["registered",{"_index":2116,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{}}}],["registericon",{"_index":2924,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["registericon(definition",{"_index":2921,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["registericonimpl",{"_index":2949,"title":{},"body":{"injectables/IconRegistryState.html":{}}}],["registericonimpl(definition",{"_index":2925,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["registering",{"_index":2902,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["registerloaders",{"_index":621,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["registerloaders([dracoworkerloader",{"_index":689,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["registers",{"_index":2918,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["registration",{"_index":2107,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["registry",{"_index":2909,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["registry.state",{"_index":4258,"title":{},"body":{"modules/StoreModule.html":{}}}],["registry.state.ts",{"_index":2901,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["registry.state.ts:106",{"_index":2955,"title":{},"body":{"injectables/IconRegistryState.html":{}}}],["registry.state.ts:120",{"_index":2953,"title":{},"body":{"injectables/IconRegistryState.html":{}}}],["registry.state.ts:43",{"_index":2951,"title":{},"body":{"injectables/IconRegistryState.html":{}}}],["registry.state.ts:72",{"_index":2956,"title":{},"body":{"injectables/IconRegistryState.html":{}}}],["registry.state.ts:82",{"_index":2957,"title":{},"body":{"injectables/IconRegistryState.html":{}}}],["registry/default",{"_index":2101,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{}}}],["registry/icon",{"_index":2900,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"modules/StoreModule.html":{}}}],["registry[methodname",{"_index":2932,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["rel_path",{"_index":2775,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["relationship",{"_index":3330,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["relative",{"_index":786,"title":{},"body":{"components/BodyUiComponent.html":{},"components/ContainerComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"miscellaneous/typealiases.html":{}}}],["relavant",{"_index":1360,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["release",{"_index":4541,"title":{},"body":{"changelog.html":{}}}],["relevant",{"_index":213,"title":{},"body":{"components/AppComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["remote",{"_index":1939,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["remove",{"_index":1300,"title":{},"body":{"components/CheckboxComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"injectables/ThemingService.html":{}}}],["removebox",{"_index":2385,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["removeclass",{"_index":4331,"title":{},"body":{"injectables/ThemingService.html":{}}}],["removes",{"_index":4296,"title":{},"body":{"injectables/ThemingService.html":{}}}],["render",{"_index":732,"title":{},"body":{"components/BodyUiComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["renderer",{"_index":4325,"title":{},"body":{"injectables/ThemingService.html":{}}}],["renderer2",{"_index":4313,"title":{},"body":{"injectables/ThemingService.html":{}}}],["renderer[methodname](overlay",{"_index":4333,"title":{},"body":{"injectables/ThemingService.html":{}}}],["renderer[methodname](root",{"_index":4332,"title":{},"body":{"injectables/ThemingService.html":{}}}],["rendering",{"_index":1548,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["renderlayers",{"_index":610,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["replace",{"_index":753,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["replay",{"_index":2069,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["replaysubject",{"_index":2041,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["replaysubject(1",{"_index":1998,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["replaysubject>(1",{"_index":2086,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["repository",{"_index":1972,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["represents",{"_index":3358,"title":{},"body":{"components/InfoDialogComponent.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["reqprops",{"_index":1188,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["reqprops.height",{"_index":1191,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["reqprops.sources.length",{"_index":1192,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["reqprops.width",{"_index":1190,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["requested",{"_index":830,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["requests",{"_index":3875,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["require",{"_index":3125,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["required",{"_index":1164,"title":{},"body":{"interfaces/ChannelConfig.html":{},"components/ColorPickerLauncherComponent.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["res",{"_index":3669,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["res.json",{"_index":3673,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["res.status",{"_index":3671,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["research",{"_index":3385,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["reset",{"_index":204,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/BodyModule.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules/CoreModule.html":{},"modules/DrawerModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/ThemingModule.html":{},"modules/ViewerModule.html":{},"overview.html":{}}}],["resetchannelconfigs",{"_index":1255,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["resets",{"_index":191,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"injectables/ThemingService.html":{}}}],["resettheme",{"_index":4290,"title":{},"body":{"injectables/ThemingService.html":{}}}],["resizesensor",{"_index":4389,"title":{},"body":{"components/ViewerComponent.html":{}}}],["resizesensor(container",{"_index":4434,"title":{},"body":{"components/ViewerComponent.html":{}}}],["resizing",{"_index":4204,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["resolution",{"_index":3328,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["resolve",{"_index":3430,"title":{},"body":{"classes/InitializationState.html":{}}}],["resolves",{"_index":1749,"title":{},"body":{"components/ContainerComponent.html":{},"injectables/DataSourceService.html":{},"classes/InitializationState.html":{}}}],["resolving",{"_index":826,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["respond",{"_index":4618,"title":{},"body":{"changelog.html":{}}}],["response",{"_index":2681,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["responsetype",{"_index":3956,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["responsible",{"_index":3863,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["restriction",{"_index":4698,"title":{},"body":{"license.html":{}}}],["result",{"_index":11,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/BodyModule.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"modules/CoreModule.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"modules/DrawerModule.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"modules/OntologyExplorationModule.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"modules/OntologyTreeModule.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["result's",{"_index":4152,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["result[key",{"_index":1221,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["resultclicked",{"_index":4111,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["resulting",{"_index":2990,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["resultlabel",{"_index":4110,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["results",{"_index":100,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/BodyModule.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"modules/CoreModule.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"modules/DrawerModule.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"modules/OntologyExplorationModule.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"modules/OntologyTreeModule.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["resultsbrowser",{"_index":4099,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["resultsbrowsercomponent",{"_index":370,"title":{"components/ResultsBrowserComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["resultsbrowseritemcomponent",{"_index":372,"title":{"components/ResultsBrowserItemComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["resultsbrowseritemmodule",{"_index":4166,"title":{"modules/ResultsBrowserItemModule.html":{}},"body":{"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules.html":{},"overview.html":{}}}],["resultsbrowseritems",{"_index":4103,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["resultsbrowsermodule",{"_index":401,"title":{"modules/ResultsBrowserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ResultsBrowserModule.html":{},"modules.html":{},"overview.html":{}}}],["resulttype",{"_index":41,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ListResult.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchableItem.html":{}}}],["resulturl",{"_index":40,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["return",{"_index":247,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUILayer.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"interfaces/ImageViewerProps.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["returns",{"_index":498,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OldRuiData.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"classes/PictureInPictureViewer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{}}}],["reverse",{"_index":2364,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["rgb",{"_index":3122,"title":{},"body":{"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{}}}],["right",{"_index":199,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLegendComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"changelog.html":{}}}],["right.closeexpanded",{"_index":210,"title":{},"body":{"components/AppComponent.html":{}}}],["right.expanded",{"_index":262,"title":{},"body":{"components/AppComponent.html":{}}}],["right.open",{"_index":209,"title":{},"body":{"components/AppComponent.html":{}}}],["right.px",{"_index":1815,"title":{},"body":{"components/ContentComponent.html":{}}}],["right_kidney",{"_index":1070,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["rightmargin",{"_index":1851,"title":{},"body":{"components/ContentComponent.html":{}}}],["rights",{"_index":4700,"title":{},"body":{"license.html":{}}}],["rk",{"_index":2587,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rl",{"_index":2657,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["root",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"modules/CoreModule.html":{},"injectables/DataSourceService.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OntologyNode.html":{},"injectables/OntologySearchService.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{},"injectables/ThemingService.html":{}}}],["root'},{'name",{"_index":323,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["root_states",{"_index":4263,"title":{},"body":{"modules/StoreModule.html":{}}}],["rootnode",{"_index":3865,"title":{},"body":{"injectables/OntologySearchService.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{}}}],["rotation",{"_index":3686,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["rotation_order",{"_index":3741,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["rotation_units",{"_index":3743,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["rotationorbit",{"_index":558,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["rotations",{"_index":4231,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["rotationx",{"_index":557,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["row",{"_index":1319,"title":{},"body":{"components/CheckboxComponent.html":{},"components/FiltersContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["rui",{"_index":1052,"title":{},"body":{"classes/CCFSpatialScene.html":{},"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialSceneNode-1.html":{},"changelog.html":{}}}],["rui_location",{"_index":2895,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs",{"_index":2636,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.bladder",{"_index":2643,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.body",{"_index":2642,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.colon",{"_index":2650,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.heart",{"_index":2648,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.kidney",{"_index":2644,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.left_kidney",{"_index":2646,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.left_lung",{"_index":2656,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.liver",{"_index":2668,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.lung",{"_index":2655,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.lymph_node",{"_index":2660,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.right_kidney",{"_index":2645,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.right_lung",{"_index":2658,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.small_instestine",{"_index":2653,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.spleen",{"_index":2662,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.thymus",{"_index":2664,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["rui_organs.ureter",{"_index":2666,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["ruilocation",{"_index":2759,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["run",{"_index":1721,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["running",{"_index":2055,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"miscellaneous/enumerations.html":{}}}],["runtime",{"_index":2106,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{}}}],["rxjs",{"_index":153,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"components/ToggleButtonComponent.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":156,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/ContainerComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["s",{"_index":929,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["safedef",{"_index":2914,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["safehtml",{"_index":2903,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["saferesourceurl",{"_index":2904,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["sample",{"_index":2530,"title":{},"body":{"classes/HuBMAPEntity.html":{},"components/ImageViewerContentComponent.html":{},"changelog.html":{}}}],["samples",{"_index":4626,"title":{},"body":{"changelog.html":{}}}],["sanitize",{"_index":2912,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["sanitized",{"_index":2109,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{}}}],["sanitizer",{"_index":2911,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["sanitizer.bypasssecuritytrusthtml(html",{"_index":2916,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["sanitizer.bypasssecuritytrustresourceurl(url",{"_index":2915,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["sans",{"_index":2475,"title":{},"body":{"components/HeaderComponent.html":{}}}],["saved",{"_index":2359,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["scaffolding",{"_index":4582,"title":{},"body":{"changelog.html":{}}}],["scale",{"_index":1112,"title":{},"body":{"classes/CCFSpatialScene.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["scale(1,2",{"_index":4363,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["scales",{"_index":3360,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["scaling",{"_index":4227,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["scaling_units",{"_index":3733,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["scene",{"_index":665,"title":{},"body":{"classes/BodyUILayer.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/SpatialSceneNode.html":{}}}],["scene.ts",{"_index":1033,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["scene.ts:105",{"_index":1041,"title":{},"body":{"classes/CCFSpatialScene.html":{}}}],["scene.ts:115",{"_index":1051,"title":{},"body":{"classes/CCFSpatialScene.html":{}}}],["scene.ts:154",{"_index":1048,"title":{},"body":{"classes/CCFSpatialScene.html":{}}}],["scene.ts:26",{"_index":1039,"title":{},"body":{"classes/CCFSpatialScene.html":{}}}],["scene.ts:30",{"_index":1043,"title":{},"body":{"classes/CCFSpatialScene.html":{}}}],["scene.ts:47",{"_index":1045,"title":{},"body":{"classes/CCFSpatialScene.html":{}}}],["scene.ts:64",{"_index":1047,"title":{},"body":{"classes/CCFSpatialScene.html":{}}}],["scenegraph",{"_index":643,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["scenegraphlayer",{"_index":617,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["scenegraphnode",{"_index":644,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["scenegraphnode.rotation",{"_index":660,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["scenes",{"_index":817,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["schema",{"_index":4585,"title":{},"body":{"changelog.html":{}}}],["schema#label",{"_index":2966,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["scheme",{"_index":224,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["scheme.colors[index",{"_index":4513,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["scheme.ts",{"_index":1424,"title":{},"body":{"interfaces/ColorScheme.html":{}}}],["scheme.type",{"_index":4198,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["scheme/color",{"_index":1332,"title":{},"body":{"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["scheme1",{"_index":1429,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["scheme2",{"_index":1444,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["scheme3",{"_index":1468,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["scheme4",{"_index":1476,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["scheme5",{"_index":1484,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["scheme6",{"_index":1493,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["scheme7",{"_index":1502,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["scheme8",{"_index":1511,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["schemechange",{"_index":3052,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["schemechanged",{"_index":4185,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["schemechanged(idx",{"_index":4191,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["schemedropdowncomponent",{"_index":374,"title":{"components/SchemeDropdownComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["schemedropdownmodule",{"_index":3187,"title":{"modules/SchemeDropdownModule.html":{}},"body":{"modules/ImageViewerLayersModule.html":{},"modules/SchemeDropdownModule.html":{},"modules.html":{},"overview.html":{}}}],["schemeidx",{"_index":4184,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["schemeoptions",{"_index":1538,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["schemes",{"_index":1372,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/SchemeDropdownComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"changelog.html":{}}}],["schemes.ts",{"_index":1425,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["science",{"_index":4682,"title":{},"body":{"index.html":{}}}],["screen",{"_index":3295,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["script_fields",{"_index":2892,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["scroll",{"_index":4122,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["scrollbar",{"_index":315,"title":{},"body":{"components/AppComponent.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["scrolled",{"_index":4124,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["scrollheight",{"_index":4129,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["scrolling",{"_index":1803,"title":{},"body":{"components/ContainerComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["scrollingmodule",{"_index":4179,"title":{},"body":{"modules/ResultsBrowserModule.html":{}}}],["scrolltop",{"_index":4130,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["search",{"_index":806,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/HuBMAPEntity.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"interfaces/SearchResult.html":{},"changelog.html":{}}}],["search'},{'name",{"_index":365,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["search(filter",{"_index":853,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["search.component",{"_index":3860,"title":{},"body":{"modules/OntologySearchModule.html":{}}}],["search.component.html",{"_index":3773,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.component.scss",{"_index":3772,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.component.ts",{"_index":3768,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.component.ts:25",{"_index":3788,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.component.ts:30",{"_index":3812,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.component.ts:36",{"_index":3810,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.component.ts:41",{"_index":3785,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.component.ts:47",{"_index":3815,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.component.ts:54",{"_index":3796,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.component.ts:72",{"_index":3793,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.component.ts:81",{"_index":3805,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.component.ts:90",{"_index":3808,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.component.ts:98",{"_index":3801,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.detached",{"_index":3847,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["search.module",{"_index":3761,"title":{},"body":{"modules/OntologyExplorationModule.html":{},"modules/OntologySelectionModule.html":{}}}],["search.module.ts",{"_index":3854,"title":{},"body":{"modules/OntologySearchModule.html":{}}}],["search.service",{"_index":3820,"title":{},"body":{"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{}}}],["search.service.ts",{"_index":3862,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"miscellaneous/typealiases.html":{}}}],["search.service.ts:107",{"_index":3873,"title":{},"body":{"injectables/OntologySearchService.html":{}}}],["search.service.ts:124",{"_index":3890,"title":{},"body":{"injectables/OntologySearchService.html":{}}}],["search.service.ts:142",{"_index":3876,"title":{},"body":{"injectables/OntologySearchService.html":{}}}],["search.service.ts:154",{"_index":3894,"title":{},"body":{"injectables/OntologySearchService.html":{}}}],["search.service.ts:190",{"_index":3889,"title":{},"body":{"injectables/OntologySearchService.html":{}}}],["search.service.ts:200",{"_index":3880,"title":{},"body":{"injectables/OntologySearchService.html":{}}}],["search.service.ts:216",{"_index":3886,"title":{},"body":{"injectables/OntologySearchService.html":{}}}],["search/ontology",{"_index":3760,"title":{},"body":{"modules/OntologyExplorationModule.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"interfaces/SearchResult.html":{},"miscellaneous/typealiases.html":{}}}],["searchableitem",{"_index":58,"title":{"interfaces/SearchableItem.html":{}},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["searched",{"_index":57,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{}}}],["searches",{"_index":3877,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["searching",{"_index":3770,"title":{},"body":{"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{}}}],["searchresult",{"_index":3792,"title":{"interfaces/SearchResult.html":{}},"body":{"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["searchresults",{"_index":3971,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["searchresults.get(node.id",{"_index":3975,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["searchresults.set(node.id",{"_index":3976,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["searchservice",{"_index":3786,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["searchvalue",{"_index":3879,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["searchvalue.length",{"_index":3986,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["section",{"_index":4183,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["see",{"_index":3352,"title":{},"body":{"components/InfoDialogComponent.html":{},"index.html":{}}}],["select",{"_index":2160,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["selected",{"_index":239,"title":{},"body":{"components/AppComponent.html":{},"components/ColorBarComponent.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["selected(ontologynode",{"_index":4006,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["selectedcolor",{"_index":1343,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["selectedresult",{"_index":4107,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["selecting",{"_index":2140,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["selection",{"_index":159,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/OntologySelectionComponent.html":{}}}],["selection'},{'name",{"_index":367,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["selection.component",{"_index":4020,"title":{},"body":{"modules/OntologySelectionModule.html":{}}}],["selection.component.html",{"_index":3995,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["selection.component.scss",{"_index":3994,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["selection.component.ts",{"_index":3992,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["selection.component.ts:23",{"_index":4010,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["selection.component.ts:28",{"_index":4001,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["selection.component.ts:33",{"_index":4004,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["selection.component.ts:40",{"_index":4003,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["selection.component.ts:45",{"_index":4000,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["selection.component.ts:53",{"_index":4008,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["selection.component.ts:61",{"_index":4007,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["selection.id",{"_index":244,"title":{},"body":{"components/AppComponent.html":{}}}],["selection.label",{"_index":257,"title":{},"body":{"components/AppComponent.html":{}}}],["selection.module",{"_index":3763,"title":{},"body":{"modules/OntologyExplorationModule.html":{}}}],["selection.module.ts",{"_index":4019,"title":{},"body":{"modules/OntologySelectionModule.html":{}}}],["selection.ts",{"_index":3991,"title":{},"body":{"interfaces/OntologySelection.html":{}}}],["selection/ontology",{"_index":3762,"title":{},"body":{"modules/OntologyExplorationModule.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{}}}],["selectionchange",{"_index":1276,"title":{},"body":{"components/CheckboxComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["selectionchanged",{"_index":2137,"title":{},"body":{"components/DropdownComponent.html":{}}}],["selectionchanged(value",{"_index":2145,"title":{},"body":{"components/DropdownComponent.html":{}}}],["selectioncounter",{"_index":4494,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["selectionorder",{"_index":3102,"title":{},"body":{"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"interfaces/PureImageViewerLayer.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["selections",{"_index":1271,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["selectionstring",{"_index":255,"title":{},"body":{"components/AppComponent.html":{}}}],["selector",{"_index":117,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["selects",{"_index":2938,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/OntologySearchComponent.html":{},"changelog.html":{}}}],["sell",{"_index":4707,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":3341,"title":{},"body":{"components/InfoDialogComponent.html":{},"changelog.html":{}}}],["semantically",{"_index":3337,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["send",{"_index":1710,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/ToggleButtonComponent.html":{}}}],["sendcompletedto(subject",{"_index":2063,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["sendcompletedto(this._aggregatedataquerystatus",{"_index":2005,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["sendcompletedto(this._listdataquerystatus",{"_index":2014,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["sendcompletedto(this._termoccurencesdataquerystatus",{"_index":2031,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["sender",{"_index":3579,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["sending",{"_index":3552,"title":{},"body":{"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["sending/receiving",{"_index":3522,"title":{},"body":{"classes/InitializationState.html":{}}}],["sendmessage",{"_index":3623,"title":{},"body":{"classes/MessageChannel.html":{}}}],["sendmessage(payload",{"_index":3593,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["sends",{"_index":2060,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{}}}],["sendtoggle",{"_index":3553,"title":{},"body":{"classes/InitializationState.html":{}}}],["sensor",{"_index":4368,"title":{},"body":{"components/ViewerComponent.html":{}}}],["sent",{"_index":1883,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["serif",{"_index":2476,"title":{},"body":{"components/HeaderComponent.html":{}}}],["server",{"_index":4588,"title":{},"body":{"changelog.html":{}}}],["service",{"_index":878,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DualSliderComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/InfoButtonComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"interfaces/SearchResult.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"miscellaneous/typealiases.html":{}}}],["service.initializeimpl(component",{"_index":4316,"title":{},"body":{"injectables/ThemingService.html":{}}}],["services",{"_index":3409,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["services/data",{"_index":2046,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["services/message/message.service",{"_index":1887,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"modules/DrawerModule.html":{},"interfaces/DrawerToggled.html":{}}}],["services/theming/theming.module",{"_index":1914,"title":{},"body":{"modules/CoreModule.html":{}}}],["servicetoken",{"_index":2517,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["servicetoken).tojsonld",{"_index":2697,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["servicetoken.length",{"_index":2877,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["servicetype",{"_index":2869,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["set",{"_index":68,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/ImageViewerData.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"classes/InitializationState.html":{},"interfaces/ListResult.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchableItem.html":{},"injectables/ThemingService.html":{},"components/ViewerComponent.html":{},"changelog.html":{}}}],["set(['van0003",{"_index":2572,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["set(filter.highlightedentities",{"_index":930,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["set(filter?.highlightedentities",{"_index":1096,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["setbrightnesshigh(value",{"_index":1575,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["setbrightnesslow(value",{"_index":1570,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["setdefaultscheme",{"_index":4463,"title":{},"body":{"injectables/ViewerState.html":{}}}],["setdefaultscheme(scheme",{"_index":4468,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["setlayers(layers",{"_index":3203,"title":{},"body":{"components/ImageViewerLegendComponent.html":{},"components/ViewerComponent.html":{}}}],["setontology",{"_index":4022,"title":{},"body":{"injectables/OntologyState.html":{}}}],["setontology(ontology",{"_index":4023,"title":{},"body":{"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{}}}],["sets",{"_index":1723,"title":{},"body":{"components/ContainerComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"injectables/ThemingService.html":{}}}],["setscene",{"_index":468,"title":{},"body":{"classes/BodyUI.html":{}}}],["setscene(data",{"_index":504,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["setsize",{"_index":2998,"title":{},"body":{"classes/ImageViewer.html":{},"classes/PictureInPictureViewer.html":{}}}],["setsize(width",{"_index":1202,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["setsources",{"_index":2999,"title":{},"body":{"classes/ImageViewer.html":{},"classes/PictureInPictureViewer.html":{}}}],["setsources(sources",{"_index":1207,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["setsources(urls",{"_index":4392,"title":{},"body":{"components/ViewerComponent.html":{}}}],["setsourceurls",{"_index":3228,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["setsourceurls(result",{"_index":3239,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["settheme",{"_index":4291,"title":{},"body":{"injectables/ThemingService.html":{}}}],["settheme(theme",{"_index":4306,"title":{},"body":{"injectables/ThemingService.html":{}}}],["settimeout",{"_index":3524,"title":{},"body":{"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["settimeout(r",{"_index":920,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["setting",{"_index":4273,"title":{},"body":{"modules/StoreModule.html":{}}}],["settings",{"_index":1564,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{}}}],["settle",{"_index":918,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["settransparency(value",{"_index":1579,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["setup",{"_index":4580,"title":{},"body":{"changelog.html":{}}}],["sex",{"_index":60,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["shadow",{"_index":1607,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["shall",{"_index":4715,"title":{},"body":{"license.html":{}}}],["shape",{"_index":1394,"title":{},"body":{"components/ColorPickerLauncherComponent.html":{}}}],["share",{"_index":516,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["shared",{"_index":4261,"title":{},"body":{"modules/StoreModule.html":{}}}],["shared/components/checkbox/checkbox.module",{"_index":2378,"title":{},"body":{"modules/FiltersContentModule.html":{}}}],["shared/components/drawer/drawer.module",{"_index":425,"title":{},"body":{"modules/AppModule.html":{},"modules/ImageViewerPopoverModule.html":{}}}],["shared/components/drawer/drawer/drawer.component",{"_index":178,"title":{},"body":{"components/AppComponent.html":{}}}],["shared/components/dropdown/dropdown.module",{"_index":2379,"title":{},"body":{"modules/FiltersContentModule.html":{}}}],["shared/components/dual",{"_index":426,"title":{},"body":{"modules/AppModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/FiltersContentModule.html":{}}}],["shared/components/spinner",{"_index":432,"title":{},"body":{"modules/AppModule.html":{}}}],["sharing",{"_index":2068,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["short",{"_index":30,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["shortest",{"_index":970,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"dependencies.html":{}}}],["shortestpath",{"_index":969,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["shortestpath(this.graph",{"_index":1029,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["shortinfo",{"_index":31,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["shortinfo0",{"_index":2842,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["shortinfo1",{"_index":2843,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["shortinfo2",{"_index":2844,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["show",{"_index":1681,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{}}}],["showing",{"_index":4421,"title":{},"body":{"components/ViewerComponent.html":{},"changelog.html":{}}}],["showm",{"_index":3147,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["shown",{"_index":2259,"title":{},"body":{"components/DualSliderComponent.html":{},"changelog.html":{}}}],["shows",{"_index":4565,"title":{},"body":{"changelog.html":{}}}],["showselectionbar",{"_index":1600,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["si",{"_index":2652,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["side",{"_index":1837,"title":{},"body":{"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["sidebar",{"_index":3082,"title":{},"body":{"components/ImageViewerContentComponent.html":{}}}],["simplechanges",{"_index":2235,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["simplemeshlayer",{"_index":618,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["simplify",{"_index":3919,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["single",{"_index":754,"title":{},"body":{"components/BodyUiComponent.html":{},"interfaces/IdObject.html":{},"components/InfoDialogComponent.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/ValueObject.html":{}}}],["site",{"_index":2440,"title":{},"body":{"components/HeaderComponent.html":{}}}],["size",{"_index":293,"title":{},"body":{"components/AppComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/OldRuiData.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["skipself",{"_index":1912,"title":{},"body":{"modules/CoreModule.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["slideinhorizontaldropdown",{"_index":2154,"title":{},"body":{"components/DropdownComponent.html":{}}}],["slideinhorizontalslider",{"_index":2322,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider",{"_index":1133,"title":{},"body":{"interfaces/ChannelConfig.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"interfaces/DataSource-1.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"interfaces/ExtDeckProps.html":{},"components/FiltersContentComponent.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ViewerComponent.html":{},"dependencies.html":{}}}],["slider's",{"_index":2244,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider'},{'name",{"_index":347,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["slider.component",{"_index":2340,"title":{},"body":{"modules/DualSliderModule.html":{}}}],["slider.component.html",{"_index":2197,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.scss",{"_index":2196,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts",{"_index":2194,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:102",{"_index":2216,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:125",{"_index":2236,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:139",{"_index":2249,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:155",{"_index":2238,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:168",{"_index":2227,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:187",{"_index":2253,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:204",{"_index":2251,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:214",{"_index":2232,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:227",{"_index":2248,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:243",{"_index":2243,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:30",{"_index":2268,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:36",{"_index":2264,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:41",{"_index":2220,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:46",{"_index":2223,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:51",{"_index":2222,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:56",{"_index":2226,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:61",{"_index":2258,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:66",{"_index":2261,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:71",{"_index":2260,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:76",{"_index":2255,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:81",{"_index":2254,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:86",{"_index":2270,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.component.ts:97",{"_index":2262,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.detached",{"_index":2324,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider.module",{"_index":428,"title":{},"body":{"modules/AppModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/FiltersContentModule.html":{}}}],["slider.module.ts",{"_index":2337,"title":{},"body":{"modules/DualSliderModule.html":{}}}],["slider.wrapper",{"_index":2318,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slider/dual",{"_index":427,"title":{},"body":{"modules/AppModule.html":{},"modules/ColorSchemeContentsModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{}}}],["slider_max",{"_index":4412,"title":{},"body":{"components/ViewerComponent.html":{}}}],["sliders",{"_index":1529,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["slidervaluechanged",{"_index":2211,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["slidervalues",{"_index":4088,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["slidervalues.push(slider",{"_index":4093,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["small",{"_index":32,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["software",{"_index":4695,"title":{},"body":{"license.html":{}}}],["solid",{"_index":1381,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["sort((a",{"_index":935,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["sortby",{"_index":3818,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["sortby(searchresults",{"_index":3830,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["sortbysynonymresult",{"_index":3781,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["sortbysynonymresult(this",{"_index":3804,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["sorted",{"_index":3159,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["sortlexically",{"_index":3782,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["sortlexically(this",{"_index":3807,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["sorts",{"_index":3806,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/BodyModule.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"modules/CheckboxModule.html":{},"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"modules/CoreModule.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"modules/DrawerModule.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"modules/DropdownModule.html":{},"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"modules/OntologyExplorationModule.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"modules/OntologyTreeModule.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"modules/StoreModule.html":{},"modules/ThemingModule.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["source.dimension_units",{"_index":1116,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["source.entityid",{"_index":1123,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["source.getontologytermoccurences().subscribe(ontologytermsdata",{"_index":2087,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["source.info",{"_index":1211,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"components/ViewerComponent.html":{}}}],["source.label",{"_index":1126,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["source.object",{"_index":1103,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["source.object.file_format?.startswith('model/gltf",{"_index":1104,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["source.object?.file",{"_index":1124,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["source.object?.file_subpath",{"_index":1125,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["source.object['@id",{"_index":1106,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["source.pipe",{"_index":2074,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["source.service",{"_index":163,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["source.service.ts",{"_index":1927,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:17",{"_index":1940,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:19",{"_index":1942,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:21",{"_index":1931,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:53",{"_index":1933,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:67",{"_index":1936,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:77",{"_index":1932,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:87",{"_index":1937,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:97",{"_index":1935,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.subscribe(data",{"_index":221,"title":{},"body":{"components/AppComponent.html":{}}}],["source.worker",{"_index":1950,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.x_dimension",{"_index":1117,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["source.y_dimension",{"_index":1118,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["source.z_dimension].map(dim",{"_index":1119,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["source/data",{"_index":162,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["source['@id",{"_index":1107,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["sourceid",{"_index":1105,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["sourceiri",{"_index":966,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["sources",{"_index":1160,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"classes/PictureInPictureViewer.html":{},"components/ViewerComponent.html":{}}}],["sources(urls",{"_index":4416,"title":{},"body":{"components/ViewerComponent.html":{}}}],["sources.includes(msg.source",{"_index":3606,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["sources.map(source",{"_index":1209,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["sourcesfromurls",{"_index":4369,"title":{},"body":{"components/ViewerComponent.html":{}}}],["sourcesfromurls(urls",{"_index":4380,"title":{},"body":{"components/ViewerComponent.html":{}}}],["sourceurls",{"_index":3225,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["sp",{"_index":2661,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["space",{"_index":3181,"title":{},"body":{"components/ImageViewerLayersComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["spatial",{"_index":83,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"components/InfoDialogComponent.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["spatial_bulk",{"_index":2866,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["spatialentity",{"_index":816,"title":{"interfaces/SpatialEntity.html":{}},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["spatially",{"_index":3339,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["spatialobjectreference",{"_index":955,"title":{"interfaces/SpatialObjectReference.html":{}},"body":{"classes/CCFSpatialGraph.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["spatialorbulk",{"_index":2514,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["spatialplacement",{"_index":959,"title":{"interfaces/SpatialPlacement.html":{}},"body":{"classes/CCFSpatialGraph.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["spatialscenenode",{"_index":480,"title":{"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["spec",{"_index":2558,"title":{},"body":{"classes/HuBMAPEntity.html":{},"changelog.html":{}}}],["special",{"_index":3921,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["specific",{"_index":97,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/SearchableItem.html":{},"miscellaneous/typealiases.html":{}}}],["specified",{"_index":3604,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["specifying",{"_index":3587,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"injectables/ThemingService.html":{}}}],["specimen_type",{"_index":2860,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["spinner",{"_index":148,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["spinneractive",{"_index":126,"title":{},"body":{"components/AppComponent.html":{}}}],["spinneroverlaycomponent",{"_index":375,"title":{"components/SpinnerOverlayComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["spinneroverlaymodule",{"_index":402,"title":{"modules/SpinnerOverlayModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules.html":{},"overview.html":{}}}],["spinning",{"_index":4586,"title":{},"body":{"changelog.html":{}}}],["spleen",{"_index":1074,"title":{},"body":{"classes/CCFSpatialScene.html":{},"classes/HuBMAPEntity.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["sprint",{"_index":4614,"title":{},"body":{"changelog.html":{}}}],["src/.../data.state.ts",{"_index":4674,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../drawer.component.ts",{"_index":4746,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../image",{"_index":4748,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../messages.ts",{"_index":4744,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../ontology",{"_index":4747,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/app.component.ts",{"_index":108,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:28",{"_index":130,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:31",{"_index":143,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:35",{"_index":138,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/core/core.module.ts",{"_index":1909,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/app/core/header/header.component.ts",{"_index":2439,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/core/header/header.component.ts:18",{"_index":2449,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/core/header/header.component.ts:23",{"_index":2450,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/core/header/header.component.ts:28",{"_index":2448,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/core/header/header.component.ts:33",{"_index":2453,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/core/header/header.component.ts:38",{"_index":2452,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/core/header/header.module.ts",{"_index":2482,"title":{},"body":{"modules/HeaderModule.html":{}}}],["src/app/core/models/color",{"_index":1423,"title":{},"body":{"interfaces/ColorScheme.html":{}}}],["src/app/core/models/flat",{"_index":2418,"title":{},"body":{"classes/FlatNode.html":{}}}],["src/app/core/models/image",{"_index":3099,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/models/json",{"_index":2959,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["src/app/core/models/ontology",{"_index":3766,"title":{},"body":{"interfaces/OntologyNode.html":{},"interfaces/OntologySelection.html":{}}}],["src/app/core/services/data",{"_index":1926,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["src/app/core/services/ontology",{"_index":3861,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/services/theming/theming.module.ts",{"_index":4279,"title":{},"body":{"modules/ThemingModule.html":{}}}],["src/app/core/services/theming/theming.service.ts",{"_index":4284,"title":{},"body":{"injectables/ThemingService.html":{}}}],["src/app/core/services/theming/theming.service.ts:13",{"_index":4308,"title":{},"body":{"injectables/ThemingService.html":{}}}],["src/app/core/services/theming/theming.service.ts:15",{"_index":4310,"title":{},"body":{"injectables/ThemingService.html":{}}}],["src/app/core/services/theming/theming.service.ts:17",{"_index":4311,"title":{},"body":{"injectables/ThemingService.html":{}}}],["src/app/core/services/theming/theming.service.ts:20",{"_index":4301,"title":{},"body":{"injectables/ThemingService.html":{}}}],["src/app/core/services/theming/theming.service.ts:23",{"_index":4293,"title":{},"body":{"injectables/ThemingService.html":{}}}],["src/app/core/services/theming/theming.service.ts:37",{"_index":4298,"title":{},"body":{"injectables/ThemingService.html":{}}}],["src/app/core/services/theming/theming.service.ts:46",{"_index":4307,"title":{},"body":{"injectables/ThemingService.html":{}}}],["src/app/core/services/theming/theming.service.ts:56",{"_index":4305,"title":{},"body":{"injectables/ThemingService.html":{}}}],["src/app/core/services/theming/theming.service.ts:67",{"_index":4304,"title":{},"body":{"injectables/ThemingService.html":{}}}],["src/app/core/services/theming/theming.service.ts:82",{"_index":4295,"title":{},"body":{"injectables/ThemingService.html":{}}}],["src/app/core/store/data/data.state.ts",{"_index":1971,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/core/store/data/data.state.ts:101",{"_index":2012,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:103",{"_index":2015,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:107",{"_index":2006,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:111",{"_index":2032,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:116",{"_index":2017,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:118",{"_index":2009,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:120",{"_index":2034,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:123",{"_index":2029,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:130",{"_index":1987,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:155",{"_index":1997,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:169",{"_index":1992,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:181",{"_index":1989,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:193",{"_index":1994,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:92",{"_index":2001,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:94",{"_index":1999,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:96",{"_index":2002,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/data/data.state.ts:98",{"_index":2018,"title":{},"body":{"injectables/DataState.html":{}}}],["src/app/core/store/icon",{"_index":2100,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["src/app/core/store/ontology/ontology.state.ts",{"_index":4021,"title":{},"body":{"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{}}}],["src/app/core/store/ontology/ontology.state.ts:39",{"_index":4027,"title":{},"body":{"injectables/OntologyState.html":{}}}],["src/app/core/store/ontology/ontology.state.ts:42",{"_index":4029,"title":{},"body":{"injectables/OntologyState.html":{}}}],["src/app/core/store/ontology/ontology.state.ts:50",{"_index":4024,"title":{},"body":{"injectables/OntologyState.html":{}}}],["src/app/core/store/store.module.ts",{"_index":4253,"title":{},"body":{"modules/StoreModule.html":{}}}],["src/app/core/store/viewer/viewer.state.ts",{"_index":4458,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["src/app/core/store/viewer/viewer.state.ts:116",{"_index":4467,"title":{},"body":{"injectables/ViewerState.html":{}}}],["src/app/core/store/viewer/viewer.state.ts:40",{"_index":4481,"title":{},"body":{"injectables/ViewerState.html":{}}}],["src/app/core/store/viewer/viewer.state.ts:44",{"_index":4475,"title":{},"body":{"injectables/ViewerState.html":{}}}],["src/app/core/store/viewer/viewer.state.ts:49",{"_index":4465,"title":{},"body":{"injectables/ViewerState.html":{}}}],["src/app/core/store/viewer/viewer.state.ts:71",{"_index":4471,"title":{},"body":{"injectables/ViewerState.html":{}}}],["src/app/core/store/viewer/viewer.state.ts:96",{"_index":4469,"title":{},"body":{"injectables/ViewerState.html":{}}}],["src/app/modules/body/body",{"_index":714,"title":{},"body":{"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{}}}],["src/app/modules/body/body.module.ts",{"_index":443,"title":{},"body":{"modules/BodyModule.html":{}}}],["src/app/modules/color",{"_index":1331,"title":{},"body":{"components/ColorBarComponent.html":{},"modules/ColorBarModule.html":{},"components/ColorPickerLauncherComponent.html":{},"modules/ColorPickerLauncherModule.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"modules/ColorSchemeContentsModule.html":{},"components/ColorSchemePopupComponent.html":{},"modules/ColorSchemePopupModule.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["src/app/modules/filters/filters",{"_index":2341,"title":{},"body":{"components/FiltersContentComponent.html":{},"modules/FiltersContentModule.html":{},"components/FiltersPopoverComponent.html":{},"modules/FiltersPopoverModule.html":{}}}],["src/app/modules/image",{"_index":3045,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{}}}],["src/app/modules/info/info",{"_index":3268,"title":{},"body":{"components/InfoButtonComponent.html":{},"modules/InfoButtonModule.html":{},"components/InfoDialogComponent.html":{},"modules/InfoDialogModule.html":{}}}],["src/app/modules/ontology",{"_index":3758,"title":{},"body":{"modules/OntologyExplorationModule.html":{},"components/OntologySearchComponent.html":{},"modules/OntologySearchModule.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{}}}],["src/app/modules/results",{"_index":4097,"title":{},"body":{"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{}}}],["src/app/modules/scheme",{"_index":4181,"title":{},"body":{"components/SchemeDropdownComponent.html":{},"modules/SchemeDropdownModule.html":{}}}],["src/app/shared/components/checkbox/checkbox.component.ts",{"_index":1267,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["src/app/shared/components/checkbox/checkbox.component.ts:16",{"_index":1277,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["src/app/shared/components/checkbox/checkbox.component.ts:21",{"_index":1282,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["src/app/shared/components/checkbox/checkbox.component.ts:26",{"_index":1286,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["src/app/shared/components/checkbox/checkbox.component.ts:31",{"_index":1291,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["src/app/shared/components/checkbox/checkbox.component.ts:38",{"_index":1296,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["src/app/shared/components/checkbox/checkbox.module.ts",{"_index":1328,"title":{},"body":{"modules/CheckboxModule.html":{}}}],["src/app/shared/components/drawer/container/container.component.ts",{"_index":1690,"title":{},"body":{"components/ContainerComponent.html":{}}}],["src/app/shared/components/drawer/container/container.component.ts:101",{"_index":1726,"title":{},"body":{"components/ContainerComponent.html":{}}}],["src/app/shared/components/drawer/container/container.component.ts:111",{"_index":1716,"title":{},"body":{"components/ContainerComponent.html":{}}}],["src/app/shared/components/drawer/container/container.component.ts:120",{"_index":1728,"title":{},"body":{"components/ContainerComponent.html":{}}}],["src/app/shared/components/drawer/container/container.component.ts:37",{"_index":1713,"title":{},"body":{"components/ContainerComponent.html":{}}}],["src/app/shared/components/drawer/container/container.component.ts:41",{"_index":1744,"title":{},"body":{"components/ContainerComponent.html":{}}}],["src/app/shared/components/drawer/container/container.component.ts:45",{"_index":1736,"title":{},"body":{"components/ContainerComponent.html":{}}}],["src/app/shared/components/drawer/container/container.component.ts:48",{"_index":1740,"title":{},"body":{"components/ContainerComponent.html":{}}}],["src/app/shared/components/drawer/container/container.component.ts:50",{"_index":1748,"title":{},"body":{"components/ContainerComponent.html":{}}}],["src/app/shared/components/drawer/container/container.component.ts:55",{"_index":1751,"title":{},"body":{"components/ContainerComponent.html":{}}}],["src/app/shared/components/drawer/container/container.component.ts:58",{"_index":1731,"title":{},"body":{"components/ContainerComponent.html":{}}}],["src/app/shared/components/drawer/container/container.component.ts:60",{"_index":1709,"title":{},"body":{"components/ContainerComponent.html":{}}}],["src/app/shared/components/drawer/container/container.component.ts:79",{"_index":1722,"title":{},"body":{"components/ContainerComponent.html":{}}}],["src/app/shared/components/drawer/content/content.component.ts",{"_index":1805,"title":{},"body":{"components/ContentComponent.html":{}}}],["src/app/shared/components/drawer/content/content.component.ts:100",{"_index":1835,"title":{},"body":{"components/ContentComponent.html":{}}}],["src/app/shared/components/drawer/content/content.component.ts:113",{"_index":1830,"title":{},"body":{"components/ContentComponent.html":{}}}],["src/app/shared/components/drawer/content/content.component.ts:28",{"_index":1820,"title":{},"body":{"components/ContentComponent.html":{}}}],["src/app/shared/components/drawer/content/content.component.ts:30",{"_index":1821,"title":{},"body":{"components/ContentComponent.html":{}}}],["src/app/shared/components/drawer/content/content.component.ts:32",{"_index":1823,"title":{},"body":{"components/ContentComponent.html":{}}}],["src/app/shared/components/drawer/content/content.component.ts:34",{"_index":1824,"title":{},"body":{"components/ContentComponent.html":{}}}],["src/app/shared/components/drawer/content/content.component.ts:36",{"_index":1818,"title":{},"body":{"components/ContentComponent.html":{}}}],["src/app/shared/components/drawer/content/content.component.ts:39",{"_index":1836,"title":{},"body":{"components/ContentComponent.html":{}}}],["src/app/shared/components/drawer/content/content.component.ts:41",{"_index":1816,"title":{},"body":{"components/ContentComponent.html":{}}}],["src/app/shared/components/drawer/content/content.component.ts:58",{"_index":1829,"title":{},"body":{"components/ContentComponent.html":{}}}],["src/app/shared/components/drawer/content/content.component.ts:68",{"_index":1826,"title":{},"body":{"components/ContentComponent.html":{}}}],["src/app/shared/components/drawer/drawer.module.ts",{"_index":2126,"title":{},"body":{"modules/DrawerModule.html":{}}}],["src/app/shared/components/drawer/drawer/drawer.component.ts",{"_index":3427,"title":{},"body":{"classes/InitializationState.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/shared/components/drawer/drawer/drawer.component.ts:33",{"_index":3436,"title":{},"body":{"classes/InitializationState.html":{}}}],["src/app/shared/components/drawer/drawer/drawer.component.ts:35",{"_index":3435,"title":{},"body":{"classes/InitializationState.html":{}}}],["src/app/shared/components/drawer/drawer/drawer.component.ts:37",{"_index":3437,"title":{},"body":{"classes/InitializationState.html":{}}}],["src/app/shared/components/drawer/drawer/drawer.component.ts:42",{"_index":3438,"title":{},"body":{"classes/InitializationState.html":{}}}],["src/app/shared/components/drawer/drawer/drawer.component.ts:52",{"_index":3440,"title":{},"body":{"classes/InitializationState.html":{}}}],["src/app/shared/components/drawer/drawer/drawer.component.ts:59",{"_index":3439,"title":{},"body":{"classes/InitializationState.html":{}}}],["src/app/shared/components/drawer/messages.ts",{"_index":1882,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/shared/components/drawer/toggle",{"_index":4334,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["src/app/shared/components/dropdown/dropdown.component.ts",{"_index":2132,"title":{},"body":{"components/DropdownComponent.html":{}}}],["src/app/shared/components/dropdown/dropdown.component.ts:16",{"_index":2139,"title":{},"body":{"components/DropdownComponent.html":{}}}],["src/app/shared/components/dropdown/dropdown.component.ts:21",{"_index":2141,"title":{},"body":{"components/DropdownComponent.html":{}}}],["src/app/shared/components/dropdown/dropdown.component.ts:26",{"_index":2143,"title":{},"body":{"components/DropdownComponent.html":{}}}],["src/app/shared/components/dropdown/dropdown.component.ts:31",{"_index":2144,"title":{},"body":{"components/DropdownComponent.html":{}}}],["src/app/shared/components/dropdown/dropdown.component.ts:36",{"_index":2150,"title":{},"body":{"components/DropdownComponent.html":{}}}],["src/app/shared/components/dropdown/dropdown.component.ts:41",{"_index":2147,"title":{},"body":{"components/DropdownComponent.html":{}}}],["src/app/shared/components/dropdown/dropdown.component.ts:49",{"_index":2146,"title":{},"body":{"components/DropdownComponent.html":{}}}],["src/app/shared/components/dropdown/dropdown.module.ts",{"_index":2187,"title":{},"body":{"modules/DropdownModule.html":{}}}],["src/app/shared/components/dual",{"_index":2193,"title":{},"body":{"components/DualSliderComponent.html":{},"modules/DualSliderModule.html":{}}}],["src/app/shared/components/spinner",{"_index":4233,"title":{},"body":{"components/SpinnerOverlayComponent.html":{},"modules/SpinnerOverlayModule.html":{}}}],["src/app/shared/services/message/message.service.ts",{"_index":3578,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["src/app/shared/services/message/message.service.ts:101",{"_index":3627,"title":{},"body":{"classes/MessageChannel.html":{}}}],["src/app/shared/services/message/message.service.ts:110",{"_index":3628,"title":{},"body":{"classes/MessageChannel.html":{}}}],["src/app/shared/services/message/message.service.ts:126",{"_index":3634,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/shared/services/message/message.service.ts:128",{"_index":3631,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/shared/services/message/message.service.ts:151",{"_index":3633,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/shared/services/message/message.service.ts:161",{"_index":3632,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/shared/services/message/message.service.ts:48",{"_index":3624,"title":{},"body":{"classes/MessageChannel.html":{}}}],["src/app/shared/services/message/message.service.ts:68",{"_index":3629,"title":{},"body":{"classes/MessageChannel.html":{}}}],["src/app/shared/services/message/message.service.ts:81",{"_index":3625,"title":{},"body":{"classes/MessageChannel.html":{}}}],["src/app/shared/services/message/message.service.ts:91",{"_index":3626,"title":{},"body":{"classes/MessageChannel.html":{}}}],["src/environments/environment",{"_index":3901,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["srcevent",{"_index":584,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["standards",{"_index":4590,"title":{},"body":{"changelog.html":{}}}],["stanford",{"_index":2629,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["start",{"_index":1767,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["start?.expanded",{"_index":1872,"title":{},"body":{"components/ContentComponent.html":{}}}],["start?.opened",{"_index":1871,"title":{},"body":{"components/ContentComponent.html":{}}}],["startdrawers",{"_index":1792,"title":{},"body":{"components/ContainerComponent.html":{}}}],["startdrawers.length",{"_index":1796,"title":{},"body":{"components/ContainerComponent.html":{}}}],["startdrawers[0",{"_index":1800,"title":{},"body":{"components/ContainerComponent.html":{}}}],["started",{"_index":4517,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{}}}],["startexpanded",{"_index":1870,"title":{},"body":{"components/ContentComponent.html":{}}}],["starts",{"_index":4631,"title":{},"body":{"changelog.html":{}}}],["startup",{"_index":2104,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{}}}],["startwith",{"_index":1755,"title":{},"body":{"components/ContainerComponent.html":{},"components/OntologySearchComponent.html":{}}}],["stat",{"_index":4135,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["stat.count",{"_index":4133,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["stat.label",{"_index":4134,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["state",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUILayer.html":{},"interfaces/ChannelConfig.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"classes/InitializationState.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"components/ResultsBrowserComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode.html":{},"components/ToggleButtonComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["state('closed",{"_index":3466,"title":{},"body":{"classes/InitializationState.html":{}}}],["state('collapsed",{"_index":3471,"title":{},"body":{"classes/InitializationState.html":{}}}],["state('extended",{"_index":3475,"title":{},"body":{"classes/InitializationState.html":{}}}],["state('false",{"_index":1843,"title":{},"body":{"components/ContentComponent.html":{}}}],["state('full",{"_index":3476,"title":{},"body":{"classes/InitializationState.html":{}}}],["state('half",{"_index":3472,"title":{},"body":{"classes/InitializationState.html":{}}}],["state('true",{"_index":1844,"title":{},"body":{"components/ContentComponent.html":{}}}],["state(`open",{"_index":3465,"title":{},"body":{"classes/InitializationState.html":{}}}],["state.data.filter(d",{"_index":692,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["state.nodes[state.root",{"_index":4028,"title":{},"body":{"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{}}}],["state.zoomopacity",{"_index":702,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["statechange",{"_index":3496,"title":{},"body":{"classes/InitializationState.html":{}}}],["staterepository",{"_index":2035,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["states",{"_index":1186,"title":{},"body":{"interfaces/ChannelConfig.html":{},"components/ContentComponent.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"modules/StoreModule.html":{}}}],["states.every(state",{"_index":2059,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["states[view.id",{"_index":1245,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["static",{"_index":606,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"classes/FlatNode.html":{},"classes/HuBMAPEntity.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"components/OntologySelectionComponent.html":{},"interfaces/SpatialSceneNode.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/enumerations.html":{}}}],["statictiff",{"_index":3648,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/enumerations.html":{}}}],["staticzarr",{"_index":3642,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/enumerations.html":{}}}],["stats",{"_index":4100,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["status",{"_index":2010,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/OntologySearchComponent.html":{}}}],["stay",{"_index":4628,"title":{},"body":{"changelog.html":{}}}],["step",{"_index":1594,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/DualSliderComponent.html":{}}}],["still",{"_index":731,"title":{},"body":{"components/BodyUiComponent.html":{},"components/FiltersPopoverComponent.html":{}}}],["store",{"_index":237,"title":{},"body":{"components/AppComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"classes/HuBMAPEntity.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode-1.html":{},"modules/StoreModule.html":{}}}],["store.forsubjects((subject",{"_index":1010,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["store/ontology/ontology.state",{"_index":3906,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["store/store.module",{"_index":1915,"title":{},"body":{"modules/CoreModule.html":{}}}],["stored_fields",{"_index":2891,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["storemodule",{"_index":1907,"title":{"modules/StoreModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/StoreModule.html":{},"modules.html":{},"overview.html":{}}}],["stories",{"_index":4579,"title":{},"body":{"changelog.html":{}}}],["strange",{"_index":4264,"title":{},"body":{"modules/StoreModule.html":{}}}],["strategic",{"_index":3391,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["streaming",{"_index":4662,"title":{},"body":{"dependencies.html":{}}}],["string",{"_index":16,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"interfaces/DefaultIconDefinition.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["string[]>(map",{"_index":2987,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["stroke",{"_index":1313,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["structure",{"_index":2963,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["styilng",{"_index":3155,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["style",{"_index":1380,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"classes/ImageViewerLayer.html":{},"classes/InitializationState.html":{},"interfaces/PureImageViewerLayer.html":{},"components/SchemeDropdownComponent.html":{}}}],["style.margin",{"_index":1813,"title":{},"body":{"components/ContentComponent.html":{}}}],["styled",{"_index":2464,"title":{},"body":{"components/HeaderComponent.html":{}}}],["styles",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"changelog.html":{}}}],["styles.getpropertyvalue(property",{"_index":3519,"title":{},"body":{"classes/InitializationState.html":{}}}],["styleurls",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["styling",{"_index":1370,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{}}}],["sub",{"_index":116,"title":{},"body":{"components/AppComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"miscellaneous/typealiases.html":{}}}],["subject",{"_index":483,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"license.html":{}}}],["subject.id",{"_index":1012,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["subject.next(dataquerystate.completed",{"_index":2064,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["sublicense",{"_index":4705,"title":{},"body":{"license.html":{}}}],["subpath",{"_index":4224,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["subscription",{"_index":1745,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["subscriptions",{"_index":1700,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["substantial",{"_index":4717,"title":{},"body":{"license.html":{}}}],["subtitle",{"_index":3418,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["subtree",{"_index":3940,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["subtrees",{"_index":3930,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["successful",{"_index":2919,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["such",{"_index":2230,"title":{},"body":{"components/DualSliderComponent.html":{},"components/ImageViewerLayersComponent.html":{}}}],["suffix",{"_index":3845,"title":{},"body":{"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["super",{"_index":2080,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["support",{"_index":3411,"title":{},"body":{"components/InfoDialogComponent.html":{},"modules.html":{}}}],["supported",{"_index":3667,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{}}}],["supporting",{"_index":3361,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["svg",{"_index":2112,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"modules.html":{}}}],["swatch",{"_index":1618,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["switch",{"_index":763,"title":{},"body":{"components/BodyUiComponent.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/ContentComponent.html":{},"classes/InitializationState.html":{},"interfaces/OMEZarrInfo.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SpatialSceneNode-1.html":{},"interfaces/TiffInfo.html":{}}}],["switchmap",{"_index":2044,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/OntologySearchComponent.html":{}}}],["switchmap(query",{"_index":2075,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["switchmap(value",{"_index":3827,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["syncexpanded(other",{"_index":3561,"title":{},"body":{"classes/InitializationState.html":{}}}],["syncs",{"_index":3558,"title":{},"body":{"classes/InitializationState.html":{}}}],["synonym",{"_index":3883,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["synonymlabels",{"_index":2995,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/OntologyNode.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/ValueObject.html":{}}}],["synonyms",{"_index":2967,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"interfaces/ValueObject.html":{}}}],["synonymsextractor",{"_index":2985,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["synonymsextractor(json",{"_index":2996,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["synonymsproperty",{"_index":2984,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["systems",{"_index":3363,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["t",{"_index":989,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OldRuiData.html":{},"miscellaneous/typealiases.html":{}}}],["t.x",{"_index":3746,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["t.y",{"_index":3748,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["t.z",{"_index":3750,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["tab",{"_index":4155,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["table",{"_index":3915,"title":{},"body":{"injectables/OntologySearchService.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"interfaces/SearchResult.html":{}}}],["take",{"_index":4151,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["taken",{"_index":2637,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["takes",{"_index":1556,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["takewhile",{"_index":3582,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["tap",{"_index":2045,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["tap(linkchildren",{"_index":3962,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["tap(next",{"_index":2076,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["target",{"_index":555,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/ViewerComponent.html":{}}}],["target['@id",{"_index":1110,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["targetiri",{"_index":964,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["tealgreen",{"_index":1445,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["team",{"_index":3383,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["technologies",{"_index":79,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"components/InfoDialogComponent.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"changelog.html":{}}}],["technology",{"_index":4615,"title":{},"body":{"changelog.html":{}}}],["tells",{"_index":1303,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["template",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["templateurl",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["temporary",{"_index":3917,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["term",{"_index":843,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["termdata",{"_index":3998,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["termoccurencesdata",{"_index":1983,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["termoccurencesdata(filter",{"_index":1993,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["termoccurencesdataquerystatus",{"_index":1984,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["terms",{"_index":66,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialScene.html":{},"interfaces/DataSource.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"components/OntologySelectionComponent.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["terms.indexof(rui.body.id",{"_index":1067,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["terms.indexof(rui.kidney.id",{"_index":1069,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["terms.indexof(rui.left_kidney.id",{"_index":1073,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["terms.indexof(rui.right_kidney.id",{"_index":1071,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["terms.indexof(rui.spleen.id",{"_index":1075,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["test",{"_index":2058,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"changelog.html":{}}}],["testing",{"_index":2057,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"changelog.html":{}}}],["testinggroup",{"_index":2623,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["text",{"_index":2332,"title":{},"body":{"components/DualSliderComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"components/SpinnerOverlayComponent.html":{},"components/ViewerComponent.html":{}}}],["th",{"_index":2663,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["theme",{"_index":231,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/ThemingService.html":{}}}],["themes",{"_index":4309,"title":{},"body":{"injectables/ThemingService.html":{}}}],["theming",{"_index":185,"title":{},"body":{"components/AppComponent.html":{},"injectables/ThemingService.html":{}}}],["theming.gettheme",{"_index":265,"title":{},"body":{"components/AppComponent.html":{}}}],["theming.service",{"_index":4281,"title":{},"body":{"modules/ThemingModule.html":{}}}],["themingmodule",{"_index":1908,"title":{"modules/ThemingModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/ThemingModule.html":{},"modules.html":{},"overview.html":{}}}],["themingservice",{"_index":164,"title":{"injectables/ThemingService.html":{}},"body":{"components/AppComponent.html":{},"modules/ThemingModule.html":{},"injectables/ThemingService.html":{},"overview.html":{}}}],["themingservice.initialize",{"_index":4282,"title":{},"body":{"modules/ThemingModule.html":{}}}],["then(r",{"_index":2896,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["thin",{"_index":3850,"title":{},"body":{"components/OntologySearchComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["this._afterconnected",{"_index":1964,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["this._aggregatedataquerystatus$.next(dataquerystate.completed",{"_index":2083,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this._aggregatedataquerystatus$.next(dataquerystate.running",{"_index":2095,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this._aggregatedataquerystatus$.pipe(distinct",{"_index":2008,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this._channelconfigs",{"_index":1181,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this._expanded",{"_index":3489,"title":{},"body":{"classes/InitializationState.html":{}}}],["this._height",{"_index":1171,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this._layers",{"_index":3205,"title":{},"body":{"components/ImageViewerLegendComponent.html":{},"components/ViewerComponent.html":{}}}],["this._listdataquerystatus$.next(dataquerystate.completed",{"_index":2082,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this._listdataquerystatus$.next(dataquerystate.running",{"_index":2093,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this._listdataquerystatus$.pipe(distinct",{"_index":2016,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this._loaders",{"_index":1176,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this._measuredmargin",{"_index":3517,"title":{},"body":{"classes/InitializationState.html":{}}}],["this._measuredwidth",{"_index":3507,"title":{},"body":{"classes/InitializationState.html":{}}}],["this._onclick",{"_index":535,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this._onhover",{"_index":533,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this._onviewstatechange",{"_index":537,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this._opened",{"_index":3485,"title":{},"body":{"classes/InitializationState.html":{}}}],["this._position",{"_index":3481,"title":{},"body":{"classes/InitializationState.html":{}}}],["this._sources",{"_index":1174,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"components/ViewerComponent.html":{}}}],["this._sources.length",{"_index":4419,"title":{},"body":{"components/ViewerComponent.html":{}}}],["this._sources.map(source",{"_index":4425,"title":{},"body":{"components/ViewerComponent.html":{}}}],["this._termoccurencesdataquerystatus$.next(dataquerystate.completed",{"_index":2084,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this._termoccurencesdataquerystatus$.next(dataquerystate.running",{"_index":2097,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this._termoccurencesdataquerystatus$.pipe(distinct",{"_index":2033,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this._width",{"_index":1170,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.addentitiesmany(ids.map((id",{"_index":4499,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["this.addspatialentity(getspatialentity(store",{"_index":1015,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["this.addspatialobjectreference(getspatialobjectreference(store",{"_index":1011,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["this.addspatialplacement(getspatialplacement(store",{"_index":1018,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["this.age",{"_index":2734,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.aggregatedata",{"_index":2004,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.aggregatedataquerystatus",{"_index":2022,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.ancestors",{"_index":2702,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.ancestors.find(e",{"_index":2707,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.ancestors[0].rui_location",{"_index":2761,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.animationsenabled",{"_index":1861,"title":{},"body":{"components/ContentComponent.html":{}}}],["this.applyfilter({highlightedentities",{"_index":781,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["this.applyfilter({ontologyterms",{"_index":767,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["this.applyfilters.emit(this.filters",{"_index":2362,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["this.applythemeclass(theme",{"_index":4321,"title":{},"body":{"injectables/ThemingService.html":{}}}],["this.applythemeclass(this.theme",{"_index":4320,"title":{},"body":{"injectables/ThemingService.html":{}}}],["this.assaytypes",{"_index":2799,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.assaytypes.join",{"_index":2865,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.assaytypes].map(l",{"_index":2802,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.assetsapi}/${d.uuid}/${f.rel_path",{"_index":2779,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.atscrollbottom",{"_index":4132,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["this.bmi",{"_index":2736,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.bmi?.tofixed(1",{"_index":2846,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.bodycanvas.nativeelement",{"_index":747,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["this.bodyui",{"_index":748,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["this.bodyui.nodeclick$.subscribe(async",{"_index":762,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["this.bodyui.setscene(scene",{"_index":761,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["this.bodyuilayer",{"_index":531,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.bodyuilayer.setstate({data",{"_index":568,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.bodyuilayer.state",{"_index":562,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.bottom",{"_index":1679,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["this.brightnesshigh",{"_index":1585,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["this.brightnesslow",{"_index":1588,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["this.brightnessslideroptions",{"_index":1597,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["this.cdr.markforcheck",{"_index":1786,"title":{},"body":{"components/ContainerComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["this.channel",{"_index":1777,"title":{},"body":{"components/ContainerComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["this.channel.asobservable",{"_index":3612,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["this.channel.closed",{"_index":3614,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["this.channel.complete",{"_index":3617,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["this.channel.next",{"_index":3594,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["this.channel.sendmessage",{"_index":1784,"title":{},"body":{"components/ContainerComponent.html":{},"classes/InitializationState.html":{}}}],["this.channelconfigs",{"_index":1222,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.clear",{"_index":4423,"title":{},"body":{"components/ViewerComponent.html":{}}}],["this.closeviewer.emit",{"_index":3089,"title":{},"body":{"components/ImageViewerContentComponent.html":{}}}],["this.color",{"_index":3135,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["this.colorscheme",{"_index":1374,"title":{},"body":{"components/ColorBarComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["this.colorscheme.colors",{"_index":3136,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["this.colorscheme.positions",{"_index":3137,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["this.colorscheme.type",{"_index":3134,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["this.component",{"_index":4323,"title":{},"body":{"injectables/ThemingService.html":{}}}],["this.containshumangeneticsequences",{"_index":2796,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.content",{"_index":1788,"title":{},"body":{"components/ContainerComponent.html":{}}}],["this.content1.changes.pipe(startwith(null)).subscribe",{"_index":1787,"title":{},"body":{"components/ContainerComponent.html":{}}}],["this.content1.first",{"_index":1774,"title":{},"body":{"components/ContainerComponent.html":{}}}],["this.content1.length",{"_index":1776,"title":{},"body":{"components/ContainerComponent.html":{}}}],["this.content2.first",{"_index":1775,"title":{},"body":{"components/ContainerComponent.html":{}}}],["this.contentsvisible",{"_index":2307,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.creategraph",{"_index":1007,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["this.createlayerconfigs",{"_index":1214,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.createselectionlabel(ontologyselection",{"_index":246,"title":{},"body":{"components/AppComponent.html":{}}}],["this.createvivviews",{"_index":1203,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.ctx.patchstate",{"_index":4508,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["this.ctx.setstate(ontology",{"_index":4030,"title":{},"body":{"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{}}}],["this.cursor",{"_index":540,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.data",{"_index":2838,"title":{},"body":{"classes/HuBMAPEntity.html":{},"components/ImageViewerPopoverComponent.html":{}}}],["this.data.ancestors",{"_index":2703,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.data.descendants",{"_index":2705,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.data.entity_type",{"_index":2701,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.data.filter$.subscribe(async",{"_index":757,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["this.data.querystatus$.pipe",{"_index":139,"title":{},"body":{"components/AppComponent.html":{}}}],["this.data.resulttype",{"_index":4153,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["this.data.specimen_type",{"_index":2861,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.data.updatefilter",{"_index":242,"title":{},"body":{"components/AppComponent.html":{}}}],["this.data.uuid",{"_index":2699,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.datasource",{"_index":1951,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["this.datasource.connect(this.dboptions",{"_index":1965,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["this.datasourceservice.datasource.connect",{"_index":759,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["this.datasourceservice.datasource.getscene(f",{"_index":760,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["this.datasourceservice.getimageviewerdata(result['@id",{"_index":220,"title":{},"body":{"components/AppComponent.html":{}}}],["this.datatypes",{"_index":2797,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.datatypes.join",{"_index":2863,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.db.getspatialentities(filter).map((entity",{"_index":1097,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["this.db.graph.gettransformationmatrix(sourceid",{"_index":1109,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["this.db.store",{"_index":1008,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["this.dboptions",{"_index":1953,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["this.deck",{"_index":547,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.deck.finalize",{"_index":1201,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.deck.props.viewstate",{"_index":573,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.deck.redraw(true",{"_index":1206,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.deck.setprops",{"_index":571,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.deck.setprops(props",{"_index":1248,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.deck.setprops({viewstate",{"_index":549,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.defaulttheme",{"_index":4318,"title":{},"body":{"injectables/ThemingService.html":{}}}],["this.deferred",{"_index":3458,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.descendants",{"_index":2704,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.description",{"_index":2741,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.dialog.open(infodialogcomponent",{"_index":3284,"title":{},"body":{"components/InfoButtonComponent.html":{}}}],["this.dialogref.close",{"_index":3312,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["this.doi",{"_index":2739,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.donor",{"_index":2706,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.donor.description",{"_index":2713,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.donor.display_doi",{"_index":2856,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.donor.group_name",{"_index":2749,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.donor.group_uuid",{"_index":2745,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.donor.protocol_url",{"_index":2758,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.donor.uuid",{"_index":2841,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.drawer",{"_index":4355,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["this.drawer.position",{"_index":4353,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["this.drawers",{"_index":1857,"title":{},"body":{"components/ContentComponent.html":{}}}],["this.drawers.changes.pipe(startwith(null)).subscribe",{"_index":1782,"title":{},"body":{"components/ContainerComponent.html":{}}}],["this.drawers.toarray",{"_index":1791,"title":{},"body":{"components/ContainerComponent.html":{}}}],["this.element.nativeelement",{"_index":3508,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.entities$.pipe",{"_index":4476,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["this.entities[id",{"_index":4500,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["this.entitytype",{"_index":2700,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.ethnicity",{"_index":2737,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.expanded",{"_index":3542,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.expandedchange.emit(this.expanded",{"_index":3550,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.expandedstate",{"_index":3530,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.expandedstate2",{"_index":3501,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.faded",{"_index":1876,"title":{},"body":{"components/ContentComponent.html":{}}}],["this.filter",{"_index":784,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["this.filter$.pipe(querydata",{"_index":2003,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.filter?.highlightedentities",{"_index":778,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["this.filterchange.emit(newfilter",{"_index":785,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["this.filteredresults",{"_index":3824,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["this.filters",{"_index":2360,"title":{},"body":{"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{}}}],["this.filterschange.emit(filters",{"_index":2400,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["this.filterschange.emit(this.filters",{"_index":2361,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["this.filtersvisible",{"_index":2399,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["this.formatlabel(node.label",{"_index":3978,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["this.formcontrol.reset",{"_index":3839,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["this.formcontrol.valuechanges",{"_index":3823,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["this.get(s",{"_index":927,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.getarguments(definition",{"_index":2933,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["this.getautocolor(autocolorindex",{"_index":4507,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["this.getbrightness",{"_index":3143,"title":{},"body":{"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{}}}],["this.getchildren",{"_index":3952,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["this.getchildren.bind(this",{"_index":3953,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["this.getentityscenenodes(filter",{"_index":1128,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["this.getids(filter)].map((s",{"_index":926,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.getindexofmatch(label",{"_index":3983,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["this.getindexofmatch(node.label",{"_index":3977,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["this.getmessages().pipe(filter(msg",{"_index":3603,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["this.getmethodname(definition",{"_index":2931,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["this.getreferencebody(filter",{"_index":1064,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["this.getreferenceorgans(filter).map((organ",{"_index":1078,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["this.getreferencescenenodes(filter",{"_index":1127,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["this.getscenenode(body",{"_index":1076,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["this.getscenenode(entity",{"_index":1098,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["this.getscenenode(getspatialentity(store",{"_index":1080,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["this.getscenenode(organ",{"_index":1079,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["this.getstate().filter",{"_index":2092,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.graph",{"_index":896,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{}}}],["this.graph.creategraph",{"_index":922,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.graph.getedgeattribute(source",{"_index":1032,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["this.graph.hasnode(sourceiri",{"_index":1025,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["this.graph.hasnode(targetiri",{"_index":1026,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["this.graph.mergedirectededge(placement.source['@id",{"_index":1022,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["this.graph.mergenode(entity['@id",{"_index":1020,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["this.graph.mergenode(ref['@id",{"_index":1021,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["this.groupname",{"_index":2746,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.groupuuid",{"_index":2743,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.handlemessage(msg",{"_index":1780,"title":{},"body":{"components/ContainerComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["this.highvalue",{"_index":2291,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.http.get(environment.ontologyurl",{"_index":3955,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["this.id",{"_index":2698,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.imageproviders",{"_index":2787,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.images",{"_index":2786,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.initialized",{"_index":3457,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.initialized.set",{"_index":3523,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.initialized.valueof",{"_index":3531,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.initialized.wait",{"_index":3554,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.initializedeck(reqprops",{"_index":1189,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.initializesliderpopover",{"_index":2308,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.isdemo",{"_index":4418,"title":{},"body":{"components/ViewerComponent.html":{}}}],["this.isloading",{"_index":3251,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["this.issliderinitialized",{"_index":2305,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.isslideropen",{"_index":2306,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.label",{"_index":2738,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.lasthovered",{"_index":582,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.layer",{"_index":1604,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["this.layer.brightness[0",{"_index":1582,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["this.layer.brightness[1",{"_index":1586,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["this.layer.transparency",{"_index":1589,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["this.layerchange.emit(layer",{"_index":3178,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["this.layerchange.emit(new",{"_index":3174,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["this.layerchange.emit(this.layer",{"_index":1601,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["this.layerconfigs",{"_index":1197,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.layerfilter",{"_index":1251,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.layers",{"_index":1196,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.layers$.pipe",{"_index":4472,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["this.leftmargin",{"_index":1868,"title":{},"body":{"components/ContentComponent.html":{}}}],["this.listdata",{"_index":2013,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.listdataquerystatus",{"_index":2021,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.loaders[0",{"_index":4096,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["this.lookup(nodes",{"_index":3969,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["this.lowvalue",{"_index":2289,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.margin2",{"_index":3504,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.measuredmargin",{"_index":3503,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.measuredwidth",{"_index":3555,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.messages",{"_index":3611,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["this.messages.pipe(filter(msg",{"_index":3600,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["this.nextmessageid",{"_index":3595,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["this.nodeclicksubject.next({node",{"_index":586,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.nodeclicksubject.pipe(share",{"_index":481,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.nodehoverstartsubject.next(e.object",{"_index":583,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.nodehoverstartsubject.pipe(share",{"_index":485,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.nodehoverstopsubject.next(lasthovered",{"_index":581,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.nodehoverstopsubject.pipe(share",{"_index":488,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["this.ontologyselectionlabel",{"_index":245,"title":{},"body":{"components/AppComponent.html":{}}}],["this.ontologyservice.filter(value",{"_index":3828,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["this.ontologyservice.loadontology",{"_index":3821,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["this.ontologystate.nodes$.pipe",{"_index":3968,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["this.ontologystate.rootnode",{"_index":3951,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["this.ontologystate.setontology(ontology",{"_index":3967,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["this.ontologyterms",{"_index":189,"title":{},"body":{"components/AppComponent.html":{},"classes/HuBMAPEntity.html":{}}}],["this.ontologyterms[this.ontologyterms.length",{"_index":2756,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.ontologytermsfulldata",{"_index":2088,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.onviewstatechange",{"_index":1252,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.opened",{"_index":3528,"title":{},"body":{"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["this.openedchange.emit(this.opened",{"_index":3546,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.openedstate",{"_index":3529,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.openimageviewer.emit",{"_index":4154,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["this.options",{"_index":900,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/DualSliderComponent.html":{}}}],["this.options.ccfowlurl",{"_index":903,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.options.ceil",{"_index":2297,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.options.floor",{"_index":2296,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.options.hubmapassetsurl",{"_index":913,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.options.hubmapdataservice",{"_index":911,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.options.hubmapdataurl",{"_index":907,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.options.hubmapdataurl.endswith('.jsonld",{"_index":908,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.options.hubmapportalurl",{"_index":914,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.options.hubmaptoken",{"_index":912,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.optionschanged",{"_index":2285,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.optionsvisible",{"_index":2151,"title":{},"body":{"components/DropdownComponent.html":{}}}],["this.organ",{"_index":2755,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.organname",{"_index":2750,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.organsample",{"_index":2710,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.organsample.display_doi",{"_index":2858,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.original.children.length",{"_index":2437,"title":{},"body":{"classes/FlatNode.html":{}}}],["this.original.label",{"_index":2436,"title":{},"body":{"classes/FlatNode.html":{}}}],["this.overlayref",{"_index":2281,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.overlayref.detach",{"_index":2304,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.overlayref.dispose",{"_index":2298,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.patchstate",{"_index":2089,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.popupvisible",{"_index":1676,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["this.portalurl",{"_index":2818,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.position",{"_index":3480,"title":{},"body":{"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["this.props",{"_index":686,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/SpatialSceneNode.html":{}}}],["this.protocolurl",{"_index":2757,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.registericonimpl(definition",{"_index":2922,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["this.registericonimpl(safedef",{"_index":2917,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["this.registry",{"_index":2926,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["this.removebox",{"_index":2401,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["this.removeentitiesmany(this.ids",{"_index":4498,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["this.resetchannelconfigs",{"_index":1213,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.resolve",{"_index":3434,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.result",{"_index":3250,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["this.resulttype",{"_index":2823,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.resulturl",{"_index":2821,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.resulturl.split('/').slice",{"_index":2827,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.rightmargin",{"_index":1869,"title":{},"body":{"components/ContentComponent.html":{}}}],["this.rootnode",{"_index":3950,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["this.scene",{"_index":898,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.scene.getscene(filter",{"_index":941,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.schemechange.emit(this.colorscheme",{"_index":4202,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["this.schemechanged(0",{"_index":4199,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["this.schemeidx",{"_index":4201,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["this.schemeoptions",{"_index":4196,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["this.schemeoptions.filter(scheme",{"_index":4197,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["this.schemeoptions[idx",{"_index":4200,"title":{},"body":{"components/SchemeDropdownComponent.html":{}}}],["this.selected.emit(node",{"_index":3838,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["this.selection",{"_index":1307,"title":{},"body":{"components/CheckboxComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["this.selection.filter(selection",{"_index":1308,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["this.selectionchange.emit(this.selection",{"_index":1309,"title":{},"body":{"components/CheckboxComponent.html":{},"components/DualSliderComponent.html":{}}}],["this.selectionchange.emit(value",{"_index":2152,"title":{},"body":{"components/DropdownComponent.html":{}}}],["this.sendtoggle",{"_index":3532,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.sensor",{"_index":4433,"title":{},"body":{"components/ViewerComponent.html":{}}}],["this.sensor.detach",{"_index":4436,"title":{},"body":{"components/ViewerComponent.html":{}}}],["this.setsources(reqprops.sources",{"_index":1193,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.setsourceurls(result",{"_index":3252,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["this.setstate({data",{"_index":687,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["this.settheme(this.defaulttheme",{"_index":4322,"title":{},"body":{"injectables/ThemingService.html":{}}}],["this.sex",{"_index":2735,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.snapshot",{"_index":4496,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["this.sortbysynonymresult",{"_index":3831,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["this.sortlexically",{"_index":3832,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["this.source",{"_index":3596,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["this.source.getaggregateresults(filter",{"_index":2096,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.source.getlistresults(filter",{"_index":2094,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.source.getontologytermoccurences(filter",{"_index":2098,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.sourcesfromurls(urls",{"_index":4417,"title":{},"body":{"components/ViewerComponent.html":{}}}],["this.sourceurls",{"_index":3254,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["this.spatialentity",{"_index":2768,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.spatialorbulk",{"_index":2808,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.state",{"_index":690,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["this.state$.pipe(map(state",{"_index":4025,"title":{},"body":{"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{}}}],["this.state$.pipe(pluck('filter",{"_index":2011,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.state.createlayers(channels",{"_index":3253,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["this.statechange.emit",{"_index":3556,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.states",{"_index":1198,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.store",{"_index":895,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.store.getquads(datafactory.namednode(id",{"_index":924,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.store.selectsnapshot(ontologystate",{"_index":3988,"title":{},"body":{"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"interfaces/SearchResult.html":{}}}],["this.store.size",{"_index":901,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{}}}],["this.subscriptions.add(channel.getmessagesfromsource(drawer).subscribe(msg",{"_index":4352,"title":{},"body":{"components/ToggleButtonComponent.html":{}}}],["this.subscriptions.add(messages.subscribe(msg",{"_index":1854,"title":{},"body":{"components/ContentComponent.html":{}}}],["this.subscriptions.add(this.channel.getmessages().subscribe(msg",{"_index":1779,"title":{},"body":{"components/ContainerComponent.html":{},"classes/InitializationState.html":{}}}],["this.subscriptions.unsubscribe",{"_index":1789,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["this.syncexpanded(other",{"_index":3557,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.termoccurencesdata",{"_index":2030,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.termoccurencesdataquerystatus",{"_index":2023,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["this.theme",{"_index":4319,"title":{},"body":{"injectables/ThemingService.html":{}}}],["this.theming.settheme(this.theming.gettheme",{"_index":230,"title":{},"body":{"components/AppComponent.html":{}}}],["this.thumbnailurl",{"_index":2805,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["this.toggle(coercebooleanproperty(value",{"_index":3487,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.toggle(false",{"_index":3526,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.toggle(true",{"_index":3525,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.toggleexpanded(coercebooleanproperty(value",{"_index":3491,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.toggleexpanded(false",{"_index":3538,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.toggleexpanded(true",{"_index":3535,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.transparencyslideroptions",{"_index":1599,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["this.tree.expandandselect(ontologynode",{"_index":4013,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["this.update",{"_index":1199,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.updatedeckprops",{"_index":1227,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.updateentitiesmany",{"_index":4509,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["this.updateentitiesmany(changes",{"_index":4514,"title":{},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["this.updatefaded",{"_index":1859,"title":{},"body":{"components/ContentComponent.html":{}}}],["this.updatelayer",{"_index":1584,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["this.updatelayers",{"_index":1226,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"components/ViewerComponent.html":{}}}],["this.updatemargin(position",{"_index":1866,"title":{},"body":{"components/ContentComponent.html":{}}}],["this.updatesources",{"_index":4424,"title":{},"body":{"components/ViewerComponent.html":{}}}],["this.updatestate((_view",{"_index":1265,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.updatestate((view",{"_index":1204,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.updatestate(view",{"_index":1215,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.updateviews",{"_index":1225,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.validatedrawers",{"_index":1783,"title":{},"body":{"components/ContainerComponent.html":{}}}],["this.valuerange",{"_index":2293,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.valuerange[0",{"_index":2294,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.valuerange[1",{"_index":2295,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["this.viewer",{"_index":4428,"title":{},"body":{"components/ViewerComponent.html":{}}}],["this.viewer.finalize",{"_index":4437,"title":{},"body":{"components/ViewerComponent.html":{}}}],["this.viewer.setsize(width",{"_index":4435,"title":{},"body":{"components/ViewerComponent.html":{}}}],["this.viewer?.clear",{"_index":4448,"title":{},"body":{"components/ViewerComponent.html":{}}}],["this.viewervisible",{"_index":3249,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["this.views",{"_index":1228,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.vivviews",{"_index":1195,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.vivviews.map(viv",{"_index":1230,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.vivviews.reduce((states",{"_index":1243,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["this.width",{"_index":3502,"title":{},"body":{"classes/InitializationState.html":{}}}],["this.zoomto(node",{"_index":567,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["those",{"_index":3598,"title":{},"body":{"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{}}}],["through",{"_index":3389,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["throw",{"_index":1770,"title":{},"body":{"components/ContainerComponent.html":{},"modules/CoreModule.html":{},"interfaces/OMEZarrInfo.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{}}}],["throwduplicatedrawerserror('end",{"_index":1799,"title":{},"body":{"components/ContainerComponent.html":{}}}],["throwduplicatedrawerserror('start",{"_index":1797,"title":{},"body":{"components/ContainerComponent.html":{}}}],["throwduplicatedrawerserror(position",{"_index":1766,"title":{},"body":{"components/ContainerComponent.html":{}}}],["thrown",{"_index":1765,"title":{},"body":{"components/ContainerComponent.html":{}}}],["throws",{"_index":1761,"title":{},"body":{"components/ContainerComponent.html":{},"injectables/ThemingService.html":{}}}],["thumb",{"_index":2826,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["thumbnails",{"_index":4532,"title":{},"body":{"changelog.html":{}}}],["thumbnailurl",{"_index":35,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{}}}],["thymus",{"_index":2677,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["tiff",{"_index":2771,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["tiff2",{"_index":3643,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/enumerations.html":{}}}],["tiffinfo",{"_index":1142,"title":{"interfaces/TiffInfo.html":{}},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"components/ViewerComponent.html":{}}}],["tiffinfo).url",{"_index":4426,"title":{},"body":{"components/ViewerComponent.html":{}}}],["tiffs",{"_index":2772,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["tiffs.length",{"_index":2781,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["time",{"_index":1290,"title":{},"body":{"components/CheckboxComponent.html":{},"interfaces/OldRuiData.html":{}}}],["timing",{"_index":1879,"title":{},"body":{"components/ContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{}}}],["tissue",{"_index":29,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"components/InfoDialogComponent.html":{},"interfaces/ListResult.html":{},"interfaces/OldRuiData.html":{},"interfaces/SearchableItem.html":{},"changelog.html":{}}}],["tissue_id",{"_index":2859,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["tissue_object_rotation",{"_index":3682,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["tissue_object_size",{"_index":3683,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["tissue_position_mass_point",{"_index":3684,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["tissue_position_vertices",{"_index":3685,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["tissues",{"_index":25,"title":{},"body":{"interfaces/AggregateResult.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DataSource.html":{},"interfaces/Filter.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"changelog.html":{}}}],["title",{"_index":3064,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/InfoDialogComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["tmc",{"_index":78,"title":{},"body":{"interfaces/AggregateResult.html":{},"interfaces/DataSource.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/Filter.html":{},"classes/HuBMAPEntity.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/SearchableItem.html":{},"changelog.html":{}}}],["todo",{"_index":752,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["toeuler",{"_index":974,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["toeuler(fromeuler(r_rad[1",{"_index":998,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["toggle",{"_index":290,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"modules/DrawerModule.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"changelog.html":{}}}],["toggle(opened",{"_index":3527,"title":{},"body":{"classes/InitializationState.html":{}}}],["togglebuttoncomponent",{"_index":377,"title":{"components/ToggleButtonComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"modules/DrawerModule.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"overview.html":{}}}],["toggled",{"_index":1862,"title":{},"body":{"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"classes/InitializationState.html":{},"components/ToggleButtonComponent.html":{}}}],["toggleexpanded(expanded",{"_index":3541,"title":{},"body":{"classes/InitializationState.html":{}}}],["togglefiltervisible",{"_index":2386,"title":{},"body":{"components/FiltersPopoverComponent.html":{}}}],["toggleoptions",{"_index":2138,"title":{},"body":{"components/DropdownComponent.html":{}}}],["toggles",{"_index":223,"title":{},"body":{"components/AppComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/InitializationState.html":{}}}],["togglescheme",{"_index":229,"title":{},"body":{"components/AppComponent.html":{}}}],["togglesliderpopover",{"_index":2212,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["tojsonld",{"_index":2515,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["token",{"_index":887,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"injectables/ThemingService.html":{}}}],["token=${servicetoken",{"_index":2780,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["tolowercase",{"_index":2714,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["tonumber",{"_index":2560,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["tonumber(agematch[1",{"_index":2720,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["tonumber(md.data_value",{"_index":2728,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["tool",{"_index":4530,"title":{},"body":{"changelog.html":{}}}],["tools",{"_index":3321,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["tooltip",{"_index":648,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["top",{"_index":279,"title":{},"body":{"components/AppComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["toradians",{"_index":967,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["tort",{"_index":4735,"title":{},"body":{"license.html":{}}}],["touch",{"_index":1804,"title":{},"body":{"components/ContainerComponent.html":{},"components/DualSliderComponent.html":{}}}],["track",{"_index":133,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["trackbyid",{"_index":3152,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["trackbyid(layer",{"_index":3167,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["tracks",{"_index":3813,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["transform",{"_index":1108,"title":{},"body":{"classes/CCFSpatialScene.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"classes/InitializationState.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/ToggleButtonComponent.html":{}}}],["transform.scale(scale",{"_index":1122,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["transformmatrix",{"_index":647,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["transition",{"_index":1839,"title":{},"body":{"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"classes/InitializationState.html":{},"components/SpinnerOverlayComponent.html":{}}}],["transition('closed",{"_index":3467,"title":{},"body":{"classes/InitializationState.html":{}}}],["transition('false",{"_index":1845,"title":{},"body":{"components/ContentComponent.html":{}}}],["translated",{"_index":3697,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["translatey",{"_index":2181,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{}}}],["translation",{"_index":4232,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["translation_units",{"_index":3751,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["transparency",{"_index":1541,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"classes/ImageViewerLayer.html":{},"interfaces/PureImageViewerLayer.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["transparency(value",{"_index":1590,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["transparencychanged",{"_index":1536,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["transparencyslideroptions",{"_index":1534,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["tree",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"changelog.html":{}}}],["tree'},{'name",{"_index":369,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["tree.component",{"_index":4012,"title":{},"body":{"components/OntologySelectionComponent.html":{},"modules/OntologyTreeModule.html":{}}}],["tree.module",{"_index":3765,"title":{},"body":{"modules/OntologyExplorationModule.html":{},"modules/OntologySelectionModule.html":{}}}],["tree.module.ts",{"_index":4034,"title":{},"body":{"modules/OntologyTreeModule.html":{}}}],["tree/ontology",{"_index":3764,"title":{},"body":{"modules/OntologyExplorationModule.html":{},"components/OntologySelectionComponent.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{}}}],["trigger",{"_index":1840,"title":{},"body":{"components/ContentComponent.html":{},"classes/InitializationState.html":{}}}],["trigger('expandcollapse",{"_index":3470,"title":{},"body":{"classes/InitializationState.html":{}}}],["trigger('fadeinout",{"_index":1842,"title":{},"body":{"components/ContentComponent.html":{}}}],["trigger('openclose",{"_index":3464,"title":{},"body":{"classes/InitializationState.html":{}}}],["triggered",{"_index":3803,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["triple",{"_index":820,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/HuBMAPEntity.html":{}}}],["true",{"_index":145,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"modules/ThemingModule.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["try",{"_index":2934,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{}}}],["tslib",{"_index":4668,"title":{},"body":{"dependencies.html":{}}}],["tslint",{"_index":633,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["tslint:disable",{"_index":544,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFSpatialGraph.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerLegendComponent.html":{},"classes/InitializationState.html":{},"interfaces/SpatialSceneNode.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["tslint:enable",{"_index":667,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{},"components/ViewerComponent.html":{}}}],["tuned",{"_index":4629,"title":{},"body":{"changelog.html":{}}}],["tuple",{"_index":1790,"title":{},"body":{"components/ContainerComponent.html":{}}}],["two",{"_index":4533,"title":{},"body":{"changelog.html":{}}}],["tx",{"_index":1027,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["tx.translate(t).rotatexyz(r).scale(s",{"_index":1005,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["type",{"_index":19,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"interfaces/ColorScheme.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/OldRuiData.html":{},"interfaces/OntologyNode.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/OntologySelection.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":4742,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1241,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"injectables/DataSourceService.html":{},"interfaces/ExtDeckProps.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/OMEZarrInfo.html":{},"components/OntologySearchComponent.html":{},"interfaces/TiffInfo.html":{}}}],["types",{"_index":872,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"classes/InitializationState.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/SpatialSceneNode-1.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/typealiases.html":{}}}],["types.ts",{"_index":4218,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["typessearch",{"_index":2801,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["typessearch.indexof('10x",{"_index":2804,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["typessearch.indexof('af",{"_index":2809,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["typessearch.indexof('codex",{"_index":2811,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["typessearch.indexof('imc",{"_index":2813,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["typessearch.indexof('lc",{"_index":2815,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["typing",{"_index":4597,"title":{},"body":{"changelog.html":{}}}],["typings",{"_index":638,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["u",{"_index":1148,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["u2cdk114886",{"_index":3400,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["ucsd",{"_index":2611,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["ufl",{"_index":2563,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["ui",{"_index":454,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"interfaces/SpatialSceneNode.html":{},"changelog.html":{}}}],["ui'},{'name",{"_index":325,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["ui.component",{"_index":791,"title":{},"body":{"modules/BodyUiModule.html":{}}}],["ui.component.html",{"_index":719,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["ui.component.scss",{"_index":718,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["ui.component.ts",{"_index":715,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["ui.component.ts:18",{"_index":728,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["ui.component.ts:23",{"_index":735,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["ui.component.ts:25",{"_index":743,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["ui.component.ts:27",{"_index":727,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["ui.component.ts:31",{"_index":739,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["ui.component.ts:71",{"_index":738,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["ui.module",{"_index":447,"title":{},"body":{"modules/BodyModule.html":{}}}],["ui.module.ts",{"_index":790,"title":{},"body":{"modules/BodyUiModule.html":{}}}],["ui.ts",{"_index":451,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["ui.ts:112",{"_index":496,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:119",{"_index":502,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:20",{"_index":479,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:21",{"_index":477,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:23",{"_index":484,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:24",{"_index":487,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:25",{"_index":490,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:27",{"_index":482,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:28",{"_index":486,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:29",{"_index":489,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:31",{"_index":478,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:32",{"_index":473,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:66",{"_index":505,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:80",{"_index":507,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:94",{"_index":500,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui/body",{"_index":446,"title":{},"body":{"modules/BodyModule.html":{},"components/BodyUiComponent.html":{},"modules/BodyUiModule.html":{}}}],["ui/src/lib/body",{"_index":450,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/SpatialSceneNode.html":{}}}],["uievent",{"_index":4120,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["unchecked",{"_index":1304,"title":{},"body":{"components/CheckboxComponent.html":{}}}],["undefined",{"_index":578,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"interfaces/ContentContainerChanged.html":{},"injectables/DataSourceService.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DualSliderComponent.html":{},"classes/HuBMAPEntity.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/OldRuiData.html":{},"interfaces/OntologyNode.html":{},"interfaces/OntologySelection.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/ViewerComponent.html":{}}}],["undefined).catch",{"_index":2874,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["under",{"_index":2114,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/InfoDialogComponent.html":{}}}],["underline",{"_index":2162,"title":{},"body":{"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/OntologySearchComponent.html":{}}}],["underlying",{"_index":1941,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["understanding",{"_index":3329,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["unique",{"_index":3171,"title":{},"body":{"components/ImageViewerLayersComponent.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OntologyNode.html":{}}}],["units",{"_index":4221,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["university",{"_index":3378,"title":{},"body":{"components/InfoDialogComponent.html":{},"index.html":{}}}],["unknown",{"_index":593,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ContentContainerChanged.html":{},"injectables/DataSourceService.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/FiltersContentComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/OldRuiData.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode.html":{}}}],["unknown.svg",{"_index":2817,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["unlike",{"_index":2105,"title":{},"body":{"interfaces/DefaultIconDefinition.html":{}}}],["unparsed",{"_index":2764,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["unpickable",{"_index":640,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["unsafe",{"_index":649,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialGraph.html":{},"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerLegendComponent.html":{},"classes/InitializationState.html":{},"interfaces/SpatialSceneNode.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["unselected",{"_index":3173,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["unset",{"_index":3063,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{},"components/ToggleButtonComponent.html":{}}}],["until",{"_index":2265,"title":{},"body":{"components/DualSliderComponent.html":{},"classes/InitializationState.html":{},"changelog.html":{}}}],["up",{"_index":1546,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"injectables/OntologySearchService.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchResult.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"changelog.html":{}}}],["update",{"_index":235,"title":{},"body":{"components/AppComponent.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"components/ImageViewerLayersComponent.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["updatechannelconfigs",{"_index":3000,"title":{},"body":{"classes/ImageViewer.html":{},"classes/PictureInPictureViewer.html":{}}}],["updatechannelconfigs(configs",{"_index":1217,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["updated",{"_index":1289,"title":{},"body":{"components/CheckboxComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerLayersComponent.html":{},"changelog.html":{}}}],["updatedeckprops",{"_index":3001,"title":{},"body":{"classes/ImageViewer.html":{},"classes/PictureInPictureViewer.html":{}}}],["updatedeckprops(props",{"_index":1247,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["updatefaded",{"_index":1809,"title":{},"body":{"components/ContentComponent.html":{}}}],["updatefilter",{"_index":1985,"title":{},"body":{"injectables/DataState.html":{},"components/FiltersContentComponent.html":{}}}],["updatefilter(filter",{"_index":1995,"title":{},"body":{"injectables/DataState.html":{},"interfaces/DataStateModel.html":{}}}],["updatefilter(value",{"_index":2356,"title":{},"body":{"components/FiltersContentComponent.html":{}}}],["updatelayer",{"_index":1537,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"injectables/ViewerState.html":{}}}],["updatelayer(id",{"_index":4470,"title":{},"body":{"injectables/ViewerState.html":{}}}],["updatelayer(updates",{"_index":1562,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{}}}],["updatelayers",{"_index":1232,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"components/ViewerComponent.html":{}}}],["updatemargin",{"_index":1810,"title":{},"body":{"components/ContentComponent.html":{}}}],["updatemargin(position",{"_index":1833,"title":{},"body":{"components/ContentComponent.html":{}}}],["updates",{"_index":1359,"title":{},"body":{"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContentComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/ToggleButtonComponent.html":{},"changelog.html":{}}}],["updatesources",{"_index":4370,"title":{},"body":{"components/ViewerComponent.html":{}}}],["updatestate",{"_index":1239,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["updatestate(args",{"_index":3030,"title":{},"body":{"classes/ImageViewer.html":{},"classes/PictureInPictureViewer.html":{}}}],["updateviews",{"_index":1229,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["updating",{"_index":3164,"title":{},"body":{"components/ImageViewerLayersComponent.html":{}}}],["upgraded",{"_index":4521,"title":{},"body":{"changelog.html":{}}}],["upgrades",{"_index":4600,"title":{},"body":{"changelog.html":{}}}],["upper",{"_index":2225,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["ur",{"_index":2665,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["ureter",{"_index":2678,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["url",{"_index":34,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/DataSource.html":{},"interfaces/DefaultIconDefinition.html":{},"interfaces/Filter.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/ImageViewerData.html":{},"interfaces/ListResult.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/SearchableItem.html":{},"interfaces/TiffInfo.html":{},"components/ViewerComponent.html":{}}}],["url).map(url",{"_index":4450,"title":{},"body":{"components/ViewerComponent.html":{}}}],["urls",{"_index":2913,"title":{},"body":{"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/ImageViewerPopoverComponent.html":{},"components/ViewerComponent.html":{}}}],["urls.filter(url",{"_index":4449,"title":{},"body":{"components/ViewerComponent.html":{}}}],["use",{"_index":1642,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"injectables/DataSourceService.html":{},"components/DualSliderComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/ResultsBrowserItemComponent.html":{},"license.html":{}}}],["used",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"components/CheckboxComponent.html":{},"interfaces/ColorScheme-1.html":{},"components/ColorSchemeContentsComponent.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"classes/FlatNode.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"interfaces/SearchResult.html":{},"components/ToggleButtonComponent.html":{},"changelog.html":{}}}],["useful",{"_index":1763,"title":{},"body":{"components/ContainerComponent.html":{}}}],["user",{"_index":1287,"title":{},"body":{"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/HeaderComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"changelog.html":{},"index.html":{}}}],["users",{"_index":4611,"title":{},"body":{"changelog.html":{}}}],["uses",{"_index":234,"title":{},"body":{"components/AppComponent.html":{}}}],["usevalue",{"_index":438,"title":{},"body":{"modules/AppModule.html":{},"modules/DrawerModule.html":{},"modules/ThemingModule.html":{}}}],["using",{"_index":4555,"title":{},"body":{"changelog.html":{}}}],["util/prefixes",{"_index":977,"title":{},"body":{"classes/CCFSpatialGraph.html":{},"classes/CCFSpatialScene.html":{},"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["utils",{"_index":860,"title":{},"body":{"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["utils.ts",{"_index":3675,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["uuid",{"_index":2604,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{}}}],["v",{"_index":2633,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["v.id",{"_index":2635,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["v0.5.0",{"_index":3676,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["v1.0.0",{"_index":3344,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["v1.selectionorder",{"_index":3208,"title":{},"body":{"components/ImageViewerLegendComponent.html":{}}}],["v2",{"_index":3207,"title":{},"body":{"components/ImageViewerLegendComponent.html":{}}}],["v2.selectionorder",{"_index":3209,"title":{},"body":{"components/ImageViewerLegendComponent.html":{}}}],["validatedrawers",{"_index":1703,"title":{},"body":{"components/ContainerComponent.html":{}}}],["validates",{"_index":1729,"title":{},"body":{"components/ContainerComponent.html":{}}}],["validation",{"_index":3814,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["value",{"_index":20,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"classes/CCFDatabase.html":{},"classes/CCFSpatialScene.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"classes/HuBMAPEntity.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"interfaces/IdObject.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ListResult.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"injectables/OntologyState.html":{},"classes/PictureInPictureViewer.html":{},"components/ResultsBrowserComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SearchableItem.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"interfaces/ValueObject.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"miscellaneous/enumerations.html":{}}}],["value.tolowercase",{"_index":3970,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["valuechanges",{"_index":3822,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["valuechanges.pipe",{"_index":3825,"title":{},"body":{"components/OntologySearchComponent.html":{}}}],["valueextractor",{"_index":2975,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["valueobject",{"_index":2962,"title":{"interfaces/ValueObject.html":{}},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["valueof",{"_index":3431,"title":{},"body":{"classes/InitializationState.html":{}}}],["valueorgenerator",{"_index":1146,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"miscellaneous/typealiases.html":{}}}],["valueproperty",{"_index":2974,"title":{},"body":{"interfaces/IdObject.html":{},"interfaces/JsonOntologyNode.html":{},"interfaces/ValueObject.html":{}}}],["valuerange",{"_index":2213,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["values",{"_index":1890,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"injectables/DataSourceService.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DualSliderComponent.html":{}}}],["van0003",{"_index":2577,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["van0005",{"_index":2586,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["van0006",{"_index":2590,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["van0007",{"_index":2593,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["van0008",{"_index":2596,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["van0011",{"_index":2599,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["van0012",{"_index":2601,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["vanderbilt",{"_index":2627,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["var",{"_index":321,"title":{},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["variable",{"_index":1902,"title":{},"body":{"interfaces/ContentContainerChanged.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"classes/InitializationState.html":{}}}],["variables",{"_index":1361,"title":{},"body":{"components/ColorBarComponent.html":{}}}],["version",{"_index":2883,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{},"changelog.html":{}}}],["vertical",{"_index":4452,"title":{},"body":{"components/ViewerComponent.html":{}}}],["vertices",{"_index":3688,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["via",{"_index":4422,"title":{},"body":{"components/ViewerComponent.html":{}}}],["video",{"_index":3373,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["view",{"_index":1134,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/SearchResult.html":{},"changelog.html":{}}}],["view.filterviewstate(argsgenerator(view",{"_index":1246,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["view.getlayers",{"_index":1236,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["view.id",{"_index":1205,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["view.initialviewstate",{"_index":1216,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["viewchild",{"_index":744,"title":{},"body":{"components/BodyUiComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ViewerComponent.html":{}}}],["viewchild('bodycanvas",{"_index":741,"title":{},"body":{"components/BodyUiComponent.html":{}}}],["viewchild('canvas",{"_index":4386,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewchild('content",{"_index":1661,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["viewchild('popover",{"_index":2263,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["viewchild(cdkportal",{"_index":2267,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["viewchild(ontologytreecomponent",{"_index":4009,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["viewchildren",{"_index":1754,"title":{},"body":{"components/ContainerComponent.html":{}}}],["viewchildren(contentcomponent",{"_index":1739,"title":{},"body":{"components/ContainerComponent.html":{}}}],["viewer",{"_index":48,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"classes/CCFDatabase.html":{},"interfaces/CCFDatabaseOptions.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource.html":{},"interfaces/DataSource-1.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"interfaces/Filter.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"classes/HuBMAPEntity.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"interfaces/ListResult.html":{},"interfaces/OMEZarrInfo.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchableItem.html":{},"components/SpinnerOverlayComponent.html":{},"interfaces/TiffInfo.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["viewer.channelnames",{"_index":4442,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer.close",{"_index":206,"title":{},"body":{"components/AppComponent.html":{}}}],["viewer.component",{"_index":4457,"title":{},"body":{"modules/ViewerModule.html":{}}}],["viewer.component.html",{"_index":4366,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer.component.scss",{"_index":4365,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer.loaders.some((loader",{"_index":4439,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer.module",{"_index":418,"title":{},"body":{"modules/AppModule.html":{}}}],["viewer.module.ts",{"_index":3221,"title":{},"body":{"modules/ImageViewerModule.html":{}}}],["viewer.open(data",{"_index":222,"title":{},"body":{"components/AppComponent.html":{}}}],["viewer.setsources(sources",{"_index":4438,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer.ts",{"_index":1131,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"miscellaneous/typealiases.html":{}}}],["viewer.ts:110",{"_index":3017,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:114",{"_index":3024,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:133",{"_index":3025,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:148",{"_index":3027,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:16",{"_index":4041,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["viewer.ts:168",{"_index":3016,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:169",{"_index":3015,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:171",{"_index":3026,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:181",{"_index":3032,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:185",{"_index":3029,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:195",{"_index":3031,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:208",{"_index":3028,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:212",{"_index":3018,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:231",{"_index":3023,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:24",{"_index":4056,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["viewer.ts:244",{"_index":3020,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:250",{"_index":3022,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:51",{"_index":4055,"title":{},"body":{"classes/PictureInPictureViewer.html":{}}}],["viewer.ts:64",{"_index":3010,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:66",{"_index":3034,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:67",{"_index":3036,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:68",{"_index":3007,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:69",{"_index":3004,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:71",{"_index":3038,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:72",{"_index":3040,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:73",{"_index":3006,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:74",{"_index":3005,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:76",{"_index":3042,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:77",{"_index":3044,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:78",{"_index":3003,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:80",{"_index":3013,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:81",{"_index":3012,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:82",{"_index":3009,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:83",{"_index":3008,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:84",{"_index":3011,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:86",{"_index":3002,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.ts:99",{"_index":3014,"title":{},"body":{"classes/ImageViewer.html":{}}}],["viewer.updatechannelconfigs(configs",{"_index":4447,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/image",{"_index":175,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ImageViewerAccordionComponent.html":{},"modules/ImageViewerAccordionModule.html":{},"components/ImageViewerContentComponent.html":{},"modules/ImageViewerContentModule.html":{},"components/ImageViewerLayersComponent.html":{},"modules/ImageViewerLayersModule.html":{},"components/ImageViewerLegendComponent.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"components/ImageViewerPopoverComponent.html":{},"modules/ImageViewerPopoverModule.html":{}}}],["viewer/src/lib/image",{"_index":1130,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"miscellaneous/typealiases.html":{}}}],["viewer/src/lib/loader.ts",{"_index":3635,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["viewer/src/lib/picture",{"_index":4038,"title":{},"body":{"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"miscellaneous/typealiases.html":{}}}],["viewer/viewer.module",{"_index":3222,"title":{},"body":{"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{}}}],["viewer/viewer.state",{"_index":4260,"title":{},"body":{"modules/StoreModule.html":{}}}],["viewer/viewer/viewer.component.ts",{"_index":4364,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:121",{"_index":4379,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:126",{"_index":4383,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:138",{"_index":4382,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:156",{"_index":4377,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:160",{"_index":4381,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:52",{"_index":4375,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:63",{"_index":4391,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:66",{"_index":4385,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:69",{"_index":4374,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:73",{"_index":4393,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:74",{"_index":4384,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:76",{"_index":4376,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:78",{"_index":4387,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:80",{"_index":4388,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:81",{"_index":4390,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:82",{"_index":4373,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.component.ts:86",{"_index":4378,"title":{},"body":{"components/ViewerComponent.html":{}}}],["viewer/viewer/viewer.module.ts",{"_index":4456,"title":{},"body":{"modules/ViewerModule.html":{}}}],["viewercomponent",{"_index":378,"title":{"components/ViewerComponent.html":{}},"body":{"components/AppComponent.html":{},"components/BodyUiComponent.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"components/OntologySearchComponent.html":{},"components/OntologySelectionComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"overview.html":{}}}],["viewermodule",{"_index":3220,"title":{"modules/ViewerModule.html":{}},"body":{"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/ViewerModule.html":{},"modules.html":{},"overview.html":{}}}],["viewerstate",{"_index":3230,"title":{"injectables/ViewerState.html":{}},"body":{"components/ImageViewerPopoverComponent.html":{},"modules/StoreModule.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["viewerstatemodel",{"_index":4491,"title":{"interfaces/ViewerStateModel.html":{}},"body":{"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["viewervisible",{"_index":3226,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["viewid",{"_index":1155,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["viewing",{"_index":3224,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["viewport",{"_index":1135,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"components/ResultsBrowserComponent.html":{}}}],["viewportid",{"_index":1262,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["views",{"_index":528,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"changelog.html":{}}}],["viewstate",{"_index":572,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["viewstates",{"_index":1237,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["viridis",{"_index":1494,"title":{},"body":{"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{}}}],["virtual",{"_index":4101,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["visibility",{"_index":1667,"title":{},"body":{"components/ColorSchemePopupComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/SpinnerOverlayComponent.html":{}}}],["visible",{"_index":1113,"title":{},"body":{"classes/CCFSpatialScene.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/SpatialSceneNode-1.html":{},"components/SpinnerOverlayComponent.html":{}}}],["visual",{"_index":4625,"title":{},"body":{"changelog.html":{}}}],["visualization",{"_index":4529,"title":{},"body":{"changelog.html":{}}}],["visualizing",{"_index":1426,"title":{},"body":{"interfaces/ColorScheme-1.html":{}}}],["vitessce",{"_index":3652,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"changelog.html":{}}}],["viv.getdeckglview",{"_index":1231,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["vivview",{"_index":1137,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{}}}],["vivviews",{"_index":1184,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"classes/PictureInPictureViewer.html":{}}}],["vocab",{"_index":2690,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["void",{"_index":205,"title":{},"body":{"components/AppComponent.html":{},"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"components/BodyUiComponent.html":{},"classes/CCFSpatialGraph.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ColorSchemePopupComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/DataSource-1.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"interfaces/IconDefinition.html":{},"injectables/IconRegistryState.html":{},"classes/ImageViewer.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"components/InfoDialogComponent.html":{},"classes/InitializationState.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"components/OntologySelectionComponent.html":{},"injectables/OntologyState.html":{},"interfaces/OntologyStateModel.html":{},"classes/PictureInPictureViewer.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"interfaces/SearchResult.html":{},"interfaces/SpatialSceneNode.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{},"injectables/ViewerState.html":{},"interfaces/ViewerStateModel.html":{}}}],["vu",{"_index":2825,"title":{},"body":{"classes/HuBMAPEntity.html":{},"interfaces/OldRuiData.html":{},"changelog.html":{}}}],["vu/${thumb",{"_index":2832,"title":{},"body":{"classes/HuBMAPEntity.html":{}}}],["w",{"_index":4229,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["w_rotation",{"_index":4230,"title":{},"body":{"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["wait",{"_index":3432,"title":{},"body":{"classes/InitializationState.html":{}}}],["waiting",{"_index":3054,"title":{},"body":{"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/ImageViewerLayersComponent.html":{}}}],["waits",{"_index":3551,"title":{},"body":{"classes/InitializationState.html":{}}}],["warning",{"_index":4451,"title":{},"body":{"components/ViewerComponent.html":{},"changelog.html":{}}}],["warranties",{"_index":4723,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":4719,"title":{},"body":{"license.html":{}}}],["way",{"_index":4125,"title":{},"body":{"components/ResultsBrowserComponent.html":{}}}],["webgl2",{"_index":1254,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{}}}],["webkit",{"_index":314,"title":{},"body":{"components/AppComponent.html":{},"components/ContainerComponent.html":{}}}],["week",{"_index":4632,"title":{},"body":{"changelog.html":{}}}],["weight",{"_index":1317,"title":{},"body":{"components/CheckboxComponent.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"components/InfoDialogComponent.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["well",{"_index":3163,"title":{},"body":{"components/ImageViewerLayersComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["whenever",{"_index":146,"title":{},"body":{"components/AppComponent.html":{},"components/CheckboxComponent.html":{},"injectables/DataState.html":{},"interfaces/DataStateModel.html":{},"classes/InitializationState.html":{}}}],["whether",{"_index":82,"title":{},"body":{"interfaces/AggregateResult.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"interfaces/ColorScheme-1.html":{},"interfaces/ColorSchemeSelection.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DualSliderComponent.html":{},"interfaces/Filter.html":{},"components/FiltersPopoverComponent.html":{},"classes/FlatNode.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerContentComponent.html":{},"interfaces/ImageViewerData.html":{},"classes/ImageViewerLayer.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"classes/InitializationState.html":{},"interfaces/ListResult.html":{},"interfaces/Message.html":{},"classes/MessageChannel.html":{},"injectables/MessageService.html":{},"interfaces/MessageServiceConfig.html":{},"interfaces/PureImageViewerLayer.html":{},"components/ResultsBrowserComponent.html":{},"interfaces/SearchableItem.html":{},"components/SpinnerOverlayComponent.html":{},"injectables/ThemingService.html":{},"components/ToggleButtonComponent.html":{},"license.html":{}}}],["white",{"_index":1314,"title":{},"body":{"components/CheckboxComponent.html":{},"components/InfoDialogComponent.html":{},"components/ResultsBrowserItemComponent.html":{}}}],["whole",{"_index":4627,"title":{},"body":{"changelog.html":{}}}],["wholebody",{"_index":1062,"title":{},"body":{"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["whose",{"_index":3790,"title":{},"body":{"components/OntologySearchComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["width",{"_index":281,"title":{},"body":{"components/AppComponent.html":{},"interfaces/ChannelConfig.html":{},"components/CheckboxComponent.html":{},"components/ColorBarComponent.html":{},"components/ColorPickerLauncherComponent.html":{},"components/ColorSchemeContentsComponent.html":{},"components/ContentComponent.html":{},"interfaces/ContentContainerChanged.html":{},"interfaces/DataSource-1.html":{},"interfaces/DrawerContainersChanged.html":{},"interfaces/DrawerInitialized.html":{},"interfaces/DrawerToggled.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"interfaces/ExtDeckProps.html":{},"components/FiltersContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/HeaderComponent.html":{},"classes/ImageViewer.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLayersComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/ImageViewerProps.html":{},"components/InfoButtonComponent.html":{},"classes/InitializationState.html":{},"components/OntologySearchComponent.html":{},"classes/PictureInPictureViewer.html":{},"interfaces/PictureInPictureViewerProps.html":{},"components/ResultsBrowserComponent.html":{},"components/ResultsBrowserItemComponent.html":{},"components/SchemeDropdownComponent.html":{},"components/SpinnerOverlayComponent.html":{},"components/ToggleButtonComponent.html":{},"components/ViewerComponent.html":{}}}],["widths",{"_index":3559,"title":{},"body":{"classes/InitializationState.html":{}}}],["window",{"_index":3256,"title":{},"body":{"components/ImageViewerPopoverComponent.html":{}}}],["window.innerheight",{"_index":1680,"title":{},"body":{"components/ColorSchemePopupComponent.html":{}}}],["window.open(this.data.resulturl",{"_index":4156,"title":{},"body":{"components/ResultsBrowserItemComponent.html":{}}}],["wireframe",{"_index":641,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["wireframes",{"_index":695,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["within",{"_index":4002,"title":{},"body":{"components/OntologySelectionComponent.html":{}}}],["without",{"_index":1741,"title":{},"body":{"components/ContainerComponent.html":{},"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{},"license.html":{}}}],["won't",{"_index":3920,"title":{},"body":{"injectables/OntologySearchService.html":{},"interfaces/SearchResult.html":{}}}],["work",{"_index":3376,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["workaround",{"_index":3569,"title":{},"body":{"classes/InitializationState.html":{}}}],["worker",{"_index":1947,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["worker('./data",{"_index":1949,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["wrap",{"_index":1320,"title":{},"body":{"components/CheckboxComponent.html":{},"injectables/DataSourceService.html":{},"components/ImageViewerAccordionComponent.html":{},"components/ImageViewerLegendComponent.html":{},"components/ResultsBrowserComponent.html":{}}}],["wrap(worker",{"_index":1952,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["wrapped",{"_index":1738,"title":{},"body":{"components/ContainerComponent.html":{}}}],["wrapper",{"_index":453,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"components/DropdownComponent.html":{},"components/DualSliderComponent.html":{},"components/OntologySearchComponent.html":{},"components/SchemeDropdownComponent.html":{}}}],["wrapper/container",{"_index":2321,"title":{},"body":{"components/DualSliderComponent.html":{}}}],["wrapping",{"_index":1742,"title":{},"body":{"components/ContainerComponent.html":{},"components/ContentComponent.html":{}}}],["x",{"_index":3689,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["x_dimension",{"_index":3721,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["x_rotation",{"_index":3735,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["x_scaling",{"_index":3730,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["x_translation",{"_index":3745,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["xyz",{"_index":3742,"title":{},"body":{"interfaces/OldRuiData.html":{}}}],["xyz').tovector",{"_index":1001,"title":{},"body":{"classes/CCFSpatialGraph.html":{}}}],["y",{"_index":551,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/OldRuiData.html":{},"components/ResultsBrowserComponent.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["y_dimension",{"_index":3723,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["y_rotation",{"_index":3737,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["y_scaling",{"_index":3731,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["y_translation",{"_index":3747,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["yes",{"_index":824,"title":{},"body":{"classes/CCFDatabase.html":{},"classes/CCFSpatialScene.html":{},"components/ColorSchemePopupComponent.html":{},"interfaces/DataSource.html":{},"injectables/DataSourceService.html":{},"classes/HuBMAPEntity.html":{},"components/OntologySearchComponent.html":{}}}],["youtube",{"_index":3374,"title":{},"body":{"components/InfoDialogComponent.html":{}}}],["z",{"_index":1615,"title":{},"body":{"components/ColorSchemeContentsComponent.html":{},"components/ContainerComponent.html":{},"components/ContentComponent.html":{},"components/FiltersPopoverComponent.html":{},"components/ImageViewerPopoverComponent.html":{},"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{},"components/SpinnerOverlayComponent.html":{},"components/ViewerComponent.html":{}}}],["z_dimension",{"_index":3725,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["z_rotation",{"_index":3739,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["z_scaling",{"_index":3732,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["z_translation",{"_index":3749,"title":{},"body":{"interfaces/OldRuiData.html":{},"interfaces/SpatialEntity.html":{},"interfaces/SpatialObjectReference.html":{},"interfaces/SpatialPlacement.html":{}}}],["zarr",{"_index":3639,"title":{},"body":{"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/enumerations.html":{}}}],["zarrinfo",{"_index":1143,"title":{},"body":{"interfaces/ChannelConfig.html":{},"interfaces/DataSource-1.html":{},"interfaces/ExtDeckProps.html":{},"classes/ImageViewer.html":{},"interfaces/ImageViewerProps.html":{},"interfaces/OMEZarrInfo.html":{},"interfaces/TiffInfo.html":{},"miscellaneous/typealiases.html":{}}}],["zone.js",{"_index":4670,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":403,"title":{},"body":{"modules/AppModule.html":{},"modules/BodyModule.html":{},"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"modules/BodyUiModule.html":{},"modules/CheckboxModule.html":{},"modules/ColorBarModule.html":{},"modules/ColorPickerLauncherModule.html":{},"modules/ColorSchemeContentsModule.html":{},"modules/ColorSchemePopupModule.html":{},"modules/CoreModule.html":{},"modules/DrawerModule.html":{},"modules/DropdownModule.html":{},"modules/DualSliderModule.html":{},"modules/FiltersContentModule.html":{},"modules/FiltersPopoverModule.html":{},"modules/HeaderModule.html":{},"modules/ImageViewerAccordionModule.html":{},"modules/ImageViewerContentModule.html":{},"modules/ImageViewerLayersModule.html":{},"modules/ImageViewerLegendModule.html":{},"modules/ImageViewerModule.html":{},"modules/ImageViewerPopoverModule.html":{},"modules/InfoButtonModule.html":{},"modules/InfoDialogModule.html":{},"modules/OntologyExplorationModule.html":{},"modules/OntologySearchModule.html":{},"modules/OntologySelectionModule.html":{},"modules/OntologyTreeModule.html":{},"modules/ResultsBrowserItemModule.html":{},"modules/ResultsBrowserModule.html":{},"modules/SchemeDropdownModule.html":{},"modules/SpinnerOverlayModule.html":{},"modules/ThemingModule.html":{},"components/ViewerComponent.html":{},"modules/ViewerModule.html":{},"overview.html":{}}}],["zoombasedopacity",{"_index":645,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}],["zoomopacity",{"_index":561,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/SpatialSceneNode.html":{}}}],["zoomto",{"_index":469,"title":{},"body":{"classes/BodyUI.html":{}}}],["zoomto(node",{"_index":506,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{}}}],["zoomtoonload",{"_index":646,"title":{},"body":{"classes/BodyUILayer.html":{},"classes/CCFSpatialScene.html":{},"interfaces/SpatialSceneNode.html":{},"interfaces/SpatialSceneNode-1.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AggregateResult.html":{"url":"interfaces/AggregateResult.html","title":"interface - AggregateResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AggregateResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Aggregate query result. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        label\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Aggregate value. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Queried field. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AggregateResult {\n  /** Queried field. */\n  label: string;\n  /** Aggregate value. */\n  count: string | number;\n}\n\n/** Result for list of tissues. */\nexport interface ListResult {\n  /** Identifier. */\n  '@id': string;\n  /** Type string. */\n  '@type': 'ListResult';\n  /** Identifier. */\n  id: string;\n  /** Tissue label. */\n  label: string;\n  /** Short description. */\n  shortInfo?: string[];\n  /** Small icon url. */\n  thumbnailUrl?: string;\n  /** Url for data download. */\n  downloadUrl?: string;\n  /** Description of data download. */\n  downloadTooltip?: string;\n  /** Result url. */\n  resultUrl?: string;\n  /** Type of result url. */\n  resultType?: 'external_link' | 'local_link' | 'image_viewer';\n  /** If the result should be highlighted */\n  highlighted?: boolean;\n}\n\n/** Data for image viewer display. */\nexport interface ImageViewerData {\n  /** Identifier. */\n  '@id': string;\n  /** Type string. */\n  '@type': 'ImageViewerData';\n  /** Identifier. */\n  id: string;\n  /** Image label. */\n  label: string;\n  /** Containing organ name. */\n  organName: string;\n  /** Other metadata. */\n  metadata: { label: string, value: string }[];\n}\n\n/** Item that can be searched for. */\nexport interface SearchableItem {\n  /** Identifier. */\n  id: string;\n  /** Gender. */\n  sex?: 'Male' | 'Female';\n  /** Age. */\n  age?: number;\n  /** BMI. */\n  bmi?: number;\n  /** Ontology terms. */\n  ontologyTerms?: Set;\n}\n\n/** Options applied during queries. */\nexport interface Filter {\n  /** Gender. */\n  sex: 'Both' | 'Male' | 'Female';\n  /** Age range. */\n  ageRange: [number, number];\n  /** BMI range. */\n  bmiRange: [number, number];\n  /** TMC. */\n  tmc: string[];\n  /** Technologies. */\n  technologies: string[];\n  /** Ontology terms. */\n  ontologyTerms: string[];\n  /** Entities to be highlighted */\n  highlightedEntities?: string[];\n  /** Whether it has a spatial entity. */\n  hasSpatialEntity?: boolean;\n  /** Include optional debugging information */\n  debug?: boolean;\n}\n\n/** Backend query interface. */\nexport interface DataSource {\n  /** Query list items. */\n  getListResults(filter?: Filter): Promise;\n  /** Query aggregate items. */\n  getAggregateResults(filter?: Filter): Promise;\n  /** Query a specific image. */\n  getImageViewerData(iri: string): Promise;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        This is the main angular component that all the other components branch off from.\nIt is in charge of the header and drawer components who have many sub-components.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ontologySelectionLabel\n                            \n                            \n                                    Readonly\n                                ontologyTerms$\n                            \n                            \n                                    Readonly\n                                spinnerActive$\n                            \n                            \n                                string\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ontologySelectionLabel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'body'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:28\n                            \n                        \n\n                \n                    \n                        Used to keep track of the ontology label to be passed down to the\nresults-browser component.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            ontologyTerms$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            spinnerActive$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.data.queryStatus$.pipe(\n    map(state => state === DataQueryState.Running)\n  )\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:31\n                            \n                        \n\n                \n                    \n                        Emits true whenever the overlay spinner should activate. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            string\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/app/app.component.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { ListResult } from 'ccf-database';\nimport { Observable } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\n\nimport { OntologySelection } from './core/models/ontology-selection';\nimport { DataSourceService } from './core/services/data-source/data-source.service';\nimport { ThemingService } from './core/services/theming/theming.service';\nimport { DataQueryState, DataState } from './core/store/data/data.state';\nimport { FiltersPopoverComponent } from './modules/filters/filters-popover/filters-popover.component';\nimport { ImageViewerPopoverComponent } from './modules/image-viewer/image-viewer-popover/image-viewer-popover.component';\nimport { DrawerComponent } from './shared/components/drawer/drawer/drawer.component';\n\n/**\n * This is the main angular component that all the other components branch off from.\n * It is in charge of the header and drawer components who have many sub-components.\n */\n@Component({\n  selector: 'ccf-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  /**\n   * Used to keep track of the ontology label to be passed down to the\n   * results-browser component.\n   */\n  ontologySelectionLabel = 'body';\n\n  /** Emits true whenever the overlay spinner should activate. */\n  readonly spinnerActive$ = this.data.queryStatus$.pipe(\n    map(state => state === DataQueryState.Running)\n  );\n\n  readonly ontologyTerms$: Observable;\n\n  /**\n   * Creates an instance of app component.\n   *\n   * @param data The data state.\n   */\n  constructor(readonly data: DataState, readonly dataSourceService: DataSourceService, readonly theming: ThemingService) {\n    data.listData$.subscribe();\n    data.aggregateData$.subscribe();\n    data.termOccurencesData$.subscribe();\n    this.ontologyTerms$ = data.filter$.pipe(pluck('ontologyTerms'));\n  }\n\n  /**\n   * Resets the drawers and filter components to their default state.\n   * @param left The left drawer component gets passed in so we can call it's methods to control it's state\n   * @param right The right drawer component gets passed in so we can call it's methods to control it's state\n   * @param filterbox The filter's popover component gets passed in so we can control it's popover's state\n   */\n  reset(\n    left: DrawerComponent,\n    right: DrawerComponent,\n    filterbox: FiltersPopoverComponent,\n    viewer: ImageViewerPopoverComponent\n  ): void {\n    viewer.close();\n    left.open();\n    left.closeExpanded();\n    right.open();\n    right.closeExpanded();\n    filterbox.removeBox();\n  }\n\n  /**\n   * Fetches relevant data from the database and calls the open function on the image viewer with the data\n   * @param viewer The image viewer component\n   * @param iri URL containing the image data\n   */\n  openViewer(viewer: ImageViewerPopoverComponent, result: ListResult): void {\n    const source = this.dataSourceService.getImageViewerData(result['@id']);\n    source.subscribe(data => viewer.open(data, result));\n  }\n\n  /**\n   * Toggles scheme between light and dark mode\n   */\n  toggleScheme(): void {\n    this.theming.setTheme(this.theming.getTheme() === 'light-theme' ? 'dark-theme' : 'light-theme');\n  }\n\n  /**\n   * Captures changes in the ontologySelection and uses them to update the results-browser label\n   * and the filter object in the data store.\n   * @param ontologySelection the list of currently selected organ nodes\n   */\n  ontologySelected(ontologySelection: OntologySelection[]): void {\n    if (!!ontologySelection) {\n      this.data.updateFilter({ ontologyTerms: ontologySelection.map(selection => selection.id)});\n      this.ontologySelectionLabel = this.createSelectionLabel(ontologySelection);\n      return;\n    }\n\n    this.data.updateFilter({ ontologyTerms: [] });\n    this.ontologySelectionLabel = '';\n  }\n\n  /**\n   * Creates selection label for the results-browser to display based on an\n   * array of selected ontology nodes.\n   */\n  createSelectionLabel(ontolgySelection: OntologySelection[]): string{\n    if (ontolgySelection.length === 0){\n      return '';\n    }\n\n    if (ontolgySelection.length === 1){\n      return ontolgySelection[0].label;\n    }\n\n    let selectionString = '';\n    ontolgySelection.forEach((selection, index) => {\n      selectionString += selection.label;\n\n      // Don't add a comma if it's the last item in the array.\n      if (index  0;\n  }\n}\n\n    \n\n    \n        \n  \n  \n  \n\n  \n    \n      \n      \n    \n    \n      \n        \n        \n          {{ right.expanded ? 'fullscreen_exit' : 'fullscreen' }}\n        \n        \n          {{ theming.getTheme() === 'light-theme' ? 'brightness_2' : 'brightness_5' }}\n        \n      \n      \n      \n    \n    \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                .ccf-app {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n\n  ccf-drawer-container {\n    flex-grow: 1;\n    position: fixed;\n    top: 4rem;\n    height: 100%;\n    width: 100%;\n    opacity: 1;\n\n    ccf-drawer-content {\n      overflow: hidden;\n      margin-top: 1.5rem;\n      margin-bottom: 1.5rem;\n    }\n\n    ccf-drawer {\n      width: 28.5rem;\n\n      .drawer-icons {\n        display: flex;\n        padding-left: 1.5rem;\n\n        .scheme-toggle {\n          mat-icon {\n            font-size: 2rem !important;\n          }\n        }\n\n        .button {\n          width: 3rem;\n          height: 3rem;\n          padding: 0;\n          background: none;\n          border: none;\n          cursor: pointer;\n          outline: none;\n\n          mat-icon {\n            width: 100%;\n            height: 100%;\n            font-size: 2.5rem;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n          }\n        }\n      }\n    }\n\n    .left-drawer {\n      ::ng-deep .cff-drawer-inner-container {\n        height: calc(100% - 5.5rem);\n      }\n    }\n  }\n}\n\n::-webkit-scrollbar {\n  width: 7.5rem;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                {{ right.expanded ? \\'fullscreen_exit\\' : \\'fullscreen\\' }}                          {{ theming.getTheme() === \\'light-theme\\' ? \\'brightness_2\\' : \\'brightness_5\\' }}                                              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nBodyModule\n\nBodyModule\n\nAppModule -->\n\nBodyModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nDrawerModule\n\nDrawerModule\n\nAppModule -->\n\nDrawerModule->AppModule\n\n\n\n\n\nDualSliderModule\n\nDualSliderModule\n\nAppModule -->\n\nDualSliderModule->AppModule\n\n\n\n\n\nFiltersPopoverModule\n\nFiltersPopoverModule\n\nAppModule -->\n\nFiltersPopoverModule->AppModule\n\n\n\n\n\nImageViewerModule\n\nImageViewerModule\n\nAppModule -->\n\nImageViewerModule->AppModule\n\n\n\n\n\nInfoDialogModule\n\nInfoDialogModule\n\nAppModule -->\n\nInfoDialogModule->AppModule\n\n\n\n\n\nOntologyExplorationModule\n\nOntologyExplorationModule\n\nAppModule -->\n\nOntologyExplorationModule->AppModule\n\n\n\n\n\nResultsBrowserModule\n\nResultsBrowserModule\n\nAppModule -->\n\nResultsBrowserModule->AppModule\n\n\n\n\n\nSpinnerOverlayModule\n\nSpinnerOverlayModule\n\nAppModule -->\n\nSpinnerOverlayModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BodyModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            DrawerModule\n                        \n                        \n                            DualSliderModule\n                        \n                        \n                            FiltersPopoverModule\n                        \n                        \n                            ImageViewerModule\n                        \n                        \n                            InfoDialogModule\n                        \n                        \n                            OntologyExplorationModule\n                        \n                        \n                            ResultsBrowserModule\n                        \n                        \n                            SpinnerOverlayModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppComponent } from './app.component';\nimport { CoreModule } from './core/core.module';\nimport { BodyModule } from './modules/body/body.module';\nimport { FiltersPopoverModule } from './modules/filters/filters-popover/filters-popover.module';\nimport { ImageViewerModule } from './modules/image-viewer/image-viewer.module';\nimport { InfoDialogModule } from './modules/info/info-dialog/info-dialog.module';\nimport { OntologyExplorationModule } from './modules/ontology-exploration/ontology-exploration.module';\nimport { DrawerModule } from './shared/components/drawer/drawer.module';\nimport { DualSliderModule } from './shared/components/dual-slider/dual-slider.module';\nimport { ResultsBrowserModule } from './modules/results-browser/results-browser/results-browser.module';\nimport { SpinnerOverlayModule } from './shared/components/spinner-overlay/spinner-overlay.module';\n\nimport { DEFAULT_THEME } from '../app/core/services/theming/theming.service';\n\n@NgModule({\n  imports: [\n    BrowserAnimationsModule,\n    BrowserModule,\n    CoreModule,\n    DrawerModule,\n    FiltersPopoverModule,\n    OntologyExplorationModule,\n    InfoDialogModule,\n    MatIconModule,\n    DualSliderModule,\n    ResultsBrowserModule,\n    SpinnerOverlayModule,\n    ImageViewerModule,\n    BodyModule\n  ],\n  declarations: [AppComponent],\n  providers: [{provide: DEFAULT_THEME, useValue: 'light-theme'}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BodyModule.html":{"url":"modules/BodyModule.html","title":"module - BodyModule","body":"\n                   \n\n\n\n\n    Modules\n    BodyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BodyModule\n\n\n\ncluster_BodyModule_imports\n\n\n\ncluster_BodyModule_exports\n\n\n\n\nBodyUiModule\n\nBodyUiModule\n\n\n\nBodyModule\n\nBodyModule\n\nBodyModule -->\n\nBodyUiModule->BodyModule\n\n\n\n\n\nBodyUiModule \n\nBodyUiModule \n\nBodyUiModule  -->\n\nBodyModule->BodyUiModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/body/body.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            BodyUiModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BodyUiModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BodyUiModule } from './body-ui/body-ui.module';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    BodyUiModule\n  ],\n  exports: [\n    BodyUiModule\n  ]\n})\nexport class BodyModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BodyUI.html":{"url":"classes/BodyUI.html","title":"class - BodyUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BodyUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-body-ui/src/lib/body-ui.ts\n        \n\n            \n                Description\n            \n            \n                A convenience wrapper class for the CCF Body UI\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                bodyUILayer\n                            \n                            \n                                    Private\n                                    Optional\n                                cursor\n                            \n                            \n                                deck\n                            \n                            \n                                    Private\n                                    Optional\n                                lastHovered\n                            \n                            \n                                    Readonly\n                                nodeClick$\n                            \n                            \n                                    Private\n                                    Readonly\n                                nodeClickSubject\n                            \n                            \n                                    Readonly\n                                nodeHoverStart$\n                            \n                            \n                                    Private\n                                    Readonly\n                                nodeHoverStartSubject\n                            \n                            \n                                    Readonly\n                                nodeHoverStop$\n                            \n                            \n                                    Private\n                                    Readonly\n                                nodeHoverStopSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _onClick\n                            \n                            \n                                    Private\n                                _onHover\n                            \n                            \n                                    Private\n                                _onViewStateChange\n                            \n                            \n                                setScene\n                            \n                            \n                                zoomTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(deckProps: Partial)\n                    \n                \n                        \n                            \n                                Defined in projects/ccf-body-ui/src/lib/body-ui.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        deckProps\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            bodyUILayer\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new BodyUILayer({})\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Optional\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deck\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Deck\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Optional\n                            lastHovered\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SpatialSceneNode\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            nodeClick$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.nodeClickSubject.pipe(share())\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            nodeClickSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            nodeHoverStart$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.nodeHoverStartSubject.pipe(share())\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            nodeHoverStartSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            nodeHoverStop$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.nodeHoverStopSubject.pipe(share())\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            nodeHoverStopSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:25\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            _onClick\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _onClick(e: literal type, mouseEvent: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @bind()\n                \n            \n\n            \n                \n                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mouseEvent\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            _onHover\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _onHover(e: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @bind()\n                \n            \n\n            \n                \n                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            _onViewStateChange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _onViewStateChange(event: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @bind()\n                \n            \n\n            \n                \n                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setScene\n                        \n                        \n                    \n                \n            \n            \n                \nsetScene(data: SpatialSceneNode[])\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            SpatialSceneNode[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            zoomTo\n                        \n                        \n                    \n                \n            \n            \n                \nzoomTo(node: SpatialSceneNode)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-body-ui/src/lib/body-ui.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                SpatialSceneNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AmbientLight, Deck, LightingEffect, OrbitView } from '@deck.gl/core';\nimport { Matrix4 } from '@math.gl/core';\nimport bind from 'bind-decorator';\nimport { Subject } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\nimport { BodyUILayer, SpatialSceneNode } from './body-ui-layer';\n\n\nexport interface BodyUIProps {\n  id: string;\n  canvas: string | HTMLCanvasElement;\n  parent: HTMLElement;\n}\n\n/**\n * A convenience wrapper class for the CCF Body UI\n */\nexport class BodyUI {\n  deck: Deck;\n  private readonly bodyUILayer = new BodyUILayer({});\n\n  private readonly nodeClickSubject = new Subject();\n  private readonly nodeHoverStartSubject = new Subject();\n  private readonly nodeHoverStopSubject = new Subject();\n\n  readonly nodeClick$ = this.nodeClickSubject.pipe(share());\n  readonly nodeHoverStart$ = this.nodeHoverStartSubject.pipe(share());\n  readonly nodeHoverStop$ = this.nodeHoverStopSubject.pipe(share());\n\n  private cursor?: string;\n  private lastHovered?: SpatialSceneNode;\n\n  constructor(deckProps: Partial) {\n    const props = {\n      ...deckProps,\n      effects: [\n        new LightingEffect({\n          ambientLight: new AmbientLight({\n            color: [255, 255, 255],\n            intensity: 10.0\n          })\n        })\n      ],\n      views: [ new OrbitView({}) ],\n      controller: true,\n      layers: [ this.bodyUILayer ],\n      onHover: this._onHover,\n      onClick: this._onClick,\n      onViewStateChange: this._onViewStateChange,\n      getCursor: (e: {isDragging: boolean}) => this.cursor || (e.isDragging ? 'grabbing' : 'grab')\n    };\n    // tslint:disable-next-line: no-any\n    this.deck = new Deck(props as any);\n    this.deck.setProps({viewState: {\n      orbitAxis: 'Y',\n      minRotationX: -15,\n      maxRotationX: 15,\n      target: [0.5, 0.5, 0],\n      rotationX: 0,\n      rotationOrbit: 0,\n      zoom: 9.5\n    }});\n  }\n\n  setScene(data: SpatialSceneNode[]): void {\n    if (data?.length > 0) {\n      const zoomOpacity = (this.bodyUILayer.state as {zoomOpacity: boolean}).zoomOpacity;\n      let didZoom = false;\n      for (const node of data) {\n        if (node.zoomToOnLoad) {\n          this.zoomTo(node);\n          didZoom = true;\n        }\n      }\n      this.bodyUILayer.setState({data, zoomOpacity: didZoom ? 0.5 : zoomOpacity});\n    }\n  }\n\n  zoomTo(node: SpatialSceneNode): void {\n    const matrix = new Matrix4(node.transformMatrix);\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        target: matrix.getTranslation(),\n        rotationX: 0,\n        rotationOrbit: 0,\n        zoom: 11.5,\n      }\n    });\n  }\n\n  @bind\n  private _onHover(e: {picked: boolean, object: SpatialSceneNode}): void {\n    const { lastHovered } = this;\n    this.cursor = e.picked ? 'pointer' : undefined;\n    if (e.picked && e.object && e.object['@id']) {\n      if (lastHovered !== e.object) {\n        if (lastHovered) {\n          this.nodeHoverStopSubject.next(lastHovered);\n        }\n        this.lastHovered = e.object;\n        this.nodeHoverStartSubject.next(e.object);\n      }\n    } else if (lastHovered) {\n      this.nodeHoverStopSubject.next(lastHovered);\n      this.lastHovered = undefined;\n    }\n  }\n\n  @bind\n  private _onClick(e: {picked: boolean, object: SpatialSceneNode}, mouseEvent: { srcEvent: { ctrlKey: boolean; }; }): void {\n    if (e.picked && e.object && e.object['@id']) {\n      this.nodeClickSubject.next({node: e.object, ctrlClick: mouseEvent?.srcEvent?.ctrlKey ?? undefined});\n    }\n  }\n\n  @bind\n  private _onViewStateChange(event: { interactionState: { isZooming: boolean; }; viewState: { zoom: number; } }): void {\n    if (event.interactionState?.isZooming) {\n      const currentState = this.bodyUILayer.state as {zoomOpacity: number, data: unknown};\n      const zoomOpacity = Math.min(Math.max(1 - (event.viewState.zoom - 8.9) / 3, 0.2), 1.0);\n      if (currentState.zoomOpacity !== zoomOpacity) {\n        this.bodyUILayer.setState({data: currentState.data, zoomOpacity});\n      }\n    }\n    this.deck.setProps({viewState: { ...event.viewState }});\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BodyUILayer.html":{"url":"classes/BodyUILayer.html","title":"class - BodyUILayer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BodyUILayer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-body-ui/src/lib/body-ui-layer.ts\n        \n\n\n            \n                Extends\n            \n            \n                    CompositeLayer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                layerName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPickingInfo\n                            \n                            \n                                initializeState\n                            \n                            \n                                renderLayers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            layerName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'BodyUILayer'\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-body-ui/src/lib/body-ui-layer.ts:72\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPickingInfo\n                        \n                        \n                    \n                \n            \n            \n                \ngetPickingInfo(e: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-body-ui/src/lib/body-ui-layer.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initializeState\n                        \n                        \n                    \n                \n            \n            \n                \ninitializeState()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-body-ui/src/lib/body-ui-layer.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            renderLayers\n                        \n                        \n                    \n                \n            \n            \n                \nrenderLayers()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-body-ui/src/lib/body-ui-layer.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown[]\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CompositeLayer, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { ScenegraphLayer, SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport { load, registerLoaders } from '@loaders.gl/core';\nimport { DracoLoader, DracoWorkerLoader } from '@loaders.gl/draco';\nimport { GLTFLoader } from '@loaders.gl/gltf';\nimport { CubeGeometry } from '@luma.gl/core';\nimport { Matrix4 } from '@math.gl/core';\n\n\n// Programmers Note: had to disable tslint in a few places due to deficient typings.\n\nexport interface SpatialSceneNode {\n  '@id': string;\n  '@type': string;\n  entityId?: string;\n  unpickable?: boolean;\n  wireframe?: boolean;\n  _lighting?: string;\n  scenegraph?: string;\n  scenegraphNode?: string;\n  zoomBasedOpacity?: boolean;\n  zoomToOnLoad?: boolean;\n  color?: [number, number, number, number];\n  transformMatrix: Matrix4;\n  tooltip: string;\n}\n\n// tslint:disable: no-unsafe-any\nasync function loadGLTF(model: SpatialSceneNode): Promise {\n  const gltf = await load(model.scenegraph as string, GLTFLoader, {DracoLoader, decompress: true, postProcess: true});\n\n  const scenegraphNode = model.scenegraphNode ? gltf.nodes?.find((n) => n.name === model.scenegraphNode) : undefined;\n  if (scenegraphNode) {\n    if (!scenegraphNode.rotation && gltf.scene?.nodes?.length > 0) {\n      scenegraphNode.rotation = gltf.scene.nodes[gltf.scene.nodes.length-1].rotation;\n    }\n    gltf.scene = {\n      id: 'scene-1',\n      name: 'Scene',\n      nodes: [scenegraphNode]\n    };\n    gltf.scenes = [gltf.scene, ...gltf.scenes];\n  }\n  return gltf;\n}\n// tslint:enable: no-unsafe-any\n\nfunction meshLayer(id: string, data: SpatialSceneNode[], options: {[key: string]: unknown}): SimpleMeshLayer | undefined {\n  if (!data || data.length === 0) {\n    return undefined;\n  } else {\n    return new SimpleMeshLayer({\n      ...{\n        id,\n        pickable: true,\n        autoHighlight: true,\n        highlightColor: [30, 136, 229, 255],\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        data,\n        // tslint:disable-next-line: no-unsafe-any\n        mesh: new CubeGeometry(),\n        wireframe: false,\n        getTransformMatrix: (d) => (d as {transformMatrix: number[][]}).transformMatrix,\n        getColor: (d) => (d as {color: [number, number, number, number]}).color || [255, 255, 255, 0.9*255]\n      },\n      ...options\n    });\n  }\n}\n\nexport class BodyUILayer extends CompositeLayer {\n  static readonly layerName = 'BodyUILayer';\n\n  initializeState(): void {\n    const { data } = this.props;\n    this.setState({data: data || [], zoomOpacity: 0.8});\n\n    // tslint:disable-next-line: no-unsafe-any\n    registerLoaders([DracoWorkerLoader, GLTFLoader]);\n  }\n\n  renderLayers(): unknown[] {\n    const state = this.state as {data: SpatialSceneNode[], zoomOpacity: number};\n    const cubes = state.data.filter(d => !d.scenegraph && !d.wireframe);\n    const wireframes = state.data.filter(d => !d.scenegraph && d.wireframe);\n    const models = state.data.filter(d => !!d.scenegraph);\n\n    return [\n      meshLayer('cubes', cubes, {wireframe: false}),\n      meshLayer('wireframes', wireframes, {wireframe: true, pickable: false}),\n      ...models.map((model) =>\n        new ScenegraphLayer({\n          ...{\n            id: 'models-' + model['@id'],\n            opacity: model.zoomBasedOpacity ? state.zoomOpacity : 1.0,\n            pickable: !model.unpickable,\n            coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n            data: [model],\n            scenegraph: model.scenegraphNode ? loadGLTF(model) : model.scenegraph,\n            _lighting: model._lighting,  // 'pbr' | undefined\n            getTransformMatrix: model.transformMatrix,\n            getColor: model.color || [0, 255, 0, 0.5*255],\n          }\n        })\n      )\n    ].filter(l => !!l);\n  }\n\n  getPickingInfo(e: {info: object}): unknown {\n    return e.info;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BodyUIProps.html":{"url":"interfaces/BodyUIProps.html","title":"interface - BodyUIProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BodyUIProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-body-ui/src/lib/body-ui.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        canvas\n                                \n                                \n                                        id\n                                \n                                \n                                        parent\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        canvas\n                                    \n                                \n                                \n                                    \n                                        canvas:     string | HTMLCanvasElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | HTMLCanvasElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                    \n                                \n                                \n                                    \n                                        parent:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AmbientLight, Deck, LightingEffect, OrbitView } from '@deck.gl/core';\nimport { Matrix4 } from '@math.gl/core';\nimport bind from 'bind-decorator';\nimport { Subject } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\nimport { BodyUILayer, SpatialSceneNode } from './body-ui-layer';\n\n\nexport interface BodyUIProps {\n  id: string;\n  canvas: string | HTMLCanvasElement;\n  parent: HTMLElement;\n}\n\n/**\n * A convenience wrapper class for the CCF Body UI\n */\nexport class BodyUI {\n  deck: Deck;\n  private readonly bodyUILayer = new BodyUILayer({});\n\n  private readonly nodeClickSubject = new Subject();\n  private readonly nodeHoverStartSubject = new Subject();\n  private readonly nodeHoverStopSubject = new Subject();\n\n  readonly nodeClick$ = this.nodeClickSubject.pipe(share());\n  readonly nodeHoverStart$ = this.nodeHoverStartSubject.pipe(share());\n  readonly nodeHoverStop$ = this.nodeHoverStopSubject.pipe(share());\n\n  private cursor?: string;\n  private lastHovered?: SpatialSceneNode;\n\n  constructor(deckProps: Partial) {\n    const props = {\n      ...deckProps,\n      effects: [\n        new LightingEffect({\n          ambientLight: new AmbientLight({\n            color: [255, 255, 255],\n            intensity: 10.0\n          })\n        })\n      ],\n      views: [ new OrbitView({}) ],\n      controller: true,\n      layers: [ this.bodyUILayer ],\n      onHover: this._onHover,\n      onClick: this._onClick,\n      onViewStateChange: this._onViewStateChange,\n      getCursor: (e: {isDragging: boolean}) => this.cursor || (e.isDragging ? 'grabbing' : 'grab')\n    };\n    // tslint:disable-next-line: no-any\n    this.deck = new Deck(props as any);\n    this.deck.setProps({viewState: {\n      orbitAxis: 'Y',\n      minRotationX: -15,\n      maxRotationX: 15,\n      target: [0.5, 0.5, 0],\n      rotationX: 0,\n      rotationOrbit: 0,\n      zoom: 9.5\n    }});\n  }\n\n  setScene(data: SpatialSceneNode[]): void {\n    if (data?.length > 0) {\n      const zoomOpacity = (this.bodyUILayer.state as {zoomOpacity: boolean}).zoomOpacity;\n      let didZoom = false;\n      for (const node of data) {\n        if (node.zoomToOnLoad) {\n          this.zoomTo(node);\n          didZoom = true;\n        }\n      }\n      this.bodyUILayer.setState({data, zoomOpacity: didZoom ? 0.5 : zoomOpacity});\n    }\n  }\n\n  zoomTo(node: SpatialSceneNode): void {\n    const matrix = new Matrix4(node.transformMatrix);\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        target: matrix.getTranslation(),\n        rotationX: 0,\n        rotationOrbit: 0,\n        zoom: 11.5,\n      }\n    });\n  }\n\n  @bind\n  private _onHover(e: {picked: boolean, object: SpatialSceneNode}): void {\n    const { lastHovered } = this;\n    this.cursor = e.picked ? 'pointer' : undefined;\n    if (e.picked && e.object && e.object['@id']) {\n      if (lastHovered !== e.object) {\n        if (lastHovered) {\n          this.nodeHoverStopSubject.next(lastHovered);\n        }\n        this.lastHovered = e.object;\n        this.nodeHoverStartSubject.next(e.object);\n      }\n    } else if (lastHovered) {\n      this.nodeHoverStopSubject.next(lastHovered);\n      this.lastHovered = undefined;\n    }\n  }\n\n  @bind\n  private _onClick(e: {picked: boolean, object: SpatialSceneNode}, mouseEvent: { srcEvent: { ctrlKey: boolean; }; }): void {\n    if (e.picked && e.object && e.object['@id']) {\n      this.nodeClickSubject.next({node: e.object, ctrlClick: mouseEvent?.srcEvent?.ctrlKey ?? undefined});\n    }\n  }\n\n  @bind\n  private _onViewStateChange(event: { interactionState: { isZooming: boolean; }; viewState: { zoom: number; } }): void {\n    if (event.interactionState?.isZooming) {\n      const currentState = this.bodyUILayer.state as {zoomOpacity: number, data: unknown};\n      const zoomOpacity = Math.min(Math.max(1 - (event.viewState.zoom - 8.9) / 3, 0.2), 1.0);\n      if (currentState.zoomOpacity !== zoomOpacity) {\n        this.bodyUILayer.setState({data: currentState.data, zoomOpacity});\n      }\n    }\n    this.deck.setProps({viewState: { ...event.viewState }});\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BodyUiComponent.html":{"url":"components/BodyUiComponent.html","title":"component - BodyUiComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BodyUiComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/body/body-ui/body-ui.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-body-ui\n            \n\n            \n                styleUrls\n                ./body-ui.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./body-ui.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bodyCanvas\n                            \n                            \n                                bodyUI\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyFilter\n                            \n                            \n                                ngAfterViewInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                filter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                filterChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(data: DataState, dataSourceService: DataSourceService)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/body/body-ui/body-ui.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        DataState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSourceService\n                                                  \n                                                        \n                                                                        DataSourceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        filter\n                    \n                \n                \n                    \n                        Type :         Filter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/body/body-ui/body-ui.component.ts:18\n                            \n                        \n                \n                    \n                        Allows the filters to be set from outside the component, and still render / function normally\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        filterChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/body/body-ui/body-ui.component.ts:23\n                            \n                        \n                \n                    \n                        Emits the current filters\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            applyFilter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyFilter(filter: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/body/body-ui/body-ui.component.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/body/body-ui/body-ui.component.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bodyCanvas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('bodyCanvas', {read: ElementRef})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/body/body-ui/body-ui.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bodyUI\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BodyUI\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/body/body-ui/body-ui.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, Component, ElementRef, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nimport { BodyUI } from 'ccf-body-ui';\nimport { Filter } from 'ccf-database';\n\nimport { DataSourceService } from './../../../core/services/data-source/data-source.service';\nimport { DataState } from './../../../core/store/data/data.state';\n\n\n@Component({\n  selector: 'ccf-body-ui',\n  templateUrl: './body-ui.component.html',\n  styleUrls: ['./body-ui.component.scss']\n})\nexport class BodyUiComponent implements AfterViewInit {\n  /**\n   * Allows the filters to be set from outside the component, and still render / function normally\n   */\n  @Input() filter: Filter;\n\n  /**\n   * Emits the current filters\n   */\n  @Output() filterChange = new EventEmitter();\n\n  bodyUI: BodyUI;\n\n  @ViewChild('bodyCanvas', { read: ElementRef }) bodyCanvas: ElementRef;\n\n  constructor(readonly data: DataState, readonly dataSourceService: DataSourceService) { }\n\n  ngAfterViewInit(): void {\n    const canvas = this.bodyCanvas.nativeElement;\n    this.bodyUI = new BodyUI({ id: 'body-ui', canvas });\n    canvas.addEventListener('contextmenu', evt => evt.preventDefault());\n\n    // TODO: Replace with a single @Input with scene provided by ngxs\n    this.data.filter$.subscribe(async (f: Filter) => {\n      await this.dataSourceService.dataSource.connect();\n      const scene = await this.dataSourceService.dataSource.getScene(f);\n      this.bodyUI.setScene(scene);\n    });\n\n    this.bodyUI.nodeClick$.subscribe(async ({node, ctrlClick}) => {\n      switch (node['@id']) {\n        case 'http://purl.org/ccf/latest/ccf.owl#VHRightKidney':\n          this.applyFilter({ontologyTerms: ['http://purl.obolibrary.org/obo/UBERON_0004539']});\n          break;\n        case 'http://purl.org/ccf/latest/ccf.owl#VHLeftKidney':\n          this.applyFilter({ontologyTerms: ['http://purl.obolibrary.org/obo/UBERON_0004538']});\n          break;\n        case 'http://purl.org/ccf/latest/ccf.owl#VHSpleen':\n        case 'http://purl.org/ccf/latest/ccf.owl#VHSpleenCC1':\n        case 'http://purl.org/ccf/latest/ccf.owl#VHSpleenCC2':\n        case 'http://purl.org/ccf/latest/ccf.owl#VHSpleenCC3':\n          this.applyFilter({ontologyTerms: ['http://purl.obolibrary.org/obo/UBERON_0002106']});\n          break;\n        default:\n          if (node.entityId) {\n            const highlightedEntities = ctrlClick ? this.filter?.highlightedEntities ?? [] : [];\n            if (highlightedEntities.length === 1 && highlightedEntities[0] === node.entityId) {\n              this.applyFilter({highlightedEntities: []});\n            } else {\n              this.applyFilter({highlightedEntities: highlightedEntities.concat([node.entityId])});\n            }\n          }\n          break;\n      }\n    });\n  }\n\n  private applyFilter(filter: Partial): void {\n    const newFilter = { ...this.filter, ...filter } as Filter;\n    this.filter = newFilter;\n    this.filterChange.emit(newFilter);\n  }\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./body-ui.component.scss\n                \n                .body-ui {\n  position: relative !important;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BodyUiComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BodyUiModule.html":{"url":"modules/BodyUiModule.html","title":"module - BodyUiModule","body":"\n                   \n\n\n\n\n    Modules\n    BodyUiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BodyUiModule\n\n\n\ncluster_BodyUiModule_declarations\n\n\n\ncluster_BodyUiModule_exports\n\n\n\n\nBodyUiComponent\n\nBodyUiComponent\n\n\n\nBodyUiModule\n\nBodyUiModule\n\nBodyUiModule -->\n\nBodyUiComponent->BodyUiModule\n\n\n\n\n\nBodyUiComponent \n\nBodyUiComponent \n\nBodyUiComponent  -->\n\nBodyUiModule->BodyUiComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/body/body-ui/body-ui.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BodyUiComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BodyUiComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BodyUiComponent } from './body-ui.component';\n\n\n\n@NgModule({\n  declarations: [BodyUiComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [BodyUiComponent]\n})\nexport class BodyUiModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CCFDatabase.html":{"url":"classes/CCFDatabase.html","title":"class - CCFDatabase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CCFDatabase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/ccf-database.ts\n        \n\n            \n                Description\n            \n            \n                Database provider. \n\n            \n\n\n            \n                Implements\n            \n            \n                            DataSource\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                graph\n                            \n                            \n                                    Public\n                                options\n                            \n                            \n                                scene\n                            \n                            \n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                connect\n                            \n                            \n                                get\n                            \n                            \n                                    Async\n                                getAggregateResults\n                            \n                            \n                                getIds\n                            \n                            \n                                    Async\n                                getImageViewerData\n                            \n                            \n                                    Async\n                                getListResults\n                            \n                            \n                                    Async\n                                getOntologyTermOccurences\n                            \n                            \n                                    Async\n                                getScene\n                            \n                            \n                                getSpatialEntities\n                            \n                            \n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: CCFDatabaseOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/ccf-database/src/lib/ccf-database.ts:51\n                            \n                        \n\n                \n                    \n                            Creates an instance of ccfdatabase.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        CCFDatabaseOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Initialization options.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            graph\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CCFSpatialGraph\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/ccf-database.ts:49\n                            \n                        \n\n                \n                    \n                        The spatial graph \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CCFDatabaseOptions\n\n                        \n                    \n                    \n                        \n                            Default value : DEFAULT_CCF_DB_OPTIONS\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/ccf-database.ts:58\n                            \n                        \n\n                \n                    \n                        Initialization options.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scene\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CCFSpatialScene\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/ccf-database.ts:51\n                            \n                        \n\n                \n                    \n                        Creates SpatialEntity Scenes \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            store\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     N3Store\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/ccf-database.ts:47\n                            \n                        \n\n                \n                    \n                        The triple store. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            connect\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    connect(options?: CCFDatabaseOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-database.ts:70\n                \n            \n\n\n            \n                \n                    Connects the database.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CCFDatabaseOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options used to initialize.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise resolving to true if data has been loaded into the database.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(id: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-database.ts:116\n                \n            \n\n\n            \n                \n                    Gets the data for an object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id of the requested object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Quad[]\n\n                    \n                    \n                        The object data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAggregateResults\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAggregateResults(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-database.ts:161\n                \n            \n\n\n            \n                \n                    Gets all aggregate results for a filter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A list of aggregate data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIds\n                        \n                        \n                    \n                \n            \n            \n                \ngetIds(filter: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-database.ts:106\n                \n            \n\n\n            \n                \n                    Gets all ids matching the filter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {} as Filter\n                                    \n\n                                    \n                                        The filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Set\n\n                    \n                    \n                        A set of all matching ids.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getImageViewerData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getImageViewerData(id: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-database.ts:181\n                \n            \n\n\n            \n                \n                    Gets image data for the associated id.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The identifier.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The image data.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getListResults\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getListResults(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-database.ts:147\n                \n            \n\n\n            \n                \n                    Gets all list results for a filter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A list of results.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getOntologyTermOccurences\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOntologyTermOccurences(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-database.ts:171\n                \n            \n\n\n            \n                \n                    Get number of occurrences of ontology terms for a set of ids.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        Ontology term counts.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getScene\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getScene(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-database.ts:190\n                \n            \n\n\n            \n                \n                    Get all nodes to form the 3D scene of reference body, organs, and tissues\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A list of Spatial Scene Nodes for the 3D Scene\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSpatialEntities\n                        \n                        \n                    \n                \n            \n            \n                \ngetSpatialEntities(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-database.ts:136\n                \n            \n\n\n            \n                \n                    Gets all spatial entities for a filter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SpatialEntity[]\n\n                    \n                    \n                        A list of spatial entities.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            search\n                        \n                        \n                    \n                \n            \n            \n                \nsearch(filter: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-database.ts:126\n                \n            \n\n\n            \n                \n                    Gets the data for objects matching a filter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {} as Filter\n                                    \n\n                                    \n                                        The filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [][]\n\n                    \n                    \n                        An array of data.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { addJsonLdToStore, addN3ToStore, addRdfXmlToStore, DataFactory, N3Store, Quad, Store } from 'triple-store-utils';\n\nimport { CCFSpatialGraph } from './ccf-spatial-graph';\nimport { CCFSpatialScene, SpatialSceneNode } from './ccf-spatial-scene';\nimport { addHubmapDataToStore } from './hubmap/hubmap-data';\nimport { AggregateResult, DataSource, Filter, ImageViewerData, ListResult } from './interfaces';\nimport { getAggregateResults } from './queries/aggregate-results-n3';\nimport { findIds } from './queries/find-ids-n3';\nimport { getImageViewerData } from './queries/image-viewer-data-n3';\nimport { getListResult } from './queries/list-result-n3';\nimport { getSpatialEntityForEntity } from './queries/spatial-result-n3';\nimport { SpatialEntity } from './spatial-types';\nimport { getOntologyTermOccurences } from './queries/ontology-term-occurences-n3';\n\n\n/** Database initialization options. */\nexport interface CCFDatabaseOptions {\n  /** An url to load data from. */\n  ccfOwlUrl: string;\n  /** Context. */\n  ccfContextUrl: string;\n  /** Data service type. */\n  hubmapDataService: 'static' | 'search-api';\n  /** Hubmap Portal url. */\n  hubmapPortalUrl: string;\n  /** Hubmap data url. */\n  hubmapDataUrl: string;\n  /** Hubmap assets api url. */\n  hubmapAssetsUrl: string;\n  /** HuBMAP Service Token. */\n  hubmapToken?: string;\n}\n\n/** Default initialization options. */\nexport const DEFAULT_CCF_DB_OPTIONS: CCFDatabaseOptions = {\n  ccfOwlUrl: 'https://purl.org/ccf/latest/ccf.owl',\n  ccfContextUrl: 'https://purl.org/ccf/latest/ccf-context.jsonld',\n  hubmapDataService: 'static',\n  hubmapPortalUrl: 'https://portal.hubmapconsortium.org/',\n  hubmapDataUrl: '',\n  hubmapAssetsUrl: 'https://assets.hubmapconsortium.org'\n};\n\n/** Database provider. */\nexport class CCFDatabase implements DataSource {\n  /** The triple store. */\n  store: N3Store;\n  /** The spatial graph */\n  graph: CCFSpatialGraph;\n  /** Creates SpatialEntity Scenes */\n  scene: CCFSpatialScene;\n\n  /**\n   * Creates an instance of ccfdatabase.\n   *\n   * @param [options] Initialization options.\n   */\n  constructor(public options: CCFDatabaseOptions = DEFAULT_CCF_DB_OPTIONS) {\n    this.store = new Store();\n    this.graph = new CCFSpatialGraph(this);\n    this.scene = new CCFSpatialScene(this);\n  }\n\n  /**\n   * Connects the database.\n   *\n   * @param [options] Options used to initialize.\n   * @returns A promise resolving to true if data has been loaded into the database.\n   */\n  async connect(options?: CCFDatabaseOptions): Promise {\n    if (options) {\n      this.options = options;\n    }\n    if (this.store.size === 0) {\n      const ops: Promise[] = [];\n      const ccfOwlUrl = this.options.ccfOwlUrl;\n      if (ccfOwlUrl.endsWith('.n3')) {\n        ops.push(addN3ToStore(this.options.ccfOwlUrl, this.store));\n      } else {\n        ops.push(addRdfXmlToStore(this.options.ccfOwlUrl, this.store));\n      }\n      if (this.options.hubmapDataUrl) {\n        if (this.options.hubmapDataUrl.endsWith('.jsonld')) {\n          ops.push(addJsonLdToStore(this.options.hubmapDataUrl, this.store));\n        } else {\n          ops.push(addHubmapDataToStore(\n            this.store, this.options.hubmapDataUrl, this.options.hubmapDataService, this.options.hubmapToken,\n            this.options.hubmapAssetsUrl, this.options.hubmapPortalUrl\n          ));\n        }\n      }\n      await Promise.all(ops);\n      // Add a small delay to allow the triple store to settle\n      await new Promise(r => setTimeout(r, 500));\n      this.graph.createGraph();\n    }\n    return this.store.size > 0;\n  }\n\n  /**\n   * Gets all ids matching the filter.\n   *\n   * @param [filter] The filter.\n   * @returns A set of all matching ids.\n   */\n  getIds(filter: Filter = {} as Filter): Set {\n    return findIds(this.store, filter);\n  }\n\n  /**\n   * Gets the data for an object.\n   *\n   * @param id The id of the requested object.\n   * @returns The object data.\n   */\n  get(id: string): Quad[] {\n    return this.store.getQuads(DataFactory.namedNode(id), null, null, null);\n  }\n\n  /**\n   * Gets the data for objects matching a filter.\n   *\n   * @param [filter] The filter.\n   * @returns An array of data.\n   */\n  search(filter: Filter = {} as Filter): Quad[][] {\n    return [...this.getIds(filter)].map((s) => this.get(s));\n  }\n\n  /**\n   * Gets all spatial entities for a filter.\n   *\n   * @param [filter] The filter.\n   * @returns A list of spatial entities.\n   */\n  getSpatialEntities(filter?: Filter): SpatialEntity[] {\n    filter = {...filter, hasSpatialEntity: true} as Filter;\n    return [...this.getIds(filter)].map((s) => getSpatialEntityForEntity(this.store, s) as SpatialEntity);\n  }\n\n  /**\n   * Gets all list results for a filter.\n   *\n   * @param [filter] The filter.\n   * @returns A list of results.\n   */\n  async getListResults(filter?: Filter): Promise {\n    filter = {...filter, hasSpatialEntity: true} as Filter;\n    const highlighted = new Set(filter.highlightedEntities);\n    return [...this.getIds(filter)].map((s) => getListResult(this.store, s))\n      .map((s) => Object.assign(s, {highlighted: highlighted.has(s['@id'])}))\n      .sort((a, b) => (a.highlighted ? 0 : 1) - (b.highlighted ? 0 : 1));\n  }\n\n  /**\n   * Gets all aggregate results for a filter.\n   *\n   * @param [filter] The filter.\n   * @returns A list of aggregate data.\n   */\n  async getAggregateResults(filter?: Filter): Promise {\n    return getAggregateResults(this.getIds(filter), this.store);\n  }\n\n  /**\n   * Get number of occurrences of ontology terms for a set of ids.\n   *\n   * @param [filter] The filter.\n   * @returns Ontology term counts.\n   */\n  async getOntologyTermOccurences(filter?: Filter): Promise> {\n    return getOntologyTermOccurences(this.getIds(filter), this.store);\n  }\n\n  /**\n   * Gets image data for the associated id.\n   *\n   * @param id The identifier.\n   * @returns The image data.\n   */\n  async getImageViewerData(id: string): Promise {\n    return getImageViewerData(id, this.store);\n  }\n\n  /**\n   * Get all nodes to form the 3D scene of reference body, organs, and tissues\n   * @param [filter] The filter.\n   * @returns A list of Spatial Scene Nodes for the 3D Scene\n   */\n  async getScene(filter?: Filter): Promise {\n    this.graph.createGraph();\n    return this.scene.getScene(filter);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CCFDatabaseOptions.html":{"url":"interfaces/CCFDatabaseOptions.html","title":"interface - CCFDatabaseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CCFDatabaseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/ccf-database.ts\n        \n\n            \n                Description\n            \n            \n                Database initialization options. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ccfContextUrl\n                                \n                                \n                                        ccfOwlUrl\n                                \n                                \n                                        hubmapAssetsUrl\n                                \n                                \n                                        hubmapDataService\n                                \n                                \n                                        hubmapDataUrl\n                                \n                                \n                                        hubmapPortalUrl\n                                \n                                \n                                            Optional\n                                        hubmapToken\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ccfContextUrl\n                                    \n                                \n                                \n                                    \n                                        ccfContextUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Context. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ccfOwlUrl\n                                    \n                                \n                                \n                                    \n                                        ccfOwlUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An url to load data from. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hubmapAssetsUrl\n                                    \n                                \n                                \n                                    \n                                        hubmapAssetsUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Hubmap assets api url. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hubmapDataService\n                                    \n                                \n                                \n                                    \n                                        hubmapDataService:     \"static\" | \"search-api\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"static\" | \"search-api\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data service type. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hubmapDataUrl\n                                    \n                                \n                                \n                                    \n                                        hubmapDataUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Hubmap data url. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hubmapPortalUrl\n                                    \n                                \n                                \n                                    \n                                        hubmapPortalUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Hubmap Portal url. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hubmapToken\n                                    \n                                \n                                \n                                    \n                                        hubmapToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    HuBMAP Service Token. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { addJsonLdToStore, addN3ToStore, addRdfXmlToStore, DataFactory, N3Store, Quad, Store } from 'triple-store-utils';\n\nimport { CCFSpatialGraph } from './ccf-spatial-graph';\nimport { CCFSpatialScene, SpatialSceneNode } from './ccf-spatial-scene';\nimport { addHubmapDataToStore } from './hubmap/hubmap-data';\nimport { AggregateResult, DataSource, Filter, ImageViewerData, ListResult } from './interfaces';\nimport { getAggregateResults } from './queries/aggregate-results-n3';\nimport { findIds } from './queries/find-ids-n3';\nimport { getImageViewerData } from './queries/image-viewer-data-n3';\nimport { getListResult } from './queries/list-result-n3';\nimport { getSpatialEntityForEntity } from './queries/spatial-result-n3';\nimport { SpatialEntity } from './spatial-types';\nimport { getOntologyTermOccurences } from './queries/ontology-term-occurences-n3';\n\n\n/** Database initialization options. */\nexport interface CCFDatabaseOptions {\n  /** An url to load data from. */\n  ccfOwlUrl: string;\n  /** Context. */\n  ccfContextUrl: string;\n  /** Data service type. */\n  hubmapDataService: 'static' | 'search-api';\n  /** Hubmap Portal url. */\n  hubmapPortalUrl: string;\n  /** Hubmap data url. */\n  hubmapDataUrl: string;\n  /** Hubmap assets api url. */\n  hubmapAssetsUrl: string;\n  /** HuBMAP Service Token. */\n  hubmapToken?: string;\n}\n\n/** Default initialization options. */\nexport const DEFAULT_CCF_DB_OPTIONS: CCFDatabaseOptions = {\n  ccfOwlUrl: 'https://purl.org/ccf/latest/ccf.owl',\n  ccfContextUrl: 'https://purl.org/ccf/latest/ccf-context.jsonld',\n  hubmapDataService: 'static',\n  hubmapPortalUrl: 'https://portal.hubmapconsortium.org/',\n  hubmapDataUrl: '',\n  hubmapAssetsUrl: 'https://assets.hubmapconsortium.org'\n};\n\n/** Database provider. */\nexport class CCFDatabase implements DataSource {\n  /** The triple store. */\n  store: N3Store;\n  /** The spatial graph */\n  graph: CCFSpatialGraph;\n  /** Creates SpatialEntity Scenes */\n  scene: CCFSpatialScene;\n\n  /**\n   * Creates an instance of ccfdatabase.\n   *\n   * @param [options] Initialization options.\n   */\n  constructor(public options: CCFDatabaseOptions = DEFAULT_CCF_DB_OPTIONS) {\n    this.store = new Store();\n    this.graph = new CCFSpatialGraph(this);\n    this.scene = new CCFSpatialScene(this);\n  }\n\n  /**\n   * Connects the database.\n   *\n   * @param [options] Options used to initialize.\n   * @returns A promise resolving to true if data has been loaded into the database.\n   */\n  async connect(options?: CCFDatabaseOptions): Promise {\n    if (options) {\n      this.options = options;\n    }\n    if (this.store.size === 0) {\n      const ops: Promise[] = [];\n      const ccfOwlUrl = this.options.ccfOwlUrl;\n      if (ccfOwlUrl.endsWith('.n3')) {\n        ops.push(addN3ToStore(this.options.ccfOwlUrl, this.store));\n      } else {\n        ops.push(addRdfXmlToStore(this.options.ccfOwlUrl, this.store));\n      }\n      if (this.options.hubmapDataUrl) {\n        if (this.options.hubmapDataUrl.endsWith('.jsonld')) {\n          ops.push(addJsonLdToStore(this.options.hubmapDataUrl, this.store));\n        } else {\n          ops.push(addHubmapDataToStore(\n            this.store, this.options.hubmapDataUrl, this.options.hubmapDataService, this.options.hubmapToken,\n            this.options.hubmapAssetsUrl, this.options.hubmapPortalUrl\n          ));\n        }\n      }\n      await Promise.all(ops);\n      // Add a small delay to allow the triple store to settle\n      await new Promise(r => setTimeout(r, 500));\n      this.graph.createGraph();\n    }\n    return this.store.size > 0;\n  }\n\n  /**\n   * Gets all ids matching the filter.\n   *\n   * @param [filter] The filter.\n   * @returns A set of all matching ids.\n   */\n  getIds(filter: Filter = {} as Filter): Set {\n    return findIds(this.store, filter);\n  }\n\n  /**\n   * Gets the data for an object.\n   *\n   * @param id The id of the requested object.\n   * @returns The object data.\n   */\n  get(id: string): Quad[] {\n    return this.store.getQuads(DataFactory.namedNode(id), null, null, null);\n  }\n\n  /**\n   * Gets the data for objects matching a filter.\n   *\n   * @param [filter] The filter.\n   * @returns An array of data.\n   */\n  search(filter: Filter = {} as Filter): Quad[][] {\n    return [...this.getIds(filter)].map((s) => this.get(s));\n  }\n\n  /**\n   * Gets all spatial entities for a filter.\n   *\n   * @param [filter] The filter.\n   * @returns A list of spatial entities.\n   */\n  getSpatialEntities(filter?: Filter): SpatialEntity[] {\n    filter = {...filter, hasSpatialEntity: true} as Filter;\n    return [...this.getIds(filter)].map((s) => getSpatialEntityForEntity(this.store, s) as SpatialEntity);\n  }\n\n  /**\n   * Gets all list results for a filter.\n   *\n   * @param [filter] The filter.\n   * @returns A list of results.\n   */\n  async getListResults(filter?: Filter): Promise {\n    filter = {...filter, hasSpatialEntity: true} as Filter;\n    const highlighted = new Set(filter.highlightedEntities);\n    return [...this.getIds(filter)].map((s) => getListResult(this.store, s))\n      .map((s) => Object.assign(s, {highlighted: highlighted.has(s['@id'])}))\n      .sort((a, b) => (a.highlighted ? 0 : 1) - (b.highlighted ? 0 : 1));\n  }\n\n  /**\n   * Gets all aggregate results for a filter.\n   *\n   * @param [filter] The filter.\n   * @returns A list of aggregate data.\n   */\n  async getAggregateResults(filter?: Filter): Promise {\n    return getAggregateResults(this.getIds(filter), this.store);\n  }\n\n  /**\n   * Get number of occurrences of ontology terms for a set of ids.\n   *\n   * @param [filter] The filter.\n   * @returns Ontology term counts.\n   */\n  async getOntologyTermOccurences(filter?: Filter): Promise> {\n    return getOntologyTermOccurences(this.getIds(filter), this.store);\n  }\n\n  /**\n   * Gets image data for the associated id.\n   *\n   * @param id The identifier.\n   * @returns The image data.\n   */\n  async getImageViewerData(id: string): Promise {\n    return getImageViewerData(id, this.store);\n  }\n\n  /**\n   * Get all nodes to form the 3D scene of reference body, organs, and tissues\n   * @param [filter] The filter.\n   * @returns A list of Spatial Scene Nodes for the 3D Scene\n   */\n  async getScene(filter?: Filter): Promise {\n    this.graph.createGraph();\n    return this.scene.getScene(filter);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CCFSpatialGraph.html":{"url":"classes/CCFSpatialGraph.html","title":"class - CCFSpatialGraph","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CCFSpatialGraph\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/ccf-spatial-graph.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                graph\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addSpatialEntity\n                            \n                            \n                                addSpatialObjectReference\n                            \n                            \n                                addSpatialPlacement\n                            \n                            \n                                createGraph\n                            \n                            \n                                getTransformationMatrix\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: CCFDatabase)\n                    \n                \n                        \n                            \n                                Defined in projects/ccf-database/src/lib/ccf-spatial-graph.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                        CCFDatabase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            graph\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DirectedGraph\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/ccf-spatial-graph.ts:38\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addSpatialEntity\n                        \n                        \n                    \n                \n            \n            \n                \naddSpatialEntity(entity: SpatialEntity)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-spatial-graph.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entity\n                                    \n                                                SpatialEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addSpatialObjectReference\n                        \n                        \n                    \n                \n            \n            \n                \naddSpatialObjectReference(ref: SpatialObjectReference)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-spatial-graph.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ref\n                                    \n                                                SpatialObjectReference\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addSpatialPlacement\n                        \n                        \n                    \n                \n            \n            \n                \naddSpatialPlacement(placement: SpatialPlacement)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-spatial-graph.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    placement\n                                    \n                                                SpatialPlacement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createGraph\n                        \n                        \n                    \n                \n            \n            \n                \ncreateGraph()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-spatial-graph.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTransformationMatrix\n                        \n                        \n                    \n                \n            \n            \n                \ngetTransformationMatrix(sourceIRI: string, targetIRI: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-spatial-graph.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sourceIRI\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    targetIRI\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Matrix4 | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CCFDatabase } from './ccf-database';\nimport { Matrix4, toRadians } from '@math.gl/core';\nimport { DirectedGraph } from 'graphology';\nimport shortestPath from 'graphology-shortest-path/unweighted';\nimport { fromEuler } from 'quaternion';\nimport toEuler from 'quaternion-to-euler';\n\nimport { SpatialEntity, SpatialObjectReference, SpatialPlacement } from './spatial-types';\nimport { rdf, ccf } from './util/prefixes';\nimport { getSpatialEntity, getSpatialObjectReference, getSpatialPlacement } from './queries/spatial-result-n3';\n\n\nexport function applySpatialPlacement(tx: Matrix4, placement: SpatialPlacement): Matrix4 {\n  const p = placement;\n  let factor: number;\n  switch (p.translation_units) {\n    case 'centimeter':\n      factor = 1 / 100;\n      break;\n    case 'millimeter':\n      factor = 1 / 1000;\n      break;\n    case 'meter':\n    default:\n      factor = 1;\n      break;\n  }\n  const T = [p.x_translation, p.y_translation, p.z_translation].map(t => t * factor);\n  const R_RAD = [p.x_rotation, p.y_rotation, p.z_rotation].map(toRadians);\n  // tslint:disable-next-line: no-unsafe-any\n  const R = toEuler(fromEuler(R_RAD[1], R_RAD[0], R_RAD[2], 'XYZ').toVector()) as number[];\n  const S = [p.x_scaling, p.y_scaling, p.z_scaling];\n\n  return tx.translate(T).rotateXYZ(R).scale(S);\n}\n\nexport class CCFSpatialGraph {\n  graph: DirectedGraph;\n\n  constructor(private db: CCFDatabase) {\n    this.createGraph();\n  }\n\n  createGraph(): void {\n    this.graph = new DirectedGraph();\n    const store = this.db.store;\n    // Add all Spatial Object References\n    store.forSubjects((subject) => {\n      this.addSpatialObjectReference(getSpatialObjectReference(store, subject.id));\n    }, rdf.type, ccf.SpatialObjectReference, null);\n\n    // Add all Spatial Entities\n    store.forSubjects((subject) => {\n      this.addSpatialEntity(getSpatialEntity(store, subject.id));\n    }, rdf.type, ccf.SpatialEntity, null);\n\n    // Add all Spatial Placements\n    store.forSubjects((subject) => {\n      this.addSpatialPlacement(getSpatialPlacement(store, subject.id));\n    }, rdf.type, ccf.SpatialPlacement, null);\n  }\n\n  addSpatialEntity(entity: SpatialEntity): void {\n    this.graph.mergeNode(entity['@id'], {type: 'SpatialEntity', object: entity});\n  }\n  addSpatialObjectReference(ref: SpatialObjectReference): void {\n    this.graph.mergeNode(ref['@id'], {type: 'SpatialObjectReference', object: ref});\n  }\n  addSpatialPlacement(placement: SpatialPlacement): void {\n    this.graph.mergeDirectedEdge(placement.source['@id'], placement.target['@id'], {type: 'SpatialPlacement', placement});\n  }\n\n  getTransformationMatrix(sourceIRI: string, targetIRI: string): Matrix4 | undefined {\n    if (sourceIRI === targetIRI) {\n      return new Matrix4(); // identity\n    }\n    if (!this.graph.hasNode(sourceIRI) || !this.graph.hasNode(targetIRI)) {\n      return undefined;\n    }\n\n    const tx = new Matrix4();\n    const path = shortestPath(this.graph, sourceIRI, targetIRI);\n    if (path && path.length > 0) {\n      path.reverse();\n      let target: string | number = '';\n      for (const source of path) {\n        if (target) {\n          const p = this.graph.getEdgeAttribute(source, target, 'placement') as SpatialPlacement;\n          applySpatialPlacement(tx, p);\n        }\n        target = source;\n      }\n      return tx;\n    } else {\n      return undefined;\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CCFSpatialScene.html":{"url":"classes/CCFSpatialScene.html","title":"class - CCFSpatialScene","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CCFSpatialScene\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/ccf-spatial-scene.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getEntitySceneNodes\n                            \n                            \n                                getReferenceBody\n                            \n                            \n                                getReferenceOrgans\n                            \n                            \n                                getReferenceSceneNodes\n                            \n                            \n                                getScene\n                            \n                            \n                                getSceneNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: CCFDatabase)\n                    \n                \n                        \n                            \n                                Defined in projects/ccf-database/src/lib/ccf-spatial-scene.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                        CCFDatabase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEntitySceneNodes\n                        \n                        \n                    \n                \n            \n            \n                \ngetEntitySceneNodes(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-spatial-scene.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SpatialSceneNode[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getReferenceBody\n                        \n                        \n                    \n                \n            \n            \n                \ngetReferenceBody(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-spatial-scene.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SpatialEntity\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getReferenceOrgans\n                        \n                        \n                    \n                \n            \n            \n                \ngetReferenceOrgans(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-spatial-scene.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SpatialEntity[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getReferenceSceneNodes\n                        \n                        \n                    \n                \n            \n            \n                \ngetReferenceSceneNodes(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-spatial-scene.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SpatialSceneNode[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getScene\n                        \n                        \n                    \n                \n            \n            \n                \ngetScene(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-spatial-scene.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SpatialSceneNode[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSceneNode\n                        \n                        \n                    \n                \n            \n            \n                \ngetSceneNode(source: SpatialEntity, target: SpatialEntity, nodeAttrs: Partial)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/ccf-spatial-scene.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                SpatialEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                SpatialEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    nodeAttrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SpatialSceneNode | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Matrix4, toRadians } from '@math.gl/core';\n\nimport { CCFDatabase } from './ccf-database';\nimport { Filter } from './interfaces';\nimport { getSpatialEntity } from './queries/spatial-result-n3';\nimport { SpatialEntity } from './spatial-types';\nimport { ccf, rui } from './util/prefixes';\n\n\nexport interface SpatialSceneNode {\n  '@id': string;\n  '@type': 'SpatialSceneNode';\n  entityId?: string;\n  unpickable?: boolean;\n  wireframe?: boolean;\n  _lighting?: string;\n  scenegraph?: string;\n  scenegraphNode?: string;\n  zoomBasedOpacity?: boolean;\n  zoomToOnLoad?: boolean;\n  color?: [number, number, number, number];\n  transformMatrix: Matrix4;\n  tooltip: string;\n}\n\nexport class CCFSpatialScene {\n\n  constructor(private db: CCFDatabase) {}\n\n  getReferenceBody(filter?: Filter): SpatialEntity {\n    let bodyId: string;\n    switch (filter?.sex) {\n      case 'Male':\n        bodyId = ccf.spatial.Male.id;\n        break;\n      case 'Female':\n        bodyId = ccf.spatial.Female.id;\n        break;\n      case 'Both':\n      default:\n        bodyId = ccf.spatial.BothSexes.id;\n        break;\n    }\n    return getSpatialEntity(this.db.store, bodyId);\n  }\n\n  getReferenceOrgans(filter?: Filter): SpatialEntity[] {\n    let organsId: string;\n    switch (filter?.sex) {\n      case 'Male':\n        organsId = ccf.spatial.MaleOrgans.id;\n        break;\n      case 'Female':\n        organsId = ccf.spatial.FemaleOrgans.id;\n        break;\n      case 'Both':\n      default:\n        organsId = ccf.spatial.FemaleOrgans.id;\n        break;\n    }\n    return [getSpatialEntity(this.db.store, organsId)];\n  }\n\n  getReferenceSceneNodes(filter?: Filter): SpatialSceneNode[] {\n    const wholeBody = getSpatialEntity(this.db.store, ccf.spatial.Body.id);\n    const body = this.getReferenceBody(filter);\n    const organs = getSpatialEntity(this.db.store, ccf.spatial.MaleOrgans.id);\n    const store = this.db.store;\n    const terms = filter?.ontologyTerms || [];\n    const hasTerm = {\n      body: terms.indexOf(rui.body.id) === 0,\n      kidney: terms.indexOf(rui.kidney.id) === 0,\n      right_kidney: terms.indexOf(rui.right_kidney.id) === 0,\n      left_kidney: terms.indexOf(rui.left_kidney.id) === 0,\n      spleen: terms.indexOf(rui.spleen.id) === 0,\n    };\n\n    let nodes: (SpatialSceneNode | undefined)[] = [\n      this.getSceneNode(body, wholeBody, {unpickable: true, color: [255, 255, 255, 1*255]}),\n      ...this.getReferenceOrgans(filter).map((organ) =>\n        this.getSceneNode(organ, body, {unpickable: true, _lighting: 'pbr', zoomBasedOpacity: true,  color: [255, 0, 0, 1*255]})\n      ),\n      this.getSceneNode(getSpatialEntity(store, ccf.x('VHRightKidney').id), body, {color: [255, 255, 255, 1],\n        unpickable: hasTerm.kidney || hasTerm.right_kidney, zoomToOnLoad: hasTerm.right_kidney}),\n      this.getSceneNode(getSpatialEntity(store, ccf.x('VHLeftKidney').id), body, {color: [255, 255, 255, 1],\n        unpickable: hasTerm.kidney || hasTerm.left_kidney, zoomToOnLoad: hasTerm.left_kidney}),\n      this.getSceneNode(getSpatialEntity(store, ccf.x('VHSpleen').id), body, {color: [255, 255, 255, 1],\n        unpickable: hasTerm.spleen, zoomToOnLoad: hasTerm.spleen})\n    ];\n\n    if (filter?.debug) {\n      // Debug bounding boxes\n      nodes = nodes.concat([\n        this.getSceneNode(getSpatialEntity(store, ccf.x('VHRightKidney').id), wholeBody, {color: [0, 0, 255, 0.5*255], wireframe: true}),\n        this.getSceneNode(getSpatialEntity(store, ccf.x('VHLeftKidney').id), wholeBody, {color: [255, 0, 0, 0.5*255], wireframe: true}),\n        this.getSceneNode(getSpatialEntity(store, ccf.x('VHSpleenCC1').id), wholeBody, {color: [0, 255, 0, 0.5*255], wireframe: true}),\n        this.getSceneNode(getSpatialEntity(store, ccf.x('VHSpleenCC2').id), wholeBody, {color: [0, 255, 0, 0.5*255], wireframe: true}),\n        this.getSceneNode(getSpatialEntity(store, ccf.x('VHSpleenCC3').id), wholeBody, {color: [0, 255, 0, 0.5*255], wireframe: true})\n      ]);\n    }\n\n    return nodes.filter(s => s !== undefined) as SpatialSceneNode[];\n  }\n\n  getEntitySceneNodes(filter?: Filter): SpatialSceneNode[] {\n    const body = this.getReferenceBody(filter);\n    const highlighted = new Set(filter?.highlightedEntities);\n    return this.db.getSpatialEntities(filter).map((entity) =>\n      this.getSceneNode(entity, body, {\n        color: highlighted.has(entity.entityId as string) ? [10, 10, 229, 0.9*255] : [255, 255, 255, 0.9*255]\n      })\n    ).filter(s => s !== undefined) as SpatialSceneNode[];\n  }\n\n  getSceneNode(source: SpatialEntity, target: SpatialEntity, nodeAttrs: Partial = {}): SpatialSceneNode | undefined {\n    const has3dObject = source.object && source.object.file_format?.startsWith('model/gltf');\n    const sourceID = has3dObject && source.object ? source.object['@id'] : source['@id'];\n    let transform = this.db.graph.getTransformationMatrix(sourceID, target['@id']);\n    if (transform) {\n      if (has3dObject) {\n        transform = new Matrix4().rotateX(toRadians(90)).multiplyLeft(transform);\n      } else {\n        // Scale visible bounding boxes to the desired dimensions\n        let factor: number;\n        switch (source.dimension_units) {\n          case 'centimeter':\n            factor = 1 / 100;\n            break;\n          case 'millimeter':\n            factor = 1 / 1000;\n            break;\n          case 'meter':\n          default:\n            factor = 1;\n            break;\n        }\n        const scale = [source.x_dimension, source.y_dimension, source.z_dimension].map(dim => dim * factor / 2);\n        transform.scale(scale);\n      }\n      return {\n        '@id': source['@id'], '@type': 'SpatialSceneNode',\n        entityId: source.entityId || undefined,\n        scenegraph: has3dObject ? source.object?.file : undefined,\n        scenegraphNode: has3dObject ? source.object?.file_subpath : undefined,\n        transformMatrix: transform,\n        tooltip: source.label,\n        ...nodeAttrs\n      } as SpatialSceneNode;\n    } else {\n      return undefined;\n    }\n  }\n\n  getScene(filter?: Filter): SpatialSceneNode[] {\n    return [\n      ...this.getReferenceSceneNodes(filter),\n      ...this.getEntitySceneNodes(filter)\n    ];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChannelConfig.html":{"url":"interfaces/ChannelConfig.html","title":"interface - ChannelConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ChannelConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-image-viewer/src/lib/image-viewer.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        active\n                                \n                                \n                                        color\n                                \n                                \n                                        slider\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:     [number, number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number, number]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slider\n                                    \n                                \n                                \n                                    \n                                        slider:     [number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Deck, Layer, View, Viewport } from '@deck.gl/core';\nimport { Loader, VivView } from '@hubmap/vitessce-image-viewer';\nimport { bind } from 'bind-decorator';\n\nimport { createLoader, LoaderType, OMEZarrInfo, TiffInfo, ZarrInfo } from './loader';\nimport { flatMap, getVivId } from './utils';\n\n\ntype ValueOrGenerator = T | ((...args: U) => T);\n\ntype DeckProps = ConstructorParameters[0];\ninterface ExtDeckProps extends DeckProps {\n  canvas?: string | HTMLElement;\n}\n\ntype DeckCallbackArgs = Parameters>[0];\ntype LayerFilterArgs = DeckCallbackArgs;\ntype OnViewStateChangeArgs = DeckCallbackArgs & { viewId: string };\n\nexport type State = Record;\nexport type LayerConfig = Record;\n\nexport interface ChannelConfig {\n  active: boolean;\n  color: [number, number, number];\n  slider: [number, number];\n}\n\nexport interface DataSource {\n  type: LoaderType;\n  info: ZarrInfo | OMEZarrInfo | TiffInfo;\n}\n\nexport interface ImageViewerProps {\n  id: string;\n  initialViewState: State;\n  canvas?: HTMLCanvasElement;\n  width?: number;\n  height?: number;\n  sources?: DataSource[];\n  channelNames?: string[];\n  defaultChannelConfig?: Partial;\n}\n\nfunction applyPropDefaults(props: Props): Props & Required {\n  return {\n    canvas: null,\n    width: 0,\n    height: 0,\n    sources: [],\n    channelNames: [],\n    ...props,\n    defaultChannelConfig: {\n      active: true,\n      color: [255, 255, 255],\n      slider: [1500, 20000],\n      ...(props.defaultChannelConfig ?? {})\n    }\n  };\n}\n\n\nexport abstract class ImageViewer {\n  readonly props: Props & Required;\n\n  get width(): number { return this._width; }\n  get height(): number { return this._height; }\n  private _width: number;\n  private _height: number;\n\n  get sources(): DataSource[] { return this._sources; }\n  get loaders(): Loader[] { return this._loaders; }\n  private _sources: DataSource[] = [];\n  private _loaders: Loader[] = [];\n\n  get channelNames(): string[] { return Object.keys(this.channelConfigs); }\n  get channelConfigs(): Record { return this._channelConfigs; }\n  private _channelConfigs: Record = {};\n\n  protected vivViews: VivView[] = [];\n  protected views: View[] = [];\n  protected layers: Layer[] = [];\n  protected layerConfigs: LayerConfig[] = [];\n  protected states: Record = {};\n\n  private deck: Deck;\n\n  constructor(props: Props) {\n    const reqProps = this.props = applyPropDefaults(props);\n    this.deck = this.initializeDeck(reqProps);\n    this._width = reqProps.width;\n    this._height = reqProps.height;\n\n    if (reqProps.sources.length > 0) {\n      this.setSources(reqProps.sources);\n    }\n  }\n\n  clear(): void {\n    this._sources = [];\n    this._loaders = [];\n    this._channelConfigs = {};\n    this.vivViews = [];\n    this.layers = [];\n    this.layerConfigs = [];\n    this.states = {};\n    this.update();\n  }\n\n  finalize(): void {\n    this.deck.finalize();\n  }\n\n  async setSize(width: number, height: number): Promise {\n    this._width = width;\n    this._height = height;\n    this.vivViews = await this.createVivViews();\n\n    this.updateState((view, current) => ({\n      viewState: {\n        ...current,\n        width,\n        height,\n        id: view.id\n      }\n    }));\n    this.update();\n    this.deck.redraw(true);\n\n    return this;\n  }\n\n  async setSources(sources: DataSource[]): Promise {\n    const loaderPromises = sources.map(source => createLoader(source.type, source.info));\n    const loaders = await Promise.all(loaderPromises);\n\n    this._sources = sources;\n    this._loaders = loaders;\n    this.resetChannelConfigs();\n    this.vivViews = await this.createVivViews();\n    this.layerConfigs = await this.createLayerConfigs();\n    this.updateState(view => ({ viewState: view.initialViewState }));\n    this.update();\n\n    return this;\n  }\n\n  async updateChannelConfigs(configs: Record>): Promise {\n    const newConfigs = Object.entries(configs).reduce((result, [key, config]) => {\n      return !(key in result) ? result : {\n        ...result,\n        [key]: {\n          ...result[key],\n          ...config\n        }\n      };\n    }, this.channelConfigs);\n\n    if (newConfigs === this.channelConfigs) { return this; }\n\n    this._channelConfigs = newConfigs;\n    this.layerConfigs = await this.createLayerConfigs();\n    this.update();\n\n    return this;\n  }\n\n  protected abstract async createVivViews(): Promise;\n  protected abstract async createLayerConfigs(): Promise;\n\n  protected update(): void {\n    this.updateViews();\n    this.updateLayers();\n    this.updateDeckProps({\n      views: this.views,\n      layers: this.layers,\n      viewState: this.states\n    });\n  }\n\n  protected updateViews(): void {\n    this.views = this.vivViews.map(viv => viv.getDeckGlView());\n  }\n\n  protected updateLayers(): void {\n    const { vivViews, states, layerConfigs } = this;\n    const length = layerConfigs.length;\n\n    this.layers = flatMap(vivViews, (view, index) => view.getLayers({\n      viewStates: states,\n      props: layerConfigs[index % length]\n    }));\n  }\n\n  protected updateState(\n    args: ValueOrGenerator, [VivView, State]>\n  ): void {\n    const argsGenerator = typeof args === 'function' ? args : () => args;\n    const currentStates = this.states;\n\n    this.states = this.vivViews.reduce((states, view) => {\n      const current = currentStates[view.id] ?? {};\n      states[view.id] = view.filterViewState(argsGenerator(view, current));\n      return states;\n    }, {} as Record);\n  }\n\n  protected updateDeckProps(props: Partial): void {\n    this.deck.setProps(props);\n  }\n\n  private initializeDeck(props: Props & Required): Deck {\n    const { id, canvas, width, height } = props;\n    return new Deck({\n      id,\n      canvas,\n      width,\n      height,\n      views: [],\n      layers: [],\n      effects: [],\n      viewState: {},\n      layerFilter: this.layerFilter,\n      onViewStateChange: this.onViewStateChange,\n      glOptions: {\n        webgl2: true\n      }\n    } as ExtDeckProps);\n  }\n\n  private resetChannelConfigs(): void {\n    const { loaders, props: { channelNames, defaultChannelConfig } } = this;\n    const keys = channelNames.length > 0 ?\n      channelNames :\n      flatMap(loaders, loader => loader.channelNames ?? []);\n\n    this._channelConfigs = keys.reduce((configs, key) => ({\n      ...configs,\n      [key]: defaultChannelConfig as ChannelConfig\n    }), {} as Record);\n  }\n\n  @bind\n  private layerFilter({ layer, viewport }: LayerFilterArgs): boolean {\n    const { id: viewportId } = viewport as Viewport & { id: string };\n    return layer.id.includes(getVivId(viewportId));\n  }\n\n  @bind\n  private onViewStateChange({ viewId, viewState, oldViewState }: OnViewStateChangeArgs): void {\n    this.updateState((_view, current) => ({\n      viewState: { ...viewState, id: viewId },\n      oldViewState,\n      currentViewState: current\n    }));\n    this.update();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CheckboxComponent.html":{"url":"components/CheckboxComponent.html","title":"component - CheckboxComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CheckboxComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/checkbox/checkbox.component.ts\n\n\n    \n        Description\n    \n    \n        Creates a labeled group of checkboxes and emits a current list of selections whenever a selection changes.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-checkbox\n            \n\n            \n                styleUrls\n                ./checkbox.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./checkbox.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                filterOnChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                label\n                            \n                            \n                                options\n                            \n                            \n                                selection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                selectionChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/checkbox/checkbox.component.ts:16\n                            \n                        \n                \n                    \n                        The label that describes the overall question the checkbox is asking\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/checkbox/checkbox.component.ts:21\n                            \n                        \n                \n                    \n                        Used to generate the individual checkboxes and their individual labels\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selection\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/checkbox/checkbox.component.ts:26\n                            \n                        \n                \n                    \n                        A list of the checkboxes the user has checked. To be updated any time a checkbox changes.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        selectionChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/checkbox/checkbox.component.ts:31\n                            \n                        \n                \n                    \n                        Any time a checkbox changes we emit that value so the parent component has that information\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            filterOnChange\n                        \n                        \n                    \n                \n            \n            \n                \nfilterOnChange(event: MatCheckboxChange, option: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/checkbox/checkbox.component.ts:38\n                \n            \n\n\n            \n                \n                    This method captures checkbox events and decides whether to add or remove a filter selection based on the checked property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MatCheckboxChange\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event object from the checkbox that contains the boolean property 'checked'\n\n                                    \n                                \n                                \n                                    option\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Tells us which option was checked or unchecked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\n\n/**\n * Creates a labeled group of checkboxes and emits a current list of selections whenever a selection changes.\n */\n@Component({\n  selector: 'ccf-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss']\n})\nexport class CheckboxComponent {\n  /**\n   * The label that describes the overall question the checkbox is asking\n   */\n  @Input() label: string;\n\n  /**\n   * Used to generate the individual checkboxes and their individual labels\n   */\n  @Input() options: string[];\n\n  /**\n   * A list of the checkboxes the user has checked. To be updated any time a checkbox changes.\n   */\n  @Input() selection: string[] = [];\n\n  /**\n   * Any time a checkbox changes we emit that value so the parent component has that information\n   */\n  @Output() selectionChange = new EventEmitter();\n\n  /**\n   * This method captures checkbox events and decides whether to add or remove a filter selection based on the checked property\n   * @param event Event object from the checkbox that contains the boolean property 'checked'\n   * @param option Tells us which option was checked or unchecked\n   */\n  filterOnChange(event: MatCheckboxChange, option: string): void {\n    const checked = event.checked;\n\n    if (checked) {\n      this.selection = [...this.selection, option];\n    } else {\n      this.selection = this.selection.filter(selection => selection !== option);\n    }\n\n    this.selectionChange.emit(this.selection);\n  }\n}\n\n    \n\n    \n        \n  {{ label }}\n\n  \n    \n      \n        {{ option }}\n      \n    \n  \n\n\n    \n\n    \n                \n                    ./checkbox.component.scss\n                \n                ::ng-deep  .mat-checkbox.mat-accent {\n  .mat-checkbox-checkmark-path {\n    stroke: white !important;\n  }\n\n  .mat-checkbox-inner-container {\n    margin-right: 1rem;\n  }\n}\n\n.filter-label {\n  margin-bottom: 0.5em;\n  font-weight: bold;\n}\n\n.options-container {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\n.option {\n  margin-right: 1.5em;\n  width: 8em;\n  color: #fafafa;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{ label }}                    {{ option }}            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CheckboxComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CheckboxModule.html":{"url":"modules/CheckboxModule.html","title":"module - CheckboxModule","body":"\n                   \n\n\n\n\n    Modules\n    CheckboxModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CheckboxModule\n\n\n\ncluster_CheckboxModule_declarations\n\n\n\ncluster_CheckboxModule_exports\n\n\n\n\nCheckboxComponent\n\nCheckboxComponent\n\n\n\nCheckboxModule\n\nCheckboxModule\n\nCheckboxModule -->\n\nCheckboxComponent->CheckboxModule\n\n\n\n\n\nCheckboxComponent \n\nCheckboxComponent \n\nCheckboxComponent  -->\n\nCheckboxModule->CheckboxComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/shared/components/checkbox/checkbox.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            CheckboxComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CheckboxComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { CheckboxComponent } from './checkbox.component';\n\n\n@NgModule({\n  imports: [CommonModule, MatCheckboxModule],\n  declarations: [CheckboxComponent],\n  exports: [CheckboxComponent]\n})\nexport class CheckboxModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ColorBarComponent.html":{"url":"components/ColorBarComponent.html","title":"component - ColorBarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ColorBarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/color-scheme/color-bar/color-bar.component.ts\n\n\n    \n        Description\n    \n    \n        Color bar component for the color scheme popup and color scheme selector\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-color-bar\n            \n\n            \n                styleUrls\n                ./color-bar.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./color-bar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                colorChanged\n                            \n                            \n                                gradientHighlight\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                colorScheme\n                            \n                            \n                                enableSelection\n                            \n                            \n                                selected\n                            \n                            \n                                selectedColor\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                colorChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    gradientStyle\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Type :         ColorScheme\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-bar/color-bar.component.ts:18\n                            \n                        \n                \n                    \n                        Color scheme to be displayed in the color bar\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        enableSelection\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-bar/color-bar.component.ts:33\n                            \n                        \n                \n                    \n                        Determines if colors are able to be selected on the color bar\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selected\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-bar/color-bar.component.ts:23\n                            \n                        \n                \n                    \n                        Whether or not the scheme is currently selected\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-bar/color-bar.component.ts:28\n                            \n                        \n                \n                    \n                        Currently selected color in colorScheme.colors\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        colorChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-bar/color-bar.component.ts:38\n                            \n                        \n                \n                    \n                        Emits the newly selected color index\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            colorChanged\n                        \n                        \n                    \n                \n            \n            \n                \ncolorChanged(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/color-scheme/color-bar/color-bar.component.ts:64\n                \n            \n\n\n            \n                \n                    When a color is selected, this updates relavant variables and emits the\nselected color\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the color the user selected\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            gradientHighlight\n                        \n                        \n                    \n                \n            \n            \n                \ngradientHighlight()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/color-scheme/color-bar/color-bar.component.ts:55\n                \n            \n\n\n            \n                \n                    Returns whether or not the scheme is a selected gradient (for highlighting purposes)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        gradientStyle\n                    \n                \n\n                \n                    \n                        getgradientStyle()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/color-scheme/color-bar/color-bar.component.ts:43\n                                \n                            \n                    \n                        \n                                Enables dynamic styling for gradient bars\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { ColorScheme } from '../color-schemes';\n\n\n/**\n * Color bar component for the color scheme popup and color scheme selector\n */\n@Component({\n  selector: 'ccf-color-bar',\n  templateUrl: './color-bar.component.html',\n  styleUrls: ['./color-bar.component.scss']\n})\nexport class ColorBarComponent {\n  /**\n   * Color scheme to be displayed in the color bar\n   */\n  @Input() colorScheme: ColorScheme;\n\n  /**\n   * Whether or not the scheme is currently selected\n   */\n  @Input() selected = false;\n\n  /**\n   * Currently selected color in colorScheme.colors\n   */\n  @Input() selectedColor = '';\n\n  /**\n   * Determines if colors are able to be selected on the color bar\n   */\n  @Input() enableSelection = false;\n\n  /**\n   * Emits the newly selected color index\n   */\n  @Output() colorChange = new EventEmitter();\n\n  /**\n   * Enables dynamic styling for gradient bars\n   */\n  get gradientStyle(): string {\n    const { colors, positions } = this.colorScheme;\n    const result: string[] = [];\n    for (let i = 0; i \n    \n\n    \n        \n  \n  \n\n\n\n  \n\n\n    \n\n    \n                \n                    ./color-bar.component.scss\n                \n                .scheme-container {\n  width: 7rem;\n  height: 1rem;\n  display: flex;\n  .discrete {\n    width: 1rem;\n  }\n  .gradient {\n    width: 7rem;\n  }\n\n  &.selected-scheme {\n    .discrete {\n      &.selected-color {\n        border-radius: 10px;\n      }\n    }\n  }\n\n  &.highlighted {\n    outline-width: 1px;\n    outline-style: solid;\n  }\n\n  :hover {\n    cursor: pointer;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ColorBarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ColorBarModule.html":{"url":"modules/ColorBarModule.html","title":"module - ColorBarModule","body":"\n                   \n\n\n\n\n    Modules\n    ColorBarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ColorBarModule\n\n\n\ncluster_ColorBarModule_declarations\n\n\n\ncluster_ColorBarModule_exports\n\n\n\n\nColorBarComponent\n\nColorBarComponent\n\n\n\nColorBarModule\n\nColorBarModule\n\nColorBarModule -->\n\nColorBarComponent->ColorBarModule\n\n\n\n\n\nColorBarComponent \n\nColorBarComponent \n\nColorBarComponent  -->\n\nColorBarModule->ColorBarComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/color-scheme/color-bar/color-bar.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ColorBarComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ColorBarComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ColorBarComponent } from './color-bar.component';\n\n\n@NgModule({\n  declarations: [ColorBarComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [ColorBarComponent]\n})\nexport class ColorBarModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ColorPickerLauncherComponent.html":{"url":"components/ColorPickerLauncherComponent.html","title":"component - ColorPickerLauncherComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ColorPickerLauncherComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/color-scheme/color-picker-launcher/color-picker-launcher.component.ts\n\n\n    \n        Description\n    \n    \n        Component dynamically displays a div with a shape and background that corresponds to the color scheme\nor color of the layer that it gets passed.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-color-picker-launcher\n            \n\n            \n                styleUrls\n                ./color-picker-launcher.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./color-picker-launcher.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                layer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                layerChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        layer\n                    \n                \n                \n                    \n                        Type :         ImageViewerLayer\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-picker-launcher/color-picker-launcher.component.ts:20\n                            \n                        \n                \n                    \n                        An image-viewer layer which contains the styling information required to render this component.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        layerChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-picker-launcher/color-picker-launcher.component.ts:25\n                            \n                        \n                \n                    \n                        Output that passes along changes made to the layer's properties from the color picker\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { ImageViewerLayer } from '../../../core/models/image-viewer-layer';\n\n\n/**\n * Component dynamically displays a div with a shape and background that corresponds to the color scheme\n * or color of the layer that it gets passed.\n */\n@Component({\n  selector: 'ccf-color-picker-launcher',\n  templateUrl: './color-picker-launcher.component.html',\n  styleUrls: ['./color-picker-launcher.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ColorPickerLauncherComponent {\n  /**\n   * An image-viewer layer which contains the styling information required to render this component.\n   */\n  @Input() layer: ImageViewerLayer;\n\n  /**\n   * Output that passes along changes made to the layer's properties from the color picker\n   */\n  @Output() layerChange = new EventEmitter();\n}\n\n    \n\n    \n        \n\n\n\n\n    \n\n    \n                \n                    ./color-picker-launcher.component.scss\n                \n                .launch-button {\n  width: 1rem;\n  height: 1rem;\n  cursor: pointer;\n}\n\n.circle {\n  border-radius: 100%;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ColorPickerLauncherComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ColorPickerLauncherModule.html":{"url":"modules/ColorPickerLauncherModule.html","title":"module - ColorPickerLauncherModule","body":"\n                   \n\n\n\n\n    Modules\n    ColorPickerLauncherModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ColorPickerLauncherModule\n\n\n\ncluster_ColorPickerLauncherModule_declarations\n\n\n\ncluster_ColorPickerLauncherModule_imports\n\n\n\ncluster_ColorPickerLauncherModule_exports\n\n\n\n\nColorPickerLauncherComponent\n\nColorPickerLauncherComponent\n\n\n\nColorPickerLauncherModule\n\nColorPickerLauncherModule\n\nColorPickerLauncherModule -->\n\nColorPickerLauncherComponent->ColorPickerLauncherModule\n\n\n\n\n\nColorPickerLauncherComponent \n\nColorPickerLauncherComponent \n\nColorPickerLauncherComponent  -->\n\nColorPickerLauncherModule->ColorPickerLauncherComponent \n\n\n\n\n\nColorSchemePopupModule\n\nColorSchemePopupModule\n\nColorPickerLauncherModule -->\n\nColorSchemePopupModule->ColorPickerLauncherModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/color-scheme/color-picker-launcher/color-picker-launcher.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ColorPickerLauncherComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ColorSchemePopupModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ColorPickerLauncherComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ColorPickerLauncherComponent } from './color-picker-launcher.component';\nimport { ColorSchemePopupModule } from '../color-scheme-popup/color-scheme-popup.module';\n\n\n@NgModule({\n  declarations: [ColorPickerLauncherComponent],\n  imports: [CommonModule, ColorSchemePopupModule],\n  exports: [ColorPickerLauncherComponent]\n})\nexport class ColorPickerLauncherModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColorScheme.html":{"url":"interfaces/ColorScheme.html","title":"interface - ColorScheme","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ColorScheme\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/color-scheme.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        colors\n                                \n                                \n                                        name\n                                \n                                \n                                        positions\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                    \n                                \n                                \n                                    \n                                        colors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        positions\n                                    \n                                \n                                \n                                    \n                                        positions:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \"discrete\" | \"gradient\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"discrete\" | \"gradient\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ColorScheme {\n    type: 'discrete' | 'gradient';\n    name: string;\n    colors: string[];\n    positions: number[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColorScheme-1.html":{"url":"interfaces/ColorScheme-1.html","title":"interface - ColorScheme-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ColorScheme\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/color-scheme/color-schemes.ts\n        \n\n            \n                Description\n            \n            \n                Color scheme to be used in visualizing layers of the image\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        colors\n                                \n                                \n                                        name\n                                \n                                \n                                        positions\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colors\n                                    \n                                \n                                \n                                    \n                                        colors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Colors used in the scheme\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of scheme\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        positions\n                                    \n                                \n                                \n                                    \n                                        positions:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Positions for mapping the data to colors\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \"discrete\" | \"gradient\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"discrete\" | \"gradient\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the scheme is discrete or gradient\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ColorScheme {\n\n  /**\n   * Whether the scheme is discrete or gradient\n   */\n  type: 'discrete' | 'gradient';\n\n  /**\n   * Name of scheme\n   */\n  name: string;\n\n  /**\n   * Colors used in the scheme\n   */\n  colors: string[];\n\n  /**\n   * Positions for mapping the data to colors\n   */\n  positions: number[];\n}\n\n/**\n * Default Qualitative Scheme1 (discrete)\n */\nexport const GREEENORANGE: ColorScheme = {\n  type: 'discrete',\n  name: 'qualitative1',\n  colors: ['#66BB6A', '#B39DDB', '#FFCC80', '#FFFF8D', '#1565C0', '#E91E63', '#E65100'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Qualitative Scheme2 (discrete)\n */\nexport const TEALGREEN: ColorScheme = {\n  type: 'discrete',\n  name: 'qualitative2',\n  colors: ['#80CBC4', '#FFFF8D', '#B39DDB', '#EF9A9A', '#64B5F6', '#FFB74D', '#AED581'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme1 (discrete)\n */\nexport const BLUERED: ColorScheme = {\n  type: 'discrete',\n  name: 'bluered',\n  colors: ['#2166AC', '#67A9CF', '#D1E5F0', '#F7F7F7', '#FDDBC7', '#EF8A62', '#B2182B'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme2 (discrete)\n */\nexport const GREENRED: ColorScheme = {\n  type: 'discrete',\n  name: 'greenred',\n  colors: ['#1A9850', '#91CF60', '#D9EF8B', '#FFFFBF', '#FEE08B', '#FC8D59', '#D73027'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme3 (discrete)\n */\nexport const PURPLEBROWN: ColorScheme = {\n  type: 'discrete',\n  name: 'purplebrown',\n  colors: ['#542788', '#998EC3', '#D8DAEB', '#F7F7F7', '#FEE0B6', '#F1A340', '#B35806'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme4 (discrete)\n */\nexport const REDTAN: ColorScheme = {\n  type: 'discrete',\n  name: 'redtan',\n  colors: ['#990000', '#D7301F', '#EF6548', '#FC8D59', '#FDBB84', '#FDD49E', '#FEF0D9'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme5 (discrete)\n */\nexport const PURPLELIGHTBLUE: ColorScheme = {\n  type: 'discrete',\n  name: 'purplelightblue',\n  colors: ['#6E016B', '#88419D', '#8C6BB1', '#8C96C6', '#9EBCDA', '#BFD3E6', '#EDF8FB'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme6 (gradient)\n */\nexport const VIRIDIS: ColorScheme = {\n  type: 'gradient',\n  name: 'viridis',\n  colors: ['#FFE31C', '#B5C740', '#6BAB65', '#21908A', '#2D6379', '#393768', '#450B57'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme7 (gradient)\n */\nexport const MAGMA: ColorScheme = {\n  type: 'gradient',\n  name: 'magma',\n  colors: ['#F8FC9D', '#E1B986', '#CA7670', '#B4335A', '#78223C', '#3D121F', '#020202'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme8 (gradient)\n */\nexport const PLASMA: ColorScheme = {\n  type: 'gradient',\n  name: 'plasma',\n  colors: ['#F2F424', '#E3B842', '#D47D60', '#C6427E', '#883381', '#4A2484', '#0C1687'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default scheme options\n */\nexport const DEFAULT_COLOR_SCHEMES = [\n  GREEENORANGE,\n  TEALGREEN,\n  BLUERED,\n  GREENRED,\n  PURPLEBROWN,\n  // REDTAN,\n  // PURPLELIGHTBLUE,\n  // VIRIDIS,\n  // MAGMA,\n  // PLASMA\n];\n\n/**\n * Object containing scheme and color index info to be emitted when a change is made\n */\nexport interface ColorSchemeSelection {\n\n  /**\n   * Current scheme selected\n   */\n  scheme: ColorScheme;\n\n  /**\n   * Index of the selected color in scheme\n   */\n  coloridx: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ColorSchemeContentsComponent.html":{"url":"components/ColorSchemeContentsComponent.html","title":"component - ColorSchemeContentsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ColorSchemeContentsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts\n\n\n    \n        Description\n    \n    \n        Contains the color menu and brightness/transparency sliders\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-color-scheme-contents\n            \n\n            \n                styleUrls\n                ./color-scheme-contents.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./color-scheme-contents.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                brightnessSliderOptions\n                            \n                            \n                                transparencySliderOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                brightnessChanged\n                            \n                            \n                                colorChanged\n                            \n                            \n                                transparencyChanged\n                            \n                            \n                                    Private\n                                updateLayer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                bottom\n                            \n                            \n                                layer\n                            \n                            \n                                schemeOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                layerChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    brightnessLow\n                                \n                                \n                                    brightnessHigh\n                                \n                                \n                                    transparency\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:70\n                            \n                        \n\n                \n                    \n                            Initiates slider options\n\n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        bottom\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:21\n                            \n                        \n                \n                    \n                        Determines if the popup opens up or down from the icon position\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layer\n                    \n                \n                \n                    \n                        Type :         ImageViewerLayer\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:31\n                            \n                        \n                \n                    \n                        Layer that the component is currently rendering, used to pull relevant properties from.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        schemeOptions\n                    \n                \n                \n                    \n                        Type :     ColorScheme[]\n\n                    \n                \n                \n                    \n                        Default value : DEFAULT_COLOR_SCHEMES\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:26\n                            \n                        \n                \n                    \n                        List of available schemes\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        layerChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:36\n                            \n                        \n                \n                    \n                        Used to emit any changes made to the layer or its properties\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            brightnessChanged\n                        \n                        \n                    \n                \n            \n            \n                \nbrightnessChanged()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:91\n                \n            \n\n\n            \n                \n                    Emits new brightness selection\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            colorChanged\n                        \n                        \n                    \n                \n            \n            \n                \ncolorChanged(color: string, scheme: ColorScheme)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:106\n                \n            \n\n\n            \n                \n                    Takes in the selected color and scheme and adds them to the Layer\nbefore emitting the changed layer\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scheme\n                                    \n                                                ColorScheme\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transparencyChanged\n                        \n                        \n                    \n                \n            \n            \n                \ntransparencyChanged()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:98\n                \n            \n\n\n            \n                \n                    Emits new transparency value\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            updateLayer\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateLayer(updates: Partial<>)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:118\n                \n            \n\n\n            \n                \n                    Updates layer with new layer settings\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    updates\n                                    \n                                            Partial<>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Contains updated layer settings\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            brightnessSliderOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Options\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:41\n                            \n                        \n\n                \n                    \n                        Options for the brightness slider\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            transparencySliderOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Options\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:46\n                            \n                        \n\n                \n                    \n                        Options for the transparency slider\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        brightnessLow\n                    \n                \n\n                \n                    \n                        getbrightnessLow()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:51\n                                \n                            \n                    \n                        \n                                Updates current low brightness value with new low brightness value\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n                \n                    \n                        setbrightnessLow(value: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:52\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        brightnessHigh\n                    \n                \n\n                \n                    \n                        getbrightnessHigh()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:59\n                                \n                            \n                    \n                        \n                                Updates current high brightness value with new high brightness value\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n                \n                    \n                        setbrightnessHigh(value: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:60\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        transparency\n                    \n                \n\n                \n                    \n                        gettransparency()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:67\n                                \n                            \n                    \n                        \n                                Updates current transparency value with new transparency value\n\n\n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n                \n                    \n                        settransparency(value: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.component.ts:68\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Options } from 'ng5-slider';\n\nimport { ImageViewerLayer } from '../../../core/models/image-viewer-layer';\nimport { ColorScheme, DEFAULT_COLOR_SCHEMES } from '../color-schemes';\n\n\n/**\n * Contains the color menu and brightness/transparency sliders\n */\n@Component({\n  selector: 'ccf-color-scheme-contents',\n  templateUrl: './color-scheme-contents.component.html',\n  styleUrls: ['./color-scheme-contents.component.scss']\n})\nexport class ColorSchemeContentsComponent {\n\n  /**\n   * Determines if the popup opens up or down from the icon position\n   */\n  @Input() bottom = false;\n\n  /**\n   * List of available schemes\n   */\n  @Input() schemeOptions: ColorScheme[] = DEFAULT_COLOR_SCHEMES;\n\n  /**\n   * Layer that the component is currently rendering, used to pull relevant properties from.\n   */\n  @Input() layer: ImageViewerLayer;\n\n  /**\n   * Used to emit any changes made to the layer or its properties\n   */\n  @Output() layerChange = new EventEmitter();\n\n  /**\n   * Options for the brightness slider\n   */\n  brightnessSliderOptions: Options;\n\n  /**\n   * Options for the transparency slider\n   */\n  transparencySliderOptions: Options;\n\n  /**\n   * Updates current low brightness value with new low brightness value\n   */\n  get brightnessLow(): number { return this.layer.brightness[0]; }\n  set brightnessLow(value: number) {\n    this.updateLayer({ brightness: [value, this.brightnessHigh] });\n  }\n\n  /**\n   * Updates current high brightness value with new high brightness value\n   */\n  get brightnessHigh(): number { return this.layer.brightness[1]; }\n  set brightnessHigh(value: number) {\n    this.updateLayer({ brightness: [this.brightnessLow, value] });\n  }\n\n  /**\n   * Updates current transparency value with new transparency value\n   */\n  get transparency(): number { return this.layer.transparency; }\n  set transparency(value: number) {\n    this.updateLayer({ transparency: value });\n  }\n\n  /**\n   * Initiates slider options\n   */\n  constructor() {\n    const COMMON_OPTIONS = {\n      floor: 0,\n      ceil: 100,\n      step: 1,\n      hideLimitLabels: true,\n      hidePointerLabels: true\n    };\n\n    this.brightnessSliderOptions = { ...COMMON_OPTIONS, inputEventsInterval: 1000 };\n    this.transparencySliderOptions = { ...COMMON_OPTIONS, showSelectionBar: true };\n  }\n\n  /**\n   * Emits new brightness selection\n   */\n  brightnessChanged(): void {\n    this.layerChange.emit(this.layer);\n  }\n\n  /**\n   * Emits new transparency value\n   */\n  transparencyChanged(): void {\n    this.layerChange.emit(this.layer);\n  }\n\n  /**\n   * Takes in the selected color and scheme and adds them to the Layer\n   * before emitting the changed layer\n   */\n  colorChanged(color: string, scheme: ColorScheme): void {\n    this.updateLayer({\n      colorScheme: scheme,\n      color,\n      customizedColor: true\n    });\n  }\n\n  /**\n   * Updates layer with new layer settings\n   * @param updates Contains updated layer settings\n   */\n  private updateLayer(\n    updates: Partial[0]>\n  ): void {\n    const { layer: current, layerChange } = this;\n    const layer = new ImageViewerLayer({\n      ...current,\n      ...updates\n    });\n\n    this.layer = layer;\n    layerChange.emit(layer);\n  }\n}\n\n    \n\n    \n        \n  \n    \n\n    Brightness\n    \n    \n\n    Transparency\n    \n     -->\n  \n\n\n    \n\n    \n                \n                    ./color-scheme-contents.component.scss\n                \n                .color-scheme-contents-container {\n  box-shadow: 0.4rem 0.4rem 0.8rem 0rem #000000;\n  border-width: 1px;\n  border-style: solid;\n  border-radius: 4px;\n  width: 10rem;\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  z-index: 1;\n  right: -1.125rem;\n  top: -1.125rem;\n\n  &.bottom {\n    top: auto;\n    bottom: 0rem;\n  }\n\n  .scheme-contents {\n    margin: 1rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    .swatch {\n      display: flex;\n      width: 7rem;\n      height: 1rem;\n      margin-bottom: 0.5rem;\n\n      :hover {\n        cursor: pointer;\n      }\n    }\n\n    .brightness-slider-label {\n      margin-top: .5rem;\n    }\n  }\n\n  ::ng-deep .slider {\n    margin-top: 0.75rem;\n    margin-bottom: 1rem;\n    .ng5-slider-bar {\n      opacity: .2;\n      height: 0.15rem;\n    }\n\n    .ng5-slider-selection {\n      opacity: 1;\n    }\n\n    .ng5-slider-pointer {\n      $pointer-size: 1rem;\n\n      width: $pointer-size;\n      height: $pointer-size;\n      top: -0.5rem;\n      border-width: 0.1rem;\n      border-style: solid;\n\n      &:after {\n        display: none;\n      }\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          Brightness            Transparency         -->  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ColorSchemeContentsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ColorSchemeContentsModule.html":{"url":"modules/ColorSchemeContentsModule.html","title":"module - ColorSchemeContentsModule","body":"\n                   \n\n\n\n\n    Modules\n    ColorSchemeContentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ColorSchemeContentsModule\n\n\n\ncluster_ColorSchemeContentsModule_declarations\n\n\n\ncluster_ColorSchemeContentsModule_imports\n\n\n\ncluster_ColorSchemeContentsModule_exports\n\n\n\n\nColorSchemeContentsComponent\n\nColorSchemeContentsComponent\n\n\n\nColorSchemeContentsModule\n\nColorSchemeContentsModule\n\nColorSchemeContentsModule -->\n\nColorSchemeContentsComponent->ColorSchemeContentsModule\n\n\n\n\n\nColorSchemeContentsComponent \n\nColorSchemeContentsComponent \n\nColorSchemeContentsComponent  -->\n\nColorSchemeContentsModule->ColorSchemeContentsComponent \n\n\n\n\n\nColorBarModule\n\nColorBarModule\n\nColorSchemeContentsModule -->\n\nColorBarModule->ColorSchemeContentsModule\n\n\n\n\n\nDualSliderModule\n\nDualSliderModule\n\nColorSchemeContentsModule -->\n\nDualSliderModule->ColorSchemeContentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/color-scheme/color-scheme-contents/color-scheme-contents.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ColorSchemeContentsComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ColorBarModule\n                        \n                        \n                            DualSliderModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ColorSchemeContentsComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Ng5SliderModule } from 'ng5-slider';\n\nimport { ColorSchemeContentsComponent } from './color-scheme-contents.component';\nimport { DualSliderModule } from '../../../shared/components/dual-slider/dual-slider.module';\nimport { ColorBarModule } from '../color-bar/color-bar.module';\n\n\n@NgModule({\n  imports: [CommonModule, DualSliderModule, Ng5SliderModule, ColorBarModule],\n  declarations: [ColorSchemeContentsComponent],\n  exports: [ColorSchemeContentsComponent]\n})\n\nexport class ColorSchemeContentsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ColorSchemePopupComponent.html":{"url":"components/ColorSchemePopupComponent.html","title":"component - ColorSchemePopupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ColorSchemePopupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/color-scheme/color-scheme-popup/color-scheme-popup.component.ts\n\n\n    \n        Description\n    \n    \n        Component for the scheme selector popup\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-color-scheme-popup\n            \n\n            \n                styleUrls\n                ./color-scheme-popup.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./color-scheme-popup.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bottom\n                            \n                            \n                                contentElement\n                            \n                            \n                                    Private\n                                    Optional\n                                owner\n                            \n                            \n                                popupVisible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                open\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                layer\n                            \n                            \n                                schemeOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                layerChange\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        layer\n                    \n                \n                \n                    \n                        Type :         ImageViewerLayer\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-scheme-popup/color-scheme-popup.component.ts:25\n                            \n                        \n                \n                    \n                        The Layer which we use to pull the properties we need from\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        schemeOptions\n                    \n                \n                \n                    \n                        Type :     ColorScheme[]\n\n                    \n                \n                \n                    \n                        Default value : DEFAULT_COLOR_SCHEMES\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-scheme-popup/color-scheme-popup.component.ts:20\n                            \n                        \n                \n                    \n                        Schemes available to choose from\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        layerChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-scheme-popup/color-scheme-popup.component.ts:30\n                            \n                        \n                \n                    \n                        Output we use to emit any changes to the layer or its properties\n\n                    \n                \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event.target' \n                \n            \n            \n                \ndocument:click(target: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/color-scheme/color-scheme-popup/color-scheme-popup.component.ts:53\n                \n            \n\n\n            \n                \n                    Listens to document click event\nCloses the popup only if user clicks outside the popup\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            open\n                        \n                        \n                    \n                \n            \n            \n                \nopen(event: MouseEvent, owner?: Element)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/color-scheme/color-scheme-popup/color-scheme-popup.component.ts:64\n                \n            \n\n\n            \n                \n                    Opens popup and calculates which direction the popup opens based on click position\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                            Element\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bottom\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-scheme-popup/color-scheme-popup.component.ts:45\n                            \n                        \n\n                \n                    \n                        Controls direction the popup opens\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contentElement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('content', {static: true, read: ElementRef})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-scheme-popup/color-scheme-popup.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Optional\n                            owner\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Element\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-scheme-popup/color-scheme-popup.component.ts:40\n                            \n                        \n\n                \n                    \n                        Owner button element which when clicked will not close on. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            popupVisible\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/color-scheme/color-scheme-popup/color-scheme-popup.component.ts:37\n                            \n                        \n\n                \n                    \n                        Controls visibility of the popup\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, HostListener, Input, Output, ViewChild, ElementRef } from '@angular/core';\n\nimport { ImageViewerLayer } from '../../../core/models/image-viewer-layer';\nimport { ColorScheme, DEFAULT_COLOR_SCHEMES } from '../color-schemes';\n\n\n/**\n * Component for the scheme selector popup\n */\n@Component({\n  selector: 'ccf-color-scheme-popup',\n  templateUrl: './color-scheme-popup.component.html',\n  styleUrls: ['./color-scheme-popup.component.scss']\n})\nexport class ColorSchemePopupComponent {\n\n  /**\n   * Schemes available to choose from\n   */\n  @Input() schemeOptions: ColorScheme[] = DEFAULT_COLOR_SCHEMES;\n\n  /**\n   * The Layer which we use to pull the properties we need from\n   */\n  @Input() layer: ImageViewerLayer;\n\n  /**\n   * Output we use to emit any changes to the layer or its properties\n   */\n  @Output() layerChange = new EventEmitter();\n\n  @ViewChild('content', { static: true, read: ElementRef }) contentElement: ElementRef;\n\n  /**\n   * Controls visibility of the popup\n   */\n  popupVisible = false;\n\n  /** Owner button element which when clicked will not close on. */\n  private owner?: Element;\n\n  /**\n   * Controls direction the popup opens\n   */\n  bottom = false;\n\n  /**\n   * Listens to document click event\n   * Closes the popup only if user clicks outside the popup\n   * @param target The element on which the event was fired\n   */\n  @HostListener('document:click', ['$event.target']) // tslint:disable-line:no-unsafe-any\n  close(target: HTMLElement): void {\n    const { popupVisible, contentElement: { nativeElement: content } = { nativeElement: undefined }, owner } = this;\n    if (!popupVisible || content?.contains(target) || owner?.contains(target)) {\n      return;\n    }\n    this.popupVisible = !popupVisible;\n  }\n\n  /**\n   * Opens popup and calculates which direction the popup opens based on click position\n   */\n  open(event: MouseEvent, owner?: Element): void {\n    const clickPos = event.pageY;\n    this.bottom = window.innerHeight - clickPos \n    \n\n    \n        \n\n\n    \n\n    \n                \n                    ./color-scheme-popup.component.scss\n                \n                .hidden {\n  display: none;\n}\n\n.show {\n  display: block;\n  position: absolute;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ColorSchemePopupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ColorSchemePopupModule.html":{"url":"modules/ColorSchemePopupModule.html","title":"module - ColorSchemePopupModule","body":"\n                   \n\n\n\n\n    Modules\n    ColorSchemePopupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ColorSchemePopupModule\n\n\n\ncluster_ColorSchemePopupModule_declarations\n\n\n\ncluster_ColorSchemePopupModule_imports\n\n\n\ncluster_ColorSchemePopupModule_exports\n\n\n\n\nColorSchemePopupComponent\n\nColorSchemePopupComponent\n\n\n\nColorSchemePopupModule\n\nColorSchemePopupModule\n\nColorSchemePopupModule -->\n\nColorSchemePopupComponent->ColorSchemePopupModule\n\n\n\n\n\nColorSchemePopupComponent \n\nColorSchemePopupComponent \n\nColorSchemePopupComponent  -->\n\nColorSchemePopupModule->ColorSchemePopupComponent \n\n\n\n\n\nColorSchemeContentsModule\n\nColorSchemeContentsModule\n\nColorSchemePopupModule -->\n\nColorSchemeContentsModule->ColorSchemePopupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/color-scheme/color-scheme-popup/color-scheme-popup.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ColorSchemePopupComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ColorSchemeContentsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ColorSchemePopupComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ColorSchemePopupComponent } from './color-scheme-popup.component';\nimport { ColorSchemeContentsModule } from '../color-scheme-contents/color-scheme-contents.module';\n\n\n@NgModule({\n  imports: [CommonModule, ColorSchemeContentsModule],\n  declarations: [ColorSchemePopupComponent],\n  exports: [ColorSchemePopupComponent]\n})\n\nexport class ColorSchemePopupModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColorSchemeSelection.html":{"url":"interfaces/ColorSchemeSelection.html","title":"interface - ColorSchemeSelection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ColorSchemeSelection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/color-scheme/color-schemes.ts\n        \n\n            \n                Description\n            \n            \n                Object containing scheme and color index info to be emitted when a change is made\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coloridx\n                                \n                                \n                                        scheme\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coloridx\n                                    \n                                \n                                \n                                    \n                                        coloridx:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Index of the selected color in scheme\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scheme\n                                    \n                                \n                                \n                                    \n                                        scheme:         ColorScheme\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ColorScheme\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current scheme selected\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ColorScheme {\n\n  /**\n   * Whether the scheme is discrete or gradient\n   */\n  type: 'discrete' | 'gradient';\n\n  /**\n   * Name of scheme\n   */\n  name: string;\n\n  /**\n   * Colors used in the scheme\n   */\n  colors: string[];\n\n  /**\n   * Positions for mapping the data to colors\n   */\n  positions: number[];\n}\n\n/**\n * Default Qualitative Scheme1 (discrete)\n */\nexport const GREEENORANGE: ColorScheme = {\n  type: 'discrete',\n  name: 'qualitative1',\n  colors: ['#66BB6A', '#B39DDB', '#FFCC80', '#FFFF8D', '#1565C0', '#E91E63', '#E65100'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Qualitative Scheme2 (discrete)\n */\nexport const TEALGREEN: ColorScheme = {\n  type: 'discrete',\n  name: 'qualitative2',\n  colors: ['#80CBC4', '#FFFF8D', '#B39DDB', '#EF9A9A', '#64B5F6', '#FFB74D', '#AED581'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme1 (discrete)\n */\nexport const BLUERED: ColorScheme = {\n  type: 'discrete',\n  name: 'bluered',\n  colors: ['#2166AC', '#67A9CF', '#D1E5F0', '#F7F7F7', '#FDDBC7', '#EF8A62', '#B2182B'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme2 (discrete)\n */\nexport const GREENRED: ColorScheme = {\n  type: 'discrete',\n  name: 'greenred',\n  colors: ['#1A9850', '#91CF60', '#D9EF8B', '#FFFFBF', '#FEE08B', '#FC8D59', '#D73027'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme3 (discrete)\n */\nexport const PURPLEBROWN: ColorScheme = {\n  type: 'discrete',\n  name: 'purplebrown',\n  colors: ['#542788', '#998EC3', '#D8DAEB', '#F7F7F7', '#FEE0B6', '#F1A340', '#B35806'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme4 (discrete)\n */\nexport const REDTAN: ColorScheme = {\n  type: 'discrete',\n  name: 'redtan',\n  colors: ['#990000', '#D7301F', '#EF6548', '#FC8D59', '#FDBB84', '#FDD49E', '#FEF0D9'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme5 (discrete)\n */\nexport const PURPLELIGHTBLUE: ColorScheme = {\n  type: 'discrete',\n  name: 'purplelightblue',\n  colors: ['#6E016B', '#88419D', '#8C6BB1', '#8C96C6', '#9EBCDA', '#BFD3E6', '#EDF8FB'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme6 (gradient)\n */\nexport const VIRIDIS: ColorScheme = {\n  type: 'gradient',\n  name: 'viridis',\n  colors: ['#FFE31C', '#B5C740', '#6BAB65', '#21908A', '#2D6379', '#393768', '#450B57'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme7 (gradient)\n */\nexport const MAGMA: ColorScheme = {\n  type: 'gradient',\n  name: 'magma',\n  colors: ['#F8FC9D', '#E1B986', '#CA7670', '#B4335A', '#78223C', '#3D121F', '#020202'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default Scheme8 (gradient)\n */\nexport const PLASMA: ColorScheme = {\n  type: 'gradient',\n  name: 'plasma',\n  colors: ['#F2F424', '#E3B842', '#D47D60', '#C6427E', '#883381', '#4A2484', '#0C1687'],\n  positions: [0, .166, .333, .5, .666, .833, 1]\n};\n\n/**\n * Default scheme options\n */\nexport const DEFAULT_COLOR_SCHEMES = [\n  GREEENORANGE,\n  TEALGREEN,\n  BLUERED,\n  GREENRED,\n  PURPLEBROWN,\n  // REDTAN,\n  // PURPLELIGHTBLUE,\n  // VIRIDIS,\n  // MAGMA,\n  // PLASMA\n];\n\n/**\n * Object containing scheme and color index info to be emitted when a change is made\n */\nexport interface ColorSchemeSelection {\n\n  /**\n   * Current scheme selected\n   */\n  scheme: ColorScheme;\n\n  /**\n   * Index of the selected color in scheme\n   */\n  coloridx: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContainerComponent.html":{"url":"components/ContainerComponent.html","title":"component - ContainerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ContainerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/drawer/container/container.component.ts\n\n\n    \n        Description\n    \n    \n        Main container for drawer components.\n\n    \n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n            \n                exportAs\n                ccfDrawerContainer\n            \n\n\n\n\n\n            \n                providers\n                \n                                MessageService\n                \n            \n\n\n            \n                selector\n                ccf-drawer-container\n            \n\n            \n                styleUrls\n                ./container.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./container.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                channel\n                            \n                            \n                                    Private\n                                content1\n                            \n                            \n                                    Private\n                                content2\n                            \n                            \n                                    Private\n                                drawers\n                            \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleMessage\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                validateDrawers\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    content\n                                \n                                \n                                    hasWrappedContent\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(messageService: MessageService, cdr: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/drawer/container/container.component.ts:60\n                            \n                        \n\n                \n                    \n                            Creates an instance of container component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        messageService\n                                                  \n                                                        \n                                                                        MessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The service used to send event messages.\n\n                                                        \n                                                \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The change detector reference.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 'ccf-drawer-container'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/container/container.component.ts:37\n                            \n                        \n\n                \n                    \n                        HTML class \n\n                    \n                \n\n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            handleMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(_msg: Message)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/container/container.component.ts:111\n                \n            \n\n\n            \n                \n                    Processes event messages.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    _msg\n                                    \n                                                Message\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if change detection needs to be run.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/container/container.component.ts:79\n                \n            \n\n\n            \n                \n                    Sets up all listeners after all content has been projected.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/container/container.component.ts:101\n                \n            \n\n\n            \n                \n                    Cleans up all subscriptions.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            validateDrawers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateDrawers()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/container/container.component.ts:120\n                \n            \n\n\n            \n                \n                    Validates the number of drawers and their positions.\n\n\n                    \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            channel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MessageChannel\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/container/container.component.ts:58\n                            \n                        \n\n                \n                    \n                        The connected message channel. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            content1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ContentChildren(ContentComponent, {descendants: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/container/container.component.ts:45\n                            \n                        \n\n                \n                    \n                        Content component if provided already wrapped. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            content2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChildren(ContentComponent)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/container/container.component.ts:48\n                            \n                        \n\n                \n                    \n                        Content component if provided without wrapping. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            drawers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ContentChildren(DrawerComponent, {descendants: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/container/container.component.ts:41\n                            \n                        \n\n                \n                    \n                        Drawer components in this container. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subscription()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/container/container.component.ts:60\n                            \n                        \n\n                \n                    \n                        All subscriptions managed by the container. \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n\n                \n                    \n                        getcontent()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/components/drawer/container/container.component.ts:50\n                                \n                            \n                    \n                        \n                                Resolves the content component. \n\n\n                                \n                                    Returns :         ContentComponent\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        hasWrappedContent\n                    \n                \n\n                \n                    \n                        gethasWrappedContent()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/components/drawer/container/container.component.ts:55\n                                \n                            \n                    \n                        \n                                Whether the content was wrapped. \n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import {\n  AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, HostBinding, OnDestroy, QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\nimport { ContentComponent } from '../content/content.component';\nimport { DrawerComponent } from '../drawer/drawer.component';\nimport { Message, MessageChannel, MessageService } from '../messages';\n\n\n/**\n * Helper function for creating drawer errors.\n *\n * @param position The position of the drawer.\n * @throws {Error} Error with useful message is always thrown.\n */\nfunction throwDuplicateDrawersError(position: 'start' | 'end'): never {\n  throw new Error(`Multiple drawers in position ${position}`);\n}\n\n\n/**\n * Main container for drawer components.\n */\n@Component({\n  selector: 'ccf-drawer-container',\n  exportAs: 'ccfDrawerContainer',\n  templateUrl: './container.component.html',\n  styleUrls: ['./container.component.scss'],\n  providers: [MessageService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ContainerComponent implements AfterViewInit, OnDestroy {\n  /** HTML class */\n  @HostBinding('class') readonly className = 'ccf-drawer-container';\n\n  /** Drawer components in this container. */\n  @ContentChildren(DrawerComponent, { descendants: true })\n  private drawers: QueryList;\n\n  /** Content component if provided already wrapped. */\n  @ContentChildren(ContentComponent, { descendants: true })\n  private content1: QueryList;\n  /** Content component if provided without wrapping. */\n  @ViewChildren(ContentComponent)\n  private content2: QueryList;\n  /** Resolves the content component. */\n  private get content(): ContentComponent {\n    return this.content1.first ?? this.content2.first;\n  }\n\n  /** Whether the content was wrapped. */\n  get hasWrappedContent(): boolean { return this.content1.length !== 0; }\n\n  /** The connected message channel. */\n  private channel: MessageChannel;\n  /** All subscriptions managed by the container. */\n  private subscriptions = new Subscription();\n\n  /**\n   * Creates an instance of container component.\n   *\n   * @param messageService The service used to send event messages.\n   * @param cdr The change detector reference.\n   */\n  constructor(messageService: MessageService,\n              private cdr: ChangeDetectorRef) {\n    this.channel = messageService.connect(this);\n    this.subscriptions.add(this.channel.getMessages().subscribe(msg => {\n      if (this.handleMessage(msg)) { cdr.markForCheck(); }\n    }));\n  }\n\n  /**\n   * Sets up all listeners after all content has been projected.\n   */\n  ngAfterViewInit(): void {\n    this.drawers.changes.pipe(startWith(null)).subscribe(() => {\n      const drawers = this.validateDrawers();\n      this.channel.sendMessage({\n        type: 'drawer-containers-changed',\n        drawers\n      });\n      this.cdr.markForCheck();\n    });\n\n    this.content1.changes.pipe(startWith(null)).subscribe(() => {\n      this.channel.sendMessage({\n        type: 'content-container-changed',\n        content: this.content\n      });\n      this.cdr.markForCheck();\n    });\n  }\n\n  /**\n   * Cleans up all subscriptions.\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n\n  /**\n   * Processes event messages.\n   *\n   * @param _msg The event.\n   * @returns true if change detection needs to be run.\n   */\n  private handleMessage(_msg: Message): boolean {\n    return true;\n  }\n\n  /**\n   * Validates the number of drawers and their positions.\n   *\n   * @returns A tuple containing the start and end drawers.\n   */\n  private validateDrawers(): [DrawerComponent | undefined, DrawerComponent | undefined] {\n    const drawers = this.drawers.toArray();\n    const startDrawers = drawers.filter(drawer => drawer.position === 'start');\n    const endDrawers = drawers.filter(drawer => drawer.position === 'end');\n\n    if (startDrawers.length > 1) { throwDuplicateDrawersError('start'); }\n    if (endDrawers.length > 1) { throwDuplicateDrawersError('end'); }\n\n    return [startDrawers[0], endDrawers[0]];\n  }\n}\n\n    \n\n    \n        \n\n\n\n  \n\n\n    \n\n    \n                \n                    ./container.component.scss\n                \n                :host {\n  display: block;\n  position: relative;\n  z-index: 1;\n  overflow: hidden;\n  -webkit-overflow-scrolling: touch;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContainerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ContentComponent.html":{"url":"components/ContentComponent.html","title":"component - ContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/drawer/content/content.component.ts\n\n\n    \n        Description\n    \n    \n        Component wrapping and providing animations for center content.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-drawer-content\n            \n\n            \n                styleUrls\n                ./content.component.scss\n            \n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                drawers\n                            \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleMessage\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateFaded\n                            \n                            \n                                    Private\n                                updateMargin\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                @fadeInOut\n                            \n                            \n                                class\n                            \n                            \n                                class.cff-drawer-content-animations\n                            \n                            \n                                style.margin-left.px\n                            \n                            \n                                style.margin-right.px\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(messageService: MessageService, cdr: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/drawer/content/content.component.ts:41\n                            \n                        \n\n                \n                    \n                            Creates an instance of content component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        messageService\n                                                  \n                                                        \n                                                                        MessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service used to send and receive event messages.\n\n                                                        \n                                                \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The change detector reference.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            @fadeInOut\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/content/content.component.ts:36\n                            \n                        \n\n                \n                    \n                        Whether the content is invisible. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 'ccf-drawer-content'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/content/content.component.ts:28\n                            \n                        \n\n                \n                    \n                        HTML class \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class.cff-drawer-content-animations\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/content/content.component.ts:30\n                            \n                        \n\n                \n                    \n                        Whether animations are enabled. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            style.margin-left.px\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/content/content.component.ts:32\n                            \n                        \n\n                \n                    \n                        Left margin size. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            style.margin-right.px\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/content/content.component.ts:34\n                            \n                        \n\n                \n                    \n                        Right margin size. \n\n                    \n                \n\n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            handleMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(msg: Message)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/content/content.component.ts:68\n                \n            \n\n\n            \n                \n                    Process an event message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    msg\n                                    \n                                                Message\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if change detection needs to run.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/content/content.component.ts:58\n                \n            \n\n\n            \n                \n                    Cleans up all subscriptions. \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            updateFaded\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateFaded()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/content/content.component.ts:113\n                \n            \n\n\n            \n                \n                    Checks and updates the faded state based on the drawer states.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            updateMargin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMargin(position: \"start\" | \"end\", opened: boolean, width: number, margin: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/content/content.component.ts:100\n                \n            \n\n\n            \n                \n                    Updates a margin.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    position\n                                    \n                                            \"start\" | \"end\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Start (left) or end (right) margin.\n\n                                    \n                                \n                                \n                                    opened\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Whether the drawer is opened.\n\n                                    \n                                \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The width of the drawer if opened.\n\n                                    \n                                \n                                \n                                    margin\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The margin size.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            drawers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DrawerComponent[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/content/content.component.ts:39\n                            \n                        \n\n                \n                    \n                        References to the side drawers. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subscription()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/content/content.component.ts:41\n                            \n                        \n\n                \n                    \n                        Subscriptions managed by this component. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DrawerComponent } from '../drawer/drawer.component';\nimport { Message, MessageService } from '../messages';\n\n\n/**\n * Component wrapping and providing animations for center content.\n */\n@Component({\n  selector: 'ccf-drawer-content',\n  template: '',\n  styleUrls: ['./content.component.scss'],\n  animations: [\n    trigger('fadeInOut', [\n      state('false', style({ opacity: 1 })),\n      state('true', style({ opacity: 0 })),\n\n      transition('false  true', animate('1s'))\n    ])\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ContentComponent implements OnDestroy {\n  /** HTML class */\n  @HostBinding('class') readonly className = 'ccf-drawer-content';\n  /** Whether animations are enabled. */\n  @HostBinding('class.cff-drawer-content-animations') animationsEnabled = false;\n  /** Left margin size. */\n  @HostBinding('style.margin-left.px') leftMargin = 0;\n  /** Right margin size. */\n  @HostBinding('style.margin-right.px') rightMargin = 0;\n  /** Whether the content is invisible. */\n  @HostBinding('@fadeInOut') faded = false;\n\n  /** References to the side drawers. */\n  private drawers: DrawerComponent[] = [];\n  /** Subscriptions managed by this component. */\n  private subscriptions = new Subscription();\n\n  /**\n   * Creates an instance of content component.\n   *\n   * @param messageService Service used to send and receive event messages.\n   * @param cdr The change detector reference.\n   */\n  constructor(messageService: MessageService,\n              cdr: ChangeDetectorRef) {\n    const messages = messageService.connect(this).getMessages();\n    this.subscriptions.add(messages.subscribe(msg => {\n      if(this.handleMessage(msg)) { cdr.markForCheck(); }\n    }));\n  }\n\n  /** Cleans up all subscriptions. */\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n\n  /**\n   * Process an event message.\n   *\n   * @param msg The event.\n   * @returns true if change detection needs to run.\n   */\n  private handleMessage(msg: Message): boolean {\n    switch (msg.payload.type) {\n      case 'drawer-containers-changed':\n        this.drawers = msg.payload.drawers as DrawerComponent[];\n        this.updateFaded();\n        return true;\n\n      case 'drawer-initialized':\n        this.animationsEnabled = true;\n        return true;\n\n      case 'drawer-toggled':\n        const position = (msg.source as DrawerComponent).position;\n        const { opened, width, margin } = msg.payload;\n\n        this.updateMargin(position, opened, width, margin);\n        this.updateFaded();\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Updates a margin.\n   *\n   * @param position Start (left) or end (right) margin.\n   * @param opened Whether the drawer is opened.\n   * @param width The width of the drawer if opened.\n   * @param margin The margin size.\n   */\n  private updateMargin(position: 'start' | 'end', opened: boolean,\n                       width: number, margin: number): void {\n    const offset = opened ? width + margin : margin;\n    if (position === 'start') {\n      this.leftMargin = offset;\n    } else {\n      this.rightMargin = offset;\n    }\n  }\n\n  /**\n   * Checks and updates the faded state based on the drawer states.\n   */\n  private updateFaded(): void {\n    const [start, end] = this.drawers;\n    const startExpanded = start?.opened && start?.expanded;\n    const endExpanded = end?.opened && end?.expanded;\n    this.faded = startExpanded || endExpanded;\n  }\n}\n\n    \n\n\n    \n                \n                    ./content.component.scss\n                \n                :host {\n  display: block;\n  height: calc(100% - 7rem);\n  z-index: 2;\n  overflow: auto;\n\n  &.cff-drawer-content-animations {\n    transition: {\n      duration: 1.5s;\n      timing-function: ease-in-out;\n      property: margin-left, margin-right;\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ContentContainerChanged.html":{"url":"interfaces/ContentContainerChanged.html","title":"interface - ContentContainerChanged","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ContentContainerChanged\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/components/drawer/messages.ts\n        \n\n            \n                Description\n            \n            \n                Message sent when the content component changes. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        content\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                    \n                                \n                                \n                                    \n                                        content:     unknown\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     unknown\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A reference to the new content component. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Message type. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  Message as GenericMessage, MessageChannel as GenericMessageChannel, MessageService as GenericMessageService,\n} from '../../services/message/message.service';\n\n\n/** Message sent when the content component changes. */\nexport interface ContentContainerChanged {\n  /** Message type. */\n  type: 'content-container-changed';\n  /** A reference to the new content component. */\n  content: unknown;\n}\n\n/** Message sent when a drawer component changes. */\nexport interface DrawerContainersChanged {\n  /** Message type. */\n  type: 'drawer-containers-changed';\n  /** References to the drawer components. Can contain undefined values. */\n  drawers: [unknown, unknown];\n}\n\n/** Payload types for messages sent from the drawer container. */\nexport type ContainerPayload = ContentContainerChanged | DrawerContainersChanged;\n\n\n/** Message sent when a drawer has finished initializing. */\nexport interface DrawerInitialized {\n  /** Message type. */\n  type: 'drawer-initialized';\n}\n\n/** Message send when the state of a drawer changes. */\nexport interface DrawerToggled {\n  /** Message type. */\n  type: 'drawer-toggled';\n  /** Whether the drawer is open. */\n  opened: boolean;\n  /** Whether the drawer is expanded. Implies opened. */\n  expanded: boolean;\n  /** Width of the drawer. */\n  width: number;\n  /** Margin used by the drawer for toggle button, etc. */\n  margin: number;\n}\n\n/** Payload types for messages sent from the drawers. */\nexport type DrawerPayload = DrawerToggled | DrawerInitialized;\n\n\n/** Combined payload type for all drawer sub components. */\nexport type Payload = ContainerPayload | DrawerPayload;\n/** Specific message type. */\nexport type Message = GenericMessage;\n/** Specific channel type. */\nexport type MessageChannel = GenericMessageChannel;\n/** Specific service type. */\nexport type MessageService = GenericMessageService;\n/** Reference to the service class. */\nexport const MessageService = GenericMessageService; // tslint:disable-line: variable-name\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\ncluster_CoreModule_exports\n\n\n\n\nHeaderModule\n\nHeaderModule\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nHeaderModule->CoreModule\n\n\n\n\n\nStoreModule\n\nStoreModule\n\nCoreModule -->\n\nStoreModule->CoreModule\n\n\n\n\n\nThemingModule\n\nThemingModule\n\nCoreModule -->\n\nThemingModule->CoreModule\n\n\n\n\n\nHeaderModule \n\nHeaderModule \n\nHeaderModule  -->\n\nCoreModule->HeaderModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/core.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            HeaderModule\n                        \n                        \n                            StoreModule\n                        \n                        \n                            ThemingModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HeaderModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpClientModule } from '@angular/common/http';\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\n\nimport { HeaderModule } from './header/header.module';\nimport { ThemingModule } from './services/theming/theming.module';\nimport { StoreModule } from './store/store.module';\n\n\n@NgModule({\n  imports: [HttpClientModule, HeaderModule, StoreModule, ThemingModule],\n  exports: [HeaderModule]\n})\nexport class CoreModule {\n  constructor(@Optional() @SkipSelf() core: CoreModule) {\n    if (core) {\n      throw new Error('The core module should only be imported once in the root module');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataSource.html":{"url":"interfaces/DataSource.html","title":"interface - DataSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DataSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Backend query interface. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getAggregateResults\n                                \n                                \n                                    getImageViewerData\n                                \n                                \n                                    getListResults\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAggregateResults\n                        \n                        \n                    \n                \n            \n            \n                \ngetAggregateResults(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/interfaces.ts:92\n                \n            \n\n\n            \n                \n                    Query aggregate items. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImageViewerData\n                        \n                        \n                    \n                \n            \n            \n                \ngetImageViewerData(iri: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/interfaces.ts:94\n                \n            \n\n\n            \n                \n                    Query a specific image. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    iri\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getListResults\n                        \n                        \n                    \n                \n            \n            \n                \ngetListResults(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/interfaces.ts:90\n                \n            \n\n\n            \n                \n                    Query list items. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface AggregateResult {\n  /** Queried field. */\n  label: string;\n  /** Aggregate value. */\n  count: string | number;\n}\n\n/** Result for list of tissues. */\nexport interface ListResult {\n  /** Identifier. */\n  '@id': string;\n  /** Type string. */\n  '@type': 'ListResult';\n  /** Identifier. */\n  id: string;\n  /** Tissue label. */\n  label: string;\n  /** Short description. */\n  shortInfo?: string[];\n  /** Small icon url. */\n  thumbnailUrl?: string;\n  /** Url for data download. */\n  downloadUrl?: string;\n  /** Description of data download. */\n  downloadTooltip?: string;\n  /** Result url. */\n  resultUrl?: string;\n  /** Type of result url. */\n  resultType?: 'external_link' | 'local_link' | 'image_viewer';\n  /** If the result should be highlighted */\n  highlighted?: boolean;\n}\n\n/** Data for image viewer display. */\nexport interface ImageViewerData {\n  /** Identifier. */\n  '@id': string;\n  /** Type string. */\n  '@type': 'ImageViewerData';\n  /** Identifier. */\n  id: string;\n  /** Image label. */\n  label: string;\n  /** Containing organ name. */\n  organName: string;\n  /** Other metadata. */\n  metadata: { label: string, value: string }[];\n}\n\n/** Item that can be searched for. */\nexport interface SearchableItem {\n  /** Identifier. */\n  id: string;\n  /** Gender. */\n  sex?: 'Male' | 'Female';\n  /** Age. */\n  age?: number;\n  /** BMI. */\n  bmi?: number;\n  /** Ontology terms. */\n  ontologyTerms?: Set;\n}\n\n/** Options applied during queries. */\nexport interface Filter {\n  /** Gender. */\n  sex: 'Both' | 'Male' | 'Female';\n  /** Age range. */\n  ageRange: [number, number];\n  /** BMI range. */\n  bmiRange: [number, number];\n  /** TMC. */\n  tmc: string[];\n  /** Technologies. */\n  technologies: string[];\n  /** Ontology terms. */\n  ontologyTerms: string[];\n  /** Entities to be highlighted */\n  highlightedEntities?: string[];\n  /** Whether it has a spatial entity. */\n  hasSpatialEntity?: boolean;\n  /** Include optional debugging information */\n  debug?: boolean;\n}\n\n/** Backend query interface. */\nexport interface DataSource {\n  /** Query list items. */\n  getListResults(filter?: Filter): Promise;\n  /** Query aggregate items. */\n  getAggregateResults(filter?: Filter): Promise;\n  /** Query a specific image. */\n  getImageViewerData(iri: string): Promise;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataSource-1.html":{"url":"interfaces/DataSource-1.html","title":"interface - DataSource-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DataSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-image-viewer/src/lib/image-viewer.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        info\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        info\n                                    \n                                \n                                \n                                    \n                                        info:         ZarrInfo | OMEZarrInfo | TiffInfo\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ZarrInfo | OMEZarrInfo | TiffInfo\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         LoaderType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LoaderType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Deck, Layer, View, Viewport } from '@deck.gl/core';\nimport { Loader, VivView } from '@hubmap/vitessce-image-viewer';\nimport { bind } from 'bind-decorator';\n\nimport { createLoader, LoaderType, OMEZarrInfo, TiffInfo, ZarrInfo } from './loader';\nimport { flatMap, getVivId } from './utils';\n\n\ntype ValueOrGenerator = T | ((...args: U) => T);\n\ntype DeckProps = ConstructorParameters[0];\ninterface ExtDeckProps extends DeckProps {\n  canvas?: string | HTMLElement;\n}\n\ntype DeckCallbackArgs = Parameters>[0];\ntype LayerFilterArgs = DeckCallbackArgs;\ntype OnViewStateChangeArgs = DeckCallbackArgs & { viewId: string };\n\nexport type State = Record;\nexport type LayerConfig = Record;\n\nexport interface ChannelConfig {\n  active: boolean;\n  color: [number, number, number];\n  slider: [number, number];\n}\n\nexport interface DataSource {\n  type: LoaderType;\n  info: ZarrInfo | OMEZarrInfo | TiffInfo;\n}\n\nexport interface ImageViewerProps {\n  id: string;\n  initialViewState: State;\n  canvas?: HTMLCanvasElement;\n  width?: number;\n  height?: number;\n  sources?: DataSource[];\n  channelNames?: string[];\n  defaultChannelConfig?: Partial;\n}\n\nfunction applyPropDefaults(props: Props): Props & Required {\n  return {\n    canvas: null,\n    width: 0,\n    height: 0,\n    sources: [],\n    channelNames: [],\n    ...props,\n    defaultChannelConfig: {\n      active: true,\n      color: [255, 255, 255],\n      slider: [1500, 20000],\n      ...(props.defaultChannelConfig ?? {})\n    }\n  };\n}\n\n\nexport abstract class ImageViewer {\n  readonly props: Props & Required;\n\n  get width(): number { return this._width; }\n  get height(): number { return this._height; }\n  private _width: number;\n  private _height: number;\n\n  get sources(): DataSource[] { return this._sources; }\n  get loaders(): Loader[] { return this._loaders; }\n  private _sources: DataSource[] = [];\n  private _loaders: Loader[] = [];\n\n  get channelNames(): string[] { return Object.keys(this.channelConfigs); }\n  get channelConfigs(): Record { return this._channelConfigs; }\n  private _channelConfigs: Record = {};\n\n  protected vivViews: VivView[] = [];\n  protected views: View[] = [];\n  protected layers: Layer[] = [];\n  protected layerConfigs: LayerConfig[] = [];\n  protected states: Record = {};\n\n  private deck: Deck;\n\n  constructor(props: Props) {\n    const reqProps = this.props = applyPropDefaults(props);\n    this.deck = this.initializeDeck(reqProps);\n    this._width = reqProps.width;\n    this._height = reqProps.height;\n\n    if (reqProps.sources.length > 0) {\n      this.setSources(reqProps.sources);\n    }\n  }\n\n  clear(): void {\n    this._sources = [];\n    this._loaders = [];\n    this._channelConfigs = {};\n    this.vivViews = [];\n    this.layers = [];\n    this.layerConfigs = [];\n    this.states = {};\n    this.update();\n  }\n\n  finalize(): void {\n    this.deck.finalize();\n  }\n\n  async setSize(width: number, height: number): Promise {\n    this._width = width;\n    this._height = height;\n    this.vivViews = await this.createVivViews();\n\n    this.updateState((view, current) => ({\n      viewState: {\n        ...current,\n        width,\n        height,\n        id: view.id\n      }\n    }));\n    this.update();\n    this.deck.redraw(true);\n\n    return this;\n  }\n\n  async setSources(sources: DataSource[]): Promise {\n    const loaderPromises = sources.map(source => createLoader(source.type, source.info));\n    const loaders = await Promise.all(loaderPromises);\n\n    this._sources = sources;\n    this._loaders = loaders;\n    this.resetChannelConfigs();\n    this.vivViews = await this.createVivViews();\n    this.layerConfigs = await this.createLayerConfigs();\n    this.updateState(view => ({ viewState: view.initialViewState }));\n    this.update();\n\n    return this;\n  }\n\n  async updateChannelConfigs(configs: Record>): Promise {\n    const newConfigs = Object.entries(configs).reduce((result, [key, config]) => {\n      return !(key in result) ? result : {\n        ...result,\n        [key]: {\n          ...result[key],\n          ...config\n        }\n      };\n    }, this.channelConfigs);\n\n    if (newConfigs === this.channelConfigs) { return this; }\n\n    this._channelConfigs = newConfigs;\n    this.layerConfigs = await this.createLayerConfigs();\n    this.update();\n\n    return this;\n  }\n\n  protected abstract async createVivViews(): Promise;\n  protected abstract async createLayerConfigs(): Promise;\n\n  protected update(): void {\n    this.updateViews();\n    this.updateLayers();\n    this.updateDeckProps({\n      views: this.views,\n      layers: this.layers,\n      viewState: this.states\n    });\n  }\n\n  protected updateViews(): void {\n    this.views = this.vivViews.map(viv => viv.getDeckGlView());\n  }\n\n  protected updateLayers(): void {\n    const { vivViews, states, layerConfigs } = this;\n    const length = layerConfigs.length;\n\n    this.layers = flatMap(vivViews, (view, index) => view.getLayers({\n      viewStates: states,\n      props: layerConfigs[index % length]\n    }));\n  }\n\n  protected updateState(\n    args: ValueOrGenerator, [VivView, State]>\n  ): void {\n    const argsGenerator = typeof args === 'function' ? args : () => args;\n    const currentStates = this.states;\n\n    this.states = this.vivViews.reduce((states, view) => {\n      const current = currentStates[view.id] ?? {};\n      states[view.id] = view.filterViewState(argsGenerator(view, current));\n      return states;\n    }, {} as Record);\n  }\n\n  protected updateDeckProps(props: Partial): void {\n    this.deck.setProps(props);\n  }\n\n  private initializeDeck(props: Props & Required): Deck {\n    const { id, canvas, width, height } = props;\n    return new Deck({\n      id,\n      canvas,\n      width,\n      height,\n      views: [],\n      layers: [],\n      effects: [],\n      viewState: {},\n      layerFilter: this.layerFilter,\n      onViewStateChange: this.onViewStateChange,\n      glOptions: {\n        webgl2: true\n      }\n    } as ExtDeckProps);\n  }\n\n  private resetChannelConfigs(): void {\n    const { loaders, props: { channelNames, defaultChannelConfig } } = this;\n    const keys = channelNames.length > 0 ?\n      channelNames :\n      flatMap(loaders, loader => loader.channelNames ?? []);\n\n    this._channelConfigs = keys.reduce((configs, key) => ({\n      ...configs,\n      [key]: defaultChannelConfig as ChannelConfig\n    }), {} as Record);\n  }\n\n  @bind\n  private layerFilter({ layer, viewport }: LayerFilterArgs): boolean {\n    const { id: viewportId } = viewport as Viewport & { id: string };\n    return layer.id.includes(getVivId(viewportId));\n  }\n\n  @bind\n  private onViewStateChange({ viewId, viewState, oldViewState }: OnViewStateChangeArgs): void {\n    this.updateState((_view, current) => ({\n      viewState: { ...viewState, id: viewId },\n      oldViewState,\n      currentViewState: current\n    }));\n    this.update();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataSourceService.html":{"url":"injectables/DataSourceService.html","title":"injectable - DataSourceService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DataSourceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/data-source/data-source.service.ts\n        \n\n            \n                Description\n            \n            \n                Backend data queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _afterConnected\n                            \n                            \n                                dataSource\n                            \n                            \n                                dbOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAggregateResults\n                            \n                            \n                                    Private\n                                    Async\n                                getDB\n                            \n                            \n                                getImageViewerData\n                            \n                            \n                                getListResults\n                            \n                            \n                                getOntologyTermOccurences\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/data-source/data-source.service.ts:21\n                            \n                        \n\n                \n                    \n                            Creates an instance of data source service.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAggregateResults\n                        \n                        \n                    \n                \n            \n            \n                \ngetAggregateResults(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/data-source/data-source.service.ts:77\n                \n            \n\n\n            \n                \n                    Queries for aggregate values.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Currently applied filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        An observable emitting the results.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getDB\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDB()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/data-source/data-source.service.ts:53\n                \n            \n\n\n            \n                \n                    Gets a reference to the database.\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise that resolves to the database when ready.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getImageViewerData\n                        \n                        \n                    \n                \n            \n            \n                \ngetImageViewerData(iri: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/data-source/data-source.service.ts:97\n                \n            \n\n\n            \n                \n                    Queries data for a specific image.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    iri\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The image identifier ('\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        An observable emitting the result.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getListResults\n                        \n                        \n                    \n                \n            \n            \n                \ngetListResults(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/data-source/data-source.service.ts:67\n                \n            \n\n\n            \n                \n                    Queries for list values.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Currently applied filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        An observable emitting the results.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOntologyTermOccurences\n                        \n                        \n                    \n                \n            \n            \n                \ngetOntologyTermOccurences(filter?: Filter)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/data-source/data-source.service.ts:87\n                \n            \n\n\n            \n                \n                    Queries for ontology term counts.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Currently applied filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        An observable emitting the results.\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _afterConnected\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Promise\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/data-source/data-source.service.ts:21\n                            \n                        \n\n                \n                    \n                        Indicator of when the database is ready. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataSource\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Remote | CCFDatabase\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/data-source/data-source.service.ts:17\n                            \n                        \n\n                \n                    \n                        The underlying database. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dbOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CCFDatabaseOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/data-source/data-source.service.ts:19\n                            \n                        \n\n                \n                    \n                        Database initialization options. \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { AggregateResult, CCFDatabase, CCFDatabaseOptions, Filter, ImageViewerData, ListResult } from 'ccf-database';\nimport { Remote, wrap } from 'comlink';\nimport { from, Observable } from 'rxjs';\n\nimport { environment } from './../../../../environments/environment';\n\n\n/**\n * Backend data queries.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataSourceService {\n  /** The underlying database. */\n  dataSource: Remote | CCFDatabase;\n  /** Database initialization options. */\n  dbOptions: CCFDatabaseOptions;\n  /** Indicator of when the database is ready. */\n  private _afterConnected: Promise;\n\n  /**\n   * Creates an instance of data source service.\n   */\n  constructor() {\n    if (typeof Worker !== 'undefined' && !environment.disableDbWorker) {\n      const worker = new Worker('./data-source.worker', { type: 'module' });\n      this.dataSource = wrap(worker);\n    } else {\n      this.dataSource = new CCFDatabase();\n    }\n    this.dbOptions = environment.dbOptions as CCFDatabaseOptions;\n\n    if (typeof globalThis === 'object') {\n      // If a global dbOptions object is set, use this for connecting to the db\n      if (globalThis.dbOptions) {\n        this.dbOptions = { ...this.dbOptions, ...globalThis.dbOptions } as CCFDatabaseOptions;\n      }\n\n      // In development, make the db globally accessible\n      if (!environment.production) {\n        ((globalThis as unknown) as { db: Remote | CCFDatabase }).db = this.dataSource;\n      }\n    }\n  }\n\n  /**\n   * Gets a reference to the database.\n   *\n   * @returns A promise that resolves to the database when ready.\n   */\n  private async getDB(): Promise | CCFDatabase> {\n    if (!this._afterConnected) {\n      this._afterConnected = this.dataSource.connect(this.dbOptions);\n    }\n    await this._afterConnected;\n    return this.dataSource;\n  }\n\n  /**\n   * Queries for list values.\n   *\n   * @param [filter] Currently applied filter.\n   * @returns An observable emitting the results.\n   */\n  getListResults(filter?: Filter): Observable {\n    return from(this.getDB().then((db) => db.getListResults(filter)));\n  }\n\n  /**\n   * Queries for aggregate values.\n   *\n   * @param [filter] Currently applied filter.\n   * @returns An observable emitting the results.\n   */\n  getAggregateResults(filter?: Filter): Observable {\n    return from(this.getDB().then((db) => db.getAggregateResults(filter)));\n  }\n\n  /**\n   * Queries for ontology term counts.\n   *\n   * @param [filter] Currently applied filter.\n   * @returns An observable emitting the results.\n   */\n  getOntologyTermOccurences(filter?: Filter): Observable> {\n    return from(this.getDB().then((db) => db.getOntologyTermOccurences(filter)));\n  }\n\n  /**\n   * Queries data for a specific image.\n   *\n   * @param iri The image identifier ('@id').\n   * @returns An observable emitting the result.\n   */\n  getImageViewerData(iri: string): Observable {\n    return from(this.getDB().then((db) => db.getImageViewerData(iri)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataState.html":{"url":"injectables/DataState.html","title":"injectable - DataState","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DataState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/data/data.state.ts\n        \n\n            \n                Description\n            \n            \n                Data state repository and service.\n\n            \n\n            \n                Extends\n            \n            \n                    NgxsDataRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _aggregateDataQueryStatus$\n                            \n                            \n                                    Private\n                                    Readonly\n                                _listDataQueryStatus$\n                            \n                            \n                                    Private\n                                    Readonly\n                                _termOccurencesDataQueryStatus$\n                            \n                            \n                                    Readonly\n                                aggregateData$\n                            \n                            \n                                    Readonly\n                                aggregateDataQueryStatus$\n                            \n                            \n                                    Readonly\n                                filter$\n                            \n                            \n                                    Readonly\n                                listData$\n                            \n                            \n                                    Readonly\n                                listDataQueryStatus$\n                            \n                            \n                                    Readonly\n                                ontologyTermsFullData$\n                            \n                            \n                                    Readonly\n                                queryStatus$\n                            \n                            \n                                    Readonly\n                                termOccurencesData$\n                            \n                            \n                                    Readonly\n                                termOccurencesDataQueryStatus$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                aggregateData\n                            \n                            \n                                    Private\n                                listData\n                            \n                            \n                                    Private\n                                termOccurencesData\n                            \n                            \n                                updateFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(source: DataSourceService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/store/data/data.state.ts:130\n                            \n                        \n\n                \n                    \n                            Creates an instance of data state.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        source\n                                                  \n                                                        \n                                                                        DataSourceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Data query service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            aggregateData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregateData(filter: Filter)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @bind()\n                \n            \n\n            \n                \n                    Defined in src/app/core/store/data/data.state.ts:181\n                \n            \n\n\n            \n                \n                    Queries for aggregate data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The filter used during query.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ObservableInput\n\n                    \n                    \n                        The result of the query.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            listData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    listData(filter: Filter)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @bind()\n                \n            \n\n            \n                \n                    Defined in src/app/core/store/data/data.state.ts:169\n                \n            \n\n\n            \n                \n                    Queries for list data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The filter used during query.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ObservableInput\n\n                    \n                    \n                        The result of the query.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            termOccurencesData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    termOccurencesData(filter: Filter)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @bind()\n                \n            \n\n            \n                \n                    Defined in src/app/core/store/data/data.state.ts:193\n                \n            \n\n\n            \n                \n                    Queries for term occurences data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The filter used during query.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ObservableInput>\n\n                    \n                    \n                        The result of the query.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateFilter\n                        \n                        \n                    \n                \n            \n            \n                \nupdateFilter(filter: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @DataAction()\n                \n            \n\n            \n                \n                    Defined in src/app/core/store/data/data.state.ts:155\n                \n            \n\n\n            \n                \n                    Updates the current filter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Changes to be made to the current filter.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _aggregateDataQueryStatus$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new ReplaySubject(1)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/data/data.state.ts:94\n                            \n                        \n\n                \n                    \n                        Implementation subject for aggregateDataQueryStatus$. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _listDataQueryStatus$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new ReplaySubject(1)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/data/data.state.ts:92\n                            \n                        \n\n                \n                    \n                        Implementation subject for listDataQueryStatus$. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            _termOccurencesDataQueryStatus$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new ReplaySubject(1)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/data/data.state.ts:96\n                            \n                        \n\n                \n                    \n                        Implementation subject for termOccurencesDataQueryStatus$. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            aggregateData$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.filter$.pipe(queryData(\n    this.aggregateData, sendCompletedTo(this._aggregateDataQueryStatus$)\n  ))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/data/data.state.ts:107\n                            \n                        \n\n                \n                    \n                        Latest aggregate query data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            aggregateDataQueryStatus$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this._aggregateDataQueryStatus$.pipe(distinct())\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/data/data.state.ts:118\n                            \n                        \n\n                \n                    \n                        Current status of queries in the aggregateData$ observable. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            filter$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.state$.pipe(pluck('filter'))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/data/data.state.ts:101\n                            \n                        \n\n                \n                    \n                        Current filter. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            listData$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.filter$.pipe(queryData(\n    this.listData, sendCompletedTo(this._listDataQueryStatus$)\n  ))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/data/data.state.ts:103\n                            \n                        \n\n                \n                    \n                        Latest list query data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            listDataQueryStatus$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this._listDataQueryStatus$.pipe(distinct())\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/data/data.state.ts:116\n                            \n                        \n\n                \n                    \n                        Current status of queries in the listData$ observable. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            ontologyTermsFullData$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable>\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/data/data.state.ts:98\n                            \n                        \n\n                \n                    \n                        Keeping track of all ontology terms there is data for. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            queryStatus$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : combineLatest([\n    this.listDataQueryStatus$,\n    this.aggregateDataQueryStatus$,\n    this.termOccurencesDataQueryStatus$\n  ]).pipe(\n    map(states => allCompleted(states) ? DataQueryState.Completed : DataQueryState.Running),\n    distinct()\n  )\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/data/data.state.ts:123\n                            \n                        \n\n                \n                    \n                        Current status of all queries. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            termOccurencesData$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.filter$.pipe(queryData(\n    this.termOccurencesData, sendCompletedTo(this._termOccurencesDataQueryStatus$)\n  ))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/data/data.state.ts:111\n                            \n                        \n\n                \n                    \n                        Latest term occurences query data. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            termOccurencesDataQueryStatus$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this._termOccurencesDataQueryStatus$.pipe(distinct())\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/data/data.state.ts:120\n                            \n                        \n\n                \n                    \n                        Current status of queries in the aggregateData$ observable. \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { DataAction, StateRepository } from '@ngxs-labs/data/decorators';\nimport { NgxsDataRepository } from '@ngxs-labs/data/repositories';\nimport { State } from '@ngxs/store';\nimport { bind } from 'bind-decorator';\nimport { AggregateResult, Filter, ListResult } from 'ccf-database';\nimport { combineLatest, Observable, ObservableInput, ObservedValueOf, OperatorFunction, ReplaySubject, Subject } from 'rxjs';\nimport { distinct, map, pluck, publishReplay, refCount, switchMap, tap } from 'rxjs/operators';\n\nimport { DataSourceService } from '../../services/data-source/data-source.service';\n\n\n/** Default values for filters. */\nexport const DEFAULT_FILTER: Filter = {\n  sex: 'Both',\n  ageRange: [1, 110],\n  bmiRange: [13, 83],\n  tmc: [],\n  technologies: [],\n  ontologyTerms: ['http://purl.obolibrary.org/obo/UBERON_0013702']\n};\n\n/** Current state of data queries. */\nexport enum DataQueryState {\n  /** One or more queries are running. */\n  Running = 'running',\n  /** All queries have completed. */\n  Completed = 'completed'\n}\n\n/**\n * Helper for testing that all states in an array are `DataQueryState.Completed`.\n *\n * @param states The array of states to test.\n * @returns true if all values in the array is `Completed`.\n */\nfunction allCompleted(states: DataQueryState[]): boolean {\n  return states.every(state => state === DataQueryState.Completed);\n}\n\n/**\n * Helper creating a function that sends a `DataQueryState.Completed` to\n * a subject whenever it is called.\n *\n * @param subject The subject to send completed messagess to.\n * @returns The function.\n */\nfunction sendCompletedTo(subject: Subject): () => void {\n  return () => subject.next(DataQueryState.Completed);\n}\n\n/**\n * Helper operator that combines querying with sharing and replay functionality.\n *\n * @param query The data query function.\n * @param [next] An optional listener on the values emitted by the latest query.\n * @returns The combined pipe operator function.\n */\nfunction queryData>(\n  query: (value: T, index: number) => O,\n  next?: (value: ObservedValueOf) => void\n): OperatorFunction> {\n  return source => source.pipe(\n    switchMap(query),\n    tap(next),\n    publishReplay(1),\n    refCount()\n  );\n}\n\n\n/** Store data state. */\nexport interface DataStateModel {\n  /** Current filter. */\n  filter: Filter;\n}\n\n\n/**\n * Data state repository and service.\n */\n@StateRepository()\n@State({\n  name: 'data',\n  defaults: {\n    filter: DEFAULT_FILTER\n  }\n})\n@Injectable()\nexport class DataState extends NgxsDataRepository {\n  /** Implementation subject for listDataQueryStatus$. */\n  private readonly _listDataQueryStatus$ = new ReplaySubject(1);\n  /** Implementation subject for aggregateDataQueryStatus$. */\n  private readonly _aggregateDataQueryStatus$ = new ReplaySubject(1);\n  /** Implementation subject for termOccurencesDataQueryStatus$. */\n  private readonly _termOccurencesDataQueryStatus$ = new ReplaySubject(1);\n  /** Keeping track of all ontology terms there is data for. */\n  readonly ontologyTermsFullData$: Observable>;\n\n  /** Current filter. */\n  readonly filter$ = this.state$.pipe(pluck('filter'));\n  /** Latest list query data. */\n  readonly listData$ = this.filter$.pipe(queryData(\n    this.listData, sendCompletedTo(this._listDataQueryStatus$)\n  ));\n  /** Latest aggregate query data. */\n  readonly aggregateData$ = this.filter$.pipe(queryData(\n    this.aggregateData, sendCompletedTo(this._aggregateDataQueryStatus$)\n  ));\n  /** Latest term occurences query data. */\n  readonly termOccurencesData$ = this.filter$.pipe(queryData(\n    this.termOccurencesData, sendCompletedTo(this._termOccurencesDataQueryStatus$)\n  ));\n\n  /** Current status of queries in the listData$ observable. */\n  readonly listDataQueryStatus$ = this._listDataQueryStatus$.pipe(distinct());\n  /** Current status of queries in the aggregateData$ observable. */\n  readonly aggregateDataQueryStatus$ = this._aggregateDataQueryStatus$.pipe(distinct());\n  /** Current status of queries in the aggregateData$ observable. */\n  readonly termOccurencesDataQueryStatus$ = this._termOccurencesDataQueryStatus$.pipe(distinct());\n\n  /** Current status of all queries. */\n  readonly queryStatus$ = combineLatest([\n    this.listDataQueryStatus$,\n    this.aggregateDataQueryStatus$,\n    this.termOccurencesDataQueryStatus$\n  ]).pipe(\n    map(states => allCompleted(states) ? DataQueryState.Completed : DataQueryState.Running),\n    distinct()\n  );\n\n  /**\n   * Creates an instance of data state.\n   *\n   * @param source Data query service.\n   */\n  constructor(private readonly source: DataSourceService) {\n    super();\n    // Start everything in the completed state\n    this._listDataQueryStatus$.next(DataQueryState.Completed);\n    this._aggregateDataQueryStatus$.next(DataQueryState.Completed);\n    this._termOccurencesDataQueryStatus$.next(DataQueryState.Completed);\n\n    const ontologyTermsData = new ReplaySubject>(1);\n    source.getOntologyTermOccurences().subscribe(ontologyTermsData);\n    this.ontologyTermsFullData$ = ontologyTermsData;\n  }\n\n  /**\n   * Updates the current filter.\n   *\n   * @param filter Changes to be made to the current filter.\n   */\n  @DataAction()\n  updateFilter(filter: Partial): void {\n    this.patchState({\n      // Might need to do a deep compare of current and new filter\n      filter: Object.assign({}, this.getState().filter, filter)\n    });\n  }\n\n  /**\n   * Queries for list data.\n   *\n   * @param filter The filter used during query.\n   * @returns The result of the query.\n   */\n  @bind\n  private listData(filter: Filter): ObservableInput {\n    this._listDataQueryStatus$.next(DataQueryState.Running);\n    return this.source.getListResults(filter);\n  }\n\n  /**\n   * Queries for aggregate data.\n   *\n   * @param filter The filter used during query.\n   * @returns The result of the query.\n   */\n  @bind\n  private aggregateData(filter: Filter): ObservableInput {\n    this._aggregateDataQueryStatus$.next(DataQueryState.Running);\n    return this.source.getAggregateResults(filter);\n  }\n\n  /**\n   * Queries for term occurences data.\n   *\n   * @param filter The filter used during query.\n   * @returns The result of the query.\n   */\n  @bind\n  private termOccurencesData(filter: Filter): ObservableInput> {\n    this._termOccurencesDataQueryStatus$.next(DataQueryState.Running);\n    return this.source.getOntologyTermOccurences(filter);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataStateModel.html":{"url":"interfaces/DataStateModel.html","title":"interface - DataStateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DataStateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/data/data.state.ts\n        \n\n            \n                Description\n            \n            \n                Store data state. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        filter\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filter\n                                    \n                                \n                                \n                                    \n                                        filter:         Filter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Filter\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current filter. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { DataAction, StateRepository } from '@ngxs-labs/data/decorators';\nimport { NgxsDataRepository } from '@ngxs-labs/data/repositories';\nimport { State } from '@ngxs/store';\nimport { bind } from 'bind-decorator';\nimport { AggregateResult, Filter, ListResult } from 'ccf-database';\nimport { combineLatest, Observable, ObservableInput, ObservedValueOf, OperatorFunction, ReplaySubject, Subject } from 'rxjs';\nimport { distinct, map, pluck, publishReplay, refCount, switchMap, tap } from 'rxjs/operators';\n\nimport { DataSourceService } from '../../services/data-source/data-source.service';\n\n\n/** Default values for filters. */\nexport const DEFAULT_FILTER: Filter = {\n  sex: 'Both',\n  ageRange: [1, 110],\n  bmiRange: [13, 83],\n  tmc: [],\n  technologies: [],\n  ontologyTerms: ['http://purl.obolibrary.org/obo/UBERON_0013702']\n};\n\n/** Current state of data queries. */\nexport enum DataQueryState {\n  /** One or more queries are running. */\n  Running = 'running',\n  /** All queries have completed. */\n  Completed = 'completed'\n}\n\n/**\n * Helper for testing that all states in an array are `DataQueryState.Completed`.\n *\n * @param states The array of states to test.\n * @returns true if all values in the array is `Completed`.\n */\nfunction allCompleted(states: DataQueryState[]): boolean {\n  return states.every(state => state === DataQueryState.Completed);\n}\n\n/**\n * Helper creating a function that sends a `DataQueryState.Completed` to\n * a subject whenever it is called.\n *\n * @param subject The subject to send completed messagess to.\n * @returns The function.\n */\nfunction sendCompletedTo(subject: Subject): () => void {\n  return () => subject.next(DataQueryState.Completed);\n}\n\n/**\n * Helper operator that combines querying with sharing and replay functionality.\n *\n * @param query The data query function.\n * @param [next] An optional listener on the values emitted by the latest query.\n * @returns The combined pipe operator function.\n */\nfunction queryData>(\n  query: (value: T, index: number) => O,\n  next?: (value: ObservedValueOf) => void\n): OperatorFunction> {\n  return source => source.pipe(\n    switchMap(query),\n    tap(next),\n    publishReplay(1),\n    refCount()\n  );\n}\n\n\n/** Store data state. */\nexport interface DataStateModel {\n  /** Current filter. */\n  filter: Filter;\n}\n\n\n/**\n * Data state repository and service.\n */\n@StateRepository()\n@State({\n  name: 'data',\n  defaults: {\n    filter: DEFAULT_FILTER\n  }\n})\n@Injectable()\nexport class DataState extends NgxsDataRepository {\n  /** Implementation subject for listDataQueryStatus$. */\n  private readonly _listDataQueryStatus$ = new ReplaySubject(1);\n  /** Implementation subject for aggregateDataQueryStatus$. */\n  private readonly _aggregateDataQueryStatus$ = new ReplaySubject(1);\n  /** Implementation subject for termOccurencesDataQueryStatus$. */\n  private readonly _termOccurencesDataQueryStatus$ = new ReplaySubject(1);\n  /** Keeping track of all ontology terms there is data for. */\n  readonly ontologyTermsFullData$: Observable>;\n\n  /** Current filter. */\n  readonly filter$ = this.state$.pipe(pluck('filter'));\n  /** Latest list query data. */\n  readonly listData$ = this.filter$.pipe(queryData(\n    this.listData, sendCompletedTo(this._listDataQueryStatus$)\n  ));\n  /** Latest aggregate query data. */\n  readonly aggregateData$ = this.filter$.pipe(queryData(\n    this.aggregateData, sendCompletedTo(this._aggregateDataQueryStatus$)\n  ));\n  /** Latest term occurences query data. */\n  readonly termOccurencesData$ = this.filter$.pipe(queryData(\n    this.termOccurencesData, sendCompletedTo(this._termOccurencesDataQueryStatus$)\n  ));\n\n  /** Current status of queries in the listData$ observable. */\n  readonly listDataQueryStatus$ = this._listDataQueryStatus$.pipe(distinct());\n  /** Current status of queries in the aggregateData$ observable. */\n  readonly aggregateDataQueryStatus$ = this._aggregateDataQueryStatus$.pipe(distinct());\n  /** Current status of queries in the aggregateData$ observable. */\n  readonly termOccurencesDataQueryStatus$ = this._termOccurencesDataQueryStatus$.pipe(distinct());\n\n  /** Current status of all queries. */\n  readonly queryStatus$ = combineLatest([\n    this.listDataQueryStatus$,\n    this.aggregateDataQueryStatus$,\n    this.termOccurencesDataQueryStatus$\n  ]).pipe(\n    map(states => allCompleted(states) ? DataQueryState.Completed : DataQueryState.Running),\n    distinct()\n  );\n\n  /**\n   * Creates an instance of data state.\n   *\n   * @param source Data query service.\n   */\n  constructor(private readonly source: DataSourceService) {\n    super();\n    // Start everything in the completed state\n    this._listDataQueryStatus$.next(DataQueryState.Completed);\n    this._aggregateDataQueryStatus$.next(DataQueryState.Completed);\n    this._termOccurencesDataQueryStatus$.next(DataQueryState.Completed);\n\n    const ontologyTermsData = new ReplaySubject>(1);\n    source.getOntologyTermOccurences().subscribe(ontologyTermsData);\n    this.ontologyTermsFullData$ = ontologyTermsData;\n  }\n\n  /**\n   * Updates the current filter.\n   *\n   * @param filter Changes to be made to the current filter.\n   */\n  @DataAction()\n  updateFilter(filter: Partial): void {\n    this.patchState({\n      // Might need to do a deep compare of current and new filter\n      filter: Object.assign({}, this.getState().filter, filter)\n    });\n  }\n\n  /**\n   * Queries for list data.\n   *\n   * @param filter The filter used during query.\n   * @returns The result of the query.\n   */\n  @bind\n  private listData(filter: Filter): ObservableInput {\n    this._listDataQueryStatus$.next(DataQueryState.Running);\n    return this.source.getListResults(filter);\n  }\n\n  /**\n   * Queries for aggregate data.\n   *\n   * @param filter The filter used during query.\n   * @returns The result of the query.\n   */\n  @bind\n  private aggregateData(filter: Filter): ObservableInput {\n    this._aggregateDataQueryStatus$.next(DataQueryState.Running);\n    return this.source.getAggregateResults(filter);\n  }\n\n  /**\n   * Queries for term occurences data.\n   *\n   * @param filter The filter used during query.\n   * @returns The result of the query.\n   */\n  @bind\n  private termOccurencesData(filter: Filter): ObservableInput> {\n    this._termOccurencesDataQueryStatus$.next(DataQueryState.Running);\n    return this.source.getOntologyTermOccurences(filter);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DefaultIconDefinition.html":{"url":"interfaces/DefaultIconDefinition.html","title":"interface - DefaultIconDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DefaultIconDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/icon-registry/default-icons.ts\n        \n\n            \n                Description\n            \n            \n                Object definition for icon that should be loaded on startup.\nUnlike runtime registration object this does not need url ot html\nto be sanitized before hand.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        html\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                            Optional\n                                        namespace\n                                \n                                \n                                            Optional\n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        html\n                                    \n                                \n                                \n                                    \n                                        html:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Html containing the svg of the icon or icon set.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Name to register the icon under.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        namespace\n                                    \n                                \n                                \n                                    \n                                        namespace:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Namespace to register the icon or icon set under.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Url to fetch the icon or icon set from.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface DefaultIconDefinition {\n  /**\n   * Name to register the icon under.\n   */\n  name?: string;\n\n  /**\n   * Namespace to register the icon or icon set under.\n   */\n  namespace?: string;\n\n  /**\n   * Url to fetch the icon or icon set from.\n   */\n  url?: string;\n\n  /**\n   * Html containing the svg of the icon or icon set.\n   */\n  html?: string;\n}\n\n\n/**\n * Icons registered at startup.\n */\nexport const DEFAULT_ICONS: DefaultIconDefinition[] = [\n  { name: 'logo', namespace: 'app', url: 'assets/icons/app/hubmap-logo.svg' },\n\n  { name: 'filter', url: 'assets/icons/filter.svg' }\n\n  // Add default icons here!\n];\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DrawerContainersChanged.html":{"url":"interfaces/DrawerContainersChanged.html","title":"interface - DrawerContainersChanged","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DrawerContainersChanged\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/components/drawer/messages.ts\n        \n\n            \n                Description\n            \n            \n                Message sent when a drawer component changes. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        drawers\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        drawers\n                                    \n                                \n                                \n                                    \n                                        drawers:     [unknown, unknown]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [unknown, unknown]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    References to the drawer components. Can contain undefined values. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Message type. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  Message as GenericMessage, MessageChannel as GenericMessageChannel, MessageService as GenericMessageService,\n} from '../../services/message/message.service';\n\n\n/** Message sent when the content component changes. */\nexport interface ContentContainerChanged {\n  /** Message type. */\n  type: 'content-container-changed';\n  /** A reference to the new content component. */\n  content: unknown;\n}\n\n/** Message sent when a drawer component changes. */\nexport interface DrawerContainersChanged {\n  /** Message type. */\n  type: 'drawer-containers-changed';\n  /** References to the drawer components. Can contain undefined values. */\n  drawers: [unknown, unknown];\n}\n\n/** Payload types for messages sent from the drawer container. */\nexport type ContainerPayload = ContentContainerChanged | DrawerContainersChanged;\n\n\n/** Message sent when a drawer has finished initializing. */\nexport interface DrawerInitialized {\n  /** Message type. */\n  type: 'drawer-initialized';\n}\n\n/** Message send when the state of a drawer changes. */\nexport interface DrawerToggled {\n  /** Message type. */\n  type: 'drawer-toggled';\n  /** Whether the drawer is open. */\n  opened: boolean;\n  /** Whether the drawer is expanded. Implies opened. */\n  expanded: boolean;\n  /** Width of the drawer. */\n  width: number;\n  /** Margin used by the drawer for toggle button, etc. */\n  margin: number;\n}\n\n/** Payload types for messages sent from the drawers. */\nexport type DrawerPayload = DrawerToggled | DrawerInitialized;\n\n\n/** Combined payload type for all drawer sub components. */\nexport type Payload = ContainerPayload | DrawerPayload;\n/** Specific message type. */\nexport type Message = GenericMessage;\n/** Specific channel type. */\nexport type MessageChannel = GenericMessageChannel;\n/** Specific service type. */\nexport type MessageService = GenericMessageService;\n/** Reference to the service class. */\nexport const MessageService = GenericMessageService; // tslint:disable-line: variable-name\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DrawerInitialized.html":{"url":"interfaces/DrawerInitialized.html","title":"interface - DrawerInitialized","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DrawerInitialized\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/components/drawer/messages.ts\n        \n\n            \n                Description\n            \n            \n                Message sent when a drawer has finished initializing. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Message type. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  Message as GenericMessage, MessageChannel as GenericMessageChannel, MessageService as GenericMessageService,\n} from '../../services/message/message.service';\n\n\n/** Message sent when the content component changes. */\nexport interface ContentContainerChanged {\n  /** Message type. */\n  type: 'content-container-changed';\n  /** A reference to the new content component. */\n  content: unknown;\n}\n\n/** Message sent when a drawer component changes. */\nexport interface DrawerContainersChanged {\n  /** Message type. */\n  type: 'drawer-containers-changed';\n  /** References to the drawer components. Can contain undefined values. */\n  drawers: [unknown, unknown];\n}\n\n/** Payload types for messages sent from the drawer container. */\nexport type ContainerPayload = ContentContainerChanged | DrawerContainersChanged;\n\n\n/** Message sent when a drawer has finished initializing. */\nexport interface DrawerInitialized {\n  /** Message type. */\n  type: 'drawer-initialized';\n}\n\n/** Message send when the state of a drawer changes. */\nexport interface DrawerToggled {\n  /** Message type. */\n  type: 'drawer-toggled';\n  /** Whether the drawer is open. */\n  opened: boolean;\n  /** Whether the drawer is expanded. Implies opened. */\n  expanded: boolean;\n  /** Width of the drawer. */\n  width: number;\n  /** Margin used by the drawer for toggle button, etc. */\n  margin: number;\n}\n\n/** Payload types for messages sent from the drawers. */\nexport type DrawerPayload = DrawerToggled | DrawerInitialized;\n\n\n/** Combined payload type for all drawer sub components. */\nexport type Payload = ContainerPayload | DrawerPayload;\n/** Specific message type. */\nexport type Message = GenericMessage;\n/** Specific channel type. */\nexport type MessageChannel = GenericMessageChannel;\n/** Specific service type. */\nexport type MessageService = GenericMessageService;\n/** Reference to the service class. */\nexport const MessageService = GenericMessageService; // tslint:disable-line: variable-name\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DrawerModule.html":{"url":"modules/DrawerModule.html","title":"module - DrawerModule","body":"\n                   \n\n\n\n\n    Modules\n    DrawerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DrawerModule\n\n\n\ncluster_DrawerModule_declarations\n\n\n\ncluster_DrawerModule_exports\n\n\n\n\nContainerComponent\n\nContainerComponent\n\n\n\nDrawerModule\n\nDrawerModule\n\nDrawerModule -->\n\nContainerComponent->DrawerModule\n\n\n\n\n\nContentComponent\n\nContentComponent\n\nDrawerModule -->\n\nContentComponent->DrawerModule\n\n\n\n\n\nDrawerComponent\n\nDrawerComponent\n\nDrawerModule -->\n\nDrawerComponent->DrawerModule\n\n\n\n\n\nToggleButtonComponent\n\nToggleButtonComponent\n\nDrawerModule -->\n\nToggleButtonComponent->DrawerModule\n\n\n\n\n\nContainerComponent \n\nContainerComponent \n\nContainerComponent  -->\n\nDrawerModule->ContainerComponent \n\n\n\n\n\nContentComponent \n\nContentComponent \n\nContentComponent  -->\n\nDrawerModule->ContentComponent \n\n\n\n\n\nDrawerComponent \n\nDrawerComponent \n\nDrawerComponent  -->\n\nDrawerModule->DrawerComponent \n\n\n\n\n\nToggleButtonComponent \n\nToggleButtonComponent \n\nToggleButtonComponent  -->\n\nDrawerModule->ToggleButtonComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/shared/components/drawer/drawer.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ContainerComponent\n                        \n                        \n                            ContentComponent\n                        \n                        \n                            DrawerComponent\n                        \n                        \n                            ToggleButtonComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContainerComponent\n                        \n                        \n                            ContentComponent\n                        \n                        \n                            DrawerComponent\n                        \n                        \n                            ToggleButtonComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { MESSAGE_SERVICE_CONFIG, MESSAGE_SERVICE_DEFAULT_CONFIG } from '../../services/message/message.service';\nimport { ContainerComponent } from './container/container.component';\nimport { ContentComponent } from './content/content.component';\nimport { DrawerComponent } from './drawer/drawer.component';\nimport { ToggleButtonComponent } from './toggle-button/toggle-button.component';\n\n\n@NgModule({\n  imports: [BrowserModule, BrowserAnimationsModule, MatIconModule],\n  providers: [{\n    provide: MESSAGE_SERVICE_CONFIG, useValue: MESSAGE_SERVICE_DEFAULT_CONFIG\n  }],\n  declarations: [ContainerComponent, ContentComponent, DrawerComponent, ToggleButtonComponent],\n  exports: [ContainerComponent, ContentComponent, DrawerComponent, ToggleButtonComponent]\n})\nexport class DrawerModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DrawerToggled.html":{"url":"interfaces/DrawerToggled.html","title":"interface - DrawerToggled","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DrawerToggled\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/components/drawer/messages.ts\n        \n\n            \n                Description\n            \n            \n                Message send when the state of a drawer changes. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        expanded\n                                \n                                \n                                        margin\n                                \n                                \n                                        opened\n                                \n                                \n                                        type\n                                \n                                \n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expanded\n                                    \n                                \n                                \n                                    \n                                        expanded:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the drawer is expanded. Implies opened. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        margin\n                                    \n                                \n                                \n                                    \n                                        margin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Margin used by the drawer for toggle button, etc. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        opened\n                                    \n                                \n                                \n                                    \n                                        opened:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the drawer is open. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Message type. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Width of the drawer. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  Message as GenericMessage, MessageChannel as GenericMessageChannel, MessageService as GenericMessageService,\n} from '../../services/message/message.service';\n\n\n/** Message sent when the content component changes. */\nexport interface ContentContainerChanged {\n  /** Message type. */\n  type: 'content-container-changed';\n  /** A reference to the new content component. */\n  content: unknown;\n}\n\n/** Message sent when a drawer component changes. */\nexport interface DrawerContainersChanged {\n  /** Message type. */\n  type: 'drawer-containers-changed';\n  /** References to the drawer components. Can contain undefined values. */\n  drawers: [unknown, unknown];\n}\n\n/** Payload types for messages sent from the drawer container. */\nexport type ContainerPayload = ContentContainerChanged | DrawerContainersChanged;\n\n\n/** Message sent when a drawer has finished initializing. */\nexport interface DrawerInitialized {\n  /** Message type. */\n  type: 'drawer-initialized';\n}\n\n/** Message send when the state of a drawer changes. */\nexport interface DrawerToggled {\n  /** Message type. */\n  type: 'drawer-toggled';\n  /** Whether the drawer is open. */\n  opened: boolean;\n  /** Whether the drawer is expanded. Implies opened. */\n  expanded: boolean;\n  /** Width of the drawer. */\n  width: number;\n  /** Margin used by the drawer for toggle button, etc. */\n  margin: number;\n}\n\n/** Payload types for messages sent from the drawers. */\nexport type DrawerPayload = DrawerToggled | DrawerInitialized;\n\n\n/** Combined payload type for all drawer sub components. */\nexport type Payload = ContainerPayload | DrawerPayload;\n/** Specific message type. */\nexport type Message = GenericMessage;\n/** Specific channel type. */\nexport type MessageChannel = GenericMessageChannel;\n/** Specific service type. */\nexport type MessageService = GenericMessageService;\n/** Reference to the service class. */\nexport const MessageService = GenericMessageService; // tslint:disable-line: variable-name\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DropdownComponent.html":{"url":"components/DropdownComponent.html","title":"component - DropdownComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DropdownComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/dropdown/dropdown.component.ts\n\n\n    \n        Description\n    \n    \n        Component for a dropdown menu.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-dropdown\n            \n\n            \n                styleUrls\n                ./dropdown.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./dropdown.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                optionsVisible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                selectionChanged\n                            \n                            \n                                toggleOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                label\n                            \n                            \n                                options\n                            \n                            \n                                selection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                selectionChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/dropdown/dropdown.component.ts:16\n                            \n                        \n                \n                    \n                        What the component is selecting for.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/dropdown/dropdown.component.ts:21\n                            \n                        \n                \n                    \n                        Choices displayed in the dropdown menu.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selection\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/dropdown/dropdown.component.ts:26\n                            \n                        \n                \n                    \n                        Current option selected.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        selectionChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/dropdown/dropdown.component.ts:31\n                            \n                        \n                \n                    \n                        Emits the new selected option when selection is changed.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectionChanged\n                        \n                        \n                    \n                \n            \n            \n                \nselectionChanged(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/dropdown/dropdown.component.ts:49\n                \n            \n\n\n            \n                \n                    Updates the selected value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value that has been selected\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleOptions\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/dropdown/dropdown.component.ts:41\n                \n            \n\n\n            \n                \n                    Controls fade-in effect after dropdown menu opens\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            optionsVisible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'invisible'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/dropdown/dropdown.component.ts:36\n                            \n                        \n\n                \n                    \n                        Determines if menu contents are visible (used for fade-in effect).\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * Component for a dropdown menu.\n */\n@Component({\n  selector: 'ccf-dropdown',\n  templateUrl: './dropdown.component.html',\n  styleUrls: ['./dropdown.component.scss']\n})\nexport class DropdownComponent {\n\n  /**\n   * What the component is selecting for.\n   */\n  @Input() label: string;\n\n  /**\n   * Choices displayed in the dropdown menu.\n   */\n  @Input() options: string[];\n\n  /**\n   * Current option selected.\n   */\n  @Input() selection: string;\n\n  /**\n   * Emits the new selected option when selection is changed.\n   */\n  @Output() readonly selectionChange = new EventEmitter();\n\n  /**\n   * Determines if menu contents are visible (used for fade-in effect).\n   */\n  optionsVisible = 'invisible';\n\n  /**\n   * Controls fade-in effect after dropdown menu opens\n   */\n  toggleOptions(): void {\n    this.optionsVisible = this.optionsVisible === 'visible' ? 'invisible' : 'visible';\n  }\n\n  /**\n   * Updates the selected value.\n   * @param value The value that has been selected\n   */\n  selectionChanged(value: string): void {\n    this.selection = value;\n    this.selectionChange.emit(value);\n  }\n}\n\n    \n\n    \n        \n  \n    \n      {{ label }}\n      \n        \n          \n            {{ option }}\n          \n        \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./dropdown.component.scss\n                \n                @keyframes slideInHorizontalDropdown {\n  from {\n    width: 0;\n  }\n  to {\n    width: 9.85rem;\n  }\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n.dropdown-form-field {\n  width: 100%;\n  height: 3rem;\n\n  ::ng-deep .mat-form-field-wrapper {\n    padding-left: 1em;\n    padding-right: 1em;\n    height: 3rem;\n\n    .mat-form-field-flex {\n      .mat-form-field-infix {\n        font-size: 14px;\n        border: none;\n\n        mat-select {\n          font-size: 16px;\n          font-weight: bold;\n        }\n      }\n    }\n\n    .mat-form-field-underline {\n      left: 0rem;\n      bottom: 0rem;\n      background-color: black;\n      transform: none;\n      height: 2px;\n    }\n  }\n}\n\n.visible {\n  animation: fadeIn 0.3s;\n  transition-delay: .275s;\n  animation-delay: .275s;\n}\n\n.invisible {\n  opacity: 0;\n}\n\n::ng-deep .option-panel {\n  animation: slideInHorizontalDropdown .3s;\n  animation-fill-mode: forwards;\n  box-shadow: 0.4rem 0.4rem 0.8rem 0rem #000000;\n  position: absolute !important;\n  top: 1.55rem;\n  max-width: 152px;\n  border-radius: 0px;\n  border-width: 1px;\n  border-style: solid;\n\n\n  .mat-option {\n    border-bottom-width: 1px;\n    border-bottom-style: solid;\n    padding-left: 1em;\n  }\n\n  :last-child {\n    border-bottom: none;\n  }\n}\n\n::ng-deep .cdk-overlay-pane {\n  min-width: 0px !important;\n}\n\n.dropdown-form-field {\n  height: 3rem;\n  width: 100%;\n  ::ng-deep .mat-form-field-wrapper {\n    padding-left: 1em;\n    padding-right: 1em;\n  }\n}\n\n::ng-deep .ccf-dropdown {\n  .mat-select-arrow-wrapper {\n    transform: translatey(-.5em);\n  }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ label }}                                    {{ option }}                              '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DropdownComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DropdownModule.html":{"url":"modules/DropdownModule.html","title":"module - DropdownModule","body":"\n                   \n\n\n\n\n    Modules\n    DropdownModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DropdownModule\n\n\n\ncluster_DropdownModule_declarations\n\n\n\ncluster_DropdownModule_exports\n\n\n\n\nDropdownComponent\n\nDropdownComponent\n\n\n\nDropdownModule\n\nDropdownModule\n\nDropdownModule -->\n\nDropdownComponent->DropdownModule\n\n\n\n\n\nDropdownComponent \n\nDropdownComponent \n\nDropdownComponent  -->\n\nDropdownModule->DropdownComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/shared/components/dropdown/dropdown.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DropdownComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DropdownComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport { DropdownComponent } from './dropdown.component';\n\n\n@NgModule({\n  imports: [CommonModule, MatFormFieldModule, MatSelectModule],\n  declarations: [DropdownComponent],\n  exports: [DropdownComponent]\n})\n\nexport class DropdownModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DualSliderComponent.html":{"url":"components/DualSliderComponent.html","title":"component - DualSliderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DualSliderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/dual-slider/dual-slider.component.ts\n\n\n    \n        Description\n    \n    \n        Component containing a button that when clicked will show a slider popover.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-dual-slider\n            \n\n            \n                styleUrls\n                ./dual-slider.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./dual-slider.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contentsVisible\n                            \n                            \n                                highValue\n                            \n                            \n                                    Private\n                                isSliderInitialized\n                            \n                            \n                                isSliderOpen\n                            \n                            \n                                lowValue\n                            \n                            \n                                options\n                            \n                            \n                                    Private\n                                overlayRef\n                            \n                            \n                                popoverElement\n                            \n                            \n                                popoverPortal\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                initializeSliderPopover\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                onKeyHigh\n                            \n                            \n                                onKeyLow\n                            \n                            \n                                optionsChanged\n                            \n                            \n                                sliderValueChanged\n                            \n                            \n                                toggleSliderPopover\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                label\n                            \n                            \n                                selection\n                            \n                            \n                                valueRange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                selectionChange\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    rangeLabel\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(overlay: Overlay, element: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:102\n                            \n                        \n\n                \n                    \n                            Creates an instance of dual slider component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        overlay\n                                                  \n                                                        \n                                                                    Overlay\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The overlay service used to create the slider popover.\n\n                                                        \n                                                \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A reference to the component's element. Used during event handling.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:41\n                            \n                        \n                \n                    \n                        Which criteria the slider is selecting for.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        selection\n                    \n                \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:51\n                            \n                        \n                \n                    \n                        The current range selected.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        valueRange\n                    \n                \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:46\n                            \n                        \n                \n                    \n                        The lower and upper range of the slider.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        selectionChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:56\n                            \n                        \n                \n                    \n                        Emits the new selection range when a change is made to it.\n\n                    \n                \n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event.target' \n                \n            \n            \n                \ndocument:click(target: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:168\n                \n            \n\n\n            \n                \n                    Listens to document click, mouse movement, and touch event.\nCloses the slider popover when such an event occurs outside the button or popover.\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initializeSliderPopover\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initializeSliderPopover()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:214\n                \n            \n\n\n            \n                \n                    Creates and initializes the slider popover.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:125\n                \n            \n\n\n            \n                \n                    Updates slider options (with optionsChanged) and selection when changes detected.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Changes that have been made to the slider properties.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:155\n                \n            \n\n\n            \n                \n                    Angular's OnDestroy hook.\nCleans up the overlay.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onKeyHigh\n                        \n                        \n                    \n                \n            \n            \n                \nonKeyHigh(event: KeyboardEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:243\n                \n            \n\n\n            \n                \n                    Updates the slider's high pointer value when Enter key is pressed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            KeyboardEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event passed into the component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onKeyLow\n                        \n                        \n                    \n                \n            \n            \n                \nonKeyLow(event: KeyboardEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:227\n                \n            \n\n\n            \n                \n                    Updates the slider's low pointer value when Enter key is pressed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            KeyboardEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Event passed into the component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            optionsChanged\n                        \n                        \n                    \n                \n            \n            \n                \noptionsChanged()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:139\n                \n            \n\n\n            \n                \n                    Updates the slider options, and the slider values if necessary.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sliderValueChanged\n                        \n                        \n                    \n                \n            \n            \n                \nsliderValueChanged()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:204\n                \n            \n\n\n            \n                \n                    Handler for updates to the slider values.\nEmits the updated selection value array.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleSliderPopover\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleSliderPopover()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:187\n                \n            \n\n\n            \n                \n                    Toggles the visibility of the slider popover.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contentsVisible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'invisible'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:81\n                            \n                        \n\n                \n                    \n                        Determines if slider contents are visible (used for fade-in effect).\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            highValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:76\n                            \n                        \n\n                \n                    \n                        Value bound to the slider's high pointer value.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isSliderInitialized\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:102\n                            \n                        \n\n                \n                    \n                        Determines whether slider popover has been created and initialized.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isSliderOpen\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:61\n                            \n                        \n\n                \n                    \n                        Determines whether slider popover is shown.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lowValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:71\n                            \n                        \n\n                \n                    \n                        Value bound to the slider's low pointer value.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Options\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:66\n                            \n                        \n\n                \n                    \n                        Slider options.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            overlayRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     OverlayRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:97\n                            \n                        \n\n                \n                    \n                        Reference to the slider popover overlay.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            popoverElement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('popover', {read: ElementRef, static: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:36\n                            \n                        \n\n                \n                    \n                        Reference to the popover element.\nThis is undefined until the slider popover is initialized.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            popoverPortal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     CdkPortal\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(CdkPortal, {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:30\n                            \n                        \n\n                \n                    \n                        Reference to the template for the slider popover.\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        rangeLabel\n                    \n                \n\n                \n                    \n                        getrangeLabel()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/components/dual-slider/dual-slider.component.ts:86\n                                \n                            \n                    \n                        \n                                Computes the current age range for display in the button.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { ConnectedPosition, Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { Options } from 'ng5-slider';\n\n\n/**\n * Component containing a button that when clicked will show a slider popover.\n */\n@Component({\n  selector: 'ccf-dual-slider',\n  templateUrl: './dual-slider.component.html',\n  styleUrls: ['./dual-slider.component.scss']\n})\nexport class DualSliderComponent implements OnDestroy, OnChanges {\n  /**\n   * Reference to the template for the slider popover.\n   */\n  @ViewChild(CdkPortal, { static: true }) popoverPortal: CdkPortal;\n\n  /**\n   * Reference to the popover element.\n   * This is undefined until the slider popover is initialized.\n   */\n  @ViewChild('popover', { read: ElementRef, static: false }) popoverElement: ElementRef;\n\n  /**\n   * Which criteria the slider is selecting for.\n   */\n  @Input() label: string;\n\n  /**\n   * The lower and upper range of the slider.\n   */\n  @Input() valueRange: number[];\n\n  /**\n   * The current range selected.\n   */\n  @Input() selection: number[];\n\n  /**\n   * Emits the new selection range when a change is made to it.\n   */\n  @Output() selectionChange = new EventEmitter();\n\n  /**\n   * Determines whether slider popover is shown.\n   */\n  isSliderOpen = false;\n\n  /**\n   * Slider options.\n   */\n  options: Options;\n\n  /**\n   * Value bound to the slider's low pointer value.\n   */\n  lowValue: number;\n\n  /**\n   * Value bound to the slider's high pointer value.\n   */\n  highValue: number;\n\n  /**\n   * Determines if slider contents are visible (used for fade-in effect).\n   */\n  contentsVisible = 'invisible';\n\n  /**\n   * Computes the current age range for display in the button.\n   */\n  get rangeLabel(): string {\n    const { lowValue, highValue } = this;\n    if (lowValue === highValue) {\n      return `${lowValue}`;\n    }\n    return `${lowValue}-${highValue}`;\n  }\n\n  /**\n   * Reference to the slider popover overlay.\n   */\n  private overlayRef: OverlayRef;\n\n  /**\n   * Determines whether slider popover has been created and initialized.\n   */\n  private isSliderInitialized = false;\n\n  /**\n   * Creates an instance of dual slider component.\n   * @param overlay The overlay service used to create the slider popover.\n   * @param element A reference to the component's element. Used during event handling.\n   */\n  constructor(\n    overlay: Overlay,\n    private element: ElementRef,\n  ) {\n    const position: ConnectedPosition = { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' };\n    const positionStrategy = overlay.position().flexibleConnectedTo(element).withPositions([position]);\n    this.overlayRef = overlay.create({\n      panelClass: 'slider-pane',\n      positionStrategy\n    });\n  }\n\n  /**\n   * Updates slider options (with optionsChanged) and selection when changes detected.\n   * @param changes Changes that have been made to the slider properties.\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.valueRange) {\n      this.optionsChanged();\n    }\n    if (changes.selection) {\n      // Detect when selection is changed and update low/high value.\n      this.lowValue = Math.min(...this.selection);\n      this.highValue = Math.max(...this.selection);\n    }\n  }\n\n  /**\n   * Updates the slider options, and the slider values if necessary.\n   */\n  optionsChanged(): void {\n    this.options = {\n      floor: this.valueRange ? this.valueRange[0] : 0,\n      ceil: this.valueRange ? this.valueRange[1] : 0,\n      step: 1,\n      hideLimitLabels: true,\n      hidePointerLabels: true\n    };\n    this.lowValue = this.options.floor ?? 0;\n    this.highValue = this.options.ceil ?? 0;\n  }\n\n  /**\n   * Angular's OnDestroy hook.\n   * Cleans up the overlay.\n   */\n  ngOnDestroy(): void {\n    this.overlayRef.dispose();\n  }\n\n  /**\n   * Listens to document click, mouse movement, and touch event.\n   * Closes the slider popover when such an event occurs outside the button or popover.\n   *\n   * @param target The element on which the event was fired.\n   */\n  @HostListener('document:click', ['$event.target']) // tslint:disable-line:no-unsafe-any\n  // @HostListener('document:mousemove', ['$event.target']) // tslint:disable-line:no-unsafe-any\n  @HostListener('document:touchstart', ['$event.target']) // tslint:disable-line:no-unsafe-any\n  closeSliderPopover(target: HTMLElement): void {\n    const { element, isSliderOpen, popoverElement } = this;\n    if (!isSliderOpen) {\n      return;\n    } else if (element.nativeElement.contains(target)) {\n      return;\n    } else if (popoverElement && popoverElement.nativeElement.contains(target)) {\n      return;\n    }\n\n    this.overlayRef.detach();\n    this.isSliderInitialized = false;\n    this.isSliderOpen = false;\n    this.contentsVisible = 'invisible';\n  }\n\n  /**\n   * Toggles the visibility of the slider popover.\n   */\n  toggleSliderPopover(): void {\n    const { isSliderOpen, isSliderInitialized } = this;\n    if (isSliderInitialized) {\n      this.overlayRef.detach();\n      this.isSliderInitialized = false;\n    } else if (!isSliderInitialized && !isSliderOpen) {\n      this.initializeSliderPopover();\n    }\n\n    this.contentsVisible = this.contentsVisible === 'visible' ? 'invisible' : 'visible';\n    this.isSliderOpen = !isSliderOpen;\n  }\n\n  /**\n   * Handler for updates to the slider values.\n   * Emits the updated selection value array.\n   */\n  sliderValueChanged(): void {\n    const { lowValue, highValue } = this;\n\n    this.selection = [lowValue, highValue];\n    this.selectionChange.emit(this.selection);\n  }\n\n  /**\n   * Creates and initializes the slider popover.\n   */\n  private initializeSliderPopover(): void {\n    const { overlayRef, popoverPortal } = this;\n\n    overlayRef.attach(popoverPortal);\n    overlayRef.updatePosition();\n\n    this.isSliderInitialized = true;\n  }\n\n  /**\n   * Updates the slider's low pointer value when Enter key is pressed.\n   * @param event Event passed into the component\n   */\n  onKeyLow(event: KeyboardEvent): void {\n    const newValue = Number((event.target as HTMLInputElement).value);\n    if (event.key === 'Enter') {\n      if (newValue >= Number(this.options.floor) && newValue = Number(this.options.floor) && newValue \n    \n\n    \n        \n  \n    \n      \n         {{ options.floor }}> \n        \n      \n\n      \n      \n\n      \n         {{ options.ceil }} \n        \n      \n    \n\n    \n      \n        {{ label }}\n        {{ rangeLabel }}\n      \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./dual-slider.component.scss\n                \n                .slider-form-field {\n  width: 100%;\n  height: 3rem;\n\n  ::ng-deep .mat-form-field-wrapper {\n    padding-left: 1em;\n    padding-right: 1em;\n    height: 3rem;\n\n    .mat-form-field-flex {\n      .mat-form-field-infix {\n        border: none;\n      }\n    }\n\n    .mat-form-field-underline {\n      left: 0rem;\n      bottom: 0rem;\n      background-color: black;\n      transform: none;\n      height: 2px;\n    }\n  }\n}\n\n\n.slider-labels {\n  display: flex;\n  flex-direction: column;\n  .name-label {\n    font-size: 14px;\n  }\n\n  .range-label {\n    font-weight: bold;\n  }\n}\n\n::ng-deep .ccf-slider.wrapper {\n  .mat-select-arrow-wrapper {\n    transform: translatey(-1.5em);\n  }\n}\n\n// Styles for the popover slider\n// NOTE: This must NOT be nested inside the wrapper/container!\n\n@keyframes slideInHorizontalSlider {\n  from {\n    width: 0;\n  }\n  to {\n    width: 20em;\n  }\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n.visible {\n  animation: fadeIn 0.3s;\n  transition-delay: .275s;\n  animation-delay: .275s;\n}\n\n.invisible {\n  opacity: 0;\n}\n\n::ng-deep .slider-pane {\n  border-width: 1px;\n  border-style: solid;\n  position: absolute !important;\n  top: -1px;\n}\n\n.ccf-slider.detached {\n  animation: slideInHorizontalSlider 0.3s;\n  animation-fill-mode: forwards;\n  box-shadow: 0.4rem 0.4rem 0.8rem 0rem #000000;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 0rem;\n  height: 70px;\n  padding: .75rem; // NOTE: Use padding instead of margin!\n\n  .slider ::ng-deep {\n    visibility: hidden;\n    margin-top: 15px;\n    margin-bottom: 15px;\n    .ng5-slider-bar {\n      opacity: .2;\n      height: .15rem;\n    }\n\n    .ng5-slider-selection {\n      opacity: 1;\n    }\n\n    .ng5-slider-pointer {\n      $pointer-size: 1rem;\n\n      width: $pointer-size;\n      height: $pointer-size;\n      top: 0.095rem - ($pointer-size / 2);\n      border-width: .1rem;\n      border-style: solid;\n\n      &:after {\n        display: none;\n      }\n    }\n  }\n\n  .label {\n    display: flex;\n    flex-direction: column;\n    width: 32px;\n    \n    &.min {\n      margin-right: 1rem;\n    }\n    \n    &.max {\n      margin-left: 1rem;\n      align-items: flex-end;\n\n      .ceil, input {\n        text-align: right;\n      }\n    }\n\n    .floor, .ceil {\n      font-size: 14px;\n    }\n\n    input {\n      border: none;\n      width: 28px;\n      font-size: 16px;\n      font-weight: bold;\n      padding: 0;\n    }\n\n  }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                     {{ options.floor }}>                                          {{ options.ceil }}                                     {{ label }}        {{ rangeLabel }}                  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DualSliderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DualSliderModule.html":{"url":"modules/DualSliderModule.html","title":"module - DualSliderModule","body":"\n                   \n\n\n\n\n    Modules\n    DualSliderModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DualSliderModule\n\n\n\ncluster_DualSliderModule_declarations\n\n\n\ncluster_DualSliderModule_exports\n\n\n\n\nDualSliderComponent\n\nDualSliderComponent\n\n\n\nDualSliderModule\n\nDualSliderModule\n\nDualSliderModule -->\n\nDualSliderComponent->DualSliderModule\n\n\n\n\n\nDualSliderComponent \n\nDualSliderComponent \n\nDualSliderComponent  -->\n\nDualSliderModule->DualSliderComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/shared/components/dual-slider/dual-slider.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DualSliderComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DualSliderComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { Ng5SliderModule } from 'ng5-slider';\n\nimport { DualSliderComponent } from './dual-slider.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    Ng5SliderModule\n  ],\n  declarations: [DualSliderComponent],\n  exports: [DualSliderComponent]\n})\nexport class DualSliderModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExtDeckProps.html":{"url":"interfaces/ExtDeckProps.html","title":"interface - ExtDeckProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ExtDeckProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-image-viewer/src/lib/image-viewer.ts\n        \n\n\n            \n                Extends\n            \n            \n                        DeckProps\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        canvas\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        canvas\n                                    \n                                \n                                \n                                    \n                                        canvas:     string | HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | HTMLElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Deck, Layer, View, Viewport } from '@deck.gl/core';\nimport { Loader, VivView } from '@hubmap/vitessce-image-viewer';\nimport { bind } from 'bind-decorator';\n\nimport { createLoader, LoaderType, OMEZarrInfo, TiffInfo, ZarrInfo } from './loader';\nimport { flatMap, getVivId } from './utils';\n\n\ntype ValueOrGenerator = T | ((...args: U) => T);\n\ntype DeckProps = ConstructorParameters[0];\ninterface ExtDeckProps extends DeckProps {\n  canvas?: string | HTMLElement;\n}\n\ntype DeckCallbackArgs = Parameters>[0];\ntype LayerFilterArgs = DeckCallbackArgs;\ntype OnViewStateChangeArgs = DeckCallbackArgs & { viewId: string };\n\nexport type State = Record;\nexport type LayerConfig = Record;\n\nexport interface ChannelConfig {\n  active: boolean;\n  color: [number, number, number];\n  slider: [number, number];\n}\n\nexport interface DataSource {\n  type: LoaderType;\n  info: ZarrInfo | OMEZarrInfo | TiffInfo;\n}\n\nexport interface ImageViewerProps {\n  id: string;\n  initialViewState: State;\n  canvas?: HTMLCanvasElement;\n  width?: number;\n  height?: number;\n  sources?: DataSource[];\n  channelNames?: string[];\n  defaultChannelConfig?: Partial;\n}\n\nfunction applyPropDefaults(props: Props): Props & Required {\n  return {\n    canvas: null,\n    width: 0,\n    height: 0,\n    sources: [],\n    channelNames: [],\n    ...props,\n    defaultChannelConfig: {\n      active: true,\n      color: [255, 255, 255],\n      slider: [1500, 20000],\n      ...(props.defaultChannelConfig ?? {})\n    }\n  };\n}\n\n\nexport abstract class ImageViewer {\n  readonly props: Props & Required;\n\n  get width(): number { return this._width; }\n  get height(): number { return this._height; }\n  private _width: number;\n  private _height: number;\n\n  get sources(): DataSource[] { return this._sources; }\n  get loaders(): Loader[] { return this._loaders; }\n  private _sources: DataSource[] = [];\n  private _loaders: Loader[] = [];\n\n  get channelNames(): string[] { return Object.keys(this.channelConfigs); }\n  get channelConfigs(): Record { return this._channelConfigs; }\n  private _channelConfigs: Record = {};\n\n  protected vivViews: VivView[] = [];\n  protected views: View[] = [];\n  protected layers: Layer[] = [];\n  protected layerConfigs: LayerConfig[] = [];\n  protected states: Record = {};\n\n  private deck: Deck;\n\n  constructor(props: Props) {\n    const reqProps = this.props = applyPropDefaults(props);\n    this.deck = this.initializeDeck(reqProps);\n    this._width = reqProps.width;\n    this._height = reqProps.height;\n\n    if (reqProps.sources.length > 0) {\n      this.setSources(reqProps.sources);\n    }\n  }\n\n  clear(): void {\n    this._sources = [];\n    this._loaders = [];\n    this._channelConfigs = {};\n    this.vivViews = [];\n    this.layers = [];\n    this.layerConfigs = [];\n    this.states = {};\n    this.update();\n  }\n\n  finalize(): void {\n    this.deck.finalize();\n  }\n\n  async setSize(width: number, height: number): Promise {\n    this._width = width;\n    this._height = height;\n    this.vivViews = await this.createVivViews();\n\n    this.updateState((view, current) => ({\n      viewState: {\n        ...current,\n        width,\n        height,\n        id: view.id\n      }\n    }));\n    this.update();\n    this.deck.redraw(true);\n\n    return this;\n  }\n\n  async setSources(sources: DataSource[]): Promise {\n    const loaderPromises = sources.map(source => createLoader(source.type, source.info));\n    const loaders = await Promise.all(loaderPromises);\n\n    this._sources = sources;\n    this._loaders = loaders;\n    this.resetChannelConfigs();\n    this.vivViews = await this.createVivViews();\n    this.layerConfigs = await this.createLayerConfigs();\n    this.updateState(view => ({ viewState: view.initialViewState }));\n    this.update();\n\n    return this;\n  }\n\n  async updateChannelConfigs(configs: Record>): Promise {\n    const newConfigs = Object.entries(configs).reduce((result, [key, config]) => {\n      return !(key in result) ? result : {\n        ...result,\n        [key]: {\n          ...result[key],\n          ...config\n        }\n      };\n    }, this.channelConfigs);\n\n    if (newConfigs === this.channelConfigs) { return this; }\n\n    this._channelConfigs = newConfigs;\n    this.layerConfigs = await this.createLayerConfigs();\n    this.update();\n\n    return this;\n  }\n\n  protected abstract async createVivViews(): Promise;\n  protected abstract async createLayerConfigs(): Promise;\n\n  protected update(): void {\n    this.updateViews();\n    this.updateLayers();\n    this.updateDeckProps({\n      views: this.views,\n      layers: this.layers,\n      viewState: this.states\n    });\n  }\n\n  protected updateViews(): void {\n    this.views = this.vivViews.map(viv => viv.getDeckGlView());\n  }\n\n  protected updateLayers(): void {\n    const { vivViews, states, layerConfigs } = this;\n    const length = layerConfigs.length;\n\n    this.layers = flatMap(vivViews, (view, index) => view.getLayers({\n      viewStates: states,\n      props: layerConfigs[index % length]\n    }));\n  }\n\n  protected updateState(\n    args: ValueOrGenerator, [VivView, State]>\n  ): void {\n    const argsGenerator = typeof args === 'function' ? args : () => args;\n    const currentStates = this.states;\n\n    this.states = this.vivViews.reduce((states, view) => {\n      const current = currentStates[view.id] ?? {};\n      states[view.id] = view.filterViewState(argsGenerator(view, current));\n      return states;\n    }, {} as Record);\n  }\n\n  protected updateDeckProps(props: Partial): void {\n    this.deck.setProps(props);\n  }\n\n  private initializeDeck(props: Props & Required): Deck {\n    const { id, canvas, width, height } = props;\n    return new Deck({\n      id,\n      canvas,\n      width,\n      height,\n      views: [],\n      layers: [],\n      effects: [],\n      viewState: {},\n      layerFilter: this.layerFilter,\n      onViewStateChange: this.onViewStateChange,\n      glOptions: {\n        webgl2: true\n      }\n    } as ExtDeckProps);\n  }\n\n  private resetChannelConfigs(): void {\n    const { loaders, props: { channelNames, defaultChannelConfig } } = this;\n    const keys = channelNames.length > 0 ?\n      channelNames :\n      flatMap(loaders, loader => loader.channelNames ?? []);\n\n    this._channelConfigs = keys.reduce((configs, key) => ({\n      ...configs,\n      [key]: defaultChannelConfig as ChannelConfig\n    }), {} as Record);\n  }\n\n  @bind\n  private layerFilter({ layer, viewport }: LayerFilterArgs): boolean {\n    const { id: viewportId } = viewport as Viewport & { id: string };\n    return layer.id.includes(getVivId(viewportId));\n  }\n\n  @bind\n  private onViewStateChange({ viewId, viewState, oldViewState }: OnViewStateChangeArgs): void {\n    this.updateState((_view, current) => ({\n      viewState: { ...viewState, id: viewId },\n      oldViewState,\n      currentViewState: current\n    }));\n    this.update();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Filter.html":{"url":"interfaces/Filter.html","title":"interface - Filter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Filter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Options applied during queries. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ageRange\n                                \n                                \n                                        bmiRange\n                                \n                                \n                                            Optional\n                                        debug\n                                \n                                \n                                            Optional\n                                        hasSpatialEntity\n                                \n                                \n                                            Optional\n                                        highlightedEntities\n                                \n                                \n                                        ontologyTerms\n                                \n                                \n                                        sex\n                                \n                                \n                                        technologies\n                                \n                                \n                                        tmc\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ageRange\n                                    \n                                \n                                \n                                    \n                                        ageRange:     [number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Age range. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bmiRange\n                                    \n                                \n                                \n                                    \n                                        bmiRange:     [number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    BMI range. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                    \n                                \n                                \n                                    \n                                        debug:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Include optional debugging information \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasSpatialEntity\n                                    \n                                \n                                \n                                    \n                                        hasSpatialEntity:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether it has a spatial entity. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        highlightedEntities\n                                    \n                                \n                                \n                                    \n                                        highlightedEntities:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Entities to be highlighted \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ontologyTerms\n                                    \n                                \n                                \n                                    \n                                        ontologyTerms:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ontology terms. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sex\n                                    \n                                \n                                \n                                    \n                                        sex:     \"Both\" | \"Male\" | \"Female\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"Both\" | \"Male\" | \"Female\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Gender. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        technologies\n                                    \n                                \n                                \n                                    \n                                        technologies:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Technologies. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tmc\n                                    \n                                \n                                \n                                    \n                                        tmc:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    TMC. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AggregateResult {\n  /** Queried field. */\n  label: string;\n  /** Aggregate value. */\n  count: string | number;\n}\n\n/** Result for list of tissues. */\nexport interface ListResult {\n  /** Identifier. */\n  '@id': string;\n  /** Type string. */\n  '@type': 'ListResult';\n  /** Identifier. */\n  id: string;\n  /** Tissue label. */\n  label: string;\n  /** Short description. */\n  shortInfo?: string[];\n  /** Small icon url. */\n  thumbnailUrl?: string;\n  /** Url for data download. */\n  downloadUrl?: string;\n  /** Description of data download. */\n  downloadTooltip?: string;\n  /** Result url. */\n  resultUrl?: string;\n  /** Type of result url. */\n  resultType?: 'external_link' | 'local_link' | 'image_viewer';\n  /** If the result should be highlighted */\n  highlighted?: boolean;\n}\n\n/** Data for image viewer display. */\nexport interface ImageViewerData {\n  /** Identifier. */\n  '@id': string;\n  /** Type string. */\n  '@type': 'ImageViewerData';\n  /** Identifier. */\n  id: string;\n  /** Image label. */\n  label: string;\n  /** Containing organ name. */\n  organName: string;\n  /** Other metadata. */\n  metadata: { label: string, value: string }[];\n}\n\n/** Item that can be searched for. */\nexport interface SearchableItem {\n  /** Identifier. */\n  id: string;\n  /** Gender. */\n  sex?: 'Male' | 'Female';\n  /** Age. */\n  age?: number;\n  /** BMI. */\n  bmi?: number;\n  /** Ontology terms. */\n  ontologyTerms?: Set;\n}\n\n/** Options applied during queries. */\nexport interface Filter {\n  /** Gender. */\n  sex: 'Both' | 'Male' | 'Female';\n  /** Age range. */\n  ageRange: [number, number];\n  /** BMI range. */\n  bmiRange: [number, number];\n  /** TMC. */\n  tmc: string[];\n  /** Technologies. */\n  technologies: string[];\n  /** Ontology terms. */\n  ontologyTerms: string[];\n  /** Entities to be highlighted */\n  highlightedEntities?: string[];\n  /** Whether it has a spatial entity. */\n  hasSpatialEntity?: boolean;\n  /** Include optional debugging information */\n  debug?: boolean;\n}\n\n/** Backend query interface. */\nexport interface DataSource {\n  /** Query list items. */\n  getListResults(filter?: Filter): Promise;\n  /** Query aggregate items. */\n  getAggregateResults(filter?: Filter): Promise;\n  /** Query a specific image. */\n  getImageViewerData(iri: string): Promise;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FiltersContentComponent.html":{"url":"components/FiltersContentComponent.html","title":"component - FiltersContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FiltersContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/filters/filters-content/filters-content.component.ts\n\n\n    \n        Description\n    \n    \n        Contains components of the filters popup and handles changes in filter settings\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-filters-content\n            \n\n            \n                styleUrls\n                ./filters-content.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./filters-content.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyButtonClick\n                            \n                            \n                                updateFilter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                filters\n                            \n                            \n                                hidden\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                applyFilters\n                            \n                            \n                                filtersChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        filters\n                    \n                \n                \n                    \n                        Type :     Record\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/filters/filters-content/filters-content.component.ts:21\n                            \n                        \n                \n                    \n                        Allows the filters to be set from outside the component\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hidden\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/filters/filters-content/filters-content.component.ts:16\n                            \n                        \n                \n                    \n                        Determines if the filters are visible\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        applyFilters\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/filters/filters-content/filters-content.component.ts:31\n                            \n                        \n                \n                    \n                        Emits the filters to be applied\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        filtersChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/filters/filters-content/filters-content.component.ts:26\n                            \n                        \n                \n                    \n                        Emits the filter change when they happen\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applyButtonClick\n                        \n                        \n                    \n                \n            \n            \n                \napplyButtonClick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/filters/filters-content/filters-content.component.ts:46\n                \n            \n\n\n            \n                \n                    Emits the current filters when the apply button is clicked\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateFilter\n                        \n                        \n                    \n                \n            \n            \n                \nupdateFilter(value: unknown, key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/filters/filters-content/filters-content.component.ts:38\n                \n            \n\n\n            \n                \n                    Updates the filter object with a new key/value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            unknown\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to be saved for the filter\n\n                                    \n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key for the filter to be saved at\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * Contains components of the filters popup and handles changes in filter settings\n */\n@Component({\n  selector: 'ccf-filters-content',\n  templateUrl: './filters-content.component.html',\n  styleUrls: ['./filters-content.component.scss']\n})\nexport class FiltersContentComponent {\n\n  /**\n   * Determines if the filters are visible\n   */\n  @Input() hidden: boolean;\n\n  /**\n   * Allows the filters to be set from outside the component\n   */\n  @Input() filters: Record;\n\n  /**\n   * Emits the filter change when they happen\n   */\n  @Output() filtersChange = new EventEmitter>();\n\n  /**\n   * Emits the filters to be applied\n   */\n  @Output() applyFilters = new EventEmitter>();\n\n  /**\n   * Updates the filter object with a new key/value\n   * @param value The value to be saved for the filter\n   * @param key The key for the filter to be saved at\n   */\n  updateFilter(value: unknown, key: string): void {\n    this.filters = { ...this.filters, [key]: value };\n    this.filtersChange.emit(this.filters);\n  }\n\n  /**\n   * Emits the current filters when the apply button is clicked\n   */\n  applyButtonClick(): void {\n    this.applyFilters.emit(this.filters);\n  }\n}\n\n    \n\n    \n        \n  \n\n  \n  \n\n\n\n  \n\n\n\n  \n\n\n\n  APPLY FILTERS\n\n\n    \n\n    \n                \n                    ./filters-content.component.scss\n                \n                .filter {\n  &.hidden {\n    display: none !important;\n  }\n\n  margin-top: 2em;\n}\n\n.button-container {\n  &.hidden {\n    display: none !important;\n  }\n  \n  margin-top: 2em;\n  display: flex;\n  flex-direction: row-reverse;\n}\n\n.outline-button {\n  box-shadow: 0.1rem 0.1rem 0.2rem 0rem #000000;\n  border-radius: 4px;\n  background: none;\n  border-width: 1px;\n  border-style: solid;\n  padding: 0.4em;\n  cursor: pointer;\n}\n\n.outline-button:active {\n  background: #69f0ae;\n  color: black;\n}\n\n.patient-filters {\n  display: flex;\n  width: 90%;\n\n  &.hidden {\n    display: none !important;\n  }\n\n  ccf-dual-slider {\n    margin-left: .5em;\n    width: 33%;\n  }\n\n  ccf-dropdown {\n    width: 33%;\n  }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            APPLY FILTERS'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FiltersContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FiltersContentModule.html":{"url":"modules/FiltersContentModule.html","title":"module - FiltersContentModule","body":"\n                   \n\n\n\n\n    Modules\n    FiltersContentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FiltersContentModule\n\n\n\ncluster_FiltersContentModule_declarations\n\n\n\ncluster_FiltersContentModule_imports\n\n\n\ncluster_FiltersContentModule_exports\n\n\n\n\nFiltersContentComponent\n\nFiltersContentComponent\n\n\n\nFiltersContentModule\n\nFiltersContentModule\n\nFiltersContentModule -->\n\nFiltersContentComponent->FiltersContentModule\n\n\n\n\n\nFiltersContentComponent \n\nFiltersContentComponent \n\nFiltersContentComponent  -->\n\nFiltersContentModule->FiltersContentComponent \n\n\n\n\n\nCheckboxModule\n\nCheckboxModule\n\nFiltersContentModule -->\n\nCheckboxModule->FiltersContentModule\n\n\n\n\n\nDropdownModule\n\nDropdownModule\n\nFiltersContentModule -->\n\nDropdownModule->FiltersContentModule\n\n\n\n\n\nDualSliderModule\n\nDualSliderModule\n\nFiltersContentModule -->\n\nDualSliderModule->FiltersContentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/filters/filters-content/filters-content.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FiltersContentComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CheckboxModule\n                        \n                        \n                            DropdownModule\n                        \n                        \n                            DualSliderModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FiltersContentComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { CheckboxModule } from '../../../shared/components/checkbox/checkbox.module';\nimport { DropdownModule } from '../../../shared/components/dropdown/dropdown.module';\nimport { DualSliderModule } from '../../../shared/components/dual-slider/dual-slider.module';\nimport { FiltersContentComponent } from './filters-content.component';\n\n\n@NgModule({\n  imports: [CommonModule, CheckboxModule, DropdownModule, DualSliderModule],\n  declarations: [FiltersContentComponent],\n  exports: [FiltersContentComponent]\n})\nexport class FiltersContentModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FiltersPopoverComponent.html":{"url":"components/FiltersPopoverComponent.html","title":"component - FiltersPopoverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FiltersPopoverComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/filters/filters-popover/filters-popover.component.ts\n\n\n    \n        Description\n    \n    \n        Popover box for filter settings\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-filters-popover\n            \n\n            \n                styleUrls\n                ./filters-popover.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./filters-popover.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                filtersVisible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyFilters\n                            \n                            \n                                removeBox\n                            \n                            \n                                toggleFilterVisible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                drawerExpanded\n                            \n                            \n                                filters\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                filtersChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        drawerExpanded\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/filters/filters-popover/filters-popover.component.ts:21\n                            \n                        \n                \n                    \n                        Keeps track of whether or not the containing drawer is expanded\nBecause the styles need to change accordingly\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        filters\n                    \n                \n                \n                    \n                        Type :     Record\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/filters/filters-popover/filters-popover.component.ts:15\n                            \n                        \n                \n                    \n                        Allows the filters to be set from outside the component, and still render / function normally\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        filtersChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/filters/filters-popover/filters-popover.component.ts:26\n                            \n                        \n                \n                    \n                        Emits the current filters\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            applyFilters\n                        \n                        \n                    \n                \n            \n            \n                \napplyFilters(filters: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/filters/filters-popover/filters-popover.component.ts:51\n                \n            \n\n\n            \n                \n                    Emits the current filters, and hides the popover box\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    filters\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The object containing all the currently set filters\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            removeBox\n                        \n                        \n                    \n                \n            \n            \n                \nremoveBox()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/filters/filters-popover/filters-popover.component.ts:43\n                \n            \n\n\n            \n                \n                    Hides the filters popover box\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleFilterVisible\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleFilterVisible()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/filters/filters-popover/filters-popover.component.ts:36\n                \n            \n\n\n            \n                \n                    Toggles filter visible\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            filtersVisible\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/filters/filters-popover/filters-popover.component.ts:31\n                            \n                        \n\n                \n                    \n                        Keeps track of whether or not the filters popover box is visible or not\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * Popover box for filter settings\n */\n@Component({\n  selector: 'ccf-filters-popover',\n  templateUrl: './filters-popover.component.html',\n  styleUrls: ['./filters-popover.component.scss']\n})\nexport class FiltersPopoverComponent {\n  /**\n   * Allows the filters to be set from outside the component, and still render / function normally\n   */\n  @Input() filters: Record;\n\n  /**\n   * Keeps track of whether or not the containing drawer is expanded\n   * Because the styles need to change accordingly\n   */\n  @Input() drawerExpanded: boolean;\n\n  /**\n   * Emits the current filters\n   */\n  @Output() filtersChange = new EventEmitter>();\n\n  /**\n   * Keeps track of whether or not the filters popover box is visible or not\n   */\n  filtersVisible = false;\n\n  /**\n   * Toggles filter visible\n   */\n  toggleFilterVisible(): void {\n    this.filtersVisible = !this.filtersVisible;\n  }\n\n  /**\n   * Hides the filters popover box\n   */\n  removeBox(): void {\n    this.filtersVisible = false;\n  }\n\n  /**\n   * Emits the current filters, and hides the popover box\n   * @param filters The object containing all the currently set filters\n   */\n  applyFilters(filters: Record): void {\n    this.filters = filters;\n    this.filtersChange.emit(filters);\n    this.removeBox();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      close\n    \n    \n      \n    \n  \n  \n    \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./filters-popover.component.scss\n                \n                .filters-popover {\n  position: inherit;\n\n  &.expanded {\n    position: relative;\n\n    .popup-container {\n      right: inherit;\n    }\n\n    .popup-body {\n      padding-left: 4em !important;\n    }\n  }\n}\n\n.popup-container {\n  position: absolute;\n  border-width: 0px;\n  border-style: solid;\n  width: 0em;\n  height: 16.5rem; // 22.5rem\n  z-index: 5;\n  top: 0;\n  right: 24rem;\n  box-shadow: 0.4rem 0.4rem 0.8rem 0rem #000000;\n  transition-property: width;\n  transition-duration: 0.3s;\n\n  .popup-body {\n    position: relative;\n    opacity: 0;\n    transition-property: opacity;\n    transition-duration: 0s;\n    transition-delay: 0s;\n  }\n\n  &.visible {\n    width: 35rem;\n    border-width: 1px;\n\n    .popup-body {\n      padding: 1.5rem;\n      opacity: 1;\n      transition-delay: 0.3s;\n      transition-duration: 0.3s;\n    }\n  }\n}\n\n.show-hide {\n  width: 3rem;\n  height: 3rem;\n  background: none;\n  border: none;\n  z-index: 10;\n  position: relative;\n  cursor: pointer;\n  outline: none;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            close                                      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FiltersPopoverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FiltersPopoverModule.html":{"url":"modules/FiltersPopoverModule.html","title":"module - FiltersPopoverModule","body":"\n                   \n\n\n\n\n    Modules\n    FiltersPopoverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FiltersPopoverModule\n\n\n\ncluster_FiltersPopoverModule_declarations\n\n\n\ncluster_FiltersPopoverModule_imports\n\n\n\ncluster_FiltersPopoverModule_exports\n\n\n\n\nFiltersPopoverComponent\n\nFiltersPopoverComponent\n\n\n\nFiltersPopoverModule\n\nFiltersPopoverModule\n\nFiltersPopoverModule -->\n\nFiltersPopoverComponent->FiltersPopoverModule\n\n\n\n\n\nFiltersPopoverComponent \n\nFiltersPopoverComponent \n\nFiltersPopoverComponent  -->\n\nFiltersPopoverModule->FiltersPopoverComponent \n\n\n\n\n\nFiltersContentModule\n\nFiltersContentModule\n\nFiltersPopoverModule -->\n\nFiltersContentModule->FiltersPopoverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/filters/filters-popover/filters-popover.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FiltersPopoverComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FiltersContentModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FiltersPopoverComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { FiltersContentModule } from '../filters-content/filters-content.module';\nimport { FiltersPopoverComponent } from './filters-popover.component';\n\n\n@NgModule({\n  imports: [CommonModule, MatIconModule, FiltersContentModule],\n  declarations: [FiltersPopoverComponent],\n  exports: [FiltersPopoverComponent]\n})\nexport class FiltersPopoverModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FlatNode.html":{"url":"classes/FlatNode.html","title":"class - FlatNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FlatNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/flat-node.ts\n        \n\n            \n                Description\n            \n            \n                Node type used by ontology tree component.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    label\n                                \n                                \n                                    expandable\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(original: OntologyNode, level: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/models/flat-node.ts:29\n                            \n                        \n\n                \n                    \n                            Creates an instance of flat node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        original\n                                                  \n                                                        \n                                                                        OntologyNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The original ontology node object.\n\n                                                        \n                                                \n                                                \n                                                        level\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The level of the new flat node in the tree.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(original: OntologyNode, level: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/models/flat-node.ts:27\n                \n            \n\n\n            \n                \n                    Creates a flat node from a ontology node object and a level in the tree.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    original\n                                    \n                                                OntologyNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The original ontology node object.\n\n                                    \n                                \n                                \n                                    level\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The level of the new flat node in the tree.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FlatNode\n\n                    \n                    \n                        The newly created flat node.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n\n                \n                    \n                        getlabel()\n                    \n                \n                            \n                                \n                                    Defined in src/app/core/models/flat-node.ts:11\n                                \n                            \n                    \n                        \n                                Gets this node's label.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        expandable\n                    \n                \n\n                \n                    \n                        getexpandable()\n                    \n                \n                            \n                                \n                                    Defined in src/app/core/models/flat-node.ts:16\n                                \n                            \n                    \n                        \n                                Indicates whether this node has children.\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { OntologyNode } from './ontology-node';\n\n\n/**\n * Node type used by ontology tree component.\n */\nexport class FlatNode {\n  /**\n   * Gets this node's label.\n   */\n  get label(): string { return this.original.label; }\n\n  /**\n   * Indicates whether this node has children.\n   */\n  get expandable(): boolean {\n    return this.original.children.length > 0;\n  }\n\n  /**\n   * Creates a flat node from a ontology node object and a level in the tree.\n   *\n   * @param original The original ontology node object.\n   * @param level The level of the new flat node in the tree.\n   * @returns The newly created flat node.\n   */\n  static create(original: OntologyNode, level: number): FlatNode {\n    return new FlatNode(original, level);\n  }\n\n  /**\n   * Creates an instance of flat node.\n   *\n   * @param original The original ontology node object.\n   * @param level The level of the new flat node in the tree.\n   */\n  constructor(readonly original: OntologyNode, readonly level: number) {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/core/header/header.component.ts\n\n\n    \n        Description\n    \n    \n        Header which is always displayed on the site; contains current filter info,\na link to download data, and a logo which resets the page when clicked.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-header\n            \n\n            \n                styleUrls\n                ./header.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                filters\n                            \n                            \n                                hubmapPortalUrl\n                            \n                            \n                                loggedIn\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                downloadClicked\n                            \n                            \n                                refreshClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        filters\n                    \n                \n                \n                    \n                        Type :     Record\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/core/header/header.component.ts:28\n                            \n                        \n                \n                    \n                        Current filter settings\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hubmapPortalUrl\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/core/header/header.component.ts:18\n                            \n                        \n                \n                    \n                        URL to Hubmap Portal site\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        loggedIn\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/core/header/header.component.ts:23\n                            \n                        \n                \n                    \n                        Is the user logged in?\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        downloadClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/core/header/header.component.ts:38\n                            \n                        \n                \n                    \n                        Emitted when download button is clicked\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        refreshClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/core/header/header.component.ts:33\n                            \n                        \n                \n                    \n                        Emitted when refresh button is clicked\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\n\n/**\n * Header which is always displayed on the site; contains current filter info,\n * a link to download data, and a logo which resets the page when clicked.\n */\n@Component({\n  selector: 'ccf-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeaderComponent {\n\n  /**\n   * URL to Hubmap Portal site\n   */\n  @Input() hubmapPortalUrl: string;\n\n  /**\n   * Is the user logged in?\n   */\n  @Input() loggedIn: boolean;\n\n  /**\n   * Current filter settings\n   */\n  @Input() filters: Record;\n\n  /**\n   * Emitted when refresh button is clicked\n   */\n  @Output() refreshClicked = new EventEmitter();\n\n  /**\n   * Emitted when download button is clicked\n   */\n  @Output() downloadClicked = new EventEmitter();\n}\n\n    \n\n    \n        \n  \n    \n  \n\n  \n  \n    Sex: {{filters?.sex}}\n    Age: {{filters?.ageRange[0]}}-{{filters?.ageRange[1]}}\n    BMI: {{filters?.bmiRange[0]}}-{{filters?.bmiRange[1]}}\n  \n\n  refresh\n\n  \n    \n      cloud_download\n    \n  \n  \n\n  Login\n  Logout\n\n\n    \n\n    \n                \n                    ./header.component.scss\n                \n                .ccf-header {\n  height: 4rem;\n  padding: 0 1.5rem;\n  border-bottom-width: 1px;\n  border-bottom-style: solid;\n  display: flex;\n\n  .logo {\n    width: 6rem;\n  }\n\n  .download {\n    height: 1.5rem;\n  }\n\n  // Styled to match the HuBMAP Portal\n  .authentication {\n    width: 8.25rem;\n    border-radius: 2px;\n  }\n\n  .logo, .download, .refresh {\n    display: flex;\n    align-items: center;\n    transition: color 1s;\n    cursor: pointer;\n    text-decoration: none;\n  }\n\n  :not(:last-child) {\n    margin-right: 1.5rem;\n  }\n\n  .filler {\n    flex-grow: 1;\n    margin: 0;\n  }\n\n  .filter-labels {\n    display: flex;\n    align-items: center;\n    height: 100%;\n    font: 400 16px/20px Inter, sans-serif;\n  }\n\n  ::ng-deep ccf-info-button {\n    height: 2rem;\n    width: 2rem;\n    display: flex;\n    justify-content: center;\n    .mat-icon {\n      height: 2rem;\n      width: 2rem;\n      font-size: 2rem;\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                Sex: {{filters?.sex}}    Age: {{filters?.ageRange[0]}}-{{filters?.ageRange[1]}}    BMI: {{filters?.bmiRange[0]}}-{{filters?.bmiRange[1]}}    refresh            cloud_download          Login  Logout'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HeaderModule.html":{"url":"modules/HeaderModule.html","title":"module - HeaderModule","body":"\n                   \n\n\n\n\n    Modules\n    HeaderModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HeaderModule\n\n\n\ncluster_HeaderModule_declarations\n\n\n\ncluster_HeaderModule_imports\n\n\n\ncluster_HeaderModule_exports\n\n\n\n\nHeaderComponent\n\nHeaderComponent\n\n\n\nHeaderModule\n\nHeaderModule\n\nHeaderModule -->\n\nHeaderComponent->HeaderModule\n\n\n\n\n\nHeaderComponent \n\nHeaderComponent \n\nHeaderComponent  -->\n\nHeaderModule->HeaderComponent \n\n\n\n\n\nInfoButtonModule\n\nInfoButtonModule\n\nHeaderModule -->\n\nInfoButtonModule->HeaderModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/header/header.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            HeaderComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            InfoButtonModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HeaderComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { InfoButtonModule } from '../../modules/info/info-button/info-button.module';\nimport { HeaderComponent } from './header.component';\n\n\n@NgModule({\n  imports: [CommonModule, MatButtonModule, MatIconModule, MatToolbarModule, MatTooltipModule, InfoButtonModule],\n  declarations: [HeaderComponent],\n  exports: [HeaderComponent]\n})\nexport class HeaderModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HuBMAPEntity.html":{"url":"classes/HuBMAPEntity.html","title":"class - HuBMAPEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HuBMAPEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/hubmap/hubmap-data.ts\n        \n\n            \n                Description\n            \n            \n                A HuBMAP Entity derived from raw data coming from the search-api.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                age\n                            \n                            \n                                ancestors\n                            \n                            \n                                assayTypes\n                            \n                            \n                                    Public\n                                assetsApi\n                            \n                            \n                                    Optional\n                                bmi\n                            \n                            \n                                containsHumanGeneticSequences\n                            \n                            \n                                    Public\n                                data\n                            \n                            \n                                dataTypes\n                            \n                            \n                                descendants\n                            \n                            \n                                description\n                            \n                            \n                                doi\n                            \n                            \n                                donor\n                            \n                            \n                                entityType\n                            \n                            \n                                    Optional\n                                ethnicity\n                            \n                            \n                                groupName\n                            \n                            \n                                groupUUID\n                            \n                            \n                                id\n                            \n                            \n                                imageProviders\n                            \n                            \n                                images\n                            \n                            \n                                label\n                            \n                            \n                                ontologyTerms\n                            \n                            \n                                organ\n                            \n                            \n                                organName\n                            \n                            \n                                organSample\n                            \n                            \n                                portalUrl\n                            \n                            \n                                protocolUrl\n                            \n                            \n                                resultType\n                            \n                            \n                                resultUrl\n                            \n                            \n                                    Optional\n                                sex\n                            \n                            \n                                    Optional\n                                spatialEntity\n                            \n                            \n                                spatialOrBulk\n                            \n                            \n                                thumbnailUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toJsonLd\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: JsonDict, assetsApi: string, portalUrl: string, serviceToken?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:133\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        JsonDict\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        assetsApi\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        portalUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        serviceToken\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            age\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:108\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ancestors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         JsonDict[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:101\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            assayTypes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:128\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            assetsApi\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ''\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:135\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            bmi\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:109\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            containsHumanGeneticSequences\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:129\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         JsonDict\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:135\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataTypes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:127\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            descendants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         JsonDict[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:102\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            doi\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:113\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            donor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         JsonDict\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:99\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            entityType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"Donor\" | \"Sample\" | \"Dataset\"\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:105\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            ethnicity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:110\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:116\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:115\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:104\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Iri[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:121\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            images\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Url[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:120\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            label\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:111\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ontologyTerms\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Iri[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:123\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            organ\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Iri\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:124\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            organName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:125\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            organSample\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         JsonDict\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:100\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            portalUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Url\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:118\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            protocolUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Url\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:117\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            resultType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:133\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            resultUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:132\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"Male\" | \"Female\"\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:107\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            spatialEntity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     JsonLd\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:126\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            spatialOrBulk\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"Spatial\" | \"Bulk\"\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:130\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            thumbnailUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:131\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toJsonLd\n                        \n                        \n                    \n                \n            \n            \n                \ntoJsonLd()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-database/src/lib/hubmap/hubmap-data.ts:309\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :     JsonLd\n\n                    \n                    \n                        the hubmap data in JSON-LD format\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Iri, JsonLd, Url } from 'jsonld/jsonld-spec';\nimport { get, omit, toNumber } from 'lodash';\nimport { addJsonLdToStore, N3Store } from 'triple-store-utils';\n\nimport { ccf, rui } from '../util/prefixes';\nimport { fixUflRuiLocation } from './hubmap-ufl-patch';\nimport { convertOldRuiToJsonLd, OldRuiData } from './old-rui-utils';\n\n\ntype JsonDict = { [key: string]: unknown };\nconst HBM_PREFIX = 'https://entity-api.hubmapconsortium.org/entities/';\n\nconst DR1_VU_THUMBS = new Set(['VAN0003-LK-32-21-AF_preIMS_registered_thumbnail.png', 'VAN0003-LK-32-21-IMS_NegMode_multilayer_thumbnail.png', 'VAN0003-LK-32-21-IMS_PosMode_multilayer_thumbnail.png', 'VAN0003-LK-32-21-PAS_registered_thumbnail.png', 'VAN0003-LK-32-22-AF_preMxIF_registered_thumbnail.png', 'VAN0003-LK-32-22-MxIF_cyc1_registered_thumbnail.png', 'VAN0003-LK-32-22-MxIF_cyc2_registered_thumbnail.png', 'VAN0003-LK-32-22-MxIF_cyc3_registered_thumbnail.png', 'VAN0005-RK-1-1-AF_preIMS_registered_thumbnail.png', 'VAN0005-RK-1-1-IMS_NegMode_multilayer_thumbnail.png', 'VAN0005-RK-1-1-IMS_PosMode_multilayer_thumbnail.png', 'VAN0005-RK-1-1-PAS_registered_thumbnail.png', 'VAN0005-RK-4-172-AF_preIMS_registered_thumbnail.png', 'VAN0005-RK-4-172-IMS_NegMode_multilayer_thumbnail.png', 'VAN0005-RK-4-172-IMS_PosMode_multilayer_thumbnail.png', 'VAN0005-RK-4-172-PAS_registered_thumbnail.png', 'VAN0006-LK-2-85-AF_preIMS_registered_thumbnail.png', 'VAN0006-LK-2-85-IMS_NegMode_multilayer_thumbnail.png', 'VAN0006-LK-2-85-IMS_PosMode_multilayer_thumbnail.png', 'VAN0006-LK-2-85-PAS_registered_thumbnail.png', 'VAN0006-LK-2-86-AF_preMxIF_registered_thumbnail.png', 'VAN0006-LK-2-86-MxIF_cyc1_registered_thumbnail.png', 'VAN0006-LK-2-86-MxIF_cyc2_registered_thumbnail.png', 'VAN0006-LK-2-86-MxIF_cyc3_registered_thumbnail.png', 'VAN0007-LK-203-103-AF_preIMS_registered_thumbnail.png', 'VAN0007-LK-203-103-IMS_NegMode_multilayer_thumbnail.png', 'VAN0007-LK-203-103-IMS_PosMode_multilayer_thumbnail.png', 'VAN0007-LK-203-103-PAS_registered_thumbnail.png', 'VAN0008-RK-403-100-AF_preIMS_registered_thumbnail.png', 'VAN0008-RK-403-100-IMS_NegMode_multilayer_thumbnail.png', 'VAN0008-RK-403-100-IMS_PosMode_multilayer_thumbnail.png', 'VAN0008-RK-403-100-PAS_registered_thumbnail.png', 'VAN0008-RK-403-101-AF_preMxIF_registered_thumbnail.png', 'VAN0008-RK-403-101-MxIF_cyc1_registered_thumbnail.png', 'VAN0008-RK-403-101-MxIF_cyc2_registered_thumbnail.png', 'VAN0008-RK-403-101-MxIF_cyc3_registered_thumbnail.png', 'VAN0011-RK-3-10-AF_preIMS_registered_thumbnail.png', 'VAN0011-RK-3-10-IMS_NegMode_multilayer_thumbnail.png', 'VAN0011-RK-3-10-IMS_PosMode_multilayer_thumbnail.png', 'VAN0011-RK-3-10-PAS_registered_thumbnail.png', 'VAN0011-RK-3-11-AF_preMxIF_registered_thumbnail.png', 'VAN0011-RK-3-11-MxIF_cyc1_registered_thumbnail.png', 'VAN0011-RK-3-11-MxIF_cyc2_registered_thumbnail.png', 'VAN0011-RK-3-11-MxIF_cyc3_registered_thumbnail.png', 'VAN0012-RK-103-75-AF_preIMS_registered_thumbnail.png', 'VAN0012-RK-103-75-IMS_NegMode_multilayer_thumbnail.png', 'VAN0012-RK-103-75-IMS_PosMode_multilayer_thumbnail.png', 'VAN0012-RK-103-75-PAS_registered_thumbnail.png', 'VAN0012-RK-103-76-AF_preMxIF_registered_thumbnail.png', 'VAN0012-RK-103-76-MxIF_cyc1_registered_thumbnail.png', 'VAN0012-RK-103-76-MxIF_cyc2_registered_thumbnail.png', 'VAN0012-RK-103-76-MxIF_cyc3_registered_thumbnail.png']);\n\n/** UUID to TMC mapping. */\nconst GROUP_UUID_MAPPING: { [uuid: string]: string } = {\n  '03b3d854-ed44-11e8-8bce-0e368f3075e8': 'TMC-UCSD',\n  '07a29e4c-ed43-11e8-b56a-0e8017bdda58': 'TMC-Florida',\n  '308f5ffc-ed43-11e8-b56a-0e8017bdda58': 'TMC-CalTech',\n  '5bd084c8-edc2-11e8-802f-0e368f3075e8': 'HBM-TestingGroup',\n  '73bb26e4-ed43-11e8-8f19-0a7c1eab007a': 'TMC-Vanderbilt',\n  'def5fd76-ed43-11e8-b56a-0e8017bdda58': 'TMC-Stanford'\n};\n\nfunction createRuiOrganLookup(): { [organName: string]: string } {\n  const lookup: { [organName: string]: string } = {};\n  Object.entries(rui).forEach(([k, v]) => lookup[k] = v.id);\n  return lookup;\n}\n\n/** RUI organ name to entity identifier. */\nconst RUI_ORGANS: { [organName: string]: string } = createRuiOrganLookup();\n\n// Taken from: https://github.com/hubmapconsortium/commons/blob/master/hubmap_commons/hubmap_const.py#L101\n/** HBM organ names to set of RUI organs. */\nconst HBM_ORGANS: { [organName: string]: string[] } = {\n  BL: [RUI_ORGANS.body, RUI_ORGANS.bladder],\n  RK: [RUI_ORGANS.body, RUI_ORGANS.kidney, RUI_ORGANS.right_kidney],\n  LK: [RUI_ORGANS.body, RUI_ORGANS.kidney, RUI_ORGANS.left_kidney],\n  HT: [RUI_ORGANS.body, RUI_ORGANS.heart],\n  LI: [RUI_ORGANS.body, RUI_ORGANS.colon], // large_intestine\n  SI: [RUI_ORGANS.body, RUI_ORGANS.small_instestine],\n  LL: [RUI_ORGANS.body, RUI_ORGANS.lung, RUI_ORGANS.left_lung],\n  RL: [RUI_ORGANS.body, RUI_ORGANS.lung, RUI_ORGANS.right_lung],\n  LY: [RUI_ORGANS.body, RUI_ORGANS.lymph_node],\n  SP: [RUI_ORGANS.body, RUI_ORGANS.spleen],\n  TH: [RUI_ORGANS.body, RUI_ORGANS.thymus],\n  UR: [RUI_ORGANS.body, RUI_ORGANS.ureter],\n  LV: [RUI_ORGANS.body, RUI_ORGANS.liver],\n  OT: [RUI_ORGANS.body], // other_organ\n};\n\n/** HBM organ names to display name. */\nconst HBM_ORGAN_LABELS: { [organName: string]: string } = {\n  BL: 'Bladder',\n  RK: 'Right Kidney',\n  LK: 'Left Kidney',\n  HT: 'Heart',\n  LI: 'Large Intestine',\n  SI: 'Small Intestine',\n  LL: 'Left Lung',\n  RL: 'Right Lung',\n  LY: 'Lymph Node',\n  SP: 'Spleen',\n  TH: 'Thymus',\n  UR: 'Ureter',\n  LV: 'Liver',\n  OT: 'Other Organ',\n};\n\n/**\n * Converts a hubmap response object into JsonLd.\n *\n * @param data The hubmap data.\n * @returns The converted data.\n */\nexport function hubmapResponseAsJsonLd(data: object, assetsApi = '', portalUrl = '', serviceToken?: string): JsonLd {\n  const entries = (get(data, 'hits.hits', []) as JsonDict[])\n    .map(e => get(e, '_source', {}) as { [key: string]: unknown });\n\n  return {\n    '@context': {\n      '@vocab': 'http://purl.org/ccf/latest/ccf-entity.owl#',\n      ontologyTerms: { '@type': '@id' },\n      ancestors: { '@type': '@id' },\n      descendants: { '@type': '@id' },\n      organ: { '@type': '@id' },\n      images: { '@id': 'hasImage', '@type': '@id' },\n      imageProviders: { '@id': 'hasImageProvider', '@type': '@id'}\n    },\n    '@graph': entries.map(e => new HuBMAPEntity(e, assetsApi, portalUrl, serviceToken).toJsonLd())\n  };\n}\n\n/**\n * A HuBMAP Entity derived from raw data coming from the search-api.\n */\nexport class HuBMAPEntity {\n  donor: JsonDict;\n  organSample: JsonDict;\n  ancestors: JsonDict[];\n  descendants: JsonDict[];\n\n  id: string;\n  entityType: 'Donor' | 'Sample' | 'Dataset';\n\n  sex?: 'Male' | 'Female';\n  age?: number;\n  bmi?: number;\n  ethnicity?: string;\n  label: string;\n  description: string;\n  doi: string;\n\n  groupUUID: string;\n  groupName: string;\n  protocolUrl: Url;\n  portalUrl: Url;\n\n  images: Url[];\n  imageProviders: Iri[];\n\n  ontologyTerms: Iri[];\n  organ: Iri;\n  organName: string;\n  spatialEntity?: JsonLd;\n  dataTypes: string[];\n  assayTypes: string[];\n  containsHumanGeneticSequences: boolean;\n  spatialOrBulk: 'Spatial' | 'Bulk';\n  thumbnailUrl: string;\n  resultUrl: string;\n  resultType: string;\n\n  constructor(public data: JsonDict, public assetsApi = '', portalUrl = '', serviceToken?: string) {\n    this.id = this.data.uuid as string;\n    this.entityType = this.data.entity_type as 'Donor' | 'Sample' | 'Dataset';\n\n    this.ancestors = (this.data.ancestors || []) as JsonDict[];\n    this.descendants = (this.data.descendants || []) as JsonDict[];\n\n    if (this.entityType === 'Donor') {\n      this.donor = data;\n    } else {\n      this.donor = this.ancestors.find(e => e.entity_type === 'Donor') as JsonDict;\n    }\n    if (this.entityType === 'Sample' && data.specimen_type === 'organ') {\n      this.organSample = data;\n    } else {\n      this.organSample = this.ancestors.find(e => e.entity_type === 'Sample' && e.specimen_type === 'organ') as JsonDict;\n    }\n\n    const donorDescription = (this.donor.description as string || '').toLowerCase();\n    let sex: 'Male' | 'Female' | undefined;\n    if (donorDescription.includes('female')) {\n      sex = 'Female';\n    } else if (donorDescription.includes('male')) {\n      sex = 'Male';\n    }\n    const ageMatch = donorDescription.match(/age\\ ([0-9]+)/);\n    let age: number | undefined;\n    if (ageMatch) {\n      age = toNumber(ageMatch[1]);\n    }\n    let bmi: number | undefined;\n    let ethnicity: string | undefined;\n    for (const md of get(this.donor, 'metadata.organ_donor_data', []) as JsonDict[]) {\n      if (md.preferred_term === 'Feminine gender' || md.preferred_term === 'Female') {\n        sex = 'Female';\n      } else if (md.preferred_term === 'Masculine gender' || md.preferred_term === 'Male') {\n        sex = 'Male';\n      } else if (md.preferred_term === 'Current chronological age' || md.preferred_term === 'Age') {\n        age = toNumber(md.data_value);\n      } else if (md.preferred_term === 'Body mass index') {\n        bmi = toNumber(md.data_value);\n      } else if (md.grouping_concept_preferred_term === 'Racial group' || md.grouping_concept_preferred_term === 'Race') {\n        ethnicity = md.preferred_term as string;\n      }\n    }\n    let label = '';\n    if (sex && age) {\n      label += `${sex}, Age ${age}`;\n      if (bmi) {\n        label += `, BMI ${bmi.toFixed(1)}`;\n      }\n    }\n\n    this.age = age;\n    this.sex = sex;\n    this.bmi = bmi;\n    this.ethnicity = ethnicity;\n    this.label = label;\n\n    this.doi = data.display_doi as string;\n    this.description = data.description as string;\n\n    const groupUUID = this.groupUUID = (data.group_uuid || this.donor.group_uuid) as string;\n    this.groupName = (GROUP_UUID_MAPPING[groupUUID] || data.group_name || this.donor.group_name) as string;\n    this.organName = [ data, ...this.ancestors, ...this.descendants ]\n      .map((d) => d.organ as string)\n      .find((organ) => !!organ) as string;\n    this.ontologyTerms = HBM_ORGANS[this.organName] || [RUI_ORGANS.body];\n    this.organ = this.ontologyTerms[this.ontologyTerms.length - 1];\n    this.protocolUrl = this.donor.protocol_url as string;\n\n    let ruiLocation = (data.rui_location || this.ancestors[0].rui_location) as OldRuiData;\n    if (ruiLocation) {\n      // RUI Location may come in as an unparsed string\n      if (typeof ruiLocation === 'string') {\n        ruiLocation = JSON.parse(ruiLocation as string) as OldRuiData;\n      }\n      if (groupUUID === '07a29e4c-ed43-11e8-b56a-0e8017bdda58') { // UFL\n        ruiLocation = fixUflRuiLocation(ruiLocation, data);\n      }\n      let refOrganId: string | undefined;\n      if (this.organ === RUI_ORGANS.left_kidney) {\n        refOrganId = ccf.x('VHLeftKidney').id;\n      } else if (this.organ === RUI_ORGANS.right_kidney) {\n        refOrganId = ccf.x('VHRightKidney').id;\n      }\n      this.spatialEntity = convertOldRuiToJsonLd(ruiLocation, 'SpatialEntity for ' + this.label, refOrganId);\n    }\n\n    // Find TIFF Images for use in the HuBMAP Tissue Viewer\n    let images: Url[] = [];\n    const imageProviders: Iri[] = [];\n    for (const d of [ data, ...this.ancestors, ...this.descendants ]) {\n      const tiffs = (get(d, 'metadata.files', []) as {rel_path: string}[])\n        .filter(f => /\\.(ome\\.tif|ome\\.tiff)$/.test(f.rel_path))\n        .map(f => `${this.assetsApi}/${d.uuid}/${f.rel_path}` + (serviceToken ? `?token=${serviceToken}` : ''));\n      if (tiffs.length > 0) {\n        images = images.concat(tiffs);\n        imageProviders.push(HBM_PREFIX + d.uuid);\n      }\n    }\n    if (images.length > 0) {\n      this.images = images;\n      this.imageProviders = imageProviders;\n    }\n\n    const dataTypes = new Map();\n    const assayTypes = new Map();\n    let containsSequence = false;\n    for (const e of [...this.ancestors, data, ...this.descendants] as JsonDict[]) {\n      (e.data_types as string[] || []).forEach(t => dataTypes.set(t, e));\n      const assayType = (e as {metadata: { metadata: JsonDict }}).metadata?.metadata?.assay_type as string;\n      if (assayType) {\n        assayTypes.set(assayType, e);\n      }\n      if (e.contains_human_genetic_sequences === 'yes') {\n        containsSequence = true;\n      }\n    }\n    this.containsHumanGeneticSequences = containsSequence;\n    this.dataTypes = [...dataTypes.keys()].sort();\n    this.assayTypes = [...assayTypes.keys()].sort();\n\n    const typesSearch = [ ...this.dataTypes, ...this.assayTypes].map(l => l.toLowerCase()).join('|');\n    if (typesSearch.indexOf('10x') !== -1) {\n      this.thumbnailUrl = 'assets/icons/ico-bulk-10x.svg';\n      this.spatialOrBulk = 'Bulk';\n    } else if (typesSearch.indexOf('af') !== -1) {\n      this.thumbnailUrl = 'assets/icons/ico-spatial-af.svg';\n      this.spatialOrBulk = 'Spatial';\n    } else if (typesSearch.indexOf('codex') !== -1) {\n      this.thumbnailUrl = 'assets/icons/ico-spatial-codex.svg';\n      this.spatialOrBulk = 'Spatial';\n    } else if (typesSearch.indexOf('imc') !== -1) {\n      this.thumbnailUrl = 'assets/icons/ico-spatial-imc.svg';\n      this.spatialOrBulk = 'Spatial';\n    } else if ((typesSearch.indexOf('lc') !== -1) && (typesSearch.indexOf('af') === -1)) {\n      this.thumbnailUrl = 'assets/icons/ico-bulk-lc.svg';\n      this.spatialOrBulk = 'Bulk';\n    } else {\n      this.thumbnailUrl = 'assets/icons/ico-unknown.svg';\n      this.spatialOrBulk = 'Bulk';\n    }\n\n    this.portalUrl = `${portalUrl}browse/sample/${this.id}`;\n    // this.portalUrl = `${portalUrl}search?ancestor_ids[0]=${this.id}&entity_type[0]=Dataset`;\n\n    if (images.length > 0 && typesSearch.indexOf('codex') === -1) {\n      this.resultUrl = images[0];\n      this.resultType = 'image_viewer';\n      this.thumbnailUrl = 'assets/histology3.jpg';\n      if (groupUUID === '73bb26e4-ed43-11e8-8f19-0a7c1eab007a') { // VU\n        const thumb = this.resultUrl.split('/').slice(-1)[0].split('?')[0].replace('.ome.tif', '_thumbnail.png');\n        if (DR1_VU_THUMBS.has(thumb)) {\n          this.thumbnailUrl = `assets/thumbnails/DR1-VU/${thumb}`;\n        }\n      }\n    } else {\n      if (dataTypes.has('codex_cytokit')) {\n        const uuid = dataTypes.get('codex_cytokit')?.uuid;\n        this.resultUrl = `${portalUrl}browse/dataset/${uuid}#visualization`;\n      } else if (dataTypes.has('salmon_rnaseq_10x')) {\n        const uuid = dataTypes.get('salmon_rnaseq_10x')?.uuid;\n        this.resultUrl = `${portalUrl}browse/dataset/${uuid}#visualization`;\n      } else {\n        this.resultUrl = this.portalUrl;\n      }\n      this.resultType = 'external_link';\n    }\n  }\n\n  /**\n   * @returns the hubmap data in JSON-LD format\n   */\n  toJsonLd(): JsonLd {\n    const data = this.data;\n    return {\n      '@id': HBM_PREFIX + this.id,\n      '@type': 'Entity',\n      ...omit(this, [\n        'data', 'donor', 'organ_sample', 'ancestors', 'descendants', 'assetsApi'\n      ]),\n      donor: HBM_PREFIX + this.donor.uuid,\n      shortInfo0: this.doi,\n      shortInfo1: this.groupName,\n      shortInfo2: data.description || this.donor.description,\n      downloadUrl: this.portalUrl,\n      downloadTooltip: 'View in the HuBMAP Data Portal',\n\n      // image viewer metadata\n      organName: HBM_ORGAN_LABELS[this.organName] || this.organName,\n      sex: this.sex,\n      age: this.age,\n      bmi: this.bmi?.toFixed(1),\n      ethnicity: this.ethnicity,\n      authorGroup: this.groupName,\n      creator: data.created_by_user_displayname,\n      creation_date: new Date(data.create_timestamp as number || 0).toLocaleDateString(),\n      modified_date: new Date(data.last_modified_timestamp as number || 0).toLocaleDateString(),\n      donor_id: this.donor.display_doi,\n      organ_id: this.organSample.display_doi,\n      tissue_id: this.doi,\n      specimen_type: this.data.specimen_type,\n      data_types: this.dataTypes.join(', '),\n      assay_types: this.assayTypes.join(', '),\n      spatial_bulk: this.spatialOrBulk,\n      contains_sequence: this.containsHumanGeneticSequences ? 'Yes' : 'No',\n      description: data.description || this.donor.description,\n    };\n  }\n}\n\n/**\n * Adds hubmap data from a url to the triple store.\n *\n * @param store The triple store.\n * @param dataUrl The data url.\n * @param serviceType The service type.\n */\nexport async function addHubmapDataToStore(\n  store: N3Store, dataUrl: string, serviceType: 'static' | 'search-api', serviceToken?: string, assetsApi = '', portalUrl = ''\n): Promise {\n  let hubmapData: object | undefined;\n  if (serviceType === 'static') {\n    hubmapData = await fetch(dataUrl).then(r => r.ok ? r.json() : undefined).catch(() => {}) as object;\n  } else if (serviceType === 'search-api') {\n    const headers: Record = { 'Content-type': 'application/json' };\n    if (serviceToken && serviceToken.length > 0) {\n      headers.Authorization = `Bearer ${serviceToken}`;\n    }\n    hubmapData = await fetch(dataUrl, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify({\n        version: true,\n        size: 10000,\n        _source: {\n          excludes: ['donor', 'immediate_ancestors', 'immediate_descendants', 'origin_sample', 'ancestor_ids', 'descendant_ids']\n        },\n        stored_fields: ['*'],\n        script_fields: {},\n        docvalue_fields: [],\n        query: { exists: { field: 'rui_location' } }\n      })\n    }).then(r => r.ok ? r.json() : undefined).catch(() => {}) as object;\n  }\n  if (hubmapData) {\n    await addJsonLdToStore(hubmapResponseAsJsonLd(hubmapData, assetsApi, portalUrl, serviceToken), store);\n  } else {\n    console.warn(`Unable to load ${dataUrl} as HuBMAP Data`);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IconDefinition.html":{"url":"interfaces/IconDefinition.html","title":"interface - IconDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IconDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/icon-registry/icon-registry.state.ts\n        \n\n            \n                Description\n            \n            \n                Object definition for registering new svg icons.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        html\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                            Optional\n                                        namespace\n                                \n                                \n                                            Optional\n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        html\n                                    \n                                \n                                \n                                    \n                                        html:         SafeHtml\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SafeHtml\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Html containing the svg of the icon or icon set.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Name to register the icon under.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        namespace\n                                    \n                                \n                                \n                                    \n                                        namespace:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Namespace to register the icon or icon set under.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         SafeResourceUrl\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SafeResourceUrl\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Url to fetch the icon or icon set from.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Optional } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl } from '@angular/platform-browser';\nimport { DataAction, StateRepository } from '@ngxs-labs/data/decorators';\nimport { NgxsDataRepository } from '@ngxs-labs/data/repositories';\nimport { State } from '@ngxs/store';\n\nimport { DEFAULT_ICONS } from './default-icons';\n\n\n/**\n * Object definition for registering new svg icons.\n */\nexport interface IconDefinition {\n  /**\n   * Name to register the icon under.\n   */\n  name?: string;\n\n  /**\n   * Namespace to register the icon or icon set under.\n   */\n  namespace?: string;\n\n  /**\n   * Url to fetch the icon or icon set from.\n   */\n  url?: SafeResourceUrl;\n\n  /**\n   * Html containing the svg of the icon or icon set.\n   */\n  html?: SafeHtml;\n}\n\n\n/**\n * State handling the registration of icons for use with `mat-icon`.\n */\n@StateRepository()\n@State({ name: 'iconRegistry' })\n@Injectable()\nexport class IconRegistryState extends NgxsDataRepository {\n  /**\n   * Creates an instance of icon registry state.\n   *\n   * @param registry Material icon registry.\n   * @param sanitizer Service used to sanitize default imported urls and html.\n   */\n  constructor(@Optional() private registry: MatIconRegistry | null,\n              sanitizer: DomSanitizer) {\n    super();\n\n    for (const { name, namespace, url, html } of DEFAULT_ICONS) {\n      const safeDef: IconDefinition = {\n        name, namespace,\n        url: url && sanitizer.bypassSecurityTrustResourceUrl(url),\n        html: html && sanitizer.bypassSecurityTrustHtml(html)\n      };\n\n      this.registerIconImpl(safeDef);\n    }\n  }\n\n  /**\n   * Registers a svg icon for use in mat-icon.\n   *\n   * @param definition Icon to register.\n   * @returns true if registration was successful, otherwise false.\n   */\n  @DataAction()\n  registerIcon(definition: IconDefinition): boolean {\n    return this.registerIconImpl(definition);\n  }\n\n  /**\n   * Backing implementation of registerIcon.\n   *\n   * @param definition Icon to register.\n   * @returns true if registration was successful, otherwise false.\n   */\n  private registerIconImpl(definition: IconDefinition): boolean {\n    if (!this.registry) { return false; }\n    if (!definition.url && !definition.html) { return false; }\n\n    const registry = this.registry as unknown as { [prop: string]: (...args: unknown[]) => void };\n    const methodName = this.getMethodName(definition);\n    const method = registry[methodName];\n    const args = this.getArguments(definition);\n\n    if (!method) { return false; }\n    try {\n      method.apply(registry, args);\n      return true;\n    } catch (_error) {\n      return false;\n    }\n  }\n\n  /**\n   * Selects the MatIconRegistry method used to register the icon.\n   *\n   * @param definition Icon definition.\n   * @returns The name of the registry method.\n   */\n  private getMethodName({ name, namespace, url }: IconDefinition): string {\n    const parts = ['addSvgIcon'];\n    if (!name) { parts.push('Set'); }\n    if (!url) { parts.push('Literal'); }\n    if (namespace) { parts.push('InNamespace'); }\n    return parts.join('');\n  }\n\n  /**\n   * Selects the argument used to call the registration method.\n   *\n   * @param definition Icon definition.\n   * @returns An array of arguments.\n   */\n  private getArguments({ name, namespace, url, html }: IconDefinition): unknown[] {\n    const args: unknown[] = [namespace, name, url || html];\n    return args.filter(value => !!value);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IconRegistryState.html":{"url":"injectables/IconRegistryState.html","title":"injectable - IconRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  IconRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/icon-registry/icon-registry.state.ts\n        \n\n            \n                Description\n            \n            \n                State handling the registration of icons for use with mat-icon.\n\n            \n\n            \n                Extends\n            \n            \n                    NgxsDataRepository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getArguments\n                            \n                            \n                                    Private\n                                getMethodName\n                            \n                            \n                                registerIcon\n                            \n                            \n                                    Private\n                                registerIconImpl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(registry: MatIconRegistry | null, sanitizer: DomSanitizer)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/store/icon-registry/icon-registry.state.ts:43\n                            \n                        \n\n                \n                    \n                            Creates an instance of icon registry state.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        registry\n                                                  \n                                                        \n                                                                    MatIconRegistry | null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Material icon registry.\n\n                                                        \n                                                \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                        DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service used to sanitize default imported urls and html.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getArguments\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getArguments(undefined: IconDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/store/icon-registry/icon-registry.state.ts:120\n                \n            \n\n\n            \n                \n                    Selects the argument used to call the registration method.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                IconDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown[]\n\n                    \n                    \n                        An array of arguments.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getMethodName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMethodName(undefined: IconDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/store/icon-registry/icon-registry.state.ts:106\n                \n            \n\n\n            \n                \n                    Selects the MatIconRegistry method used to register the icon.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                IconDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The name of the registry method.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            registerIcon\n                        \n                        \n                    \n                \n            \n            \n                \nregisterIcon(definition: IconDefinition)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @DataAction()\n                \n            \n\n            \n                \n                    Defined in src/app/core/store/icon-registry/icon-registry.state.ts:72\n                \n            \n\n\n            \n                \n                    Registers a svg icon for use in mat-icon.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    definition\n                                    \n                                                IconDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Icon to register.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if registration was successful, otherwise false.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            registerIconImpl\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    registerIconImpl(definition: IconDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/store/icon-registry/icon-registry.state.ts:82\n                \n            \n\n\n            \n                \n                    Backing implementation of registerIcon.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    definition\n                                    \n                                                IconDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Icon to register.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if registration was successful, otherwise false.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Optional } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl } from '@angular/platform-browser';\nimport { DataAction, StateRepository } from '@ngxs-labs/data/decorators';\nimport { NgxsDataRepository } from '@ngxs-labs/data/repositories';\nimport { State } from '@ngxs/store';\n\nimport { DEFAULT_ICONS } from './default-icons';\n\n\n/**\n * Object definition for registering new svg icons.\n */\nexport interface IconDefinition {\n  /**\n   * Name to register the icon under.\n   */\n  name?: string;\n\n  /**\n   * Namespace to register the icon or icon set under.\n   */\n  namespace?: string;\n\n  /**\n   * Url to fetch the icon or icon set from.\n   */\n  url?: SafeResourceUrl;\n\n  /**\n   * Html containing the svg of the icon or icon set.\n   */\n  html?: SafeHtml;\n}\n\n\n/**\n * State handling the registration of icons for use with `mat-icon`.\n */\n@StateRepository()\n@State({ name: 'iconRegistry' })\n@Injectable()\nexport class IconRegistryState extends NgxsDataRepository {\n  /**\n   * Creates an instance of icon registry state.\n   *\n   * @param registry Material icon registry.\n   * @param sanitizer Service used to sanitize default imported urls and html.\n   */\n  constructor(@Optional() private registry: MatIconRegistry | null,\n              sanitizer: DomSanitizer) {\n    super();\n\n    for (const { name, namespace, url, html } of DEFAULT_ICONS) {\n      const safeDef: IconDefinition = {\n        name, namespace,\n        url: url && sanitizer.bypassSecurityTrustResourceUrl(url),\n        html: html && sanitizer.bypassSecurityTrustHtml(html)\n      };\n\n      this.registerIconImpl(safeDef);\n    }\n  }\n\n  /**\n   * Registers a svg icon for use in mat-icon.\n   *\n   * @param definition Icon to register.\n   * @returns true if registration was successful, otherwise false.\n   */\n  @DataAction()\n  registerIcon(definition: IconDefinition): boolean {\n    return this.registerIconImpl(definition);\n  }\n\n  /**\n   * Backing implementation of registerIcon.\n   *\n   * @param definition Icon to register.\n   * @returns true if registration was successful, otherwise false.\n   */\n  private registerIconImpl(definition: IconDefinition): boolean {\n    if (!this.registry) { return false; }\n    if (!definition.url && !definition.html) { return false; }\n\n    const registry = this.registry as unknown as { [prop: string]: (...args: unknown[]) => void };\n    const methodName = this.getMethodName(definition);\n    const method = registry[methodName];\n    const args = this.getArguments(definition);\n\n    if (!method) { return false; }\n    try {\n      method.apply(registry, args);\n      return true;\n    } catch (_error) {\n      return false;\n    }\n  }\n\n  /**\n   * Selects the MatIconRegistry method used to register the icon.\n   *\n   * @param definition Icon definition.\n   * @returns The name of the registry method.\n   */\n  private getMethodName({ name, namespace, url }: IconDefinition): string {\n    const parts = ['addSvgIcon'];\n    if (!name) { parts.push('Set'); }\n    if (!url) { parts.push('Literal'); }\n    if (namespace) { parts.push('InNamespace'); }\n    return parts.join('');\n  }\n\n  /**\n   * Selects the argument used to call the registration method.\n   *\n   * @param definition Icon definition.\n   * @returns An array of arguments.\n   */\n  private getArguments({ name, namespace, url, html }: IconDefinition): unknown[] {\n    const args: unknown[] = [namespace, name, url || html];\n    return args.filter(value => !!value);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IdObject.html":{"url":"interfaces/IdObject.html","title":"interface - IdObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IdObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/json-ontology.ts\n        \n\n            \n                Description\n            \n            \n                Interface containing the single json property '@id' \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        @id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        @id\n                                    \n                                \n                                \n                                    \n                                        @id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Json '@id' property \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { flow, map, partial, property } from 'lodash';\n\nimport { OntologyNode } from './ontology-node';\n\n\n/** Interface containing the single json property '@id' */\nexport interface IdObject {\n  /** Json '@id' property */\n  '@id': string;\n}\n\n/** Interface containing the single json property '@value' */\nexport interface ValueObject {\n  /** Json '@value' property */\n  '@value': string;\n}\n\n/**\n * Structure of a single json ontology node.\n */\nexport interface JsonOntologyNode extends IdObject {\n  /** Json parent property */\n  'parent': [IdObject];\n\n  /** Json label property */\n  'http://www.w3.org/2000/01/rdf-schema#label': [ValueObject];\n\n  /** Json synonyms property */\n  'http://www.geneontology.org/formats/oboInOwl#hasExactSynonym'?: ValueObject[];\n}\n\n/** Property name of json id field. */\nconst idProperty = '@id';\n/** Function for extracting json id fields. */\nconst idExtractor = property(idProperty);\n\n/** Property name of json value field. */\nconst valueProperty = '@value';\n/** Function for extracting json value fields. */\nconst valueExtractor = property(valueProperty);\n\n/** Property name of json parent field. */\nconst parentProperty = 'parent';\n/** Function for extracting json parent fields. */\nconst parentExtractor = flow(\n  property(parentProperty),\n  property(0),\n  idExtractor\n);\n\n/** Property name of json label field. */\nconst labelProperty = 'http://www.w3.org/2000/01/rdf-schema#label';\n/** Function for extracting json label fields. */\nconst labelExtractor = flow(\n  property(labelProperty),\n  property(0),\n  valueExtractor\n);\n\n/** Property name of json synonyms field. */\nconst synonymsProperty = 'http://www.geneontology.org/formats/oboInOwl#hasExactSynonym';\n/** Function for extracting json synonyms fields. */\nconst synonymsExtractor = flow(\n  property(synonymsProperty),\n  partial string, string[]>(map, partial.placeholder, valueExtractor)\n);\n\n/**\n * Converts a json encoded ontology node to an ontology node.\n *\n * @param json The json encoded node.\n * @returns The resulting ontology node.\n */\nexport function jsonToOntologyNode(json: JsonOntologyNode): OntologyNode {\n  return {\n    id: idExtractor(json),\n    parent: parentExtractor(json) ?? '',\n    children: [],\n    label: labelExtractor(json),\n    synonymLabels: synonymsExtractor(json)\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageViewer.html":{"url":"classes/ImageViewer.html","title":"class - ImageViewer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageViewer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-image-viewer/src/lib/image-viewer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _channelConfigs\n                            \n                            \n                                    Private\n                                _height\n                            \n                            \n                                    Private\n                                _loaders\n                            \n                            \n                                    Private\n                                _sources\n                            \n                            \n                                    Private\n                                _width\n                            \n                            \n                                    Private\n                                deck\n                            \n                            \n                                    Protected\n                                layerConfigs\n                            \n                            \n                                    Protected\n                                layers\n                            \n                            \n                                    Readonly\n                                props\n                            \n                            \n                                    Protected\n                                states\n                            \n                            \n                                    Protected\n                                views\n                            \n                            \n                                    Protected\n                                vivViews\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                    Protected\n                                    Abstract\n                                    Async\n                                createLayerConfigs\n                            \n                            \n                                    Protected\n                                    Abstract\n                                    Async\n                                createVivViews\n                            \n                            \n                                finalize\n                            \n                            \n                                    Private\n                                initializeDeck\n                            \n                            \n                                    Private\n                                layerFilter\n                            \n                            \n                                    Private\n                                onViewStateChange\n                            \n                            \n                                    Private\n                                resetChannelConfigs\n                            \n                            \n                                    Async\n                                setSize\n                            \n                            \n                                    Async\n                                setSources\n                            \n                            \n                                    Protected\n                                update\n                            \n                            \n                                    Async\n                                updateChannelConfigs\n                            \n                            \n                                    Protected\n                                updateDeckProps\n                            \n                            \n                                    Protected\n                                updateLayers\n                            \n                            \n                                    Protected\n                                updateState\n                            \n                            \n                                    Protected\n                                updateViews\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    width\n                                \n                                \n                                    height\n                                \n                                \n                                    sources\n                                \n                                \n                                    loaders\n                                \n                                \n                                    channelNames\n                                \n                                \n                                    channelConfigs\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(props: Props)\n                    \n                \n                        \n                            \n                                Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:86\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        props\n                                                  \n                                                        \n                                                                    Props\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _channelConfigs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _loaders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Loader[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:74\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _sources\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DataSource[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:73\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            deck\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Deck\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:86\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            layerConfigs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LayerConfig[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:83\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            layers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Layer[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:82\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            props\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            states\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:84\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            views\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     View[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:81\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            vivViews\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     VivView[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:80\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Abstract\n                            Async\n                            createLayerConfigs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createLayerConfigs()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Abstract\n                            Async\n                            createVivViews\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createVivViews()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finalize\n                        \n                        \n                    \n                \n            \n            \n                \nfinalize()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initializeDeck\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initializeDeck(props)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:212\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    props\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Deck\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            layerFilter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    layerFilter(undefined: LayerFilterArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @bind()\n                \n            \n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:244\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LayerFilterArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            onViewStateChange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onViewStateChange(undefined: OnViewStateChangeArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @bind()\n                \n            \n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:250\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                OnViewStateChangeArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            resetChannelConfigs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetChannelConfigs()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:231\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setSize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSize(width: number, height: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    height\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setSources\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSources(sources: DataSource[])\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sources\n                                    \n                                            DataSource[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateChannelConfigs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateChannelConfigs(configs: Record>)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configs\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            updateDeckProps\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDeckProps(props: Partial)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    props\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            updateLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateLayers()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            updateState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateState(args: ValueOrGenerator | >)\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                ValueOrGenerator | >\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            updateViews\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateViews()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n\n                \n                    \n                        getwidth()\n                    \n                \n                            \n                                \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:66\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n\n                \n                    \n                        getheight()\n                    \n                \n                            \n                                \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:67\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sources\n                    \n                \n\n                \n                    \n                        getsources()\n                    \n                \n                            \n                                \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:71\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        loaders\n                    \n                \n\n                \n                    \n                        getloaders()\n                    \n                \n                            \n                                \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:72\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        channelNames\n                    \n                \n\n                \n                    \n                        getchannelNames()\n                    \n                \n                            \n                                \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:76\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        channelConfigs\n                    \n                \n\n                \n                    \n                        getchannelConfigs()\n                    \n                \n                            \n                                \n                                    Defined in projects/ccf-image-viewer/src/lib/image-viewer.ts:77\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Deck, Layer, View, Viewport } from '@deck.gl/core';\nimport { Loader, VivView } from '@hubmap/vitessce-image-viewer';\nimport { bind } from 'bind-decorator';\n\nimport { createLoader, LoaderType, OMEZarrInfo, TiffInfo, ZarrInfo } from './loader';\nimport { flatMap, getVivId } from './utils';\n\n\ntype ValueOrGenerator = T | ((...args: U) => T);\n\ntype DeckProps = ConstructorParameters[0];\ninterface ExtDeckProps extends DeckProps {\n  canvas?: string | HTMLElement;\n}\n\ntype DeckCallbackArgs = Parameters>[0];\ntype LayerFilterArgs = DeckCallbackArgs;\ntype OnViewStateChangeArgs = DeckCallbackArgs & { viewId: string };\n\nexport type State = Record;\nexport type LayerConfig = Record;\n\nexport interface ChannelConfig {\n  active: boolean;\n  color: [number, number, number];\n  slider: [number, number];\n}\n\nexport interface DataSource {\n  type: LoaderType;\n  info: ZarrInfo | OMEZarrInfo | TiffInfo;\n}\n\nexport interface ImageViewerProps {\n  id: string;\n  initialViewState: State;\n  canvas?: HTMLCanvasElement;\n  width?: number;\n  height?: number;\n  sources?: DataSource[];\n  channelNames?: string[];\n  defaultChannelConfig?: Partial;\n}\n\nfunction applyPropDefaults(props: Props): Props & Required {\n  return {\n    canvas: null,\n    width: 0,\n    height: 0,\n    sources: [],\n    channelNames: [],\n    ...props,\n    defaultChannelConfig: {\n      active: true,\n      color: [255, 255, 255],\n      slider: [1500, 20000],\n      ...(props.defaultChannelConfig ?? {})\n    }\n  };\n}\n\n\nexport abstract class ImageViewer {\n  readonly props: Props & Required;\n\n  get width(): number { return this._width; }\n  get height(): number { return this._height; }\n  private _width: number;\n  private _height: number;\n\n  get sources(): DataSource[] { return this._sources; }\n  get loaders(): Loader[] { return this._loaders; }\n  private _sources: DataSource[] = [];\n  private _loaders: Loader[] = [];\n\n  get channelNames(): string[] { return Object.keys(this.channelConfigs); }\n  get channelConfigs(): Record { return this._channelConfigs; }\n  private _channelConfigs: Record = {};\n\n  protected vivViews: VivView[] = [];\n  protected views: View[] = [];\n  protected layers: Layer[] = [];\n  protected layerConfigs: LayerConfig[] = [];\n  protected states: Record = {};\n\n  private deck: Deck;\n\n  constructor(props: Props) {\n    const reqProps = this.props = applyPropDefaults(props);\n    this.deck = this.initializeDeck(reqProps);\n    this._width = reqProps.width;\n    this._height = reqProps.height;\n\n    if (reqProps.sources.length > 0) {\n      this.setSources(reqProps.sources);\n    }\n  }\n\n  clear(): void {\n    this._sources = [];\n    this._loaders = [];\n    this._channelConfigs = {};\n    this.vivViews = [];\n    this.layers = [];\n    this.layerConfigs = [];\n    this.states = {};\n    this.update();\n  }\n\n  finalize(): void {\n    this.deck.finalize();\n  }\n\n  async setSize(width: number, height: number): Promise {\n    this._width = width;\n    this._height = height;\n    this.vivViews = await this.createVivViews();\n\n    this.updateState((view, current) => ({\n      viewState: {\n        ...current,\n        width,\n        height,\n        id: view.id\n      }\n    }));\n    this.update();\n    this.deck.redraw(true);\n\n    return this;\n  }\n\n  async setSources(sources: DataSource[]): Promise {\n    const loaderPromises = sources.map(source => createLoader(source.type, source.info));\n    const loaders = await Promise.all(loaderPromises);\n\n    this._sources = sources;\n    this._loaders = loaders;\n    this.resetChannelConfigs();\n    this.vivViews = await this.createVivViews();\n    this.layerConfigs = await this.createLayerConfigs();\n    this.updateState(view => ({ viewState: view.initialViewState }));\n    this.update();\n\n    return this;\n  }\n\n  async updateChannelConfigs(configs: Record>): Promise {\n    const newConfigs = Object.entries(configs).reduce((result, [key, config]) => {\n      return !(key in result) ? result : {\n        ...result,\n        [key]: {\n          ...result[key],\n          ...config\n        }\n      };\n    }, this.channelConfigs);\n\n    if (newConfigs === this.channelConfigs) { return this; }\n\n    this._channelConfigs = newConfigs;\n    this.layerConfigs = await this.createLayerConfigs();\n    this.update();\n\n    return this;\n  }\n\n  protected abstract async createVivViews(): Promise;\n  protected abstract async createLayerConfigs(): Promise;\n\n  protected update(): void {\n    this.updateViews();\n    this.updateLayers();\n    this.updateDeckProps({\n      views: this.views,\n      layers: this.layers,\n      viewState: this.states\n    });\n  }\n\n  protected updateViews(): void {\n    this.views = this.vivViews.map(viv => viv.getDeckGlView());\n  }\n\n  protected updateLayers(): void {\n    const { vivViews, states, layerConfigs } = this;\n    const length = layerConfigs.length;\n\n    this.layers = flatMap(vivViews, (view, index) => view.getLayers({\n      viewStates: states,\n      props: layerConfigs[index % length]\n    }));\n  }\n\n  protected updateState(\n    args: ValueOrGenerator, [VivView, State]>\n  ): void {\n    const argsGenerator = typeof args === 'function' ? args : () => args;\n    const currentStates = this.states;\n\n    this.states = this.vivViews.reduce((states, view) => {\n      const current = currentStates[view.id] ?? {};\n      states[view.id] = view.filterViewState(argsGenerator(view, current));\n      return states;\n    }, {} as Record);\n  }\n\n  protected updateDeckProps(props: Partial): void {\n    this.deck.setProps(props);\n  }\n\n  private initializeDeck(props: Props & Required): Deck {\n    const { id, canvas, width, height } = props;\n    return new Deck({\n      id,\n      canvas,\n      width,\n      height,\n      views: [],\n      layers: [],\n      effects: [],\n      viewState: {},\n      layerFilter: this.layerFilter,\n      onViewStateChange: this.onViewStateChange,\n      glOptions: {\n        webgl2: true\n      }\n    } as ExtDeckProps);\n  }\n\n  private resetChannelConfigs(): void {\n    const { loaders, props: { channelNames, defaultChannelConfig } } = this;\n    const keys = channelNames.length > 0 ?\n      channelNames :\n      flatMap(loaders, loader => loader.channelNames ?? []);\n\n    this._channelConfigs = keys.reduce((configs, key) => ({\n      ...configs,\n      [key]: defaultChannelConfig as ChannelConfig\n    }), {} as Record);\n  }\n\n  @bind\n  private layerFilter({ layer, viewport }: LayerFilterArgs): boolean {\n    const { id: viewportId } = viewport as Viewport & { id: string };\n    return layer.id.includes(getVivId(viewportId));\n  }\n\n  @bind\n  private onViewStateChange({ viewId, viewState, oldViewState }: OnViewStateChangeArgs): void {\n    this.updateState((_view, current) => ({\n      viewState: { ...viewState, id: viewId },\n      oldViewState,\n      currentViewState: current\n    }));\n    this.update();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImageViewerAccordionComponent.html":{"url":"components/ImageViewerAccordionComponent.html","title":"component - ImageViewerAccordionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ImageViewerAccordionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/image-viewer/image-viewer-accordion/image-viewer-accordion.component.ts\n\n\n    \n        Description\n    \n    \n        Expandable accordion panel for the image viewer\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-image-viewer-accordion\n            \n\n            \n                styleUrls\n                ./image-viewer-accordion.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./image-viewer-accordion.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isLoading\n                            \n                            \n                                layers\n                            \n                            \n                                metadata\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                layerChange\n                            \n                            \n                                schemeChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isLoading\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-accordion/image-viewer-accordion.component.ts:30\n                            \n                        \n                \n                    \n                        Whether content is waiting to be loaded.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n                \n                    \n                        Type :     ImageViewerLayer[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-accordion/image-viewer-accordion.component.ts:25\n                            \n                        \n                \n                    \n                        The list of layers used to render this and child components\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        metadata\n                    \n                \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-accordion/image-viewer-accordion.component.ts:20\n                            \n                        \n                \n                    \n                        Metadata of image to be displayed in the About panel\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        layerChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-accordion/image-viewer-accordion.component.ts:35\n                            \n                        \n                \n                    \n                        Output to pass up the changes made to the layers to parent components\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        schemeChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-accordion/image-viewer-accordion.component.ts:38\n                            \n                        \n                \n                    \n                        Emits when the default scheme has changed.  \n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { ImageViewerLayer } from '../../../core/models/image-viewer-layer';\nimport { ColorScheme } from '../../color-scheme/color-schemes';\n\n\n/**\n * Expandable accordion panel for the image viewer\n */\n@Component({\n  selector: 'ccf-image-viewer-accordion',\n  templateUrl: './image-viewer-accordion.component.html',\n  styleUrls: ['./image-viewer-accordion.component.scss']\n})\nexport class ImageViewerAccordionComponent {\n\n  /**\n   * Metadata of image to be displayed in the About panel\n   */\n  @Input() metadata: { label: string; value: string; }[];\n\n  /**\n   * The list of layers used to render this and child components\n   */\n  @Input() layers: ImageViewerLayer[];\n\n  /**\n   * Whether content is waiting to be loaded.\n   */\n  @Input() isLoading: boolean;\n\n  /**\n   * Output to pass up the changes made to the layers to parent components\n   */\n  @Output() layerChange = new EventEmitter();\n\n  /** Emits when the default scheme has changed.  */\n  @Output() schemeChange = new EventEmitter();\n}\n\n    \n\n    \n        \n  \n    \n      Layers\n    \n    \n  \n\n  \n    \n      About\n    \n    \n      \n        {{ entry.label }}:\n        {{ entry.value }}\n      \n    \n  \n\n\n    \n\n    \n                \n                    ./image-viewer-accordion.component.scss\n                \n                .mat-expansion-panel {\n  margin-left: 1.5rem;\n  margin-right: 1.5rem;\n  border-bottom-width: 1px;\n  border-bottom-style: solid;\n  border-radius: 0 !important;\n  position: unset;\n\n  .mat-expansion-panel-header {\n    padding: 0;\n\n    mat-panel-title {\n      font-weight: bold;\n    }\n\n    ::ng-deep .mat-expansion-indicator {\n      position: relative;\n      right: 1em;\n    }\n  }\n\n  .data-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    font-size: 0.75rem;\n\n    .data-entry {\n      display: flex;\n      text-overflow: ellipsis;\n      justify-content: center;\n      margin-bottom: .25rem;\n\n      .label,\n      .value {\n        display: flex;\n        height: 1rem;\n        line-height: 1rem;\n      }\n\n      .label {\n        justify-content: flex-end;\n        width: 50%;\n      }\n\n      .value {\n        justify-content: flex-start;\n        margin-left: 1rem;\n        width: 50%;\n        flex-wrap: wrap;\n        height: 100%;\n      }\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Layers                      About                      {{ entry.label }}:        {{ entry.value }}            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ImageViewerAccordionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImageViewerAccordionModule.html":{"url":"modules/ImageViewerAccordionModule.html","title":"module - ImageViewerAccordionModule","body":"\n                   \n\n\n\n\n    Modules\n    ImageViewerAccordionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImageViewerAccordionModule\n\n\n\ncluster_ImageViewerAccordionModule_declarations\n\n\n\ncluster_ImageViewerAccordionModule_imports\n\n\n\ncluster_ImageViewerAccordionModule_exports\n\n\n\n\nImageViewerAccordionComponent\n\nImageViewerAccordionComponent\n\n\n\nImageViewerAccordionModule\n\nImageViewerAccordionModule\n\nImageViewerAccordionModule -->\n\nImageViewerAccordionComponent->ImageViewerAccordionModule\n\n\n\n\n\nImageViewerAccordionComponent \n\nImageViewerAccordionComponent \n\nImageViewerAccordionComponent  -->\n\nImageViewerAccordionModule->ImageViewerAccordionComponent \n\n\n\n\n\nImageViewerLayersModule\n\nImageViewerLayersModule\n\nImageViewerAccordionModule -->\n\nImageViewerLayersModule->ImageViewerAccordionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/image-viewer/image-viewer-accordion/image-viewer-accordion.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ImageViewerAccordionComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ImageViewerLayersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageViewerAccordionComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {MatExpansionModule} from '@angular/material/expansion';\n\nimport { ImageViewerAccordionComponent } from './image-viewer-accordion.component';\nimport { ImageViewerLayersModule } from '../image-viewer-layers/image-viewer-layers.module';\n\n\n@NgModule({\n  imports: [CommonModule, MatExpansionModule, ImageViewerLayersModule],\n  declarations: [ImageViewerAccordionComponent],\n  exports: [ImageViewerAccordionComponent]\n})\nexport class ImageViewerAccordionModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImageViewerContentComponent.html":{"url":"components/ImageViewerContentComponent.html","title":"component - ImageViewerContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ImageViewerContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/image-viewer/image-viewer-content/image-viewer-content.component.ts\n\n\n    \n        Description\n    \n    \n        Content for the image viewer sidebar\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-image-viewer-content\n            \n\n            \n                styleUrls\n                ./image-viewer-content.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./image-viewer-content.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                isLoading\n                            \n                            \n                                layers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                closeViewer\n                            \n                            \n                                layerChange\n                            \n                            \n                                schemeChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         ImageViewerData\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-content/image-viewer-content.component.ts:21\n                            \n                        \n                \n                    \n                        Image data to be displayed in the sidebar\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isLoading\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-content/image-viewer-content.component.ts:31\n                            \n                        \n                \n                    \n                        Whether content is waiting to be loaded.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n                \n                    \n                        Type :     ImageViewerLayer[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-content/image-viewer-content.component.ts:26\n                            \n                        \n                \n                    \n                        The list of layers used to render this and child components\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        closeViewer\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-content/image-viewer-content.component.ts:36\n                            \n                        \n                \n                    \n                        Emits closeViewer on close button click\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layerChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-content/image-viewer-content.component.ts:41\n                            \n                        \n                \n                    \n                        Output to pass up the changes made to the layers to parent components\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        schemeChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-content/image-viewer-content.component.ts:44\n                            \n                        \n                \n                    \n                        Emits when the default scheme has changed.  \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            close\n                        \n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/image-viewer-content/image-viewer-content.component.ts:49\n                \n            \n\n\n            \n                \n                    Hides the viewer\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ImageViewerData } from 'ccf-database';\n\nimport { ColorScheme } from '../../../core/models/color-scheme';\nimport { ImageViewerLayer } from '../../../core/models/image-viewer-layer';\n\n\n/**\n * Content for the image viewer sidebar\n */\n@Component({\n  selector: 'ccf-image-viewer-content',\n  templateUrl: './image-viewer-content.component.html',\n  styleUrls: ['./image-viewer-content.component.scss']\n})\nexport class ImageViewerContentComponent {\n\n  /**\n   * Image data to be displayed in the sidebar\n   */\n  @Input() data: ImageViewerData;\n\n  /**\n   * The list of layers used to render this and child components\n   */\n  @Input() layers: ImageViewerLayer[];\n\n  /**\n   * Whether content is waiting to be loaded.\n   */\n  @Input() isLoading: boolean;\n\n  /**\n   * Emits closeViewer on close button click\n   */\n  @Output() closeViewer = new EventEmitter();\n\n  /**\n   * Output to pass up the changes made to the layers to parent components\n   */\n  @Output() layerChange = new EventEmitter();\n\n  /** Emits when the default scheme has changed.  */\n  @Output() schemeChange = new EventEmitter();\n\n  /**\n   * Hides the viewer\n   */\n  close(): void {\n    this.closeViewer.emit();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      close\n    \n  \n  \n    {{ data.organName }}\n    {{ data.label }}\n  \n  \n  \n\n\n    \n\n    \n                \n                    ./image-viewer-content.component.scss\n                \n                .viewer-sidebar {\n  .viewer-close-header {\n    display: flex;\n    justify-content: flex-end;\n    height: 3rem;\n    padding-right: 1.5rem;\n    padding-left: 1.5rem;\n    \n    .viewer-close-button {\n      border: none;\n      padding: 0;\n      background: inherit;\n      cursor: pointer;\n    }\n  }\n}\n  \n.sample-info {\n  padding-right: 1.5rem;\n  padding-left: 1.5rem;\n  padding-top: 1.5rem;\n  padding-bottom: 1rem;\n  \n  .sample-region {\n    font-weight: bold;\n  }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            close            {{ data.organName }}    {{ data.label }}      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ImageViewerContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImageViewerContentModule.html":{"url":"modules/ImageViewerContentModule.html","title":"module - ImageViewerContentModule","body":"\n                   \n\n\n\n\n    Modules\n    ImageViewerContentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImageViewerContentModule\n\n\n\ncluster_ImageViewerContentModule_declarations\n\n\n\ncluster_ImageViewerContentModule_imports\n\n\n\ncluster_ImageViewerContentModule_exports\n\n\n\n\nImageViewerContentComponent\n\nImageViewerContentComponent\n\n\n\nImageViewerContentModule\n\nImageViewerContentModule\n\nImageViewerContentModule -->\n\nImageViewerContentComponent->ImageViewerContentModule\n\n\n\n\n\nImageViewerContentComponent \n\nImageViewerContentComponent \n\nImageViewerContentComponent  -->\n\nImageViewerContentModule->ImageViewerContentComponent \n\n\n\n\n\nImageViewerAccordionModule\n\nImageViewerAccordionModule\n\nImageViewerContentModule -->\n\nImageViewerAccordionModule->ImageViewerContentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/image-viewer/image-viewer-content/image-viewer-content.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ImageViewerContentComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ImageViewerAccordionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageViewerContentComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { ImageViewerAccordionModule } from '../image-viewer-accordion/image-viewer-accordion.module';\nimport { ImageViewerContentComponent } from './image-viewer-content.component';\n\n\n@NgModule({\n  imports: [CommonModule, MatIconModule, ImageViewerAccordionModule],\n  declarations: [ImageViewerContentComponent],\n  exports: [ImageViewerContentComponent]\n})\nexport class ImageViewerContentModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ImageViewerData.html":{"url":"interfaces/ImageViewerData.html","title":"interface - ImageViewerData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ImageViewerData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Data for image viewer display. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        @id\n                                \n                                \n                                        @type\n                                \n                                \n                                        id\n                                \n                                \n                                        label\n                                \n                                \n                                        metadata\n                                \n                                \n                                        organName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        @id\n                                    \n                                \n                                \n                                    \n                                        @id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @type\n                                    \n                                \n                                \n                                    \n                                        @type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Type string. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Image label. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                    \n                                \n                                \n                                    \n                                        metadata:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Other metadata. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        organName\n                                    \n                                \n                                \n                                    \n                                        organName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Containing organ name. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AggregateResult {\n  /** Queried field. */\n  label: string;\n  /** Aggregate value. */\n  count: string | number;\n}\n\n/** Result for list of tissues. */\nexport interface ListResult {\n  /** Identifier. */\n  '@id': string;\n  /** Type string. */\n  '@type': 'ListResult';\n  /** Identifier. */\n  id: string;\n  /** Tissue label. */\n  label: string;\n  /** Short description. */\n  shortInfo?: string[];\n  /** Small icon url. */\n  thumbnailUrl?: string;\n  /** Url for data download. */\n  downloadUrl?: string;\n  /** Description of data download. */\n  downloadTooltip?: string;\n  /** Result url. */\n  resultUrl?: string;\n  /** Type of result url. */\n  resultType?: 'external_link' | 'local_link' | 'image_viewer';\n  /** If the result should be highlighted */\n  highlighted?: boolean;\n}\n\n/** Data for image viewer display. */\nexport interface ImageViewerData {\n  /** Identifier. */\n  '@id': string;\n  /** Type string. */\n  '@type': 'ImageViewerData';\n  /** Identifier. */\n  id: string;\n  /** Image label. */\n  label: string;\n  /** Containing organ name. */\n  organName: string;\n  /** Other metadata. */\n  metadata: { label: string, value: string }[];\n}\n\n/** Item that can be searched for. */\nexport interface SearchableItem {\n  /** Identifier. */\n  id: string;\n  /** Gender. */\n  sex?: 'Male' | 'Female';\n  /** Age. */\n  age?: number;\n  /** BMI. */\n  bmi?: number;\n  /** Ontology terms. */\n  ontologyTerms?: Set;\n}\n\n/** Options applied during queries. */\nexport interface Filter {\n  /** Gender. */\n  sex: 'Both' | 'Male' | 'Female';\n  /** Age range. */\n  ageRange: [number, number];\n  /** BMI range. */\n  bmiRange: [number, number];\n  /** TMC. */\n  tmc: string[];\n  /** Technologies. */\n  technologies: string[];\n  /** Ontology terms. */\n  ontologyTerms: string[];\n  /** Entities to be highlighted */\n  highlightedEntities?: string[];\n  /** Whether it has a spatial entity. */\n  hasSpatialEntity?: boolean;\n  /** Include optional debugging information */\n  debug?: boolean;\n}\n\n/** Backend query interface. */\nexport interface DataSource {\n  /** Query list items. */\n  getListResults(filter?: Filter): Promise;\n  /** Query aggregate items. */\n  getAggregateResults(filter?: Filter): Promise;\n  /** Query a specific image. */\n  getImageViewerData(iri: string): Promise;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageViewerLayer.html":{"url":"classes/ImageViewerLayer.html","title":"class - ImageViewerLayer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageViewerLayer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/image-viewer-layer.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            PureImageViewerLayer\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                brightness\n                            \n                            \n                                color\n                            \n                            \n                                colorScheme\n                            \n                            \n                                customizedColor\n                            \n                            \n                                defaultOrder\n                            \n                            \n                                id\n                            \n                            \n                                label\n                            \n                            \n                                selected\n                            \n                            \n                                selectionOrder\n                            \n                            \n                                transparency\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getBrightness\n                            \n                            \n                                isDark\n                            \n                            \n                                isLight\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    background\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: ImageViewerLayerArgs)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/models/image-viewer-layer.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        ImageViewerLayerArgs\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            brightness\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [number, number]\n\n                        \n                    \n                    \n                        \n                            Default value : [20, 60]\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/models/image-viewer-layer.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            color\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/models/image-viewer-layer.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            colorScheme\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ColorScheme\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/models/image-viewer-layer.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            customizedColor\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/models/image-viewer-layer.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            defaultOrder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : -1\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/models/image-viewer-layer.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/models/image-viewer-layer.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            label\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/models/image-viewer-layer.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selected\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/models/image-viewer-layer.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectionOrder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/models/image-viewer-layer.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            transparency\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 100\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/models/image-viewer-layer.ts:30\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getBrightness\n                        \n                        \n                    \n                \n            \n            \n                \ngetBrightness()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/models/image-viewer-layer.ts:70\n                \n            \n\n\n            \n                \n                    Converts the layer's hex color code to RGB and calculates a value for the color brightness\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isDark\n                        \n                        \n                    \n                \n            \n            \n                \nisDark()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/models/image-viewer-layer.ts:102\n                \n            \n\n\n            \n                \n                    Determines whether the color icon is dark enough to require a border (dark mode only)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isLight\n                        \n                        \n                    \n                \n            \n            \n                \nisLight()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/models/image-viewer-layer.ts:95\n                \n            \n\n\n            \n                \n                    Determines whether the color icon is light enough to require a border (light mode only)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        background\n                    \n                \n\n                \n                    \n                        getbackground()\n                    \n                \n                            \n                                \n                                    Defined in src/app/core/models/image-viewer-layer.ts:47\n                                \n                            \n                    \n                        \n                                Dynamically creates a background style based on the layer's color or color scheme\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ColorScheme } from './color-scheme';\n\nexport interface PureImageViewerLayer {\n  id: string;\n  label: string;\n\n  colorScheme: ColorScheme;\n  color: string;\n  brightness: [number, number];\n  transparency: number;\n\n  selected: boolean;\n  customizedColor: boolean;\n  selectionOrder: number;\n  defaultOrder: number;\n}\n\nexport type ImageViewerLayerRequiredArgNames = 'id' | 'colorScheme';\nexport type ImageViewerLayerArgs =\n  Pick &\n  Partial>;\n\nexport class ImageViewerLayer implements PureImageViewerLayer {\n  id: string;\n  label: string;\n\n  colorScheme: ColorScheme;\n  color: string;\n  brightness: [number, number] = [20, 60];\n  transparency = 100;\n\n  selected = false;\n  customizedColor = false;\n  selectionOrder = 0;\n  defaultOrder = -1;\n\n  constructor(data: ImageViewerLayerArgs) {\n    Object.assign(this, {\n      label: data.id,\n      color: data.colorScheme.colors[0]\n    }, data);\n  }\n\n  /**\n   * Dynamically creates a background style based on the layer's color or color scheme\n   */\n  get background(): string {\n    if (this.colorScheme.type === 'discrete') {\n      return this.color;\n    }\n\n    const colors = this.colorScheme.colors;\n    const positions = this.colorScheme.positions;\n\n    let gradient = 'linear-gradient(to right, ';\n    colors.forEach((color, index) => {\n      gradient += `${color} ${positions[index] * 100}%`;\n      if (index  225 ? true : false;\n  }\n\n  /**\n   * Determines whether the color icon is dark enough to require a border (dark mode only)\n   */\n  isDark(): boolean {\n    return this.getBrightness() \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImageViewerLayersComponent.html":{"url":"components/ImageViewerLayersComponent.html","title":"component - ImageViewerLayersComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ImageViewerLayersComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/image-viewer/image-viewer-layers/image-viewer-layers.component.ts\n\n\n    \n        Description\n    \n    \n        Component in charge of rendering list of the image layers along with the ability\nto choose which ones are to be showm and what display properties they have.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-image-viewer-layers\n            \n\n            \n                styleUrls\n                ./image-viewer-layers.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./image-viewer-layers.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkboxOnChange\n                            \n                            \n                                layerChanged\n                            \n                            \n                                trackById\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isLoading\n                            \n                            \n                                layers\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                layerChange\n                            \n                            \n                                schemeChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isLoading\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-layers/image-viewer-layers.component.ts:26\n                            \n                        \n                \n                    \n                        Whether content is waiting to be loaded.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n                \n                    \n                        Type :     ImageViewerLayer[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-layers/image-viewer-layers.component.ts:21\n                            \n                        \n                \n                    \n                        The list of layers to be displayed which contain the styilng properties needed\nto make rendering decisions.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        layerChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-layers/image-viewer-layers.component.ts:31\n                            \n                        \n                \n                    \n                        A sorted list of selected layers containing information such as selectionOrder and colorScheme.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        schemeChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-layers/image-viewer-layers.component.ts:36\n                            \n                        \n                \n                    \n                        Emits when the default scheme has changed.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkboxOnChange\n                        \n                        \n                    \n                \n            \n            \n                \ncheckboxOnChange(layer: ImageViewerLayer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/image-viewer-layers/image-viewer-layers.component.ts:54\n                \n            \n\n\n            \n                \n                    Function in charge of handling the layers' checkbox change events.  It keeps track of layers' selected\nand selectionOrder properties as well as emitting the updated layer list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                ImageViewerLayer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is the layer that needs updating based on the event passed with it.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            layerChanged\n                        \n                        \n                    \n                \n            \n            \n                \nlayerChanged(layer: ImageViewerLayer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/image-viewer-layers/image-viewer-layers.component.ts:67\n                \n            \n\n\n            \n                \n                    This method captures changes to a layer's color options and updates the layers list accordingly\nbefore emitting the new set of active layers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                ImageViewerLayer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the updated layer object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            trackById\n                        \n                        \n                    \n                \n            \n            \n                \ntrackById(layer: ImageViewerLayer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/image-viewer-layers/image-viewer-layers.component.ts:44\n                \n            \n\n\n            \n                \n                    Used by ngFor to track changes across ImageViewerLayer instances.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    layer\n                                    \n                                                ImageViewerLayer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The layer.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The layer's unique id.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { ImageViewerLayer } from '../../../core/models/image-viewer-layer';\nimport { ColorScheme } from '../../color-scheme/color-schemes';\n\n\n/**\n * Component in charge of rendering list of the image layers along with the ability\n * to choose which ones are to be showm and what display properties they have.\n */\n@Component({\n  selector: 'ccf-image-viewer-layers',\n  templateUrl: './image-viewer-layers.component.html',\n  styleUrls: ['./image-viewer-layers.component.scss']\n})\nexport class ImageViewerLayersComponent {\n  /**\n   * The list of layers to be displayed which contain the styilng properties needed\n   * to make rendering decisions.\n   */\n  @Input() layers: ImageViewerLayer[];\n\n  /**\n   * Whether content is waiting to be loaded.\n   */\n  @Input() isLoading: boolean;\n\n  /**\n   * A sorted list of selected layers containing information such as selectionOrder and colorScheme.\n   */\n  @Output() layerChange = new EventEmitter();\n\n  /**\n   * Emits when the default scheme has changed.\n   */\n  @Output() schemeChange = new EventEmitter();\n\n  /**\n   * Used by ngFor to track changes across ImageViewerLayer instances.\n   *\n   * @param layer The layer.\n   * @returns The layer's unique id.\n   */\n  trackById(layer: ImageViewerLayer): string {\n    return layer.id;\n  }\n\n  /**\n   * Function in charge of handling the layers' checkbox change events.  It keeps track of layers' selected\n   * and selectionOrder properties as well as emitting the updated layer list.\n   * @param event contains whether or not the layer was selected or unselected.\n   * @param layer is the layer that needs updating based on the event passed with it.\n   */\n  checkboxOnChange(layer: ImageViewerLayer): void {\n    this.layerChange.emit(new ImageViewerLayer({\n      ...layer,\n      selected: !layer.selected\n    }));\n  }\n\n  /**\n   * This method captures changes to a layer's color options and updates the layers list accordingly\n   * before emitting the new set of active layers.\n   * @param layer the updated layer object.\n   * @param referenceLayer the layer object before the changes, used for referencing which layer in the list to update.\n   */\n  layerChanged(layer: ImageViewerLayer): void {\n    this.layerChange.emit(layer);\n  }\n}\n\n    \n\n    \n        \n  \n    \n    \n\n    \n      \n        \n          {{ layer.label }}\n        \n        \n        \n      \n    \n  \n  \n    \n      RGB Images are not customizable.\n    \n  \n\n\n    \n\n    \n                \n                    ./image-viewer-layers.component.scss\n                \n                :host {\n  .layer {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    height: 1.5rem;\n  }\n\n  .hidden {\n    visibility: hidden !important;\n  }\n\n  .color-selector-placeholder {\n    height: 1rem;\n    width: 1rem;\n    border-radius: 100%;\n  }\n\n  .no-layers-text {\n    text-align: center;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                      {{ layer.label }}                                                RGB Images are not customizable.      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ImageViewerLayersComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImageViewerLayersModule.html":{"url":"modules/ImageViewerLayersModule.html","title":"module - ImageViewerLayersModule","body":"\n                   \n\n\n\n\n    Modules\n    ImageViewerLayersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImageViewerLayersModule\n\n\n\ncluster_ImageViewerLayersModule_declarations\n\n\n\ncluster_ImageViewerLayersModule_imports\n\n\n\ncluster_ImageViewerLayersModule_exports\n\n\n\n\nImageViewerLayersComponent\n\nImageViewerLayersComponent\n\n\n\nImageViewerLayersModule\n\nImageViewerLayersModule\n\nImageViewerLayersModule -->\n\nImageViewerLayersComponent->ImageViewerLayersModule\n\n\n\n\n\nImageViewerLayersComponent \n\nImageViewerLayersComponent \n\nImageViewerLayersComponent  -->\n\nImageViewerLayersModule->ImageViewerLayersComponent \n\n\n\n\n\nColorPickerLauncherModule\n\nColorPickerLauncherModule\n\nImageViewerLayersModule -->\n\nColorPickerLauncherModule->ImageViewerLayersModule\n\n\n\n\n\nSchemeDropdownModule\n\nSchemeDropdownModule\n\nImageViewerLayersModule -->\n\nSchemeDropdownModule->ImageViewerLayersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/image-viewer/image-viewer-layers/image-viewer-layers.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ImageViewerLayersComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ColorPickerLauncherModule\n                        \n                        \n                            SchemeDropdownModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageViewerLayersComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { ImageViewerLayersComponent } from './image-viewer-layers.component';\nimport { SchemeDropdownModule } from '../../scheme-dropdown/scheme-dropdown.module';\nimport { ColorPickerLauncherModule } from '../../color-scheme/color-picker-launcher/color-picker-launcher.module';\n\n\n@NgModule({\n  imports: [CommonModule, MatCheckboxModule, ColorPickerLauncherModule, SchemeDropdownModule],\n  declarations: [ImageViewerLayersComponent],\n  exports: [ImageViewerLayersComponent]\n})\nexport class ImageViewerLayersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImageViewerLegendComponent.html":{"url":"components/ImageViewerLegendComponent.html","title":"component - ImageViewerLegendComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ImageViewerLegendComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/image-viewer/image-viewer-legend/image-viewer-legend.component.ts\n\n\n    \n        Description\n    \n    \n        Legend in the image viewer displaying the selected layers and their colors\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-image-viewer-legend\n            \n\n            \n                styleUrls\n                ./image-viewer-legend.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./image-viewer-legend.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _layers\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                layers\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    layers\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n                \n                    \n                        Type :     []\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-legend/image-viewer-legend.component.ts:18\n                            \n                        \n                \n                    \n                        The list of layers used to render this components\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _layers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ImageViewerLayer[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-legend/image-viewer-legend.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n\n                \n                    \n                        getlayers()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/image-viewer/image-viewer-legend/image-viewer-legend.component.ts:21\n                                \n                            \n\n                \n                    \n                        setlayers(layers: [])\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/image-viewer/image-viewer-legend/image-viewer-legend.component.ts:18\n                                \n                            \n                    \n                        \n                                The list of layers used to render this components\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            layers\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { ImageViewerLayer } from '../../../core/models/image-viewer-layer';\n\n/**\n * Legend in the image viewer displaying the selected layers and their colors\n */\n@Component({\n  selector: 'ccf-image-viewer-legend',\n  templateUrl: './image-viewer-legend.component.html',\n  styleUrls: ['./image-viewer-legend.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ImageViewerLegendComponent {\n  /**\n   * The list of layers used to render this components\n   */\n  // tslint:disable-next-line: no-unsafe-any\n  @Input() set layers(layers: ImageViewerLayer[]) {\n    this._layers = [...layers].sort((v1, v2) => v1.selectionOrder - v2.selectionOrder);\n  }\n  get layers(): ImageViewerLayer[] { return this._layers; }\n  private _layers: ImageViewerLayer[];\n}\n\n    \n\n    \n        \n  \n    \n    {{ layer.label }}\n  \n\n\n    \n\n    \n                \n                    ./image-viewer-legend.component.scss\n                \n                .legend {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  height: 3rem;\n\n  .legend-item {\n    margin-right: 1rem;\n    display: flex;\n    align-items: center;\n    height: 1.5rem;\n\n    .item-color {\n      margin-right: 1rem;\n      height: 1rem;\n      width: 1rem;\n    }\n\n    .item-title {\n      font-size: 14px;\n      display: flex;\n      align-items: center;\n    }\n  }\n}\n\n.circle {\n  border-radius: 100%;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          {{ layer.label }}  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ImageViewerLegendComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImageViewerLegendModule.html":{"url":"modules/ImageViewerLegendModule.html","title":"module - ImageViewerLegendModule","body":"\n                   \n\n\n\n\n    Modules\n    ImageViewerLegendModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImageViewerLegendModule\n\n\n\ncluster_ImageViewerLegendModule_declarations\n\n\n\ncluster_ImageViewerLegendModule_exports\n\n\n\n\nImageViewerLegendComponent\n\nImageViewerLegendComponent\n\n\n\nImageViewerLegendModule\n\nImageViewerLegendModule\n\nImageViewerLegendModule -->\n\nImageViewerLegendComponent->ImageViewerLegendModule\n\n\n\n\n\nImageViewerLegendComponent \n\nImageViewerLegendComponent \n\nImageViewerLegendComponent  -->\n\nImageViewerLegendModule->ImageViewerLegendComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/image-viewer/image-viewer-legend/image-viewer-legend.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ImageViewerLegendComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageViewerLegendComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ImageViewerLegendComponent } from './image-viewer-legend.component';\n\n\n\n@NgModule({\n  declarations: [ImageViewerLegendComponent],\n  imports: [CommonModule],\n  exports: [ImageViewerLegendComponent]\n})\nexport class ImageViewerLegendModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImageViewerModule.html":{"url":"modules/ImageViewerModule.html","title":"module - ImageViewerModule","body":"\n                   \n\n\n\n\n    Modules\n    ImageViewerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImageViewerModule\n\n\n\ncluster_ImageViewerModule_imports\n\n\n\ncluster_ImageViewerModule_exports\n\n\n\n\nImageViewerContentModule\n\nImageViewerContentModule\n\n\n\nImageViewerModule\n\nImageViewerModule\n\nImageViewerModule -->\n\nImageViewerContentModule->ImageViewerModule\n\n\n\n\n\nImageViewerLayersModule\n\nImageViewerLayersModule\n\nImageViewerModule -->\n\nImageViewerLayersModule->ImageViewerModule\n\n\n\n\n\nImageViewerPopoverModule\n\nImageViewerPopoverModule\n\nImageViewerModule -->\n\nImageViewerPopoverModule->ImageViewerModule\n\n\n\n\n\nViewerModule\n\nViewerModule\n\nImageViewerModule -->\n\nViewerModule->ImageViewerModule\n\n\n\n\n\nImageViewerContentModule \n\nImageViewerContentModule \n\nImageViewerContentModule  -->\n\nImageViewerModule->ImageViewerContentModule \n\n\n\n\n\nImageViewerLayersModule \n\nImageViewerLayersModule \n\nImageViewerLayersModule  -->\n\nImageViewerModule->ImageViewerLayersModule \n\n\n\n\n\nImageViewerPopoverModule \n\nImageViewerPopoverModule \n\nImageViewerPopoverModule  -->\n\nImageViewerModule->ImageViewerPopoverModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/image-viewer/image-viewer.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ImageViewerContentModule\n                        \n                        \n                            ImageViewerLayersModule\n                        \n                        \n                            ImageViewerPopoverModule\n                        \n                        \n                            ViewerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageViewerContentModule\n                        \n                        \n                            ImageViewerLayersModule\n                        \n                        \n                            ImageViewerPopoverModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\n\nimport { ImageViewerContentModule } from './image-viewer-content/image-viewer-content.module';\nimport { ImageViewerLayersModule } from './image-viewer-layers/image-viewer-layers.module';\nimport { ImageViewerPopoverModule } from './image-viewer-popover/image-viewer-popover.module';\nimport { ViewerModule } from './viewer/viewer.module';\n\n\n@NgModule({\n  imports: [ImageViewerPopoverModule, ImageViewerContentModule, ViewerModule, ImageViewerLayersModule],\n  providers: [],\n  declarations: [],\n  exports: [ImageViewerPopoverModule, ImageViewerContentModule, ImageViewerLayersModule]\n})\nexport class ImageViewerModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImageViewerPopoverComponent.html":{"url":"components/ImageViewerPopoverComponent.html","title":"component - ImageViewerPopoverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ImageViewerPopoverComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/image-viewer/image-viewer-popover/image-viewer-popover.component.ts\n\n\n    \n        Description\n    \n    \n        Popup that displays detailed information on a selected image along with viewing options\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-image-viewer-popover\n            \n\n            \n                styleUrls\n                ./image-viewer-popover.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./image-viewer-popover.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                isLoading\n                            \n                            \n                                result\n                            \n                            \n                                sourceUrls\n                            \n                            \n                                viewerVisible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                            \n                                onChannelsChange\n                            \n                            \n                                open\n                            \n                            \n                                    Private\n                                setSourceUrls\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(state: ViewerState, cdr: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/image-viewer/image-viewer-popover/image-viewer-popover.component.ts:57\n                            \n                        \n\n                \n                    \n                            Initializes the component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        state\n                                                  \n                                                        \n                                                                        ViewerState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The image viewer state.\n\n                                                        \n                                                \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Reference to this components change detector.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            close\n                        \n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/image-viewer-popover/image-viewer-popover.component.ts:70\n                \n            \n\n\n            \n                \n                    Returns viewer to closed state\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onChannelsChange\n                        \n                        \n                    \n                \n            \n            \n                \nonChannelsChange(channels: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/image-viewer-popover/image-viewer-popover.component.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    channels\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            open\n                        \n                        \n                    \n                \n            \n            \n                \nopen(data: ImageViewerData, result: ListResult)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/image-viewer-popover/image-viewer-popover.component.ts:79\n                \n            \n\n\n            \n                \n                    Changes viewer to opened state\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ImageViewerData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data of the image to be passed into the viewer\n\n                                    \n                                \n                                \n                                    result\n                                    \n                                                ListResult\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setSourceUrls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSourceUrls(result: ListResult)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/image-viewer-popover/image-viewer-popover.component.ts:99\n                \n            \n\n\n            \n                \n                    Sets the source urls from the currently active data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    result\n                                    \n                                                ListResult\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The active data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : EMPTY_DATA\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-popover/image-viewer-popover.component.ts:37\n                            \n                        \n\n                \n                    \n                        Data of the image to be passed into the viewer\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-popover/image-viewer-popover.component.ts:52\n                            \n                        \n\n                \n                    \n                        Whether data is currently loading.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            result\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : EMPTY_RESULT\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-popover/image-viewer-popover.component.ts:42\n                            \n                        \n\n                \n                    \n                        Currently active result.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sourceUrls\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-popover/image-viewer-popover.component.ts:47\n                            \n                        \n\n                \n                    \n                        Urls to load image data from.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            viewerVisible\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/image-viewer-popover/image-viewer-popover.component.ts:57\n                            \n                        \n\n                \n                    \n                        Whether or not the image viewer is visible\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { ImageViewerData, ListResult } from 'ccf-database';\n\nimport { ViewerState } from '../../../core/store/viewer/viewer.state';\n\n\nconst EMPTY_DATA: ImageViewerData = {\n  '@id': '',\n  '@type': 'ImageViewerData',\n  id: '',\n  label: '',\n  organName: '',\n  metadata: []\n};\n\nconst EMPTY_RESULT: ListResult = {\n  '@id': '',\n  '@type': 'ListResult',\n  id: '',\n  label: ''\n};\n\n\n/**\n * Popup that displays detailed information on a selected image along with viewing options\n */\n@Component({\n  selector: 'ccf-image-viewer-popover',\n  templateUrl: './image-viewer-popover.component.html',\n  styleUrls: ['./image-viewer-popover.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ImageViewerPopoverComponent {\n  /**\n   * Data of the image to be passed into the viewer\n   */\n  data = EMPTY_DATA;\n\n  /**\n   * Currently active result.\n   */\n  result = EMPTY_RESULT;\n\n  /**\n   * Urls to load image data from.\n   */\n  sourceUrls: string[] = [];\n\n  /**\n   * Whether data is currently loading.\n   */\n  isLoading = true;\n\n  /**\n   * Whether or not the image viewer is visible\n   */\n  viewerVisible = false;\n\n  /**\n   * Initializes the component.\n   *\n   * @param state The image viewer state.\n   * @param cdr Reference to this components change detector.\n   */\n  constructor(readonly state: ViewerState, private readonly cdr: ChangeDetectorRef) { }\n\n  /**\n   * Returns viewer to closed state\n   */\n  close(): void {\n    this.viewerVisible = false;\n    this.cdr.markForCheck();\n  }\n\n  /**\n   * Changes viewer to opened state\n   * @param data Data of the image to be passed into the viewer\n   */\n  open(data: ImageViewerData, result: ListResult): void {\n    this.viewerVisible = true;\n    this.data = data;\n    this.result = result;\n    this.isLoading = true;\n    this.setSourceUrls(result);\n    this.cdr.markForCheck();\n  }\n\n  onChannelsChange(channels: string[]): void {\n    this.isLoading = false;\n    this.state.createLayers(channels);\n    this.cdr.markForCheck();\n  }\n\n  /**\n   * Sets the source urls from the currently active data.\n   *\n   * @param result The active data.\n   */\n  private setSourceUrls(result: ListResult): void {\n    const { resultType, resultUrl } = result;\n    if (resultType !== 'image_viewer' || resultUrl === undefined) {\n      this.sourceUrls = [];\n    } else {\n      this.sourceUrls = [resultUrl];\n    }\n  }\n}\n\n    \n\n    \n        \n  \n    \n    \n    \n      \n    \n  \n  \n    \n    \n    \n  \n\n\n    \n\n    \n                \n                    ./image-viewer-popover.component.scss\n                \n                .image-viewer-container {\n  position: fixed;\n  top: 4rem;\n  overflow: hidden;\n  z-index: 10;\n  flex-grow: 1;\n  height: calc(100% - 1.5rem);\n  width: 100%;\n  left: 100%;\n  transition-property: left;\n  transition-duration: .5s;\n  transition-timing-function: ease-in-out;\n\n  &.expanded {\n    left: 0%;\n  }\n\n  .image-viewer-window {\n    margin-top: 1.5rem;\n    height: calc(100% - 2rem);\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .viewer {\n      width: 100%;\n      height: calc(100% - 8rem);\n      margin-left: 1.5rem;\n    }\n\n    .legend {\n      width: 100%;\n      height: 3.5rem;\n      margin-top: 1.5rem;\n      margin-left: 1.5rem;\n    }\n  }\n\n  .image-viewer-drawer {\n    width: 25.5rem;\n    margin: 0 1.5rem;\n\n    .drawer-icons {\n      display: flex;\n\n      .button {\n        width: 3rem;\n        height: 3rem;\n        color: #9e9e9e;\n        background: none;\n        border: none;\n        cursor: pointer;\n        outline: none;\n\n        :hover {\n          color: #1e88e5;\n        }\n\n        mat-icon {\n          font-size: 2.2rem;\n        }\n      }\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ImageViewerPopoverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImageViewerPopoverModule.html":{"url":"modules/ImageViewerPopoverModule.html","title":"module - ImageViewerPopoverModule","body":"\n                   \n\n\n\n\n    Modules\n    ImageViewerPopoverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImageViewerPopoverModule\n\n\n\ncluster_ImageViewerPopoverModule_declarations\n\n\n\ncluster_ImageViewerPopoverModule_imports\n\n\n\ncluster_ImageViewerPopoverModule_exports\n\n\n\n\nImageViewerPopoverComponent\n\nImageViewerPopoverComponent\n\n\n\nImageViewerPopoverModule\n\nImageViewerPopoverModule\n\nImageViewerPopoverModule -->\n\nImageViewerPopoverComponent->ImageViewerPopoverModule\n\n\n\n\n\nImageViewerPopoverComponent \n\nImageViewerPopoverComponent \n\nImageViewerPopoverComponent  -->\n\nImageViewerPopoverModule->ImageViewerPopoverComponent \n\n\n\n\n\nDrawerModule\n\nDrawerModule\n\nImageViewerPopoverModule -->\n\nDrawerModule->ImageViewerPopoverModule\n\n\n\n\n\nImageViewerContentModule\n\nImageViewerContentModule\n\nImageViewerPopoverModule -->\n\nImageViewerContentModule->ImageViewerPopoverModule\n\n\n\n\n\nImageViewerLegendModule\n\nImageViewerLegendModule\n\nImageViewerPopoverModule -->\n\nImageViewerLegendModule->ImageViewerPopoverModule\n\n\n\n\n\nViewerModule\n\nViewerModule\n\nImageViewerPopoverModule -->\n\nViewerModule->ImageViewerPopoverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/image-viewer/image-viewer-popover/image-viewer-popover.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ImageViewerPopoverComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DrawerModule\n                        \n                        \n                            ImageViewerContentModule\n                        \n                        \n                            ImageViewerLegendModule\n                        \n                        \n                            ViewerModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageViewerPopoverComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { DrawerModule } from '../../../shared/components/drawer/drawer.module';\nimport { ImageViewerContentModule } from '../image-viewer-content/image-viewer-content.module';\nimport { ImageViewerLegendModule } from '../image-viewer-legend/image-viewer-legend.module';\nimport { ViewerModule } from '../viewer/viewer.module';\nimport { ImageViewerPopoverComponent } from './image-viewer-popover.component';\n\n\n@NgModule({\n  imports: [CommonModule, ImageViewerContentModule, DrawerModule, ViewerModule, ImageViewerLegendModule],\n  declarations: [ImageViewerPopoverComponent],\n  exports: [ImageViewerPopoverComponent]\n})\nexport class ImageViewerPopoverModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ImageViewerProps.html":{"url":"interfaces/ImageViewerProps.html","title":"interface - ImageViewerProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ImageViewerProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-image-viewer/src/lib/image-viewer.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        canvas\n                                \n                                \n                                            Optional\n                                        channelNames\n                                \n                                \n                                            Optional\n                                        defaultChannelConfig\n                                \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                        id\n                                \n                                \n                                        initialViewState\n                                \n                                \n                                            Optional\n                                        sources\n                                \n                                \n                                            Optional\n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        canvas\n                                    \n                                \n                                \n                                    \n                                        canvas:     HTMLCanvasElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLCanvasElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        channelNames\n                                    \n                                \n                                \n                                    \n                                        channelNames:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultChannelConfig\n                                    \n                                \n                                \n                                    \n                                        defaultChannelConfig:         Partial\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Partial\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initialViewState\n                                    \n                                \n                                \n                                    \n                                        initialViewState:         State\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         State\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sources\n                                    \n                                \n                                \n                                    \n                                        sources:     DataSource[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DataSource[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Deck, Layer, View, Viewport } from '@deck.gl/core';\nimport { Loader, VivView } from '@hubmap/vitessce-image-viewer';\nimport { bind } from 'bind-decorator';\n\nimport { createLoader, LoaderType, OMEZarrInfo, TiffInfo, ZarrInfo } from './loader';\nimport { flatMap, getVivId } from './utils';\n\n\ntype ValueOrGenerator = T | ((...args: U) => T);\n\ntype DeckProps = ConstructorParameters[0];\ninterface ExtDeckProps extends DeckProps {\n  canvas?: string | HTMLElement;\n}\n\ntype DeckCallbackArgs = Parameters>[0];\ntype LayerFilterArgs = DeckCallbackArgs;\ntype OnViewStateChangeArgs = DeckCallbackArgs & { viewId: string };\n\nexport type State = Record;\nexport type LayerConfig = Record;\n\nexport interface ChannelConfig {\n  active: boolean;\n  color: [number, number, number];\n  slider: [number, number];\n}\n\nexport interface DataSource {\n  type: LoaderType;\n  info: ZarrInfo | OMEZarrInfo | TiffInfo;\n}\n\nexport interface ImageViewerProps {\n  id: string;\n  initialViewState: State;\n  canvas?: HTMLCanvasElement;\n  width?: number;\n  height?: number;\n  sources?: DataSource[];\n  channelNames?: string[];\n  defaultChannelConfig?: Partial;\n}\n\nfunction applyPropDefaults(props: Props): Props & Required {\n  return {\n    canvas: null,\n    width: 0,\n    height: 0,\n    sources: [],\n    channelNames: [],\n    ...props,\n    defaultChannelConfig: {\n      active: true,\n      color: [255, 255, 255],\n      slider: [1500, 20000],\n      ...(props.defaultChannelConfig ?? {})\n    }\n  };\n}\n\n\nexport abstract class ImageViewer {\n  readonly props: Props & Required;\n\n  get width(): number { return this._width; }\n  get height(): number { return this._height; }\n  private _width: number;\n  private _height: number;\n\n  get sources(): DataSource[] { return this._sources; }\n  get loaders(): Loader[] { return this._loaders; }\n  private _sources: DataSource[] = [];\n  private _loaders: Loader[] = [];\n\n  get channelNames(): string[] { return Object.keys(this.channelConfigs); }\n  get channelConfigs(): Record { return this._channelConfigs; }\n  private _channelConfigs: Record = {};\n\n  protected vivViews: VivView[] = [];\n  protected views: View[] = [];\n  protected layers: Layer[] = [];\n  protected layerConfigs: LayerConfig[] = [];\n  protected states: Record = {};\n\n  private deck: Deck;\n\n  constructor(props: Props) {\n    const reqProps = this.props = applyPropDefaults(props);\n    this.deck = this.initializeDeck(reqProps);\n    this._width = reqProps.width;\n    this._height = reqProps.height;\n\n    if (reqProps.sources.length > 0) {\n      this.setSources(reqProps.sources);\n    }\n  }\n\n  clear(): void {\n    this._sources = [];\n    this._loaders = [];\n    this._channelConfigs = {};\n    this.vivViews = [];\n    this.layers = [];\n    this.layerConfigs = [];\n    this.states = {};\n    this.update();\n  }\n\n  finalize(): void {\n    this.deck.finalize();\n  }\n\n  async setSize(width: number, height: number): Promise {\n    this._width = width;\n    this._height = height;\n    this.vivViews = await this.createVivViews();\n\n    this.updateState((view, current) => ({\n      viewState: {\n        ...current,\n        width,\n        height,\n        id: view.id\n      }\n    }));\n    this.update();\n    this.deck.redraw(true);\n\n    return this;\n  }\n\n  async setSources(sources: DataSource[]): Promise {\n    const loaderPromises = sources.map(source => createLoader(source.type, source.info));\n    const loaders = await Promise.all(loaderPromises);\n\n    this._sources = sources;\n    this._loaders = loaders;\n    this.resetChannelConfigs();\n    this.vivViews = await this.createVivViews();\n    this.layerConfigs = await this.createLayerConfigs();\n    this.updateState(view => ({ viewState: view.initialViewState }));\n    this.update();\n\n    return this;\n  }\n\n  async updateChannelConfigs(configs: Record>): Promise {\n    const newConfigs = Object.entries(configs).reduce((result, [key, config]) => {\n      return !(key in result) ? result : {\n        ...result,\n        [key]: {\n          ...result[key],\n          ...config\n        }\n      };\n    }, this.channelConfigs);\n\n    if (newConfigs === this.channelConfigs) { return this; }\n\n    this._channelConfigs = newConfigs;\n    this.layerConfigs = await this.createLayerConfigs();\n    this.update();\n\n    return this;\n  }\n\n  protected abstract async createVivViews(): Promise;\n  protected abstract async createLayerConfigs(): Promise;\n\n  protected update(): void {\n    this.updateViews();\n    this.updateLayers();\n    this.updateDeckProps({\n      views: this.views,\n      layers: this.layers,\n      viewState: this.states\n    });\n  }\n\n  protected updateViews(): void {\n    this.views = this.vivViews.map(viv => viv.getDeckGlView());\n  }\n\n  protected updateLayers(): void {\n    const { vivViews, states, layerConfigs } = this;\n    const length = layerConfigs.length;\n\n    this.layers = flatMap(vivViews, (view, index) => view.getLayers({\n      viewStates: states,\n      props: layerConfigs[index % length]\n    }));\n  }\n\n  protected updateState(\n    args: ValueOrGenerator, [VivView, State]>\n  ): void {\n    const argsGenerator = typeof args === 'function' ? args : () => args;\n    const currentStates = this.states;\n\n    this.states = this.vivViews.reduce((states, view) => {\n      const current = currentStates[view.id] ?? {};\n      states[view.id] = view.filterViewState(argsGenerator(view, current));\n      return states;\n    }, {} as Record);\n  }\n\n  protected updateDeckProps(props: Partial): void {\n    this.deck.setProps(props);\n  }\n\n  private initializeDeck(props: Props & Required): Deck {\n    const { id, canvas, width, height } = props;\n    return new Deck({\n      id,\n      canvas,\n      width,\n      height,\n      views: [],\n      layers: [],\n      effects: [],\n      viewState: {},\n      layerFilter: this.layerFilter,\n      onViewStateChange: this.onViewStateChange,\n      glOptions: {\n        webgl2: true\n      }\n    } as ExtDeckProps);\n  }\n\n  private resetChannelConfigs(): void {\n    const { loaders, props: { channelNames, defaultChannelConfig } } = this;\n    const keys = channelNames.length > 0 ?\n      channelNames :\n      flatMap(loaders, loader => loader.channelNames ?? []);\n\n    this._channelConfigs = keys.reduce((configs, key) => ({\n      ...configs,\n      [key]: defaultChannelConfig as ChannelConfig\n    }), {} as Record);\n  }\n\n  @bind\n  private layerFilter({ layer, viewport }: LayerFilterArgs): boolean {\n    const { id: viewportId } = viewport as Viewport & { id: string };\n    return layer.id.includes(getVivId(viewportId));\n  }\n\n  @bind\n  private onViewStateChange({ viewId, viewState, oldViewState }: OnViewStateChangeArgs): void {\n    this.updateState((_view, current) => ({\n      viewState: { ...viewState, id: viewId },\n      oldViewState,\n      currentViewState: current\n    }));\n    this.update();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/InfoButtonComponent.html":{"url":"components/InfoButtonComponent.html","title":"component - InfoButtonComponent","body":"\n                   \n\n\n\n\n\n  Components\n  InfoButtonComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/info/info-button/info-button.component.ts\n\n\n    \n        Description\n    \n    \n        Info button component: Information icon displays project details when clicked.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-info-button\n            \n\n            \n                styleUrls\n                ./info-button.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./info-button.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                launchInfoDialog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/info/info-button/info-button.component.ts:15\n                            \n                        \n\n                \n                    \n                            Creates an instance of info button component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Reference to the dialog creation service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            launchInfoDialog\n                        \n                        \n                    \n                \n            \n            \n                \nlaunchInfoDialog()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/info/info-button/info-button.component.ts:26\n                \n            \n\n\n            \n                \n                    Opens the info dialogue with the project details\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { InfoDialogComponent } from '../info-dialog/info-dialog.component';\n\n\n/**\n * Info button component: Information icon displays project details when clicked.\n */\n@Component({\n  selector: 'ccf-info-button',\n  templateUrl: './info-button.component.html',\n  styleUrls: ['./info-button.component.scss']\n})\nexport class InfoButtonComponent {\n  /**\n   * Creates an instance of info button component.\n   *\n   * @param dialog Reference to the dialog creation service.\n   */\n  constructor(private readonly dialog: MatDialog) { }\n\n  /**\n   * Opens the info dialogue with the project details\n   */\n  launchInfoDialog(): void {\n    this.dialog.open(InfoDialogComponent, {\n      width: '60em',\n      data: {}\n    });\n  }\n}\n\n    \n\n    \n        \n  info_outline\n\n\n    \n\n    \n                \n                    ./info-button.component.scss\n                \n                .info {\n  cursor: pointer;\n  transition: color 1s;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  info_outline'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'InfoButtonComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InfoButtonModule.html":{"url":"modules/InfoButtonModule.html","title":"module - InfoButtonModule","body":"\n                   \n\n\n\n\n    Modules\n    InfoButtonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_InfoButtonModule\n\n\n\ncluster_InfoButtonModule_declarations\n\n\n\ncluster_InfoButtonModule_imports\n\n\n\ncluster_InfoButtonModule_exports\n\n\n\n\nInfoButtonComponent\n\nInfoButtonComponent\n\n\n\nInfoButtonModule\n\nInfoButtonModule\n\nInfoButtonModule -->\n\nInfoButtonComponent->InfoButtonModule\n\n\n\n\n\nInfoButtonComponent \n\nInfoButtonComponent \n\nInfoButtonComponent  -->\n\nInfoButtonModule->InfoButtonComponent \n\n\n\n\n\nInfoDialogModule\n\nInfoDialogModule\n\nInfoButtonModule -->\n\nInfoDialogModule->InfoButtonModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/info/info-button/info-button.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            InfoButtonComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            InfoDialogModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InfoButtonComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { InfoButtonComponent } from './info-button.component';\nimport { InfoDialogModule } from '../info-dialog/info-dialog.module';\n\n@NgModule({\n  declarations: [InfoButtonComponent],\n  imports: [CommonModule, InfoDialogModule, MatIconModule],\n  exports: [InfoButtonComponent]\n})\nexport class InfoButtonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/InfoDialogComponent.html":{"url":"components/InfoDialogComponent.html","title":"component - InfoDialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  InfoDialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/info/info-dialog/info-dialog.component.ts\n\n\n    \n        Description\n    \n    \n        This component handles displaying and hiding a full screen modal / overlay that displays information about the project.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-info-dialog\n            \n\n            \n                styleUrls\n                ./info-dialog.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./info-dialog.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                dialogRef\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef, data: unknown)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/info/info-dialog/info-dialog.component.ts:13\n                            \n                        \n\n                \n                    \n                            Creates an instance of info dialog component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A reference to the dialog that this component creates, used to call the dialog's methods\n\n                                                        \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    unknown\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Data being injected into the dialog\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            close\n                        \n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/info/info-dialog/info-dialog.component.ts:27\n                \n            \n\n\n            \n                \n                    Closes info dialog component\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     unknown\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Inject(MAT_DIALOG_DATA)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/info/info-dialog/info-dialog.component.ts:21\n                            \n                        \n\n                \n                    \n                        Data being injected into the dialog\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dialogRef\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MatDialogRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/info/info-dialog/info-dialog.component.ts:20\n                            \n                        \n\n                \n                    \n                        A reference to the dialog that this component creates, used to call the dialog's methods\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n\n/**\n * This component handles displaying and hiding a full screen modal / overlay that displays information about the project.\n */\n@Component({\n  selector: 'ccf-info-dialog',\n  templateUrl: './info-dialog.component.html',\n  styleUrls: ['./info-dialog.component.scss']\n})\nexport class InfoDialogComponent {\n  /**\n   * Creates an instance of info dialog component.\n   * @param dialogRef A reference to the dialog that this component creates, used to call the dialog's methods\n   * @param data Data being injected into the dialog\n   */\n  constructor(\n    public dialogRef: MatDialogRef,\n    @Inject(MAT_DIALOG_DATA) public data: unknown\n  ) { }\n\n  /**\n   * Closes info dialog component\n   */\n  close(): void {\n    this.dialogRef.close();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      clear\n    \n    \n      HuBMAP\n      The Human Biomolecular Atlas Project\n\n      \n        \n          The Human Biomolecular Atlas Project (HuBMAP) will develop the next generation of molecular analysis\n          technologies, computational tools, and generate foundational tissue maps in order to accelerate the\n          construction of an atlas of the human body at single-cell resolution for understanding the relationship\n          between tissue organization and function.\n          \n          https://hubmapconsortium.org\n        \n\n        Common Coordinate Framework (CCF)\n        \n          The HuBMAP common coordinate framework (CCF) is under active development. It aims to semantically annotate and\n          spatially index HuBMAP data for efficient spatial and semantic search, browsing, and filtering. The CCF v1.0.0\n          became available in June 2020. The CCF Ontology is available as an OWL file,\n          on GitHub, and\n          on BioPortal. For\n          documentation, see CCF Portal and preprint of CCF\n          Ontology publication on arxiv.\n        \n\n        CCF Exploration User Interface (EUI)\n        \n          The CCF Exploration User Interface (EUI) represents data across multiple scales, supporting navigation by\n          multiple coordinate systems, including spatial, physiologic, and organ-based browsing. The first\n          proof-of-concept user interface for the CCF v1.0.0 became available in June 2020. The EUI continues to evolve\n          as more data becomes available. The CCF EUI code is available\n          on GitHub.\n          A demo video is on YouTube.\n        \n\n        Acknowledgements\n        \n          The CCF work is under active development by the Indiana University Mapping Component as part of the HuBMAP\n          HIVE effort with expert input by the HuBMAP team. Data was provided by the HuBMAP Tissue Mapping Centers. This\n          research is funded by the NIH Common Fund through the Office of Strategic Coordination/Office of the NIH\n          Director under award OT2OD026671, by the NIDDK Kidney Precision Medicine Project grant U2CDK114886, and the\n          NIH National Institute of Allergy and Infectious Diseases (NIAID), Department of Health and Human Services\n          under BCBB Support Services Contract HHSN316201300006W/HHSN27200002.\n        \n      \n\n      \n        \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./info-dialog.component.scss\n                \n                ::ng-deep .mat-dialog-container {\n  padding: 0;\n}\n\n.ccf-about.wrapper {\n  .container {\n    .content {\n      padding: 3rem;\n      background-color: white;\n    }\n\n    .description {\n      font-size: 0.875rem;\n      line-height: 1.5rem;\n      margin-bottom: 1rem;\n    }\n\n    .heading {\n      margin-bottom: 0;\n      font-size: 0.875rem;\n      font-weight: bold;\n    }\n\n    .close {\n      .close-icon {\n        float: right;\n        margin-top: 1rem;\n        margin-right: 1rem;\n        cursor: pointer;\n      }\n    }\n\n    .title {\n      font-size: 1.5rem;\n      margin-bottom: 0;\n    }\n\n    .subtitle {\n      font-size: 1rem;\n      margin-top: 0;\n      margin-bottom: 0.5rem;\n    }\n\n    .footer {\n      padding-top: 1.5rem;\n      .nih-logo {\n        height: 2.25rem;\n        display: block;\n        margin: auto;\n      }\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            clear              HuBMAP      The Human Biomolecular Atlas Project                        The Human Biomolecular Atlas Project (HuBMAP) will develop the next generation of molecular analysis          technologies, computational tools, and generate foundational tissue maps in order to accelerate the          construction of an atlas of the human body at single-cell resolution for understanding the relationship          between tissue organization and function.                    https://hubmapconsortium.org                Common Coordinate Framework (CCF)                  The HuBMAP common coordinate framework (CCF) is under active development. It aims to semantically annotate and          spatially index HuBMAP data for efficient spatial and semantic search, browsing, and filtering. The CCF v1.0.0          became available in June 2020. The CCF Ontology is available as an OWL file,          on GitHub, and          on BioPortal. For          documentation, see CCF Portal and preprint of CCF          Ontology publication on arxiv.                CCF Exploration User Interface (EUI)                  The CCF Exploration User Interface (EUI) represents data across multiple scales, supporting navigation by          multiple coordinate systems, including spatial, physiologic, and organ-based browsing. The first          proof-of-concept user interface for the CCF v1.0.0 became available in June 2020. The EUI continues to evolve          as more data becomes available. The CCF EUI code is available          on GitHub.          A demo video is on YouTube.                Acknowledgements                  The CCF work is under active development by the Indiana University Mapping Component as part of the HuBMAP          HIVE effort with expert input by the HuBMAP team. Data was provided by the HuBMAP Tissue Mapping Centers. This          research is funded by the NIH Common Fund through the Office of Strategic Coordination/Office of the NIH          Director under award OT2OD026671, by the NIDDK Kidney Precision Medicine Project grant U2CDK114886, and the          NIH National Institute of Allergy and Infectious Diseases (NIAID), Department of Health and Human Services          under BCBB Support Services Contract HHSN316201300006W/HHSN27200002.                                        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'InfoDialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InfoDialogModule.html":{"url":"modules/InfoDialogModule.html","title":"module - InfoDialogModule","body":"\n                   \n\n\n\n\n    Modules\n    InfoDialogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_InfoDialogModule\n\n\n\ncluster_InfoDialogModule_declarations\n\n\n\ncluster_InfoDialogModule_exports\n\n\n\n\nInfoDialogComponent\n\nInfoDialogComponent\n\n\n\nInfoDialogModule\n\nInfoDialogModule\n\nInfoDialogModule -->\n\nInfoDialogComponent->InfoDialogModule\n\n\n\n\n\nInfoDialogComponent \n\nInfoDialogComponent \n\nInfoDialogComponent  -->\n\nInfoDialogModule->InfoDialogComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/info/info-dialog/info-dialog.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            InfoDialogComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InfoDialogComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InfoDialogComponent } from './info-dialog.component';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  declarations: [InfoDialogComponent],\n  imports: [CommonModule, MatDialogModule, MatIconModule],\n  exports: [InfoDialogComponent]\n})\nexport class InfoDialogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InitializationState.html":{"url":"classes/InitializationState.html","title":"class - InitializationState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InitializationState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/components/drawer/drawer/drawer.component.ts\n        \n\n            \n                Description\n            \n            \n                Boolean state that can also be awaited.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                deferred\n                            \n                            \n                                    Private\n                                initialized\n                            \n                            \n                                    Private\n                                resolve\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                set\n                            \n                            \n                                valueOf\n                            \n                            \n                                    Async\n                                wait\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            deferred\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Promise(resolve => this.resolve = resolve)\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/drawer/drawer.component.ts:35\n                            \n                        \n\n                \n                    \n                        Promise used to await on. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            initialized\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/drawer/drawer.component.ts:33\n                            \n                        \n\n                \n                    \n                        Whether this state is true or false. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            resolve\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/drawer/drawer.component.ts:37\n                            \n                        \n\n                \n                    \n                        Resolve function for the promise. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/drawer/drawer.component.ts:42\n                \n            \n\n\n            \n                \n                    Sets the state to true and\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            valueOf\n                        \n                        \n                    \n                \n            \n            \n                \nvalueOf()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/drawer/drawer.component.ts:59\n                \n            \n\n\n            \n                \n                    Gets the boolean state of this object.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if set has been called.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            wait\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    wait()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/drawer/drawer.component.ts:52\n                \n            \n\n\n            \n                \n                    Gets a promise that resolves when this state is set to true.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener,\n  Input, OnDestroy, Output,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { Message, MessageChannel, MessageService } from '../messages';\n\n\n/** Opened/closed state. */\ntype OpenedState = 'open' | 'open-instant' | 'closed';\n/** Expanded/collapsed state. */\ntype ExpandedState = 'open' | 'open-instant' | 'closed';\n/** Expanded state relative to an opposite drawer. */\ntype ExpandedState2 = 'collapsed' | 'half' | 'extended' | 'full';\n\n/** Default animation parameters. */\nconst EXPAND_COLLAPSE_PARAMS_DEFAULT = {\n  params: {\n    width: 0,\n    margin: 0,\n    margin2: 0\n  }\n};\n\n/**\n * Boolean state that can also be awaited.\n */\nclass InitializationState {\n  /** Whether this state is true or false. */\n  private initialized = false;\n  /** Promise used to await on. */\n  private deferred = new Promise(resolve => this.resolve = resolve);\n  /** Resolve function for the promise. */\n  private resolve: () => void;\n\n  /**\n   * Sets the state to true and\n   */\n  set(): void {\n    this.initialized = true;\n    this.resolve();\n  }\n\n  /**\n   * Gets a promise that resolves when this state is set to true.\n   *\n   * @returns A promise.\n   */\n  async wait(): Promise { return this.deferred; }\n\n  /**\n   * Gets the boolean state of this object.\n   *\n   * @returns true if set has been called.\n   */\n  valueOf(): boolean { return this.initialized; }\n}\n\n\n/**\n * Side drawer component.\n * Contains all the logic for opening/closing/expanding.\n */\n@Component({\n  selector: 'ccf-drawer',\n  exportAs: 'ccfDrawer',\n  templateUrl: './drawer.component.html',\n  styleUrls: ['./drawer.component.scss'],\n  animations: [\n    trigger('openClose', [\n      state(`open, open-instant`, style({\n        transform: 'none'\n      })),\n      state('closed', style({ })),\n\n      transition('closed => open-instant', animate(0)),\n      transition('closed  open, open-instant => closed', animate('1.5s ease-in-out'))\n    ]),\n    trigger('expandCollapse', [\n      state('collapsed', style({})),\n      state('half', style({\n        width: 'calc(50% - {{ margin }}px)'\n      }), EXPAND_COLLAPSE_PARAMS_DEFAULT),\n      state('extended', style({\n        width: 'calc(100% - {{ width }}px - {{ margin }}px)'\n      }), EXPAND_COLLAPSE_PARAMS_DEFAULT),\n      state('full', style({\n        width: 'calc(100% - {{ margin }}px - {{ margin2 }}px)'\n      }), EXPAND_COLLAPSE_PARAMS_DEFAULT),\n\n      transition('*  *', animate('1.5s ease-in-out'))\n    ])\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DrawerComponent implements AfterViewInit, OnDestroy {\n  /** HTML class */\n  @HostBinding('class') readonly className = 'ccf-drawer';\n  /** Whether this is located at the end position. */\n  @HostBinding('class.ccf-drawer-end') // tslint:disable-line: no-unsafe-any\n  get classEnd(): boolean { return this.position === 'end'; }\n\n  /** Position of the drawer - start (left) or end (right). */\n  @Input()// tslint:disable-line: no-unsafe-any\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') { this._position = value || 'start'; }\n  /** Property for position getter/setter. */\n  private _position: 'start' | 'end' = 'start';\n\n  /** Whether the drawer is opened. */\n  @Input() // tslint:disable-line: no-unsafe-any\n  @HostBinding('class.ccf-drawer-opened') // tslint:disable-line: no-unsafe-any\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  /** Property for opened getter/setter. */\n  private _opened = false;\n\n  /** Whether the drawer is expanded. */\n  @Input() // tslint:disable-line: no-unsafe-any\n  @HostBinding('class.ccf-drawer-expanded') // tslint:disable-line: no-unsafe-any\n  get expanded(): boolean { return this._expanded; }\n  set expanded(value: boolean) { this.toggleExpanded(coerceBooleanProperty(value)); }\n  /** Property for expanded getter/setter */\n  private _expanded = false;\n\n  /** Output emitting when the drawer has opened. */\n  @Output() readonly openedChange = new EventEmitter(true);\n  /** Output emitting when the drawer has expanded. */\n  @Output() readonly expandedChange = new EventEmitter(true);\n  /** Output emitting whenever the drawer state changes. */\n  @Output() readonly stateChange = new EventEmitter(true);\n\n  /** Current open/close animation state. */\n  @HostBinding('@openClose')\n  openedState: OpenedState = 'closed';\n\n  /** Expanded/collapsed state parameters. */\n  @HostBinding('@expandCollapse')  // tslint:disable-line: no-unsafe-any\n  get expandedStateObj(): unknown {\n    return { value: this.expandedState2, params: {\n      width: this.width, margin: this.measuredMargin,\n      margin2: this.margin2\n    }};\n  }\n  /** Current expanded/collapsed animation state. */\n  expandedState: ExpandedState = 'closed';\n  /** Current expanded state relative to the opposite drawer. */\n  private expandedState2: ExpandedState2 = 'collapsed';\n\n  /** Gets the calculated width of the drawer. */\n  private get measuredWidth(): number {\n    if (this._measuredWidth > 0) { return this._measuredWidth; }\n\n    const element = this.element.nativeElement;\n    if (!element) { return 0; }\n\n    const bbox = element.getBoundingClientRect();\n    const width = bbox.right - bbox.left;\n    if (width === 0) { return 0; }\n\n    return this._measuredWidth = width;\n  }\n  /** Cached measured width. */\n  private _measuredWidth = 0;\n  /** Width of opposite drawer. */\n  private width = 0;\n\n  /** Gets the calculated margin of the drawer. */\n  private get measuredMargin(): number {\n    if (this._measuredMargin > 0) { return this._measuredMargin; }\n\n    const element = this.element.nativeElement;\n    if (!element) { return 0; }\n\n    const styles = globalThis.getComputedStyle(element);\n    const property = this.position === 'start' ? 'margin-right' : 'margin-left';\n    const value = styles.getPropertyValue(property);\n    const margin = Number(value.slice(0, -2));\n\n    return this._measuredMargin = margin;\n  }\n  /** Cached measured margin. */\n  private _measuredMargin = 0;\n  /** Margin of the opposite drawer. */\n  private margin2 = 0;\n\n  /** Initialization state. */\n  private initialized = new InitializationState();\n  /** Connected message channel. */\n  private channel: MessageChannel;\n  /** Subscriptions managed by this component. */\n  private subscriptions = new Subscription();\n\n  /**\n   * Creates an instance of drawer component.\n   *\n   * @param messageService Service for sending/receiving event messages.\n   * @param cdr The change detector reference.\n   * @param element Reference to components HTML element.\n   */\n  constructor(messageService: MessageService,\n              cdr: ChangeDetectorRef,\n              private element: ElementRef) {\n    this.channel = messageService.connect(this);\n    this.subscriptions.add(this.channel.getMessages().subscribe(msg => {\n      if (this.handleMessage(msg)) { cdr.markForCheck(); }\n    }));\n  }\n\n  /**\n   * Initializes this component.\n   */\n  ngAfterViewInit(): void {\n    this.initialized.set();\n    setTimeout(() => this.channel.sendMessage({ type: 'drawer-initialized' }));\n  }\n\n  /**\n   * Cleans up all subscriptions.\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n\n  /**\n   * Opens the drawer.\n   */\n  open(): void { this.toggle(true); }\n\n  /**\n   * Closes the drawer.\n   */\n  close(): void { this.toggle(false); }\n\n  /**\n   * Toggles the drawer between opened and closed.\n   *\n   * @param [opened] Whether to open or close the drawer.\n   */\n  toggle(opened = !this.opened): void {\n    if (this.opened === opened) { return; }\n\n    if (!opened) {\n      this.openedState = 'closed';\n      this.expandedState = 'closed';\n      this.expandedState2 = 'collapsed';\n      this._expanded = false;\n    } else if (this.initialized.valueOf()) {\n      this.openedState = 'open';\n    } else {\n      this.openedState = 'open-instant';\n    }\n\n    this._opened = opened;\n    this.sendToggle();\n  }\n\n  /**\n   * Expands the drawer.\n   */\n  openExpanded(): void { this.toggleExpanded(true); }\n\n  /**\n   * Collapses the drawer.\n   */\n  closeExpanded(): void { this.toggleExpanded(false); }\n\n  /**\n   * Toggles the drawer between expanded and collapsed.\n   *\n   * @param [expanded] Whether to expand or collapse the drawer.\n   */\n  toggleExpanded(expanded = !this.expanded): void {\n    if (this.expanded === expanded) { return; }\n\n    if (!expanded) {\n      this.expandedState = 'closed';\n      this.expandedState2 = 'collapsed';\n    } else if (this.initialized.valueOf()) {\n      this.expandedState = 'open';\n    } else {\n      this.expandedState = 'open-instant';\n    }\n\n    this._expanded = expanded;\n    this.sendToggle();\n  }\n\n  /**\n   * Listener to open/close animation completion.\n   */\n  @HostListener('@openClose.done') // tslint:disable-line: no-unsafe-any\n  closeOpenDone(): void {\n    this.openedChange.emit(this.opened);\n  }\n\n  /**\n   * Listener to expand/collapse animation completion.\n   */\n  @HostListener('@expandCollapse.done') // tslint:disable-line: no-unsafe-any\n  expandCollapseDone(): void {\n    this.expandedChange.emit(this.expanded);\n  }\n\n  /**\n   * Sends a toggle event to the channel.\n   * Waits until initialization is completed before sending.\n   */\n  private async sendToggle(): Promise {\n    await this.initialized.wait();\n    this.channel.sendMessage({\n      type: 'drawer-toggled',\n      opened: this.opened,\n      expanded: this.expanded,\n      width: this.measuredWidth,\n      margin: this.measuredMargin\n    });\n    this.stateChange.emit();\n  }\n\n  /**\n   * Processes an event.\n   *\n   * @param msg The event.\n   * @returns true if change detection should run.\n   */\n  private handleMessage(msg: Message): boolean {\n    switch (msg.payload.type) {\n      case 'drawer-toggled':\n        const other = msg.source as DrawerComponent;\n        this.syncExpanded(other);\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Syncs the drawer widths and margin against the opposite drawer.\n   *\n   * @param other The opposite drawer.\n   */\n  private syncExpanded(other: DrawerComponent): void {\n    if (this.expanded || other.expanded) {\n      if (this.expanded && other.expanded) {\n        this.expandedState2 = other.expandedState2 = 'half';\n      } else if (this.expanded) {\n        if (other.opened) {\n          this.expandedState2 = 'extended';\n          this.width = other.measuredWidth + other.measuredMargin;\n        } else {\n          this.expandedState2 = 'full';\n          this.margin2 = other.measuredMargin;\n        }\n      } else {\n        if (this.opened) {\n          other.expandedState2 = 'extended';\n          other.width = this.measuredWidth + this.measuredMargin;\n        } else {\n          other.expandedState2 = 'full';\n          other.margin2 = this.measuredMargin;\n        }\n      }\n    }\n  }\n\n  /** Workaround for getter/setter pair not accepting different types. */\n  static ngAcceptInputType_position: '' | 'start' | 'end'; // tslint:disable-line: variable-name member-ordering\n  /** Workaround for getter/setter pair not accepting different types. */\n  static ngAcceptInputType_opened: BooleanInput; // tslint:disable-line: variable-name member-ordering\n  /** Workaround for getter/setter pair not accepting different types. */\n  static ngAcceptInputType_expanded: BooleanInput; // tslint:disable-line: variable-name member-ordering\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JsonOntologyNode.html":{"url":"interfaces/JsonOntologyNode.html","title":"interface - JsonOntologyNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JsonOntologyNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/json-ontology.ts\n        \n\n            \n                Description\n            \n            \n                Structure of a single json ontology node.\n\n            \n\n            \n                Extends\n            \n            \n                        IdObject\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        http://www.geneontology.org/formats/oboInOwl#hasExactSynonym\n                                \n                                \n                                        http://www.w3.org/2000/01/rdf-schema#label\n                                \n                                \n                                        parent\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        http://www.geneontology.org/formats/oboInOwl#hasExactSynonym\n                                    \n                                \n                                \n                                    \n                                        http://www.geneontology.org/formats/oboInOwl#hasExactSynonym:         ValueObject[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ValueObject[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Json synonyms property \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        http://www.w3.org/2000/01/rdf-schema#label\n                                    \n                                \n                                \n                                    \n                                        http://www.w3.org/2000/01/rdf-schema#label:         [ValueObject]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         [ValueObject]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Json label property \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                    \n                                \n                                \n                                    \n                                        parent:         [IdObject]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         [IdObject]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Json parent property \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { flow, map, partial, property } from 'lodash';\n\nimport { OntologyNode } from './ontology-node';\n\n\n/** Interface containing the single json property '@id' */\nexport interface IdObject {\n  /** Json '@id' property */\n  '@id': string;\n}\n\n/** Interface containing the single json property '@value' */\nexport interface ValueObject {\n  /** Json '@value' property */\n  '@value': string;\n}\n\n/**\n * Structure of a single json ontology node.\n */\nexport interface JsonOntologyNode extends IdObject {\n  /** Json parent property */\n  'parent': [IdObject];\n\n  /** Json label property */\n  'http://www.w3.org/2000/01/rdf-schema#label': [ValueObject];\n\n  /** Json synonyms property */\n  'http://www.geneontology.org/formats/oboInOwl#hasExactSynonym'?: ValueObject[];\n}\n\n/** Property name of json id field. */\nconst idProperty = '@id';\n/** Function for extracting json id fields. */\nconst idExtractor = property(idProperty);\n\n/** Property name of json value field. */\nconst valueProperty = '@value';\n/** Function for extracting json value fields. */\nconst valueExtractor = property(valueProperty);\n\n/** Property name of json parent field. */\nconst parentProperty = 'parent';\n/** Function for extracting json parent fields. */\nconst parentExtractor = flow(\n  property(parentProperty),\n  property(0),\n  idExtractor\n);\n\n/** Property name of json label field. */\nconst labelProperty = 'http://www.w3.org/2000/01/rdf-schema#label';\n/** Function for extracting json label fields. */\nconst labelExtractor = flow(\n  property(labelProperty),\n  property(0),\n  valueExtractor\n);\n\n/** Property name of json synonyms field. */\nconst synonymsProperty = 'http://www.geneontology.org/formats/oboInOwl#hasExactSynonym';\n/** Function for extracting json synonyms fields. */\nconst synonymsExtractor = flow(\n  property(synonymsProperty),\n  partial string, string[]>(map, partial.placeholder, valueExtractor)\n);\n\n/**\n * Converts a json encoded ontology node to an ontology node.\n *\n * @param json The json encoded node.\n * @returns The resulting ontology node.\n */\nexport function jsonToOntologyNode(json: JsonOntologyNode): OntologyNode {\n  return {\n    id: idExtractor(json),\n    parent: parentExtractor(json) ?? '',\n    children: [],\n    label: labelExtractor(json),\n    synonymLabels: synonymsExtractor(json)\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ListResult.html":{"url":"interfaces/ListResult.html","title":"interface - ListResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ListResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Result for list of tissues. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        @id\n                                \n                                \n                                        @type\n                                \n                                \n                                            Optional\n                                        downloadTooltip\n                                \n                                \n                                            Optional\n                                        downloadUrl\n                                \n                                \n                                            Optional\n                                        highlighted\n                                \n                                \n                                        id\n                                \n                                \n                                        label\n                                \n                                \n                                            Optional\n                                        resultType\n                                \n                                \n                                            Optional\n                                        resultUrl\n                                \n                                \n                                            Optional\n                                        shortInfo\n                                \n                                \n                                            Optional\n                                        thumbnailUrl\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        @id\n                                    \n                                \n                                \n                                    \n                                        @id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @type\n                                    \n                                \n                                \n                                    \n                                        @type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Type string. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        downloadTooltip\n                                    \n                                \n                                \n                                    \n                                        downloadTooltip:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Description of data download. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        downloadUrl\n                                    \n                                \n                                \n                                    \n                                        downloadUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Url for data download. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        highlighted\n                                    \n                                \n                                \n                                    \n                                        highlighted:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the result should be highlighted \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tissue label. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resultType\n                                    \n                                \n                                \n                                    \n                                        resultType:     \"external_link\" | \"local_link\" | \"image_viewer\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"external_link\" | \"local_link\" | \"image_viewer\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Type of result url. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resultUrl\n                                    \n                                \n                                \n                                    \n                                        resultUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Result url. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shortInfo\n                                    \n                                \n                                \n                                    \n                                        shortInfo:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Short description. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thumbnailUrl\n                                    \n                                \n                                \n                                    \n                                        thumbnailUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Small icon url. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AggregateResult {\n  /** Queried field. */\n  label: string;\n  /** Aggregate value. */\n  count: string | number;\n}\n\n/** Result for list of tissues. */\nexport interface ListResult {\n  /** Identifier. */\n  '@id': string;\n  /** Type string. */\n  '@type': 'ListResult';\n  /** Identifier. */\n  id: string;\n  /** Tissue label. */\n  label: string;\n  /** Short description. */\n  shortInfo?: string[];\n  /** Small icon url. */\n  thumbnailUrl?: string;\n  /** Url for data download. */\n  downloadUrl?: string;\n  /** Description of data download. */\n  downloadTooltip?: string;\n  /** Result url. */\n  resultUrl?: string;\n  /** Type of result url. */\n  resultType?: 'external_link' | 'local_link' | 'image_viewer';\n  /** If the result should be highlighted */\n  highlighted?: boolean;\n}\n\n/** Data for image viewer display. */\nexport interface ImageViewerData {\n  /** Identifier. */\n  '@id': string;\n  /** Type string. */\n  '@type': 'ImageViewerData';\n  /** Identifier. */\n  id: string;\n  /** Image label. */\n  label: string;\n  /** Containing organ name. */\n  organName: string;\n  /** Other metadata. */\n  metadata: { label: string, value: string }[];\n}\n\n/** Item that can be searched for. */\nexport interface SearchableItem {\n  /** Identifier. */\n  id: string;\n  /** Gender. */\n  sex?: 'Male' | 'Female';\n  /** Age. */\n  age?: number;\n  /** BMI. */\n  bmi?: number;\n  /** Ontology terms. */\n  ontologyTerms?: Set;\n}\n\n/** Options applied during queries. */\nexport interface Filter {\n  /** Gender. */\n  sex: 'Both' | 'Male' | 'Female';\n  /** Age range. */\n  ageRange: [number, number];\n  /** BMI range. */\n  bmiRange: [number, number];\n  /** TMC. */\n  tmc: string[];\n  /** Technologies. */\n  technologies: string[];\n  /** Ontology terms. */\n  ontologyTerms: string[];\n  /** Entities to be highlighted */\n  highlightedEntities?: string[];\n  /** Whether it has a spatial entity. */\n  hasSpatialEntity?: boolean;\n  /** Include optional debugging information */\n  debug?: boolean;\n}\n\n/** Backend query interface. */\nexport interface DataSource {\n  /** Query list items. */\n  getListResults(filter?: Filter): Promise;\n  /** Query aggregate items. */\n  getAggregateResults(filter?: Filter): Promise;\n  /** Query a specific image. */\n  getImageViewerData(iri: string): Promise;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Message.html":{"url":"interfaces/Message.html","title":"interface - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/message/message.service.ts\n        \n\n            \n                Description\n            \n            \n                A message sent on a channel.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        payload\n                                \n                                \n                                        source\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for a message. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                    \n                                \n                                \n                                    \n                                        payload:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data associated with this message. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                    \n                                \n                                \n                                    \n                                        source:     unknown\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     unknown\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sender of the message. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, OnDestroy, Optional, SkipSelf } from '@angular/core';\nimport { from, Observable, Subject } from 'rxjs';\nimport { filter, mergeAll, takeWhile } from 'rxjs/operators';\n\n\n/**\n * Message service configuration options.\n */\nexport interface MessageServiceConfig {\n  /** Whether to listen to parent messages. */\n  isolated: boolean;\n}\n\n/**\n * A message sent on a channel.\n * @template T The payload type.\n */\nexport interface Message {\n  /** Unique identifier for a message. */\n  id: number;\n  /** Sender of the message. */\n  source: unknown;\n  /** Data associated with this message. */\n  payload: T;\n}\n\n/** Default message service configuration. */\nexport const MESSAGE_SERVICE_DEFAULT_CONFIG: MessageServiceConfig = {\n  isolated: true\n};\n\n/** Token for specifying the message service configuration. */\nexport const MESSAGE_SERVICE_CONFIG = new InjectionToken(\n  'Message service configuration',\n  {\n    providedIn: 'root',\n    factory: () => MESSAGE_SERVICE_DEFAULT_CONFIG\n  }\n);\n\n\n/**\n * Channel for sending and receiving messages.\n * @template T The payload type.\n */\nexport class MessageChannel {\n  /** Counter used to give each message a unique id. */\n  private static counter = 0;\n\n  /**\n   * Creates a new channel.\n   *\n   * @param source The message source.\n   * @param channel The message send subject.\n   * @param messages The message receive observable.\n   */\n  constructor(\n    readonly source: unknown,\n    private channel: Subject>,\n    private messages: Observable>\n  ) { }\n\n  /**\n   * Sends a single message with a payload.\n   *\n   * @param payload The message payload.\n   */\n  sendMessage(payload: T): void {\n    this.channel.next({\n      id: this.nextMessageId(),\n      source: this.source,\n      payload\n    });\n  }\n\n  /**\n   * Gets an observable emitting all messages except for those sent by this source.\n   *\n   * @returns The message observable.\n   */\n  getMessages(): Observable> {\n    return this.messages.pipe(filter(msg => msg.source !== this.source));\n  }\n\n  /**\n   * Gets an observable emitting messages sent from a specific source.\n   *\n   * @param source The source messages are filtered on.\n   * @returns The message observable.\n   */\n  getMessagesFromSource(source: unknown): Observable> {\n    return this.getMessages().pipe(filter(msg => msg.source === source));\n  }\n\n  /**\n   * Gets an observable emitting messages sent from any of the specified sources.\n   *\n   * @param sources The sources messages are filtered on.\n   * @returns The message observable.\n   */\n  getMessagesFromSources(sources: unknown[]): Observable> {\n    return this.getMessages().pipe(filter(msg => sources.includes(msg.source)));\n  }\n\n  /**\n   * Creates a unique message identifier.\n   *\n   * @returns The identifier number.\n   */\n  private nextMessageId(): number {\n    return MessageChannel.counter++;\n  }\n}\n\n\n/**\n * Service for creating message channels.\n *\n * @template T The message payload type.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService implements OnDestroy {\n  /** The message channel. */\n  private channel = new Subject>();\n  /** The message listener. */\n  private messages: Observable>;\n\n  /**\n   * Creates an instance of message service.\n   *\n   * @param [config] The configuration for this service.\n   * @param [parent] The parent message service, if any.\n   */\n  constructor(@Inject(MESSAGE_SERVICE_CONFIG) readonly config: MessageServiceConfig,\n              @Optional() @SkipSelf() readonly parent: MessageService | null) {\n    if (config.isolated || !parent) {\n      this.messages = this.channel.asObservable();\n    } else {\n      this.messages = from([\n        this.channel,\n        parent.messages.pipe(takeWhile(() => !this.channel.closed))\n      ]).pipe(mergeAll());\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  ngOnDestroy(): void {\n    this.channel.complete();\n  }\n\n  /**\n   * Connects to a message channel.\n   *\n   * @param source The source of messages sent.\n   * @returns A new connected message channel.\n   */\n  connect(source: unknown): MessageChannel {\n    return new MessageChannel(source, this.channel, this.messages);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessageChannel.html":{"url":"classes/MessageChannel.html","title":"class - MessageChannel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessageChannel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/message/message.service.ts\n        \n\n            \n                Description\n            \n            \n                Channel for sending and receiving messages.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                counter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMessages\n                            \n                            \n                                getMessagesFromSource\n                            \n                            \n                                getMessagesFromSources\n                            \n                            \n                                    Private\n                                nextMessageId\n                            \n                            \n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(source: unknown, channel: Subject>, messages: Observable>)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/message/message.service.ts:48\n                            \n                        \n\n                \n                    \n                            Creates a new channel.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        source\n                                                  \n                                                        \n                                                                    unknown\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The message source.\n\n                                                        \n                                                \n                                                \n                                                        channel\n                                                  \n                                                        \n                                                                        Subject>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The message send subject.\n\n                                                        \n                                                \n                                                \n                                                        messages\n                                                  \n                                                        \n                                                                        Observable>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The message receive observable.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            counter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/services/message/message.service.ts:48\n                            \n                        \n\n                \n                    \n                        Counter used to give each message a unique id. \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMessages\n                        \n                        \n                    \n                \n            \n            \n                \ngetMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/message/message.service.ts:81\n                \n            \n\n\n            \n                \n                    Gets an observable emitting all messages except for those sent by this source.\n\n\n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        The message observable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMessagesFromSource\n                        \n                        \n                    \n                \n            \n            \n                \ngetMessagesFromSource(source: unknown)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/message/message.service.ts:91\n                \n            \n\n\n            \n                \n                    Gets an observable emitting messages sent from a specific source.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                            unknown\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The source messages are filtered on.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        The message observable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMessagesFromSources\n                        \n                        \n                    \n                \n            \n            \n                \ngetMessagesFromSources(sources: unknown[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/message/message.service.ts:101\n                \n            \n\n\n            \n                \n                    Gets an observable emitting messages sent from any of the specified sources.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sources\n                                    \n                                            unknown[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The sources messages are filtered on.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        The message observable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            nextMessageId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    nextMessageId()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/message/message.service.ts:110\n                \n            \n\n\n            \n                \n                    Creates a unique message identifier.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The identifier number.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendMessage\n                        \n                        \n                    \n                \n            \n            \n                \nsendMessage(payload: T)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/message/message.service.ts:68\n                \n            \n\n\n            \n                \n                    Sends a single message with a payload.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The message payload.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, OnDestroy, Optional, SkipSelf } from '@angular/core';\nimport { from, Observable, Subject } from 'rxjs';\nimport { filter, mergeAll, takeWhile } from 'rxjs/operators';\n\n\n/**\n * Message service configuration options.\n */\nexport interface MessageServiceConfig {\n  /** Whether to listen to parent messages. */\n  isolated: boolean;\n}\n\n/**\n * A message sent on a channel.\n * @template T The payload type.\n */\nexport interface Message {\n  /** Unique identifier for a message. */\n  id: number;\n  /** Sender of the message. */\n  source: unknown;\n  /** Data associated with this message. */\n  payload: T;\n}\n\n/** Default message service configuration. */\nexport const MESSAGE_SERVICE_DEFAULT_CONFIG: MessageServiceConfig = {\n  isolated: true\n};\n\n/** Token for specifying the message service configuration. */\nexport const MESSAGE_SERVICE_CONFIG = new InjectionToken(\n  'Message service configuration',\n  {\n    providedIn: 'root',\n    factory: () => MESSAGE_SERVICE_DEFAULT_CONFIG\n  }\n);\n\n\n/**\n * Channel for sending and receiving messages.\n * @template T The payload type.\n */\nexport class MessageChannel {\n  /** Counter used to give each message a unique id. */\n  private static counter = 0;\n\n  /**\n   * Creates a new channel.\n   *\n   * @param source The message source.\n   * @param channel The message send subject.\n   * @param messages The message receive observable.\n   */\n  constructor(\n    readonly source: unknown,\n    private channel: Subject>,\n    private messages: Observable>\n  ) { }\n\n  /**\n   * Sends a single message with a payload.\n   *\n   * @param payload The message payload.\n   */\n  sendMessage(payload: T): void {\n    this.channel.next({\n      id: this.nextMessageId(),\n      source: this.source,\n      payload\n    });\n  }\n\n  /**\n   * Gets an observable emitting all messages except for those sent by this source.\n   *\n   * @returns The message observable.\n   */\n  getMessages(): Observable> {\n    return this.messages.pipe(filter(msg => msg.source !== this.source));\n  }\n\n  /**\n   * Gets an observable emitting messages sent from a specific source.\n   *\n   * @param source The source messages are filtered on.\n   * @returns The message observable.\n   */\n  getMessagesFromSource(source: unknown): Observable> {\n    return this.getMessages().pipe(filter(msg => msg.source === source));\n  }\n\n  /**\n   * Gets an observable emitting messages sent from any of the specified sources.\n   *\n   * @param sources The sources messages are filtered on.\n   * @returns The message observable.\n   */\n  getMessagesFromSources(sources: unknown[]): Observable> {\n    return this.getMessages().pipe(filter(msg => sources.includes(msg.source)));\n  }\n\n  /**\n   * Creates a unique message identifier.\n   *\n   * @returns The identifier number.\n   */\n  private nextMessageId(): number {\n    return MessageChannel.counter++;\n  }\n}\n\n\n/**\n * Service for creating message channels.\n *\n * @template T The message payload type.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService implements OnDestroy {\n  /** The message channel. */\n  private channel = new Subject>();\n  /** The message listener. */\n  private messages: Observable>;\n\n  /**\n   * Creates an instance of message service.\n   *\n   * @param [config] The configuration for this service.\n   * @param [parent] The parent message service, if any.\n   */\n  constructor(@Inject(MESSAGE_SERVICE_CONFIG) readonly config: MessageServiceConfig,\n              @Optional() @SkipSelf() readonly parent: MessageService | null) {\n    if (config.isolated || !parent) {\n      this.messages = this.channel.asObservable();\n    } else {\n      this.messages = from([\n        this.channel,\n        parent.messages.pipe(takeWhile(() => !this.channel.closed))\n      ]).pipe(mergeAll());\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  ngOnDestroy(): void {\n    this.channel.complete();\n  }\n\n  /**\n   * Connects to a message channel.\n   *\n   * @param source The source of messages sent.\n   * @returns A new connected message channel.\n   */\n  connect(source: unknown): MessageChannel {\n    return new MessageChannel(source, this.channel, this.messages);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessageService.html":{"url":"injectables/MessageService.html","title":"injectable - MessageService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MessageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/message/message.service.ts\n        \n\n            \n                Description\n            \n            \n                Service for creating message channels.\n\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                channel\n                            \n                            \n                                    Private\n                                messages\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                connect\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: MessageServiceConfig, parent: MessageService | null)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/message/message.service.ts:128\n                            \n                        \n\n                \n                    \n                            Creates an instance of message service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        MessageServiceConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The configuration for this service.\n\n                                                        \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        MessageService | null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The parent message service, if any.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            connect\n                        \n                        \n                    \n                \n            \n            \n                \nconnect(source: unknown)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/message/message.service.ts:161\n                \n            \n\n\n            \n                \n                    Connects to a message channel.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                            unknown\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The source of messages sent.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         MessageChannel\n\n                    \n                    \n                        A new connected message channel.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/services/message/message.service.ts:151\n                \n            \n\n\n            \n                \n                    Clean up.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            channel\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject>()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/services/message/message.service.ts:126\n                            \n                        \n\n                \n                    \n                        The message channel. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            messages\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Observable>\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/services/message/message.service.ts:128\n                            \n                        \n\n                \n                    \n                        The message listener. \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, OnDestroy, Optional, SkipSelf } from '@angular/core';\nimport { from, Observable, Subject } from 'rxjs';\nimport { filter, mergeAll, takeWhile } from 'rxjs/operators';\n\n\n/**\n * Message service configuration options.\n */\nexport interface MessageServiceConfig {\n  /** Whether to listen to parent messages. */\n  isolated: boolean;\n}\n\n/**\n * A message sent on a channel.\n * @template T The payload type.\n */\nexport interface Message {\n  /** Unique identifier for a message. */\n  id: number;\n  /** Sender of the message. */\n  source: unknown;\n  /** Data associated with this message. */\n  payload: T;\n}\n\n/** Default message service configuration. */\nexport const MESSAGE_SERVICE_DEFAULT_CONFIG: MessageServiceConfig = {\n  isolated: true\n};\n\n/** Token for specifying the message service configuration. */\nexport const MESSAGE_SERVICE_CONFIG = new InjectionToken(\n  'Message service configuration',\n  {\n    providedIn: 'root',\n    factory: () => MESSAGE_SERVICE_DEFAULT_CONFIG\n  }\n);\n\n\n/**\n * Channel for sending and receiving messages.\n * @template T The payload type.\n */\nexport class MessageChannel {\n  /** Counter used to give each message a unique id. */\n  private static counter = 0;\n\n  /**\n   * Creates a new channel.\n   *\n   * @param source The message source.\n   * @param channel The message send subject.\n   * @param messages The message receive observable.\n   */\n  constructor(\n    readonly source: unknown,\n    private channel: Subject>,\n    private messages: Observable>\n  ) { }\n\n  /**\n   * Sends a single message with a payload.\n   *\n   * @param payload The message payload.\n   */\n  sendMessage(payload: T): void {\n    this.channel.next({\n      id: this.nextMessageId(),\n      source: this.source,\n      payload\n    });\n  }\n\n  /**\n   * Gets an observable emitting all messages except for those sent by this source.\n   *\n   * @returns The message observable.\n   */\n  getMessages(): Observable> {\n    return this.messages.pipe(filter(msg => msg.source !== this.source));\n  }\n\n  /**\n   * Gets an observable emitting messages sent from a specific source.\n   *\n   * @param source The source messages are filtered on.\n   * @returns The message observable.\n   */\n  getMessagesFromSource(source: unknown): Observable> {\n    return this.getMessages().pipe(filter(msg => msg.source === source));\n  }\n\n  /**\n   * Gets an observable emitting messages sent from any of the specified sources.\n   *\n   * @param sources The sources messages are filtered on.\n   * @returns The message observable.\n   */\n  getMessagesFromSources(sources: unknown[]): Observable> {\n    return this.getMessages().pipe(filter(msg => sources.includes(msg.source)));\n  }\n\n  /**\n   * Creates a unique message identifier.\n   *\n   * @returns The identifier number.\n   */\n  private nextMessageId(): number {\n    return MessageChannel.counter++;\n  }\n}\n\n\n/**\n * Service for creating message channels.\n *\n * @template T The message payload type.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService implements OnDestroy {\n  /** The message channel. */\n  private channel = new Subject>();\n  /** The message listener. */\n  private messages: Observable>;\n\n  /**\n   * Creates an instance of message service.\n   *\n   * @param [config] The configuration for this service.\n   * @param [parent] The parent message service, if any.\n   */\n  constructor(@Inject(MESSAGE_SERVICE_CONFIG) readonly config: MessageServiceConfig,\n              @Optional() @SkipSelf() readonly parent: MessageService | null) {\n    if (config.isolated || !parent) {\n      this.messages = this.channel.asObservable();\n    } else {\n      this.messages = from([\n        this.channel,\n        parent.messages.pipe(takeWhile(() => !this.channel.closed))\n      ]).pipe(mergeAll());\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  ngOnDestroy(): void {\n    this.channel.complete();\n  }\n\n  /**\n   * Connects to a message channel.\n   *\n   * @param source The source of messages sent.\n   * @returns A new connected message channel.\n   */\n  connect(source: unknown): MessageChannel {\n    return new MessageChannel(source, this.channel, this.messages);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MessageServiceConfig.html":{"url":"interfaces/MessageServiceConfig.html","title":"interface - MessageServiceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MessageServiceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/message/message.service.ts\n        \n\n            \n                Description\n            \n            \n                Message service configuration options.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isolated\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isolated\n                                    \n                                \n                                \n                                    \n                                        isolated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether to listen to parent messages. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, OnDestroy, Optional, SkipSelf } from '@angular/core';\nimport { from, Observable, Subject } from 'rxjs';\nimport { filter, mergeAll, takeWhile } from 'rxjs/operators';\n\n\n/**\n * Message service configuration options.\n */\nexport interface MessageServiceConfig {\n  /** Whether to listen to parent messages. */\n  isolated: boolean;\n}\n\n/**\n * A message sent on a channel.\n * @template T The payload type.\n */\nexport interface Message {\n  /** Unique identifier for a message. */\n  id: number;\n  /** Sender of the message. */\n  source: unknown;\n  /** Data associated with this message. */\n  payload: T;\n}\n\n/** Default message service configuration. */\nexport const MESSAGE_SERVICE_DEFAULT_CONFIG: MessageServiceConfig = {\n  isolated: true\n};\n\n/** Token for specifying the message service configuration. */\nexport const MESSAGE_SERVICE_CONFIG = new InjectionToken(\n  'Message service configuration',\n  {\n    providedIn: 'root',\n    factory: () => MESSAGE_SERVICE_DEFAULT_CONFIG\n  }\n);\n\n\n/**\n * Channel for sending and receiving messages.\n * @template T The payload type.\n */\nexport class MessageChannel {\n  /** Counter used to give each message a unique id. */\n  private static counter = 0;\n\n  /**\n   * Creates a new channel.\n   *\n   * @param source The message source.\n   * @param channel The message send subject.\n   * @param messages The message receive observable.\n   */\n  constructor(\n    readonly source: unknown,\n    private channel: Subject>,\n    private messages: Observable>\n  ) { }\n\n  /**\n   * Sends a single message with a payload.\n   *\n   * @param payload The message payload.\n   */\n  sendMessage(payload: T): void {\n    this.channel.next({\n      id: this.nextMessageId(),\n      source: this.source,\n      payload\n    });\n  }\n\n  /**\n   * Gets an observable emitting all messages except for those sent by this source.\n   *\n   * @returns The message observable.\n   */\n  getMessages(): Observable> {\n    return this.messages.pipe(filter(msg => msg.source !== this.source));\n  }\n\n  /**\n   * Gets an observable emitting messages sent from a specific source.\n   *\n   * @param source The source messages are filtered on.\n   * @returns The message observable.\n   */\n  getMessagesFromSource(source: unknown): Observable> {\n    return this.getMessages().pipe(filter(msg => msg.source === source));\n  }\n\n  /**\n   * Gets an observable emitting messages sent from any of the specified sources.\n   *\n   * @param sources The sources messages are filtered on.\n   * @returns The message observable.\n   */\n  getMessagesFromSources(sources: unknown[]): Observable> {\n    return this.getMessages().pipe(filter(msg => sources.includes(msg.source)));\n  }\n\n  /**\n   * Creates a unique message identifier.\n   *\n   * @returns The identifier number.\n   */\n  private nextMessageId(): number {\n    return MessageChannel.counter++;\n  }\n}\n\n\n/**\n * Service for creating message channels.\n *\n * @template T The message payload type.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService implements OnDestroy {\n  /** The message channel. */\n  private channel = new Subject>();\n  /** The message listener. */\n  private messages: Observable>;\n\n  /**\n   * Creates an instance of message service.\n   *\n   * @param [config] The configuration for this service.\n   * @param [parent] The parent message service, if any.\n   */\n  constructor(@Inject(MESSAGE_SERVICE_CONFIG) readonly config: MessageServiceConfig,\n              @Optional() @SkipSelf() readonly parent: MessageService | null) {\n    if (config.isolated || !parent) {\n      this.messages = this.channel.asObservable();\n    } else {\n      this.messages = from([\n        this.channel,\n        parent.messages.pipe(takeWhile(() => !this.channel.closed))\n      ]).pipe(mergeAll());\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  ngOnDestroy(): void {\n    this.channel.complete();\n  }\n\n  /**\n   * Connects to a message channel.\n   *\n   * @param source The source of messages sent.\n   * @returns A new connected message channel.\n   */\n  connect(source: unknown): MessageChannel {\n    return new MessageChannel(source, this.channel, this.messages);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OMEZarrInfo.html":{"url":"interfaces/OMEZarrInfo.html","title":"interface - OMEZarrInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OMEZarrInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-image-viewer/src/lib/loader.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Loader, createZarrLoader, OMEZarrReader, createOMETiffLoader } from '@hubmap/vitessce-image-viewer';\n\nexport enum LoaderType {\n  Zarr = 'zarr',\n  OMEZarr = 'ome-zarr',\n  StaticZarr = 'static',\n\n  Tiff = 'tiff',\n  Tiff2 = 'tiff 2',\n  BFTiff = 'bf tiff',\n  CovidTiff = 'covid tiff',\n  StaticTiff = 'static tiff'\n}\n\n// createLoader info argument types\nexport type ZarrInfo = Parameters[0];\nexport interface OMEZarrInfo {\n  url: string;\n}\nexport interface TiffInfo {\n  url: string;\n  offsets?: string | number[];\n}\n\n// Copied from vitessce-image-viewer demo source\nexport async function createLoader(\n  type: LoaderType,\n  info: ZarrInfo | OMEZarrInfo | TiffInfo\n): Promise {\n  switch (type) {\n    case LoaderType.Zarr:\n    case LoaderType.StaticZarr:\n      return createZarrLoader(info as ZarrInfo);\n\n    case LoaderType.OMEZarr: {\n      const { url } = info as OMEZarrInfo;\n      const reader = await OMEZarrReader.fromUrl(url);\n      const { loader } = await reader.loadOMEZarr();\n      return loader;\n    }\n\n    case LoaderType.Tiff:\n    case LoaderType.Tiff2:\n    case LoaderType.BFTiff:\n    case LoaderType.CovidTiff:\n    case LoaderType.StaticTiff: {\n      const { url, offsets = [] } = info as TiffInfo;\n      return createOMETiffLoader({ url, offsets: await loadOffsets(offsets) });\n    }\n\n    default:\n      throw Error(`Pyramid type (${type}) is not supported`);\n  }\n}\n\nasync function loadOffsets(url: string | number[]): Promise {\n  if (typeof url !== 'string') { return url; }\n  const res = await fetch(url);\n  return res.status !== 404 ? await res.json() as number[] : [];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OldRuiData.html":{"url":"interfaces/OldRuiData.html","title":"interface - OldRuiData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OldRuiData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/hubmap/old-rui-utils.ts\n        \n\n            \n                Description\n            \n            \n                RUI v0.5.0 format \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        alignment_datetime\n                                \n                                \n                                        alignment_id\n                                \n                                \n                                        alignment_operator_first_name\n                                \n                                \n                                        alignment_operator_last_name\n                                \n                                \n                                        reference_organ_id\n                                \n                                \n                                        tissue_object_rotation\n                                \n                                \n                                        tissue_object_size\n                                \n                                \n                                        tissue_position_mass_point\n                                \n                                \n                                        tissue_position_vertices\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alignment_datetime\n                                    \n                                \n                                \n                                    \n                                        alignment_datetime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Creation time. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        alignment_id\n                                    \n                                \n                                \n                                    \n                                        alignment_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        alignment_operator_first_name\n                                    \n                                \n                                \n                                    \n                                        alignment_operator_first_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Creator first name. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        alignment_operator_last_name\n                                    \n                                \n                                \n                                    \n                                        alignment_operator_last_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Creator last name. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reference_organ_id\n                                    \n                                \n                                \n                                    \n                                        reference_organ_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Organ reference identifier. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tissue_object_rotation\n                                    \n                                \n                                \n                                    \n                                        tissue_object_rotation:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tissue object rotation. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tissue_object_size\n                                    \n                                \n                                \n                                    \n                                        tissue_object_size:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tissue object size. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tissue_position_mass_point\n                                    \n                                \n                                \n                                    \n                                        tissue_position_mass_point:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tissue point of mass. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tissue_position_vertices\n                                    \n                                \n                                \n                                    \n                                        tissue_position_vertices:     unknown[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     unknown[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Position vertices. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ccf } from '../util/prefixes';\n\n/** RUI v0.5.0 format */\nexport interface OldRuiData {\n  /** Identifier. */\n  alignment_id: string;\n  /** Creator first name. */\n  alignment_operator_first_name: string;\n  /** Creator last name. */\n  alignment_operator_last_name: string;\n  /** Creation time. */\n  alignment_datetime: string;\n  /** Organ reference identifier. */\n  reference_organ_id: string;\n  /** Position vertices. */\n  tissue_position_vertices: unknown[];\n  /** Tissue point of mass. */\n  tissue_position_mass_point: {\n    x: number,\n    y: number,\n    z: number\n  };\n  /** Tissue object rotation. */\n  tissue_object_rotation: {\n    x: number,\n    y: number,\n    z: number\n  };\n  /** Tissue object size. */\n  tissue_object_size: {\n    x: number,\n    y: number,\n    z: number\n  };\n}\n\n/**\n * Fixes old RUI data from VU.\n *\n * @param data The original RUI data\n * @returns The fixed RUI data\n */\nfunction fixOldRuiKidneyData(data: OldRuiData): OldRuiData {\n  return {\n    ...data,\n    tissue_position_mass_point: {\n      x: data.tissue_position_mass_point.x - 60 / 2,\n      y: data.tissue_position_mass_point.y - 100 / 2,\n      z: data.tissue_position_mass_point.z - 60 / 2\n    }\n  };\n}\n\n/**\n * Converts version 0.5.0 RUI data to new JSONLD format.\n * @param data The old data.\n * @param [externalId] An optional label.\n * @param [refOrganId] The organ id.\n * @returns The translated JSONLD data.\n */\nexport function convertOldRuiToJsonLd(data: OldRuiData, label?: string, refOrganId?: string): object {\n  let placementTarget: string | undefined;\n  if (refOrganId) {\n    placementTarget = refOrganId;\n  } else if (data.reference_organ_id === 'uuid-1234-5678') {\n    placementTarget = ccf.x('VHKidney').id;\n  } else if(data.reference_organ_id) {\n    placementTarget = data.reference_organ_id;\n  }\n\n  if (placementTarget?.endsWith('Kidney')) {\n    data = fixOldRuiKidneyData(data);\n  }\n\n  const D = data.tissue_object_size;\n  const R = data.tissue_object_rotation;\n  const T = data.tissue_position_mass_point;\n\n  return {\n    '@context': 'https://hubmapconsortium.github.io/hubmap-ontology/ccf-context.jsonld',\n    '@id': 'http://purl.org/ccf/0.5/' + data.alignment_id,\n    '@type': 'SpatialEntity',\n    label: label || undefined,\n    creator: `${data.alignment_operator_first_name} ${data.alignment_operator_last_name}`,\n    creator_first_name: data.alignment_operator_first_name,\n    creator_last_name: data.alignment_operator_last_name,\n    // creator_orcid: data.alignment_operator_orcid,\n    creation_date: data.alignment_datetime,\n    ccf_annotations: [],\n    x_dimension: D.x, y_dimension: D.y, z_dimension: D.z, dimension_units: 'millimeter',\n\n    placement: {\n      '@context': 'https://hubmapconsortium.github.io/hubmap-ontology/ccf-context.jsonld',\n      '@id': 'http://purl.org/ccf/0.5/' + data.alignment_id + '_placement',\n      '@type': 'SpatialPlacement',\n      target: placementTarget,\n      placement_date: data.alignment_datetime,\n\n      x_scaling: 1, y_scaling: 1, z_scaling: 1, scaling_units: 'ratio',\n      x_rotation: R.x, y_rotation: R.y, z_rotation: R.z, rotation_order: 'XYZ', rotation_units: 'degree',\n      x_translation: T.x, y_translation: T.y, z_translation: T.z, translation_units: 'millimeter'\n    }\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OntologyExplorationModule.html":{"url":"modules/OntologyExplorationModule.html","title":"module - OntologyExplorationModule","body":"\n                   \n\n\n\n\n    Modules\n    OntologyExplorationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OntologyExplorationModule\n\n\n\ncluster_OntologyExplorationModule_imports\n\n\n\ncluster_OntologyExplorationModule_exports\n\n\n\n\nOntologySearchModule\n\nOntologySearchModule\n\n\n\nOntologyExplorationModule\n\nOntologyExplorationModule\n\nOntologyExplorationModule -->\n\nOntologySearchModule->OntologyExplorationModule\n\n\n\n\n\nOntologySelectionModule\n\nOntologySelectionModule\n\nOntologyExplorationModule -->\n\nOntologySelectionModule->OntologyExplorationModule\n\n\n\n\n\nOntologyTreeModule\n\nOntologyTreeModule\n\nOntologyExplorationModule -->\n\nOntologyTreeModule->OntologyExplorationModule\n\n\n\n\n\nOntologySearchModule \n\nOntologySearchModule \n\nOntologySearchModule  -->\n\nOntologyExplorationModule->OntologySearchModule \n\n\n\n\n\nOntologySelectionModule \n\nOntologySelectionModule \n\nOntologySelectionModule  -->\n\nOntologyExplorationModule->OntologySelectionModule \n\n\n\n\n\nOntologyTreeModule \n\nOntologyTreeModule \n\nOntologyTreeModule  -->\n\nOntologyExplorationModule->OntologyTreeModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/ontology-exploration/ontology-exploration.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            OntologySearchModule\n                        \n                        \n                            OntologySelectionModule\n                        \n                        \n                            OntologyTreeModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OntologySearchModule\n                        \n                        \n                            OntologySelectionModule\n                        \n                        \n                            OntologyTreeModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OntologySearchModule } from './ontology-search/ontology-search.module';\nimport { OntologySelectionModule } from './ontology-selection/ontology-selection.module';\nimport { OntologyTreeModule } from './ontology-tree/ontology-tree.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OntologySearchModule,\n    OntologyTreeModule,\n    OntologySelectionModule\n  ],\n  exports: [OntologySearchModule, OntologyTreeModule, OntologySelectionModule]\n})\nexport class OntologyExplorationModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OntologyNode.html":{"url":"interfaces/OntologyNode.html","title":"interface - OntologyNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OntologyNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/ontology-node.ts\n        \n\n            \n                Description\n            \n            \n                A node in the ontology tree.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        children\n                                \n                                \n                                        id\n                                \n                                \n                                        label\n                                \n                                \n                                        parent\n                                \n                                \n                                        synonymLabels\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                    \n                                \n                                \n                                    \n                                        children:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An array of child identifiers.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The unique identifier of this node.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Label for this ontology node.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                    \n                                \n                                \n                                    \n                                        parent:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The identifier of the parent node. undefined if this is the root node.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        synonymLabels\n                                    \n                                \n                                \n                                    \n                                        synonymLabels:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Labels for the synonyms of the label of this node.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface OntologyNode {\n  /**\n   * The unique identifier of this node.\n   */\n  id: string;\n\n  /**\n   * Label for this ontology node.\n   */\n  label: string;\n\n  /**\n   * The identifier of the parent node. `undefined` if this is the root node.\n   */\n  parent: string;\n\n  /**\n   * An array of child identifiers.\n   */\n  children: string[];\n\n  /**\n   * Labels for the synonyms of the label of this node.\n   */\n  synonymLabels: string[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OntologySearchComponent.html":{"url":"components/OntologySearchComponent.html","title":"component - OntologySearchComponent","body":"\n                   \n\n\n\n\n\n  Components\n  OntologySearchComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/ontology-exploration/ontology-search/ontology-search.component.ts\n\n\n    \n        Description\n    \n    \n        Componenet for searching the Ontology nodes.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-ontology-search\n            \n\n            \n                styleUrls\n                ./ontology-search.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./ontology-search.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                autoCompleteOpen\n                            \n                            \n                                filteredResults$\n                            \n                            \n                                formControl\n                            \n                            \n                                    Public\n                                ontologyService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                displayFormatter\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSelect\n                            \n                            \n                                sortBySynonymResult\n                            \n                            \n                                sortLexically\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                selected\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(ontologyService: OntologySearchService)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/ontology-exploration/ontology-search/ontology-search.component.ts:41\n                            \n                        \n\n                \n                    \n                            Creates an instance of ontology search component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        ontologyService\n                                                  \n                                                        \n                                                                        OntologySearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                instance of searchService which provides all the search functionality\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        selected\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/ontology-exploration/ontology-search/ontology-search.component.ts:25\n                            \n                        \n                \n                    \n                        Output event-emitter which emits the id of the OntologyNode whose label was\nselected by the user in the search-results\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            displayFormatter\n                        \n                        \n                    \n                \n            \n            \n                \ndisplayFormatter(option?: SearchResult)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/ontology-exploration/ontology-search/ontology-search.component.ts:72\n                \n            \n\n\n            \n                \n                    A formatter function to enable different display and selected value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    option\n                                    \n                                                SearchResult\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        a search result entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        a part of the search result entry to be displayed as a display value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/ontology-exploration/ontology-search/ontology-search.component.ts:54\n                \n            \n\n\n            \n                \n                    on-init lifecycle hook for this component -\ngets the searched value from the view, sends it to the filter function in the OntologyService,\nand gets the search results from the service\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSelect\n                        \n                        \n                    \n                \n            \n            \n                \nonSelect(event: MatAutocompleteSelectedEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/ontology-exploration/ontology-search/ontology-search.component.ts:98\n                \n            \n\n\n            \n                \n                    Callback function triggered when the user selects a value from search results\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MatAutocompleteSelectedEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        instance of MatAutocompleteSelectedEvent\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortBySynonymResult\n                        \n                        \n                    \n                \n            \n            \n                \nsortBySynonymResult(this: void, entry: SearchResult)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/ontology-exploration/ontology-search/ontology-search.component.ts:81\n                \n            \n\n\n            \n                \n                    Sorts by results which have synonyms\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                void\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    entry\n                                    \n                                                SearchResult\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        search result entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        1 or -1\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sortLexically\n                        \n                        \n                    \n                \n            \n            \n                \nsortLexically(this: void, entry: SearchResult)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/ontology-exploration/ontology-search/ontology-search.component.ts:90\n                \n            \n\n\n            \n                \n                    Sorts lexically\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                void\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    entry\n                                    \n                                                SearchResult\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        search result entry\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        lower case value of node label\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            autoCompleteOpen\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/ontology-exploration/ontology-search/ontology-search.component.ts:36\n                            \n                        \n\n                \n                    \n                        Determines if autocomplete is open or close.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            filteredResults$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/ontology-exploration/ontology-search/ontology-search.component.ts:41\n                            \n                        \n\n                \n                    \n                        Observable which provides the filtered search results\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formControl\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new FormControl('')\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/ontology-exploration/ontology-search/ontology-search.component.ts:30\n                            \n                        \n\n                \n                    \n                        Instance of FormControl - tracks the value and validation status of an individual form control\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ontologyService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         OntologySearchService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/ontology-exploration/ontology-search/ontology-search.component.ts:47\n                            \n                        \n\n                \n                    \n                        instance of searchService which provides all the search functionality\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\nimport { get, sortBy } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap } from 'rxjs/operators';\n\nimport { OntologyNode } from '../../../core/models/ontology-node';\nimport { OntologySearchService, SearchResult } from '../../../core/services/ontology-search/ontology-search.service';\n\n\n/**\n * Componenet for searching the Ontology nodes.\n */\n@Component({\n  selector: 'ccf-ontology-search',\n  templateUrl: './ontology-search.component.html',\n  styleUrls: ['./ontology-search.component.scss']\n})\nexport class OntologySearchComponent implements OnInit {\n  /**\n   * Output event-emitter which emits the id of the OntologyNode whose label was\n   * selected by the user in the search-results\n   */\n  @Output() selected = new EventEmitter();\n\n  /**\n   * Instance of FormControl - tracks the value and validation status of an individual form control\n   */\n  formControl = new FormControl('');\n\n\n  /**\n   * Determines if autocomplete is open or close.\n   */\n  autoCompleteOpen = false;\n\n  /**\n   * Observable which provides the filtered search results\n   */\n  filteredResults$: Observable;\n\n  /**\n   * Creates an instance of ontology search component.\n   * @param ontologyService instance of searchService which provides all the search functionality\n   */\n  constructor(public ontologyService: OntologySearchService) { }\n\n  /**\n   * on-init lifecycle hook for this component -\n   * gets the searched value from the view, sends it to the filter function in the OntologyService,\n   * and gets the search results from the service\n   */\n  ngOnInit(): void {\n    this.ontologyService.loadOntology();\n    const valueChanges = this.formControl.valueChanges as Observable;\n    this.filteredResults$ = valueChanges.pipe(\n      filter(value => typeof value === 'string'),\n      startWith(''),\n      switchMap(value => this.ontologyService.filter(value)),\n      map(searchResults => sortBy(searchResults, [\n        this.sortBySynonymResult, 'index', this.sortLexically\n      ]))\n    );\n  }\n\n  /**\n   * A formatter function to enable different display and selected value\n   * @param option a search result entry\n   * @returns a part of the search result entry to be displayed as a display value\n   */\n  displayFormatter(option?: SearchResult): string {\n    return (option?.displayLabel ?? []).join('');\n  }\n\n  /**\n   * Sorts by results which have synonyms\n   * @param entry search result entry\n   * @returns 1 or -1\n   */\n  sortBySynonymResult(this: void, entry: SearchResult): number {\n    return entry.displayLabel.join().includes('(') ? 1 : -1;\n  }\n\n  /**\n   * Sorts lexically\n   * @param entry search result entry\n   * @returns lower case value of node label\n   */\n  sortLexically(this: void, entry: SearchResult): string {\n    return entry.node.label.toLowerCase();\n  }\n\n  /**\n   * Callback function triggered when the user selects a value from search results\n   * @param event instance of MatAutocompleteSelectedEvent\n   */\n  onSelect(event: MatAutocompleteSelectedEvent): void {\n    const node = get(event, ['option', 'value', 'node']) as OntologyNode;\n    if (node) {\n      this.selected.emit(node);\n      this.formControl.reset();\n    }\n  }\n}\n\n    \n\n    \n        \n  \n    \n\n    \n      \n        \n          {{option.displayLabel[0]}}\n          {{option.displayLabel[1]}}\n          {{option.displayLabel[2]}}\n        \n      \n    \n\n    search\n  \n\n\n    \n\n    \n                \n                    ./ontology-search.component.scss\n                \n                .ccf-ontology-search {\n  width: 25rem;\n  margin-top: 1.5rem;\n\n  .field {\n    margin-left: 1.5rem;\n    width: 100%;\n  }\n\n  ::ng-deep .mat-form-field-appearance-outline {\n    .mat-form-field-outline-end {\n      border-radius: 0 500px 500px 0;\n      margin: 0;\n    }\n\n    .mat-form-field-wrapper {\n      margin: 0;\n\n      .mat-form-field-flex {\n        .mat-form-field-infix {\n          border: none;\n          height: 3rem;\n\n          input {\n            margin-left: .4rem;\n          }\n        }\n        .mat-form-field-suffix {\n          top: .5rem;\n          border: none;\n        }\n      }\n    }\n\n    .mat-form-field-outline-start {\n      border-radius: 500px 0 0 500px;\n      min-width: 40px;\n\t  }\n  }\n}\n\n::ng-deep .ccf-ontology-search.detached {\n  border: 2px solid;\n  border-top: none;\n  border-radius: 0 0 1rem 1rem;\n  max-height: 18rem;\n\n  .results-container {\n    width: 380px;\n    margin-bottom: 1rem;\n    overflow: auto;\n    max-height: 15rem;\n    scrollbar-width: thin;\n\n    mat-option {\n      height: 1.5rem;\n      width: 380px;\n      \n      .search-term {\n        text-decoration: underline;\n      }\n    }\n  }\n\n}\n\n.autocomplete-open {\n  ::ng-deep .mat-form-field-appearance-outline {\n    .mat-form-field-outline-start {\n      border-radius: 50% 0 0 0;\n      border-bottom: none;\n    }\n\n    .mat-form-field-outline-end {\n      border-radius: 0 1rem 0 0;\n      border-bottom: none;\n    }\n  }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                  {{option.displayLabel[0]}}          {{option.displayLabel[1]}}          {{option.displayLabel[2]}}                      search  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OntologySearchComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OntologySearchModule.html":{"url":"modules/OntologySearchModule.html","title":"module - OntologySearchModule","body":"\n                   \n\n\n\n\n    Modules\n    OntologySearchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OntologySearchModule\n\n\n\ncluster_OntologySearchModule_declarations\n\n\n\ncluster_OntologySearchModule_exports\n\n\n\n\nOntologySearchComponent\n\nOntologySearchComponent\n\n\n\nOntologySearchModule\n\nOntologySearchModule\n\nOntologySearchModule -->\n\nOntologySearchComponent->OntologySearchModule\n\n\n\n\n\nOntologySearchComponent \n\nOntologySearchComponent \n\nOntologySearchComponent  -->\n\nOntologySearchModule->OntologySearchComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/ontology-exploration/ontology-search/ontology-search.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            OntologySearchComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OntologySearchComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { OntologySearchComponent } from './ontology-search.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatAutocompleteModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule\n  ],\n  declarations: [OntologySearchComponent],\n  exports: [OntologySearchComponent]\n})\nexport class OntologySearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OntologySearchService.html":{"url":"injectables/OntologySearchService.html","title":"injectable - OntologySearchService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OntologySearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/ontology-search/ontology-search.service.ts\n        \n\n            \n                Description\n            \n            \n                Injectable OntologySearchService responsible for search result computations\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                rootNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                filter\n                            \n                            \n                                formatLabel\n                            \n                            \n                                getChildren\n                            \n                            \n                                getIndexOfMatch\n                            \n                            \n                                loadOntology\n                            \n                            \n                                    Private\n                                lookup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, store: Store, ontologyState: OntologyState)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/ontology-search/ontology-search.service.ts:107\n                            \n                        \n\n                \n                    \n                            Creates an instance of ontology search service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The http requests service.\n\n                                                        \n                                                \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The global data store.\n\n                                                        \n                                                \n                                                \n                                                        ontologyState\n                                                  \n                                                        \n                                                                        OntologyState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The global ontology state.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            filter\n                        \n                        \n                    \n                \n            \n            \n                \nfilter(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/ontology-search/ontology-search.service.ts:142\n                \n            \n\n\n            \n                \n                    Searches the ontology with the search-term\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the search term\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        an array of search-results\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            formatLabel\n                        \n                        \n                    \n                \n            \n            \n                \nformatLabel(label: string, searchValue: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/ontology-search/ontology-search.service.ts:200\n                \n            \n\n\n            \n                \n                    Formats label based on where the search-term was found in the OntologyNode\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        label or first synonym-label of OntologyNode which has the search-term\n\n                                    \n                                \n                                \n                                    searchValue\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        search-term\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        an array in the form of [prefix, search-term, suffix]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getChildren\n                        \n                        \n                    \n                \n            \n            \n                \ngetChildren(node: OntologyNode)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/ontology-search/ontology-search.service.ts:216\n                \n            \n\n\n            \n                \n                    Fetches the children of an ontology node.\nNote: This can be called without a reference to this.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                OntologyNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The node for which to get children.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OntologyNode[]\n\n                    \n                    \n                        An array of children, empty if the node has no children.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIndexOfMatch\n                        \n                        \n                    \n                \n            \n            \n                \ngetIndexOfMatch(label: string, searchValue: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/ontology-search/ontology-search.service.ts:190\n                \n            \n\n\n            \n                \n                    Gets index of match in the ontology label\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the provided ontology node label or synonym label\n\n                                    \n                                \n                                \n                                    searchValue\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the searched text in lower case\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        the index of the match in the label\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            loadOntology\n                        \n                        \n                    \n                \n            \n            \n                \nloadOntology()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/ontology-search/ontology-search.service.ts:124\n                \n            \n\n\n            \n                \n                    Loads ontology.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            lookup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    lookup(nodes: Immutable[], searchValue: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/ontology-search/ontology-search.service.ts:154\n                \n            \n\n\n            \n                \n                    looks up ontology nodes and composes search results\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Immutable[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Ontology nodes\n\n                                    \n                                \n                                \n                                    searchValue\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        search text in lower case\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SearchResult[]\n\n                    \n                    \n                        search results\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rootNode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Observable>\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/ontology-search/ontology-search.service.ts:107\n                            \n                        \n\n                \n                    \n                        Root node in ontology. \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Immutable } from '@ngxs-labs/data/typings';\nimport { Store } from '@ngxs/store';\nimport { at, find, forEach, keyBy, map as loMap, partial } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\nimport { JsonOntologyNode, jsonToOntologyNode } from '../../models/json-ontology';\nimport { OntologyNode } from '../../models/ontology-node';\nimport { OntologyState, OntologyStateModel } from '../../store/ontology/ontology.state';\n\n\n/**\n * Search result interface type for the search results\n */\nexport interface SearchResult {\n  /** ensures order of search-results */\n  index: number;\n\n  /** label to be displayed in the view */\n  displayLabel: string[];\n\n  /**  instance of OntologyNode, provides data associated with a search result */\n  node: OntologyNode;\n}\n\n/** Type of function for getting child nodes from a parent node. */\nexport type GetChildrenFunc = (o: OntologyNode) => OntologyNode[];\n\n/**\n * Links all nodes to their parents.\n *\n * @param nodeMap The hash table of nodes.\n */\nexport function linkChildren(nodeMap: { [id: string]: OntologyNode }): void {\n  // Add temporary fake node to simplify logic as root won't need a special case\n  // This is also used later to find the root node\n  nodeMap[''] = { parent: '', children: [] } as unknown as OntologyNode;\n  forEach(nodeMap, ({ id, parent }) => nodeMap[parent].children.push(id));\n}\n\n/**\n * Creates an ontology state.\n *\n * @param nodeMap The node hash table.\n * @returns The ontology state model.\n */\nexport function createModel(nodeMap: { [id: string]: OntologyNode }): OntologyStateModel {\n  const root = find(nodeMap[''].children) as string;\n\n  // Remove fake node inserted in linkChildren\n  delete nodeMap[''];\n\n  return { root, nodes: nodeMap };\n}\n\n/**\n * Creates a new tree with only the specified organs and their subtrees.\n *\n * @param model The full ontology tree.\n * @param organIds The identifiers of the organs to keep.\n * @returns A new ontology tree.\n */\nfunction pruneModel(model: OntologyStateModel, organIds: string[]): OntologyStateModel {\n  const body: OntologyNode = {\n    id: 'http://purl.obolibrary.org/obo/UBERON_0013702',\n    label: 'body',\n    parent: '',\n    children: organIds,\n    synonymLabels: []\n  };\n  const organNodes = at(model.nodes, organIds);\n  const prunedNodes = { [body.id]: body };\n\n  forEach(organNodes, node => node.parent = body.id);\n  forEach(organNodes, node => addSubtree(model.nodes, prunedNodes, node));\n\n  return { root: body.id, nodes: prunedNodes };\n}\n\n/**\n * Adds all subtree nodes to an accumulator object.\n *\n * @param nodes The original tree of nodes.\n * @param acc The accumulated tree of nodes.\n * @param current The node whose subtree should be added.\n */\nexport function addSubtree(\n  nodes: { [id: string]: OntologyNode },\n  acc: { [id: string]: OntologyNode },\n  current: OntologyNode\n): void {\n  acc[current.id] = current;\n  forEach(current.children, id => addSubtree(nodes, acc, nodes[id]));\n}\n\n/**\n * Injectable OntologySearchService responsible for search result computations\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class OntologySearchService {\n  /** Root node in ontology. */\n  rootNode: Observable>;\n\n  /**\n   * Creates an instance of ontology search service.\n   *\n   * @param http The http requests service.\n   * @param store The global data store.\n   * @param ontologyState The global ontology state.\n   */\n  constructor(private http: HttpClient, private store: Store, private ontologyState: OntologyState) {\n    this.rootNode = this.ontologyState.rootNode$;\n    this.getChildren = this.getChildren.bind(this) as GetChildrenFunc;\n  }\n\n  /**\n   * Loads ontology.\n   */\n  loadOntology(): void {\n    const jsonOntology = this.http.get(environment.ontologyUrl, { responseType: 'json' });\n    const model = jsonOntology.pipe(\n      map(ontology => loMap(ontology, jsonToOntologyNode)),\n      map(nodes => keyBy(nodes, 'id')),\n      tap(linkChildren),\n      map(createModel),\n      map(partial(pruneModel, partial.placeholder, environment.organNodes))\n    );\n\n    model.subscribe(ontology => this.ontologyState.setOntology(ontology));\n  }\n\n  /**\n   * Searches the ontology with the search-term\n   * @param value the search term\n   * @returns an array of search-results\n   */\n  filter(value: string): Observable {\n    return this.ontologyState.nodes$.pipe(\n      map(nodes => this.lookup(nodes, value.toLowerCase()))\n    );\n  }\n\n  /**\n   * looks up ontology nodes and composes search results\n   * @param nodes Ontology nodes\n   * @param searchValue search text in lower case\n   * @returns search results\n   */\n  private lookup(nodes: Immutable[], searchValue: string): SearchResult[] {\n    const searchResults = new Map();\n\n    if (nodes) {\n      nodes.forEach((node: OntologyNode) => {\n        const condition = node.label.toLowerCase().includes(searchValue);\n\n        if (condition && !searchResults.get(node.id)) {\n          searchResults.set(node.id, {\n            index: this.getIndexOfMatch(node.label, searchValue),\n            displayLabel: this.formatLabel(node.label, searchValue),\n            node\n          });\n        } else {\n          const match = node.synonymLabels.find((label) => label.toLowerCase().includes(searchValue));\n\n          if (match && !searchResults.get(node.id)) {\n            searchResults.set(node.id, {\n              index: this.getIndexOfMatch(node.label + ' (' + match + ')', searchValue),\n              displayLabel: this.formatLabel(node.label + ' (' + match + ')', searchValue),\n              node\n            });\n          }\n        }\n      });\n    }\n\n    return Array.from(searchResults.values());\n  }\n\n  /**\n   * Gets index of match in the ontology label\n   * @param label the provided ontology node label or synonym label\n   * @param searchValue the searched text in lower case\n   * @returns the index of the match in the label\n   */\n  getIndexOfMatch(label: string, searchValue: string): number {\n    return label.toLowerCase().indexOf(searchValue);\n  }\n\n  /**\n   * Formats label based on where the search-term was found in the OntologyNode\n   * @param label label or first synonym-label of OntologyNode which has the search-term\n   * @param searchValue search-term\n   * @returns an array in the form of [prefix, search-term, suffix]\n   */\n  formatLabel(label: string, searchValue: string): string[] {\n    const index = this.getIndexOfMatch(label, searchValue);\n    return [\n      label.substr(0, index),\n      label.substr(index, searchValue.length),\n      label.substr(index + searchValue.length, label.length)\n    ];\n  }\n\n  /**\n   * Fetches the children of an ontology node.\n   * Note: This can be called without a reference to `this`.\n   *\n   * @param node The node for which to get children.\n   * @returns An array of children, empty if the node has no children.\n   */\n  getChildren(node: OntologyNode): OntologyNode[] {\n    const { nodes } = this.store.selectSnapshot(OntologyState);\n    return at(nodes, node.children);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OntologySelection.html":{"url":"interfaces/OntologySelection.html","title":"interface - OntologySelection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OntologySelection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/ontology-selection.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        label\n                                \n                                \n                                        location\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                    \n                                \n                                \n                                    \n                                        location:         OntologyNode | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OntologyNode | undefined\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { OntologyNode } from './ontology-node';\n\nexport interface OntologySelection {\n  location: OntologyNode | undefined;\n  id: string;\n  label: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OntologySelectionComponent.html":{"url":"components/OntologySelectionComponent.html","title":"component - OntologySelectionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  OntologySelectionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/ontology-exploration/ontology-selection/ontology-selection.component.ts\n\n\n    \n        Description\n    \n    \n        Ontology selection component that encapsulates ontology search and tree components.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-ontology-selection\n            \n\n            \n                styleUrls\n                ./ontology-selection.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./ontology-selection.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ontologySearchService\n                            \n                            \n                                tree\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                selected\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                occurenceData\n                            \n                            \n                                ontologyFilter\n                            \n                            \n                                termData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                ontologySelection\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(ontologySearchService: OntologySearchService, store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/ontology-exploration/ontology-selection/ontology-selection.component.ts:45\n                            \n                        \n\n                \n                    \n                            Creates an instance of ontology selection component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        ontologySearchService\n                                                  \n                                                        \n                                                                        OntologySearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service for searching the ontology.\n\n                                                        \n                                                \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The global state store.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        occurenceData\n                    \n                \n                \n                    \n                        Type :     Record\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/ontology-exploration/ontology-selection/ontology-selection.component.ts:28\n                            \n                        \n                \n                    \n                        A record of terms within the current filter.  To be passed on to ontology-tree\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ontologyFilter\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/ontology-exploration/ontology-selection/ontology-selection.component.ts:40\n                            \n                        \n                \n                    \n                        Input list of selected ontology terms passed down to ontology-tree.\nUsed to change display of ontology tree when selection is made from\noutside the component.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        termData\n                    \n                \n                \n                    \n                        Type :     Record\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/ontology-exploration/ontology-selection/ontology-selection.component.ts:33\n                            \n                        \n                \n                    \n                        A record of terms the app currently has data for.  To be passed on to ontology-tree\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        ontologySelection\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/ontology-exploration/ontology-selection/ontology-selection.component.ts:45\n                            \n                        \n                \n                    \n                        Captures and passes along the change in ontologySelections.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selected\n                        \n                        \n                    \n                \n            \n            \n                \nselected(ontologyNode: OntologyNode)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/ontology-exploration/ontology-selection/ontology-selection.component.ts:61\n                \n            \n\n\n            \n                \n                    Ontology selection event when node is selected from the search results.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ontologyNode\n                                    \n                                                OntologyNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        selected ontology node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ontologySearchService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         OntologySearchService\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/ontology-exploration/ontology-selection/ontology-selection.component.ts:53\n                            \n                        \n\n                \n                    \n                        Service for searching the ontology.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tree\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         OntologyTreeComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(OntologyTreeComponent, {static: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/ontology-exploration/ontology-selection/ontology-selection.component.ts:23\n                            \n                        \n\n                \n                    \n                        View child of search component\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, ViewChild, Output, EventEmitter, Input } from '@angular/core';\nimport { Store } from '@ngxs/store';\n\nimport { OntologyNode } from '../../../core/models/ontology-node';\nimport { OntologySearchService } from '../../../core/services/ontology-search/ontology-search.service';\nimport { OntologyState, OntologyStateModel } from '../../../core/store/ontology/ontology.state';\nimport { OntologyTreeComponent } from '../ontology-tree/ontology-tree.component';\nimport { OntologySelection } from '../../../core/models/ontology-selection';\n\n\n/**\n * Ontology selection component that encapsulates ontology search and tree components.\n */\n@Component({\n  selector: 'ccf-ontology-selection',\n  templateUrl: './ontology-selection.component.html',\n  styleUrls: ['./ontology-selection.component.scss']\n})\nexport class OntologySelectionComponent {\n  /**\n   * View child of search component\n   */\n  @ViewChild(OntologyTreeComponent, { static: false }) tree: OntologyTreeComponent;\n\n  /**\n   * A record of terms within the current filter.  To be passed on to ontology-tree\n   */\n  @Input() occurenceData: Record;\n\n  /**\n   * A record of terms the app currently has data for.  To be passed on to ontology-tree\n   */\n  @Input() termData: Record;\n\n  /**\n   * Input list of selected ontology terms passed down to ontology-tree.\n   * Used to change display of ontology tree when selection is made from\n   * outside the component.\n   */\n  @Input() ontologyFilter: string[];\n\n  /**\n   * Captures and passes along the change in ontologySelections.\n   */\n  @Output() ontologySelection = new EventEmitter();\n\n  /**\n   * Creates an instance of ontology selection component.\n   * @param ontologySearchService Service for searching the ontology.\n   * @param store The global state store.\n   */\n  constructor(\n    public ontologySearchService: OntologySearchService,\n    private readonly store: Store\n  ) { }\n\n  /**\n   * Ontology selection event when node is selected from the search results.\n   * @param ontologyNode selected ontology node.\n   */\n  selected(ontologyNode: OntologyNode): void {\n    const { nodes } = this.store.selectSnapshot(OntologyState);\n    this.tree.expandAndSelect(ontologyNode, node => nodes[node.parent]);\n  }\n}\n\n    \n\n    \n        \n\n\n    \n\n    \n                \n                    ./ontology-selection.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OntologySelectionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OntologySelectionModule.html":{"url":"modules/OntologySelectionModule.html","title":"module - OntologySelectionModule","body":"\n                   \n\n\n\n\n    Modules\n    OntologySelectionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OntologySelectionModule\n\n\n\ncluster_OntologySelectionModule_declarations\n\n\n\ncluster_OntologySelectionModule_imports\n\n\n\ncluster_OntologySelectionModule_exports\n\n\n\n\nOntologySelectionComponent\n\nOntologySelectionComponent\n\n\n\nOntologySelectionModule\n\nOntologySelectionModule\n\nOntologySelectionModule -->\n\nOntologySelectionComponent->OntologySelectionModule\n\n\n\n\n\nOntologySelectionComponent \n\nOntologySelectionComponent \n\nOntologySelectionComponent  -->\n\nOntologySelectionModule->OntologySelectionComponent \n\n\n\n\n\nOntologySearchModule\n\nOntologySearchModule\n\nOntologySelectionModule -->\n\nOntologySearchModule->OntologySelectionModule\n\n\n\n\n\nOntologyTreeModule\n\nOntologyTreeModule\n\nOntologySelectionModule -->\n\nOntologyTreeModule->OntologySelectionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/ontology-exploration/ontology-selection/ontology-selection.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            OntologySelectionComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OntologySearchModule\n                        \n                        \n                            OntologyTreeModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OntologySelectionComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OntologySearchModule } from '../ontology-search/ontology-search.module';\nimport { OntologyTreeModule } from '../ontology-tree/ontology-tree.module';\nimport { OntologySelectionComponent } from './ontology-selection.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OntologySearchModule,\n    OntologyTreeModule\n  ],\n  declarations: [OntologySelectionComponent],\n  exports: [OntologySelectionComponent],\n})\nexport class OntologySelectionModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OntologyState.html":{"url":"injectables/OntologyState.html","title":"injectable - OntologyState","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OntologyState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/ontology/ontology.state.ts\n        \n\n            \n                Description\n            \n            \n                Ontology tree state.\n\n            \n\n            \n                Extends\n            \n            \n                    NgxsDataRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                nodes$\n                            \n                            \n                                    Public\n                                    Readonly\n                                rootNode$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setOntology\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setOntology\n                        \n                        \n                    \n                \n            \n            \n                \nsetOntology(ontology: OntologyStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @DataAction()\n                \n            \n\n            \n                \n                    Defined in src/app/core/store/ontology/ontology.state.ts:50\n                \n            \n\n\n            \n                \n                    Sets the ontology state.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ontology\n                                    \n                                                OntologyStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            nodes$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.state$.pipe(map(state => Object.values(state.nodes)))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/ontology/ontology.state.ts:39\n                            \n                        \n\n                \n                    \n                        All nodes in the ontology tree. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            rootNode$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.state$.pipe(map(state => state.nodes[state.root]))\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/ontology/ontology.state.ts:42\n                            \n                        \n\n                \n                    \n                        Root node of the ontology tree. \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { DataAction, StateRepository } from '@ngxs-labs/data/decorators';\nimport { NgxsDataRepository } from '@ngxs-labs/data/repositories';\nimport { State } from '@ngxs/store';\nimport { map } from 'rxjs/operators';\n\nimport { OntologyNode } from '../../models/ontology-node';\n\n\n/**\n * Data model for the ontology state.\n */\nexport interface OntologyStateModel {\n  /**\n   * Identifier of the root node.\n   */\n  root: string;\n\n  /**\n   * Hash table of nodes.\n   */\n  nodes: { [id: string]: OntologyNode };\n}\n\n/**\n * Ontology tree state.\n */\n@StateRepository()\n@State({\n  name: 'ontology',\n  defaults: {\n    root: '',\n    nodes: {}\n  }\n})\n@Injectable()\nexport class OntologyState extends NgxsDataRepository {\n  /** All nodes in the ontology tree. */\n  public readonly nodes$ = this.state$.pipe(map(state => Object.values(state.nodes)));\n\n  /** Root node of the ontology tree. */\n  public readonly rootNode$ = this.state$.pipe(map(state => state.nodes[state.root]));\n\n  /**\n   * Sets the ontology state.\n   *\n   * @param ontology The new state.\n   */\n  @DataAction()\n  setOntology(ontology: OntologyStateModel): void {\n    this.ctx.setState(ontology);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OntologyStateModel.html":{"url":"interfaces/OntologyStateModel.html","title":"interface - OntologyStateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OntologyStateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/ontology/ontology.state.ts\n        \n\n            \n                Description\n            \n            \n                Data model for the ontology state.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        nodes\n                                \n                                \n                                        root\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                    \n                                \n                                \n                                    \n                                        nodes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Hash table of nodes.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        root\n                                    \n                                \n                                \n                                    \n                                        root:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier of the root node.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { DataAction, StateRepository } from '@ngxs-labs/data/decorators';\nimport { NgxsDataRepository } from '@ngxs-labs/data/repositories';\nimport { State } from '@ngxs/store';\nimport { map } from 'rxjs/operators';\n\nimport { OntologyNode } from '../../models/ontology-node';\n\n\n/**\n * Data model for the ontology state.\n */\nexport interface OntologyStateModel {\n  /**\n   * Identifier of the root node.\n   */\n  root: string;\n\n  /**\n   * Hash table of nodes.\n   */\n  nodes: { [id: string]: OntologyNode };\n}\n\n/**\n * Ontology tree state.\n */\n@StateRepository()\n@State({\n  name: 'ontology',\n  defaults: {\n    root: '',\n    nodes: {}\n  }\n})\n@Injectable()\nexport class OntologyState extends NgxsDataRepository {\n  /** All nodes in the ontology tree. */\n  public readonly nodes$ = this.state$.pipe(map(state => Object.values(state.nodes)));\n\n  /** Root node of the ontology tree. */\n  public readonly rootNode$ = this.state$.pipe(map(state => state.nodes[state.root]));\n\n  /**\n   * Sets the ontology state.\n   *\n   * @param ontology The new state.\n   */\n  @DataAction()\n  setOntology(ontology: OntologyStateModel): void {\n    this.ctx.setState(ontology);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OntologyTreeModule.html":{"url":"modules/OntologyTreeModule.html","title":"module - OntologyTreeModule","body":"\n                   \n\n\n\n\n    Modules\n    OntologyTreeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OntologyTreeModule\n\n\n\ncluster_OntologyTreeModule_declarations\n\n\n\ncluster_OntologyTreeModule_exports\n\n\n\n\nOntologyTreeComponent\n\nOntologyTreeComponent\n\n\n\nOntologyTreeModule\n\nOntologyTreeModule\n\nOntologyTreeModule -->\n\nOntologyTreeComponent->OntologyTreeModule\n\n\n\n\n\nOntologyTreeComponent \n\nOntologyTreeComponent \n\nOntologyTreeComponent  -->\n\nOntologyTreeModule->OntologyTreeComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/ontology-exploration/ontology-tree/ontology-tree.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            OntologyTreeComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OntologyTreeComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\n\nimport { OntologyTreeComponent } from './ontology-tree.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    MatTooltipModule,\n    MatTreeModule\n  ],\n  declarations: [OntologyTreeComponent],\n  exports: [OntologyTreeComponent],\n})\nexport class OntologyTreeModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PictureInPictureViewer.html":{"url":"classes/PictureInPictureViewer.html","title":"class - PictureInPictureViewer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PictureInPictureViewer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-image-viewer/src/lib/picture-in-picture-viewer.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ImageViewer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _channelConfigs\n                            \n                            \n                                    Private\n                                _height\n                            \n                            \n                                    Private\n                                _loaders\n                            \n                            \n                                    Private\n                                _sources\n                            \n                            \n                                    Private\n                                _width\n                            \n                            \n                                    Private\n                                deck\n                            \n                            \n                                    Protected\n                                layerConfigs\n                            \n                            \n                                    Protected\n                                layers\n                            \n                            \n                                    Readonly\n                                props\n                            \n                            \n                                    Protected\n                                states\n                            \n                            \n                                    Protected\n                                views\n                            \n                            \n                                    Protected\n                                vivViews\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Async\n                                createLayerConfigs\n                            \n                            \n                                    Protected\n                                    Async\n                                createVivViews\n                            \n                            \n                                clear\n                            \n                            \n                                    Protected\n                                    Abstract\n                                    Async\n                                createLayerConfigs\n                            \n                            \n                                    Protected\n                                    Abstract\n                                    Async\n                                createVivViews\n                            \n                            \n                                finalize\n                            \n                            \n                                    Private\n                                initializeDeck\n                            \n                            \n                                    Private\n                                layerFilter\n                            \n                            \n                                    Private\n                                onViewStateChange\n                            \n                            \n                                    Private\n                                resetChannelConfigs\n                            \n                            \n                                    Async\n                                setSize\n                            \n                            \n                                    Async\n                                setSources\n                            \n                            \n                                    Protected\n                                update\n                            \n                            \n                                    Async\n                                updateChannelConfigs\n                            \n                            \n                                    Protected\n                                updateDeckProps\n                            \n                            \n                                    Protected\n                                updateLayers\n                            \n                            \n                                    Protected\n                                updateState\n                            \n                            \n                                    Protected\n                                updateViews\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(props: PictureInPictureViewerProps)\n                    \n                \n                        \n                            \n                                Defined in projects/ccf-image-viewer/src/lib/picture-in-picture-viewer.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        props\n                                                  \n                                                        \n                                                                        PictureInPictureViewerProps\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _channelConfigs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ImageViewer\n\n                                \n                            \n                        \n                            \n                                    Defined in         ImageViewer:78\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ImageViewer\n\n                                \n                            \n                        \n                            \n                                    Defined in         ImageViewer:69\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _loaders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Loader[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                            \n                                \n                                    Inherited from         ImageViewer\n\n                                \n                            \n                        \n                            \n                                    Defined in         ImageViewer:74\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _sources\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DataSource[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                            \n                                \n                                    Inherited from         ImageViewer\n\n                                \n                            \n                        \n                            \n                                    Defined in         ImageViewer:73\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ImageViewer\n\n                                \n                            \n                        \n                            \n                                    Defined in         ImageViewer:68\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            deck\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Deck\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ImageViewer\n\n                                \n                            \n                        \n                            \n                                    Defined in         ImageViewer:86\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            layerConfigs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LayerConfig[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                            \n                                \n                                    Inherited from         ImageViewer\n\n                                \n                            \n                        \n                            \n                                    Defined in         ImageViewer:83\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            layers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Layer[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                            \n                                \n                                    Inherited from         ImageViewer\n\n                                \n                            \n                        \n                            \n                                    Defined in         ImageViewer:82\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            props\n                            \n                        \n                    \n                \n                            \n                                \n                                    Inherited from         ImageViewer\n\n                                \n                            \n                        \n                            \n                                    Defined in         ImageViewer:64\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            states\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ImageViewer\n\n                                \n                            \n                        \n                            \n                                    Defined in         ImageViewer:84\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            views\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     View[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                            \n                                \n                                    Inherited from         ImageViewer\n\n                                \n                            \n                        \n                            \n                                    Defined in         ImageViewer:81\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            vivViews\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     VivView[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                            \n                                \n                                    Inherited from         ImageViewer\n\n                                \n                            \n                        \n                            \n                                    Defined in         ImageViewer:80\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Async\n                            createLayerConfigs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createLayerConfigs()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/picture-in-picture-viewer.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Async\n                            createVivViews\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createVivViews()\n                \n            \n\n\n            \n                \n                    Defined in projects/ccf-image-viewer/src/lib/picture-in-picture-viewer.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:99\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Abstract\n                            Async\n                            createLayerConfigs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createLayerConfigs()\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:169\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Abstract\n                            Async\n                            createVivViews\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createVivViews()\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:168\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finalize\n                        \n                        \n                    \n                \n            \n            \n                \nfinalize()\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:110\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initializeDeck\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initializeDeck(props)\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:212\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    props\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Deck\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            layerFilter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    layerFilter(undefined: LayerFilterArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @bind()\n                \n            \n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:244\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LayerFilterArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            onViewStateChange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onViewStateChange(undefined: OnViewStateChangeArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @bind()\n                \n            \n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:250\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                OnViewStateChangeArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            resetChannelConfigs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetChannelConfigs()\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:231\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setSize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSize(width: number, height: number)\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:114\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    width\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    height\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setSources\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSources(sources: DataSource[])\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:133\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sources\n                                    \n                                            DataSource[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateChannelConfigs\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateChannelConfigs(configs: Record>)\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:148\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configs\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            updateDeckProps\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDeckProps(props: Partial)\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:208\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    props\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            updateLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateLayers()\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:185\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            updateState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateState(args: ValueOrGenerator | >)\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:195\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                ValueOrGenerator | >\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            updateViews\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateViews()\n                \n            \n\n\n            \n                \n                    Inherited from         ImageViewer\n\n                \n            \n            \n                \n                        Defined in         ImageViewer:181\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DetailView, OverviewView, OverviewViewNewArgs, VivView } from '@hubmap/vitessce-image-viewer';\n\nimport { ImageViewer, ImageViewerProps, LayerConfig } from './image-viewer';\n\nexport type OverviewArgs = Omit;\nexport interface PictureInPictureViewerProps extends ImageViewerProps {\n  overview: OverviewArgs;\n}\n\nconst OVERVIEW_DEFAULTS: Partial = {\n  margin: 25,\n  scale: 0.15,\n  position: 'bottom-left'\n};\n\nexport class PictureInPictureViewer extends ImageViewer {\n  constructor(props: PictureInPictureViewerProps) {\n    super({\n      ...props,\n      overview: { ...OVERVIEW_DEFAULTS, ...props.overview }\n    });\n  }\n\n  protected async createVivViews(): Promise {\n    const { loaders, width, height, props: { initialViewState, overview } } = this;\n    if (loaders.length === 0) { return []; }\n\n    const detailView = new DetailView({\n      initialViewState: {\n        ...initialViewState,\n        id: 'detail',\n        width,\n        height\n      }\n    });\n\n    const overviewView = new OverviewView({\n      initialViewState: {\n        ...initialViewState,\n        id: 'overview',\n        width,\n        height\n      },\n      loader: loaders[0],\n      ...overview\n    });\n\n    return [detailView, overviewView];\n  }\n\n  protected async createLayerConfigs(): Promise {\n    const { loaders, channelConfigs } = this;\n    if (loaders.length === 0) { return []; }\n\n    const loaderSelection: { channel: string }[] = [];\n    const channelIsOn: boolean[] = [];\n    const colorValues: [number, number, number][] = [];\n    const sliderValues: [number, number][] = [];\n    for (const [key, { active, color, slider }] of Object.entries(channelConfigs)) {\n      loaderSelection.push({ channel: key });\n      channelIsOn.push(active);\n      colorValues.push(color);\n      sliderValues.push(slider);\n    }\n\n    const isRgb = loaders[0].isRgb;\n    return [\n      {\n        loader: this.loaders[0],\n        loaderSelection,\n        channelIsOn: isRgb ? [true, true, true] : channelIsOn,\n        colorValues: isRgb ? [[255, 0, 0], [0, 255, 0], [0, 0, 255]] : colorValues,\n        sliderValues: isRgb ? [[0, 255], [0, 255], [0, 255]] : sliderValues\n      }\n    ];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PictureInPictureViewerProps.html":{"url":"interfaces/PictureInPictureViewerProps.html","title":"interface - PictureInPictureViewerProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PictureInPictureViewerProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-image-viewer/src/lib/picture-in-picture-viewer.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ImageViewerProps\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        overview\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        overview\n                                    \n                                \n                                \n                                    \n                                        overview:         OverviewArgs\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OverviewArgs\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DetailView, OverviewView, OverviewViewNewArgs, VivView } from '@hubmap/vitessce-image-viewer';\n\nimport { ImageViewer, ImageViewerProps, LayerConfig } from './image-viewer';\n\nexport type OverviewArgs = Omit;\nexport interface PictureInPictureViewerProps extends ImageViewerProps {\n  overview: OverviewArgs;\n}\n\nconst OVERVIEW_DEFAULTS: Partial = {\n  margin: 25,\n  scale: 0.15,\n  position: 'bottom-left'\n};\n\nexport class PictureInPictureViewer extends ImageViewer {\n  constructor(props: PictureInPictureViewerProps) {\n    super({\n      ...props,\n      overview: { ...OVERVIEW_DEFAULTS, ...props.overview }\n    });\n  }\n\n  protected async createVivViews(): Promise {\n    const { loaders, width, height, props: { initialViewState, overview } } = this;\n    if (loaders.length === 0) { return []; }\n\n    const detailView = new DetailView({\n      initialViewState: {\n        ...initialViewState,\n        id: 'detail',\n        width,\n        height\n      }\n    });\n\n    const overviewView = new OverviewView({\n      initialViewState: {\n        ...initialViewState,\n        id: 'overview',\n        width,\n        height\n      },\n      loader: loaders[0],\n      ...overview\n    });\n\n    return [detailView, overviewView];\n  }\n\n  protected async createLayerConfigs(): Promise {\n    const { loaders, channelConfigs } = this;\n    if (loaders.length === 0) { return []; }\n\n    const loaderSelection: { channel: string }[] = [];\n    const channelIsOn: boolean[] = [];\n    const colorValues: [number, number, number][] = [];\n    const sliderValues: [number, number][] = [];\n    for (const [key, { active, color, slider }] of Object.entries(channelConfigs)) {\n      loaderSelection.push({ channel: key });\n      channelIsOn.push(active);\n      colorValues.push(color);\n      sliderValues.push(slider);\n    }\n\n    const isRgb = loaders[0].isRgb;\n    return [\n      {\n        loader: this.loaders[0],\n        loaderSelection,\n        channelIsOn: isRgb ? [true, true, true] : channelIsOn,\n        colorValues: isRgb ? [[255, 0, 0], [0, 255, 0], [0, 0, 255]] : colorValues,\n        sliderValues: isRgb ? [[0, 255], [0, 255], [0, 255]] : sliderValues\n      }\n    ];\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PureImageViewerLayer.html":{"url":"interfaces/PureImageViewerLayer.html","title":"interface - PureImageViewerLayer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PureImageViewerLayer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/image-viewer-layer.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        brightness\n                                \n                                \n                                        color\n                                \n                                \n                                        colorScheme\n                                \n                                \n                                        customizedColor\n                                \n                                \n                                        defaultOrder\n                                \n                                \n                                        id\n                                \n                                \n                                        label\n                                \n                                \n                                        selected\n                                \n                                \n                                        selectionOrder\n                                \n                                \n                                        transparency\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        brightness\n                                    \n                                \n                                \n                                    \n                                        brightness:     [number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        colorScheme\n                                    \n                                \n                                \n                                    \n                                        colorScheme:         ColorScheme\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ColorScheme\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        customizedColor\n                                    \n                                \n                                \n                                    \n                                        customizedColor:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultOrder\n                                    \n                                \n                                \n                                    \n                                        defaultOrder:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                    \n                                \n                                \n                                    \n                                        selected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectionOrder\n                                    \n                                \n                                \n                                    \n                                        selectionOrder:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transparency\n                                    \n                                \n                                \n                                    \n                                        transparency:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ColorScheme } from './color-scheme';\n\nexport interface PureImageViewerLayer {\n  id: string;\n  label: string;\n\n  colorScheme: ColorScheme;\n  color: string;\n  brightness: [number, number];\n  transparency: number;\n\n  selected: boolean;\n  customizedColor: boolean;\n  selectionOrder: number;\n  defaultOrder: number;\n}\n\nexport type ImageViewerLayerRequiredArgNames = 'id' | 'colorScheme';\nexport type ImageViewerLayerArgs =\n  Pick &\n  Partial>;\n\nexport class ImageViewerLayer implements PureImageViewerLayer {\n  id: string;\n  label: string;\n\n  colorScheme: ColorScheme;\n  color: string;\n  brightness: [number, number] = [20, 60];\n  transparency = 100;\n\n  selected = false;\n  customizedColor = false;\n  selectionOrder = 0;\n  defaultOrder = -1;\n\n  constructor(data: ImageViewerLayerArgs) {\n    Object.assign(this, {\n      label: data.id,\n      color: data.colorScheme.colors[0]\n    }, data);\n  }\n\n  /**\n   * Dynamically creates a background style based on the layer's color or color scheme\n   */\n  get background(): string {\n    if (this.colorScheme.type === 'discrete') {\n      return this.color;\n    }\n\n    const colors = this.colorScheme.colors;\n    const positions = this.colorScheme.positions;\n\n    let gradient = 'linear-gradient(to right, ';\n    colors.forEach((color, index) => {\n      gradient += `${color} ${positions[index] * 100}%`;\n      if (index  225 ? true : false;\n  }\n\n  /**\n   * Determines whether the color icon is dark enough to require a border (dark mode only)\n   */\n  isDark(): boolean {\n    return this.getBrightness() \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResultsBrowserComponent.html":{"url":"components/ResultsBrowserComponent.html","title":"component - ResultsBrowserComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ResultsBrowserComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/results-browser/results-browser/results-browser.component.ts\n\n\n    \n        Description\n    \n    \n        ResultsBrowser is the container component in charge of rendering the label and stats of\nthe results as well as handling the virtual scrolling and click emitters of\nResultsBrowserItems.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-results-browser\n            \n\n            \n                styleUrls\n                ./results-browser.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./results-browser.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                atScrollBottom\n                            \n                            \n                                selectedResult\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onScroll\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                aggregateData\n                            \n                            \n                                data\n                            \n                            \n                                dataLoading\n                            \n                            \n                                resultLabel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                resultClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        aggregateData\n                    \n                \n                \n                    \n                        Type :         AggregateResult[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/results-browser/results-browser/results-browser.component.ts:25\n                            \n                        \n                \n                    \n                        Input used to add a list of stats at the top the results browser.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         ListResult[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/results-browser/results-browser/results-browser.component.ts:20\n                            \n                        \n                \n                    \n                        Input array of items used to generate the list of results in the results browser.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dataLoading\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/results-browser/results-browser/results-browser.component.ts:35\n                            \n                        \n                \n                    \n                        Whether or not the state is currently loading in data.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resultLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/results-browser/results-browser/results-browser.component.ts:30\n                            \n                        \n                \n                    \n                        Input allowing the title of the result browser to be set outside of the component.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        resultClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/results-browser/results-browser/results-browser.component.ts:41\n                            \n                        \n                \n                    \n                        Output emitting the result that was clicked on and its relevant information.\nUsed for opening and rendering the result viewer.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onScroll\n                        \n                        \n                    \n                \n            \n            \n                \nonScroll(event: UIEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/results-browser/results-browser/results-browser.component.ts:59\n                \n            \n\n\n            \n                \n                    Handles the scroll event to detect when scroll is at the bottom.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            UIEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scroll event.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            atScrollBottom\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/results-browser/results-browser/results-browser.component.ts:47\n                            \n                        \n\n                \n                    \n                        Keeps track of whether or not the virtual scroll viewport is scrolled all the way to the bottom.\nUsed to determine whether or not to render the gradient at the bottom.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedResult\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ListResult\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/results-browser/results-browser/results-browser.component.ts:52\n                            \n                        \n\n                \n                    \n                        Keeps track of the selected result for highlighting\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { AggregateResult, ListResult } from 'ccf-database';\n\n\n/**\n * ResultsBrowser is the container component in charge of rendering the label and stats of\n * the results as well as handling the virtual scrolling and click emitters of\n * ResultsBrowserItems.\n */\n@Component({\n  selector: 'ccf-results-browser',\n  templateUrl: './results-browser.component.html',\n  styleUrls: ['./results-browser.component.scss']\n})\nexport class ResultsBrowserComponent {\n\n  /**\n   * Input array of items used to generate the list of results in the results browser.\n   */\n  @Input() data: ListResult[];\n\n  /**\n   * Input used to add a list of stats at the top the results browser.\n   */\n  @Input() aggregateData: AggregateResult[];\n\n  /**\n   * Input allowing the title of the result browser to be set outside of the component.\n   */\n  @Input() resultLabel: string;\n\n  /**\n   * Whether or not the state is currently loading in data.\n   */\n  @Input() dataLoading: boolean;\n\n  /**\n   * Output emitting the result that was clicked on and its relevant information.\n   * Used for opening and rendering the result viewer.\n   */\n  @Output() resultClicked = new EventEmitter();\n\n  /**\n   * Keeps track of whether or not the virtual scroll viewport is scrolled all the way to the bottom.\n   * Used to determine whether or not to render the gradient at the bottom.\n   */\n  atScrollBottom = false;\n\n  /**\n   * Keeps track of the selected result for highlighting\n   */\n  selectedResult: ListResult;\n\n  /**\n   * Handles the scroll event to detect when scroll is at the bottom.\n   *\n   * @param event The scroll event.\n   */\n  onScroll(event: UIEvent): void {\n    if (!event.target) {\n      return;\n    }\n\n    const { clientHeight, scrollHeight, scrollTop } = event.target as Element;\n    const diff = scrollHeight - scrollTop - clientHeight;\n    this.atScrollBottom = diff \n    \n\n    \n        \n  \n    {{ resultLabel }}\n    \n      {{stat.count}}\n      {{stat.label}}\n    \n  \n\n  \n    \n      \n      \n    \n  \n  \n\n\n    \n\n    \n                \n                    ./results-browser.component.scss\n                \n                .results-browser-container {\n  display: flex;\n  flex-direction: column;\n  height: calc(100% - 7rem);\n  padding: 0.75rem 1.5rem 1.5rem 1.5rem;\n\n  .stat-box {\n    margin-bottom: 1.5rem;\n    line-height: 1.25;\n\n    #title {\n      margin-bottom: 0.75rem;\n      font-weight: bold;\n    }\n\n    .stat-row {\n      display: flex;\n      flex-direction: row;\n\n      .stat-value {\n        margin-right: 1rem;\n        width: 5.5rem;\n        text-align: right;\n      }\n    }\n  }\n\n  .results-browser-list {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    overflow-y: scroll;\n    scrollbar-width: thin;\n  }\n\n  .scroll-gradient {\n    position: absolute;\n    height: 9rem;\n    width: 95%;\n    bottom: 0;\n    pointer-events: none;\n\n    &.hidden {\n      display: none;\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ resultLabel }}          {{stat.count}}      {{stat.label}}                                '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ResultsBrowserComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResultsBrowserItemComponent.html":{"url":"components/ResultsBrowserItemComponent.html","title":"component - ResultsBrowserItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ResultsBrowserItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/results-browser/results-browser-item/results-browser-item.component.ts\n\n\n    \n        Description\n    \n    \n        Component in charge of rendering the individual result browser items that are\nused in the ResultsBrowserComponent.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-results-browser-item\n            \n\n            \n                styleUrls\n                ./results-browser-item.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./results-browser-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                openResult\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                openImageViewer\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         ListResult\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/results-browser/results-browser-item/results-browser-item.component.ts:19\n                            \n                        \n                \n                    \n                        Input object containing the label, download, click action,\nand image information for the component.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        openImageViewer\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/results-browser/results-browser-item/results-browser-item.component.ts:24\n                            \n                        \n                \n                    \n                        Output used to pass up the intent to open the ImageViewer\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            openResult\n                        \n                        \n                    \n                \n            \n            \n                \nopenResult()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/results-browser/results-browser-item/results-browser-item.component.ts:30\n                \n            \n\n\n            \n                \n                    Decided which action to take based on the result's resultType property\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ListResult } from 'ccf-database';\n\n\n/**\n * Component in charge of rendering the individual result browser items that are\n * used in the ResultsBrowserComponent.\n */\n@Component({\n  selector: 'ccf-results-browser-item',\n  templateUrl: './results-browser-item.component.html',\n  styleUrls: ['./results-browser-item.component.scss']\n})\nexport class ResultsBrowserItemComponent {\n  /**\n   * Input object containing the label, download, click action,\n   * and image information for the component.\n   */\n  @Input() data: ListResult;\n\n  /**\n   * Output used to pass up the intent to open the ImageViewer\n   */\n  @Output() openImageViewer = new EventEmitter();\n\n  /**\n   * Decided which action to take based on the result's resultType property\n   * @param result the result which was clicked on\n   */\n  openResult(): void {\n    switch (this.data.resultType) {\n      case ('image_viewer'): {\n        // Open the image-viewer\n        this.openImageViewer.emit();\n        break;\n      }\n      case ('external_link'): {\n        // Open link in new tab\n        window.open(this.data.resultUrl, '_blank');\n        break;\n      }\n      case ('local_link'): {\n        // Open link in current tab\n        window.open(this.data.resultUrl, '_self');\n        break;\n      }\n      default: {\n        // When no resultType is set, image viewer is the default\n        this.openImageViewer.emit();\n        break;\n      }\n    }\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n    \n      \n    \n\n    \n      {{ data.label }}\n      {{ info }}\n    \n  \n\n  \n    \n      cloud_download\n    \n  \n  \n    \n      cloud_download\n    \n  \n\n\n    \n\n    \n                \n                    ./results-browser-item.component.scss\n                \n                @use '~@angular/material/theming' as *;\n\n.result-item {\n    border-top: 1px solid;\n    padding: .5rem;\n    display: flex;\n    flex-direction: row;\n    height: 4rem;\n\n    .result-item-click-area {\n        display: flex;\n        cursor: pointer;\n\n        .result-image {\n            width: 5rem;\n            height: 100%;\n            object-fit: cover;\n        }\n\n        .result-image-placeholder {\n            width: 5rem;\n        }\n\n        .result-description {\n            width: 15rem;\n            font-size: .625rem;\n            margin-left: 1rem;\n            margin-right: 1rem;\n            line-height: 1.25;\n\n            div {\n                width: 10rem;\n            }\n\n            .description-label {\n                font-weight: bold !important;\n            }\n\n            .description-data {\n                text-overflow: ellipsis;\n                overflow: hidden;\n                white-space: nowrap;\n                font-weight: lighter;\n            }\n        }\n    }\n\n    .result-download {\n        width: 1.5rem;\n\n        .download {\n            cursor: pointer;\n        }\n    }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                        {{ data.label }}      {{ info }}                  cloud_download                  cloud_download      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ResultsBrowserItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResultsBrowserItemModule.html":{"url":"modules/ResultsBrowserItemModule.html","title":"module - ResultsBrowserItemModule","body":"\n                   \n\n\n\n\n    Modules\n    ResultsBrowserItemModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResultsBrowserItemModule\n\n\n\ncluster_ResultsBrowserItemModule_declarations\n\n\n\ncluster_ResultsBrowserItemModule_exports\n\n\n\n\nResultsBrowserItemComponent\n\nResultsBrowserItemComponent\n\n\n\nResultsBrowserItemModule\n\nResultsBrowserItemModule\n\nResultsBrowserItemModule -->\n\nResultsBrowserItemComponent->ResultsBrowserItemModule\n\n\n\n\n\nResultsBrowserItemComponent \n\nResultsBrowserItemComponent \n\nResultsBrowserItemComponent  -->\n\nResultsBrowserItemModule->ResultsBrowserItemComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/results-browser/results-browser-item/results-browser-item.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ResultsBrowserItemComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResultsBrowserItemComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResultsBrowserItemComponent } from './results-browser-item.component';\nimport { MatIconModule } from '@angular/material/icon';\n\n\n@NgModule({\n  declarations: [ResultsBrowserItemComponent],\n  imports: [\n    CommonModule,\n    MatIconModule\n  ],\n  exports: [ResultsBrowserItemComponent]\n})\nexport class ResultsBrowserItemModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResultsBrowserModule.html":{"url":"modules/ResultsBrowserModule.html","title":"module - ResultsBrowserModule","body":"\n                   \n\n\n\n\n    Modules\n    ResultsBrowserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResultsBrowserModule\n\n\n\ncluster_ResultsBrowserModule_declarations\n\n\n\ncluster_ResultsBrowserModule_imports\n\n\n\ncluster_ResultsBrowserModule_exports\n\n\n\n\nResultsBrowserComponent\n\nResultsBrowserComponent\n\n\n\nResultsBrowserModule\n\nResultsBrowserModule\n\nResultsBrowserModule -->\n\nResultsBrowserComponent->ResultsBrowserModule\n\n\n\n\n\nResultsBrowserComponent \n\nResultsBrowserComponent \n\nResultsBrowserComponent  -->\n\nResultsBrowserModule->ResultsBrowserComponent \n\n\n\n\n\nResultsBrowserItemModule\n\nResultsBrowserItemModule\n\nResultsBrowserModule -->\n\nResultsBrowserItemModule->ResultsBrowserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/results-browser/results-browser/results-browser.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ResultsBrowserComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResultsBrowserItemModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResultsBrowserComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ResultsBrowserItemModule } from '../results-browser-item/results-browser-item.module';\nimport { ResultsBrowserComponent } from './results-browser.component';\n\nimport {ScrollingModule} from '@angular/cdk/scrolling';\n\n\n@NgModule({\n  declarations: [ResultsBrowserComponent],\n  imports: [\n    CommonModule,\n    ResultsBrowserItemModule,\n    ScrollingModule\n  ],\n  exports: [ResultsBrowserComponent]\n})\nexport class ResultsBrowserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SchemeDropdownComponent.html":{"url":"components/SchemeDropdownComponent.html","title":"component - SchemeDropdownComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SchemeDropdownComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/scheme-dropdown/scheme-dropdown.component.ts\n\n\n    \n        Description\n    \n    \n        Scheme dropdown menu (for the Layers section)\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-scheme-dropdown\n            \n\n            \n                styleUrls\n                ./scheme-dropdown.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./scheme-dropdown.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                schemeIdx\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                schemeChanged\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                colorScheme\n                            \n                            \n                                schemeOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                schemeChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Type :         ColorScheme\n\n                    \n                \n                \n                    \n                        Default value : DEFAULT_COLOR_SCHEMES[0]\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/scheme-dropdown/scheme-dropdown.component.ts:23\n                            \n                        \n                \n                    \n                        Current color scheme\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        schemeOptions\n                    \n                \n                \n                    \n                        Type :     ColorScheme[]\n\n                    \n                \n                \n                    \n                        Default value : DEFAULT_COLOR_SCHEMES\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/scheme-dropdown/scheme-dropdown.component.ts:18\n                            \n                        \n                \n                    \n                        All scheme options available\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        schemeChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/scheme-dropdown/scheme-dropdown.component.ts:28\n                            \n                        \n                \n                    \n                        Emits ColorSchemeSelection of a selected scheme\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/scheme-dropdown/scheme-dropdown.component.ts:38\n                \n            \n\n\n            \n                \n                    Filters out scheme options to include only discrete schemes\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            schemeChanged\n                        \n                        \n                    \n                \n            \n            \n                \nschemeChanged(idx: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/scheme-dropdown/scheme-dropdown.component.ts:46\n                \n            \n\n\n            \n                \n                    Updates the current scheme index and emits the currently selected scheme\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    idx\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            schemeIdx\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/scheme-dropdown/scheme-dropdown.component.ts:33\n                            \n                        \n\n                \n                    \n                        Index of the currently selected scheme\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { ColorScheme, DEFAULT_COLOR_SCHEMES } from '../../modules/color-scheme/color-schemes';\n\n/**\n * Scheme dropdown menu (for the Layers section)\n */\n@Component({\n  selector: 'ccf-scheme-dropdown',\n  templateUrl: './scheme-dropdown.component.html',\n  styleUrls: ['./scheme-dropdown.component.scss']\n})\nexport class SchemeDropdownComponent implements OnInit {\n\n  /**\n   * All scheme options available\n   */\n  @Input() schemeOptions: ColorScheme[] = DEFAULT_COLOR_SCHEMES;\n\n  /**\n   * Current color scheme\n   */\n  @Input() colorScheme: ColorScheme = DEFAULT_COLOR_SCHEMES[0];\n\n  /**\n   * Emits ColorSchemeSelection of a selected scheme\n   */\n  @Output() schemeChange = new EventEmitter();\n\n  /**\n   * Index of the currently selected scheme\n   */\n  schemeIdx = 0;\n\n  /**\n   * Filters out scheme options to include only discrete schemes\n   */\n  ngOnInit(): void {\n    this.schemeOptions = this.schemeOptions.filter(scheme => scheme.type === 'discrete');\n    this.schemeChanged(0);\n  }\n\n  /**\n   * Updates the current scheme index and emits the currently selected scheme\n   */\n  schemeChanged(idx: number): void {\n    this.colorScheme = this.schemeOptions[idx];\n    this.schemeIdx = idx;\n    this.schemeChange.emit(this.colorScheme);\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n      \n    \n    \n      \n        \n          \n        \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./scheme-dropdown.component.scss\n                \n                .container {\n  display: flex;\n  justify-content: flex-end;\n  width: 104%;\n  height: 3rem;\n\n  mat-form-field {\n    width: 9rem;\n\n    ::ng-deep .mat-form-field-wrapper {\n      .mat-form-field-flex {\n        .mat-form-field-infix {\n          border: none;\n        }\n      }\n    }\n  }\n}\n\n// Disable label resizing effect\n::ng-deep .mat-form-field-label {\n  transform: none !important;\n}\n\n::ng-deep .scheme-option-panel {\n  box-shadow: 0.4rem 0.4rem 0.8rem 0rem #000000;\n  border-width: 1px;\n  border-style: solid;\n  position: absolute;\n  right: -10rem;\n  top: -1rem;\n  display: flex;\n  flex-direction: column;\n  width: 12rem;\n  height: 9rem;\n\n  mat-option:first-child {\n    margin-top: 0.75rem;\n  }\n  mat-option:last-of-type {\n    margin-bottom: 0.75rem;\n  }\n\n  mat-option {\n    .mat-option-text {\n      display: flex;\n      justify-content: center;\n\n      .mat-radio-checked {\n        .mat-radio-label {\n          .mat-radio-container {\n            .mat-radio-outer-circle {\n              border-width: 0 !important;\n            }\n          }\n        }\n      }\n\n      .scheme-radio-button {\n        .mat-radio-label {\n          .mat-radio-container {\n            width: 1rem;\n            height: 1rem;\n            .mat-radio-outer-circle {\n              width: 1rem;\n              height: 1rem;\n              border-width: 1px; \n              border-style: solid;\n            }\n            .mat-radio-inner-circle {\n              width: 1rem;\n              height: 1rem;\n            }\n          }\n          .mat-radio-label-content {\n            padding-left: 1rem;\n          }\n        }\n\n        .swatch {\n          display: flex;\n          width: 7rem;\n          height: 1rem;\n\n          :hover {\n            cursor: pointer;\n          }\n        }\n      }\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SchemeDropdownComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SchemeDropdownModule.html":{"url":"modules/SchemeDropdownModule.html","title":"module - SchemeDropdownModule","body":"\n                   \n\n\n\n\n    Modules\n    SchemeDropdownModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SchemeDropdownModule\n\n\n\ncluster_SchemeDropdownModule_declarations\n\n\n\ncluster_SchemeDropdownModule_imports\n\n\n\ncluster_SchemeDropdownModule_exports\n\n\n\n\nSchemeDropdownComponent\n\nSchemeDropdownComponent\n\n\n\nSchemeDropdownModule\n\nSchemeDropdownModule\n\nSchemeDropdownModule -->\n\nSchemeDropdownComponent->SchemeDropdownModule\n\n\n\n\n\nSchemeDropdownComponent \n\nSchemeDropdownComponent \n\nSchemeDropdownComponent  -->\n\nSchemeDropdownModule->SchemeDropdownComponent \n\n\n\n\n\nColorBarModule\n\nColorBarModule\n\nSchemeDropdownModule -->\n\nColorBarModule->SchemeDropdownModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/scheme-dropdown/scheme-dropdown.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            SchemeDropdownComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ColorBarModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SchemeDropdownComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport { ColorBarModule } from '../../modules/color-scheme/color-bar/color-bar.module';\nimport { SchemeDropdownComponent } from './scheme-dropdown.component';\n\n@NgModule({\n  declarations: [SchemeDropdownComponent],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatRadioModule,\n    ColorBarModule\n  ],\n  exports: [SchemeDropdownComponent]\n})\nexport class SchemeDropdownModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SearchResult.html":{"url":"interfaces/SearchResult.html","title":"interface - SearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/ontology-search/ontology-search.service.ts\n        \n\n            \n                Description\n            \n            \n                Search result interface type for the search results\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        displayLabel\n                                \n                                \n                                        index\n                                \n                                \n                                        node\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayLabel\n                                    \n                                \n                                \n                                    \n                                        displayLabel:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    label to be displayed in the view \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ensures order of search-results \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                    \n                                \n                                \n                                    \n                                        node:         OntologyNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OntologyNode\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    instance of OntologyNode, provides data associated with a search result \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Immutable } from '@ngxs-labs/data/typings';\nimport { Store } from '@ngxs/store';\nimport { at, find, forEach, keyBy, map as loMap, partial } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\nimport { JsonOntologyNode, jsonToOntologyNode } from '../../models/json-ontology';\nimport { OntologyNode } from '../../models/ontology-node';\nimport { OntologyState, OntologyStateModel } from '../../store/ontology/ontology.state';\n\n\n/**\n * Search result interface type for the search results\n */\nexport interface SearchResult {\n  /** ensures order of search-results */\n  index: number;\n\n  /** label to be displayed in the view */\n  displayLabel: string[];\n\n  /**  instance of OntologyNode, provides data associated with a search result */\n  node: OntologyNode;\n}\n\n/** Type of function for getting child nodes from a parent node. */\nexport type GetChildrenFunc = (o: OntologyNode) => OntologyNode[];\n\n/**\n * Links all nodes to their parents.\n *\n * @param nodeMap The hash table of nodes.\n */\nexport function linkChildren(nodeMap: { [id: string]: OntologyNode }): void {\n  // Add temporary fake node to simplify logic as root won't need a special case\n  // This is also used later to find the root node\n  nodeMap[''] = { parent: '', children: [] } as unknown as OntologyNode;\n  forEach(nodeMap, ({ id, parent }) => nodeMap[parent].children.push(id));\n}\n\n/**\n * Creates an ontology state.\n *\n * @param nodeMap The node hash table.\n * @returns The ontology state model.\n */\nexport function createModel(nodeMap: { [id: string]: OntologyNode }): OntologyStateModel {\n  const root = find(nodeMap[''].children) as string;\n\n  // Remove fake node inserted in linkChildren\n  delete nodeMap[''];\n\n  return { root, nodes: nodeMap };\n}\n\n/**\n * Creates a new tree with only the specified organs and their subtrees.\n *\n * @param model The full ontology tree.\n * @param organIds The identifiers of the organs to keep.\n * @returns A new ontology tree.\n */\nfunction pruneModel(model: OntologyStateModel, organIds: string[]): OntologyStateModel {\n  const body: OntologyNode = {\n    id: 'http://purl.obolibrary.org/obo/UBERON_0013702',\n    label: 'body',\n    parent: '',\n    children: organIds,\n    synonymLabels: []\n  };\n  const organNodes = at(model.nodes, organIds);\n  const prunedNodes = { [body.id]: body };\n\n  forEach(organNodes, node => node.parent = body.id);\n  forEach(organNodes, node => addSubtree(model.nodes, prunedNodes, node));\n\n  return { root: body.id, nodes: prunedNodes };\n}\n\n/**\n * Adds all subtree nodes to an accumulator object.\n *\n * @param nodes The original tree of nodes.\n * @param acc The accumulated tree of nodes.\n * @param current The node whose subtree should be added.\n */\nexport function addSubtree(\n  nodes: { [id: string]: OntologyNode },\n  acc: { [id: string]: OntologyNode },\n  current: OntologyNode\n): void {\n  acc[current.id] = current;\n  forEach(current.children, id => addSubtree(nodes, acc, nodes[id]));\n}\n\n/**\n * Injectable OntologySearchService responsible for search result computations\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class OntologySearchService {\n  /** Root node in ontology. */\n  rootNode: Observable>;\n\n  /**\n   * Creates an instance of ontology search service.\n   *\n   * @param http The http requests service.\n   * @param store The global data store.\n   * @param ontologyState The global ontology state.\n   */\n  constructor(private http: HttpClient, private store: Store, private ontologyState: OntologyState) {\n    this.rootNode = this.ontologyState.rootNode$;\n    this.getChildren = this.getChildren.bind(this) as GetChildrenFunc;\n  }\n\n  /**\n   * Loads ontology.\n   */\n  loadOntology(): void {\n    const jsonOntology = this.http.get(environment.ontologyUrl, { responseType: 'json' });\n    const model = jsonOntology.pipe(\n      map(ontology => loMap(ontology, jsonToOntologyNode)),\n      map(nodes => keyBy(nodes, 'id')),\n      tap(linkChildren),\n      map(createModel),\n      map(partial(pruneModel, partial.placeholder, environment.organNodes))\n    );\n\n    model.subscribe(ontology => this.ontologyState.setOntology(ontology));\n  }\n\n  /**\n   * Searches the ontology with the search-term\n   * @param value the search term\n   * @returns an array of search-results\n   */\n  filter(value: string): Observable {\n    return this.ontologyState.nodes$.pipe(\n      map(nodes => this.lookup(nodes, value.toLowerCase()))\n    );\n  }\n\n  /**\n   * looks up ontology nodes and composes search results\n   * @param nodes Ontology nodes\n   * @param searchValue search text in lower case\n   * @returns search results\n   */\n  private lookup(nodes: Immutable[], searchValue: string): SearchResult[] {\n    const searchResults = new Map();\n\n    if (nodes) {\n      nodes.forEach((node: OntologyNode) => {\n        const condition = node.label.toLowerCase().includes(searchValue);\n\n        if (condition && !searchResults.get(node.id)) {\n          searchResults.set(node.id, {\n            index: this.getIndexOfMatch(node.label, searchValue),\n            displayLabel: this.formatLabel(node.label, searchValue),\n            node\n          });\n        } else {\n          const match = node.synonymLabels.find((label) => label.toLowerCase().includes(searchValue));\n\n          if (match && !searchResults.get(node.id)) {\n            searchResults.set(node.id, {\n              index: this.getIndexOfMatch(node.label + ' (' + match + ')', searchValue),\n              displayLabel: this.formatLabel(node.label + ' (' + match + ')', searchValue),\n              node\n            });\n          }\n        }\n      });\n    }\n\n    return Array.from(searchResults.values());\n  }\n\n  /**\n   * Gets index of match in the ontology label\n   * @param label the provided ontology node label or synonym label\n   * @param searchValue the searched text in lower case\n   * @returns the index of the match in the label\n   */\n  getIndexOfMatch(label: string, searchValue: string): number {\n    return label.toLowerCase().indexOf(searchValue);\n  }\n\n  /**\n   * Formats label based on where the search-term was found in the OntologyNode\n   * @param label label or first synonym-label of OntologyNode which has the search-term\n   * @param searchValue search-term\n   * @returns an array in the form of [prefix, search-term, suffix]\n   */\n  formatLabel(label: string, searchValue: string): string[] {\n    const index = this.getIndexOfMatch(label, searchValue);\n    return [\n      label.substr(0, index),\n      label.substr(index, searchValue.length),\n      label.substr(index + searchValue.length, label.length)\n    ];\n  }\n\n  /**\n   * Fetches the children of an ontology node.\n   * Note: This can be called without a reference to `this`.\n   *\n   * @param node The node for which to get children.\n   * @returns An array of children, empty if the node has no children.\n   */\n  getChildren(node: OntologyNode): OntologyNode[] {\n    const { nodes } = this.store.selectSnapshot(OntologyState);\n    return at(nodes, node.children);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SearchableItem.html":{"url":"interfaces/SearchableItem.html","title":"interface - SearchableItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SearchableItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/interfaces.ts\n        \n\n            \n                Description\n            \n            \n                Item that can be searched for. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        age\n                                \n                                \n                                            Optional\n                                        bmi\n                                \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        ontologyTerms\n                                \n                                \n                                            Optional\n                                        sex\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        age\n                                    \n                                \n                                \n                                    \n                                        age:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Age. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bmi\n                                    \n                                \n                                \n                                    \n                                        bmi:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    BMI. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ontologyTerms\n                                    \n                                \n                                \n                                    \n                                        ontologyTerms:     Set\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Set\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Ontology terms. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sex\n                                    \n                                \n                                \n                                    \n                                        sex:     \"Male\" | \"Female\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"Male\" | \"Female\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Gender. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AggregateResult {\n  /** Queried field. */\n  label: string;\n  /** Aggregate value. */\n  count: string | number;\n}\n\n/** Result for list of tissues. */\nexport interface ListResult {\n  /** Identifier. */\n  '@id': string;\n  /** Type string. */\n  '@type': 'ListResult';\n  /** Identifier. */\n  id: string;\n  /** Tissue label. */\n  label: string;\n  /** Short description. */\n  shortInfo?: string[];\n  /** Small icon url. */\n  thumbnailUrl?: string;\n  /** Url for data download. */\n  downloadUrl?: string;\n  /** Description of data download. */\n  downloadTooltip?: string;\n  /** Result url. */\n  resultUrl?: string;\n  /** Type of result url. */\n  resultType?: 'external_link' | 'local_link' | 'image_viewer';\n  /** If the result should be highlighted */\n  highlighted?: boolean;\n}\n\n/** Data for image viewer display. */\nexport interface ImageViewerData {\n  /** Identifier. */\n  '@id': string;\n  /** Type string. */\n  '@type': 'ImageViewerData';\n  /** Identifier. */\n  id: string;\n  /** Image label. */\n  label: string;\n  /** Containing organ name. */\n  organName: string;\n  /** Other metadata. */\n  metadata: { label: string, value: string }[];\n}\n\n/** Item that can be searched for. */\nexport interface SearchableItem {\n  /** Identifier. */\n  id: string;\n  /** Gender. */\n  sex?: 'Male' | 'Female';\n  /** Age. */\n  age?: number;\n  /** BMI. */\n  bmi?: number;\n  /** Ontology terms. */\n  ontologyTerms?: Set;\n}\n\n/** Options applied during queries. */\nexport interface Filter {\n  /** Gender. */\n  sex: 'Both' | 'Male' | 'Female';\n  /** Age range. */\n  ageRange: [number, number];\n  /** BMI range. */\n  bmiRange: [number, number];\n  /** TMC. */\n  tmc: string[];\n  /** Technologies. */\n  technologies: string[];\n  /** Ontology terms. */\n  ontologyTerms: string[];\n  /** Entities to be highlighted */\n  highlightedEntities?: string[];\n  /** Whether it has a spatial entity. */\n  hasSpatialEntity?: boolean;\n  /** Include optional debugging information */\n  debug?: boolean;\n}\n\n/** Backend query interface. */\nexport interface DataSource {\n  /** Query list items. */\n  getListResults(filter?: Filter): Promise;\n  /** Query aggregate items. */\n  getAggregateResults(filter?: Filter): Promise;\n  /** Query a specific image. */\n  getImageViewerData(iri: string): Promise;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpatialEntity.html":{"url":"interfaces/SpatialEntity.html","title":"interface - SpatialEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpatialEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/spatial-types.ts\n        \n\n            \n                Description\n            \n            \n                A spatial entity. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        @id\n                                \n                                \n                                        @type\n                                \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        creation_date\n                                \n                                \n                                            Optional\n                                        creator\n                                \n                                \n                                            Optional\n                                        creator_first_name\n                                \n                                \n                                            Optional\n                                        creator_last_name\n                                \n                                \n                                            Optional\n                                        creator_orcid\n                                \n                                \n                                        dimension_units\n                                \n                                \n                                            Optional\n                                        entityId\n                                \n                                \n                                            Optional\n                                        label\n                                \n                                \n                                            Optional\n                                        object\n                                \n                                \n                                        x_dimension\n                                \n                                \n                                        y_dimension\n                                \n                                \n                                        z_dimension\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        @id\n                                    \n                                \n                                \n                                    \n                                        @id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @type\n                                    \n                                \n                                \n                                    \n                                        @type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Type name. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:     [number, number, number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number, number, number]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Coloring. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creation_date\n                                    \n                                \n                                \n                                    \n                                        creation_date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Creation date. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator\n                                    \n                                \n                                \n                                    \n                                        creator:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Creator. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator_first_name\n                                    \n                                \n                                \n                                    \n                                        creator_first_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Creator first name. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator_last_name\n                                    \n                                \n                                \n                                    \n                                        creator_last_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Creator last name. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator_orcid\n                                    \n                                \n                                \n                                    \n                                        creator_orcid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Creator identifier. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimension_units\n                                    \n                                \n                                \n                                    \n                                        dimension_units:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Units dimensions are in. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        entityId\n                                    \n                                \n                                \n                                    \n                                        entityId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    IRI of the Entity this Spatial Entity represents \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Entity label. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        object\n                                    \n                                \n                                \n                                    \n                                        object:         SpatialObjectReference\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpatialObjectReference\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Data references. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x_dimension\n                                    \n                                \n                                \n                                    \n                                        x_dimension:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    X-dimension. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y_dimension\n                                    \n                                \n                                \n                                    \n                                        y_dimension:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Y-dimension. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        z_dimension\n                                    \n                                \n                                \n                                    \n                                        z_dimension:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Z-dimension. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SpatialObjectReference {\n  /** Identifier. */\n  '@id': string;\n  /** Type name. */\n  '@type': 'SpatialObjectReference';\n  /** Data file name. */\n  file: string;\n  /** Data format. */\n  file_format: string;\n  /** File subpath. */\n  file_subpath?: string;\n}\n\n/** A spatial entity. */\nexport interface SpatialEntity {\n  /** Identifier. */\n  '@id': string;\n  /** Type name. */\n  '@type': 'SpatialEntity';\n  /** IRI of the Entity this Spatial Entity represents */\n  entityId?: string;\n  /** Entity label. */\n  label?: string;\n  /** Creator. */\n  creator?: string;\n  /** Creator first name. */\n  creator_first_name?: string;\n  /** Creator last name. */\n  creator_last_name?: string;\n  /** Creator identifier. */\n  creator_orcid?: string;\n  /** Creation date. */\n  creation_date?: string;\n  /** X-dimension. */\n  x_dimension: number;\n  /** Y-dimension. */\n  y_dimension: number;\n  /** Z-dimension. */\n  z_dimension: number;\n  /** Units dimensions are in. */\n  dimension_units: string;\n  /** Data references. */\n  object?: SpatialObjectReference;\n\n  /** Coloring. */\n  color?: [number, number, number, number];\n}\n\n/** Object describing the placement of an entity. */\nexport interface SpatialPlacement {\n  /** Identifier. */\n  '@id': string;\n  /** Type name. */\n  '@type': 'SpatialPlacement';\n  /** Source entity. */\n  source: SpatialEntity | SpatialObjectReference;\n  /** Target entity. */\n  target: SpatialEntity;\n\n  /** Date placement was made. */\n  placement_date: string;\n  /** Scaling in x-dimension. */\n  x_scaling: number;\n  /** Scaling in y-dimension. */\n  y_scaling: number;\n  /** Scaling in z-dimension. */\n  z_scaling: number;\n  /** Units scaling is expressed in. */\n  scaling_units: string;\n\n  /** Rotation in x-dimension. */\n  x_rotation: number;\n  /** Rotation in y-dimension. */\n  y_rotation: number;\n  /** Rotation in z-dimension. */\n  z_rotation: number;\n  /** Rotation in w-dimension. */\n  w_rotation?: number;\n  /** Order rotations should be applied in. */\n  rotation_order?: string;\n  /** Units rotation is expressed in. */\n  rotation_units: string;\n\n  /** Translation in x-dimension. */\n  x_translation: number;\n  /** Translation in y-dimension. */\n  y_translation: number;\n  /** Translation in z-dimension. */\n  z_translation: number;\n  /** Units translation is expressed in. */\n  translation_units: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpatialObjectReference.html":{"url":"interfaces/SpatialObjectReference.html","title":"interface - SpatialObjectReference","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpatialObjectReference\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/spatial-types.ts\n        \n\n            \n                Description\n            \n            \n                A reference to a spatial object. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        @id\n                                \n                                \n                                        @type\n                                \n                                \n                                        file\n                                \n                                \n                                        file_format\n                                \n                                \n                                            Optional\n                                        file_subpath\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        @id\n                                    \n                                \n                                \n                                    \n                                        @id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @type\n                                    \n                                \n                                \n                                    \n                                        @type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Type name. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                    \n                                \n                                \n                                    \n                                        file:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data file name. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file_format\n                                    \n                                \n                                \n                                    \n                                        file_format:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data format. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file_subpath\n                                    \n                                \n                                \n                                    \n                                        file_subpath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    File subpath. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SpatialObjectReference {\n  /** Identifier. */\n  '@id': string;\n  /** Type name. */\n  '@type': 'SpatialObjectReference';\n  /** Data file name. */\n  file: string;\n  /** Data format. */\n  file_format: string;\n  /** File subpath. */\n  file_subpath?: string;\n}\n\n/** A spatial entity. */\nexport interface SpatialEntity {\n  /** Identifier. */\n  '@id': string;\n  /** Type name. */\n  '@type': 'SpatialEntity';\n  /** IRI of the Entity this Spatial Entity represents */\n  entityId?: string;\n  /** Entity label. */\n  label?: string;\n  /** Creator. */\n  creator?: string;\n  /** Creator first name. */\n  creator_first_name?: string;\n  /** Creator last name. */\n  creator_last_name?: string;\n  /** Creator identifier. */\n  creator_orcid?: string;\n  /** Creation date. */\n  creation_date?: string;\n  /** X-dimension. */\n  x_dimension: number;\n  /** Y-dimension. */\n  y_dimension: number;\n  /** Z-dimension. */\n  z_dimension: number;\n  /** Units dimensions are in. */\n  dimension_units: string;\n  /** Data references. */\n  object?: SpatialObjectReference;\n\n  /** Coloring. */\n  color?: [number, number, number, number];\n}\n\n/** Object describing the placement of an entity. */\nexport interface SpatialPlacement {\n  /** Identifier. */\n  '@id': string;\n  /** Type name. */\n  '@type': 'SpatialPlacement';\n  /** Source entity. */\n  source: SpatialEntity | SpatialObjectReference;\n  /** Target entity. */\n  target: SpatialEntity;\n\n  /** Date placement was made. */\n  placement_date: string;\n  /** Scaling in x-dimension. */\n  x_scaling: number;\n  /** Scaling in y-dimension. */\n  y_scaling: number;\n  /** Scaling in z-dimension. */\n  z_scaling: number;\n  /** Units scaling is expressed in. */\n  scaling_units: string;\n\n  /** Rotation in x-dimension. */\n  x_rotation: number;\n  /** Rotation in y-dimension. */\n  y_rotation: number;\n  /** Rotation in z-dimension. */\n  z_rotation: number;\n  /** Rotation in w-dimension. */\n  w_rotation?: number;\n  /** Order rotations should be applied in. */\n  rotation_order?: string;\n  /** Units rotation is expressed in. */\n  rotation_units: string;\n\n  /** Translation in x-dimension. */\n  x_translation: number;\n  /** Translation in y-dimension. */\n  y_translation: number;\n  /** Translation in z-dimension. */\n  z_translation: number;\n  /** Units translation is expressed in. */\n  translation_units: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpatialPlacement.html":{"url":"interfaces/SpatialPlacement.html","title":"interface - SpatialPlacement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpatialPlacement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/spatial-types.ts\n        \n\n            \n                Description\n            \n            \n                Object describing the placement of an entity. \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        @id\n                                \n                                \n                                        @type\n                                \n                                \n                                        placement_date\n                                \n                                \n                                            Optional\n                                        rotation_order\n                                \n                                \n                                        rotation_units\n                                \n                                \n                                        scaling_units\n                                \n                                \n                                        source\n                                \n                                \n                                        target\n                                \n                                \n                                        translation_units\n                                \n                                \n                                            Optional\n                                        w_rotation\n                                \n                                \n                                        x_rotation\n                                \n                                \n                                        x_scaling\n                                \n                                \n                                        x_translation\n                                \n                                \n                                        y_rotation\n                                \n                                \n                                        y_scaling\n                                \n                                \n                                        y_translation\n                                \n                                \n                                        z_rotation\n                                \n                                \n                                        z_scaling\n                                \n                                \n                                        z_translation\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        @id\n                                    \n                                \n                                \n                                    \n                                        @id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @type\n                                    \n                                \n                                \n                                    \n                                        @type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    Type name. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        placement_date\n                                    \n                                \n                                \n                                    \n                                        placement_date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Date placement was made. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rotation_order\n                                    \n                                \n                                \n                                    \n                                        rotation_order:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Order rotations should be applied in. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rotation_units\n                                    \n                                \n                                \n                                    \n                                        rotation_units:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Units rotation is expressed in. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scaling_units\n                                    \n                                \n                                \n                                    \n                                        scaling_units:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Units scaling is expressed in. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                    \n                                \n                                \n                                    \n                                        source:     SpatialEntity | SpatialObjectReference\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SpatialEntity | SpatialObjectReference\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Source entity. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                    \n                                \n                                \n                                    \n                                        target:         SpatialEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpatialEntity\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Target entity. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translation_units\n                                    \n                                \n                                \n                                    \n                                        translation_units:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Units translation is expressed in. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        w_rotation\n                                    \n                                \n                                \n                                    \n                                        w_rotation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Rotation in w-dimension. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x_rotation\n                                    \n                                \n                                \n                                    \n                                        x_rotation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Rotation in x-dimension. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x_scaling\n                                    \n                                \n                                \n                                    \n                                        x_scaling:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Scaling in x-dimension. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x_translation\n                                    \n                                \n                                \n                                    \n                                        x_translation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Translation in x-dimension. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y_rotation\n                                    \n                                \n                                \n                                    \n                                        y_rotation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Rotation in y-dimension. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y_scaling\n                                    \n                                \n                                \n                                    \n                                        y_scaling:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Scaling in y-dimension. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y_translation\n                                    \n                                \n                                \n                                    \n                                        y_translation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Translation in y-dimension. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        z_rotation\n                                    \n                                \n                                \n                                    \n                                        z_rotation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Rotation in z-dimension. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        z_scaling\n                                    \n                                \n                                \n                                    \n                                        z_scaling:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Scaling in z-dimension. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        z_translation\n                                    \n                                \n                                \n                                    \n                                        z_translation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Translation in z-dimension. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SpatialObjectReference {\n  /** Identifier. */\n  '@id': string;\n  /** Type name. */\n  '@type': 'SpatialObjectReference';\n  /** Data file name. */\n  file: string;\n  /** Data format. */\n  file_format: string;\n  /** File subpath. */\n  file_subpath?: string;\n}\n\n/** A spatial entity. */\nexport interface SpatialEntity {\n  /** Identifier. */\n  '@id': string;\n  /** Type name. */\n  '@type': 'SpatialEntity';\n  /** IRI of the Entity this Spatial Entity represents */\n  entityId?: string;\n  /** Entity label. */\n  label?: string;\n  /** Creator. */\n  creator?: string;\n  /** Creator first name. */\n  creator_first_name?: string;\n  /** Creator last name. */\n  creator_last_name?: string;\n  /** Creator identifier. */\n  creator_orcid?: string;\n  /** Creation date. */\n  creation_date?: string;\n  /** X-dimension. */\n  x_dimension: number;\n  /** Y-dimension. */\n  y_dimension: number;\n  /** Z-dimension. */\n  z_dimension: number;\n  /** Units dimensions are in. */\n  dimension_units: string;\n  /** Data references. */\n  object?: SpatialObjectReference;\n\n  /** Coloring. */\n  color?: [number, number, number, number];\n}\n\n/** Object describing the placement of an entity. */\nexport interface SpatialPlacement {\n  /** Identifier. */\n  '@id': string;\n  /** Type name. */\n  '@type': 'SpatialPlacement';\n  /** Source entity. */\n  source: SpatialEntity | SpatialObjectReference;\n  /** Target entity. */\n  target: SpatialEntity;\n\n  /** Date placement was made. */\n  placement_date: string;\n  /** Scaling in x-dimension. */\n  x_scaling: number;\n  /** Scaling in y-dimension. */\n  y_scaling: number;\n  /** Scaling in z-dimension. */\n  z_scaling: number;\n  /** Units scaling is expressed in. */\n  scaling_units: string;\n\n  /** Rotation in x-dimension. */\n  x_rotation: number;\n  /** Rotation in y-dimension. */\n  y_rotation: number;\n  /** Rotation in z-dimension. */\n  z_rotation: number;\n  /** Rotation in w-dimension. */\n  w_rotation?: number;\n  /** Order rotations should be applied in. */\n  rotation_order?: string;\n  /** Units rotation is expressed in. */\n  rotation_units: string;\n\n  /** Translation in x-dimension. */\n  x_translation: number;\n  /** Translation in y-dimension. */\n  y_translation: number;\n  /** Translation in z-dimension. */\n  z_translation: number;\n  /** Units translation is expressed in. */\n  translation_units: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpatialSceneNode.html":{"url":"interfaces/SpatialSceneNode.html","title":"interface - SpatialSceneNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpatialSceneNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-body-ui/src/lib/body-ui-layer.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        _lighting\n                                \n                                \n                                        @id\n                                \n                                \n                                        @type\n                                \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        entityId\n                                \n                                \n                                            Optional\n                                        scenegraph\n                                \n                                \n                                            Optional\n                                        scenegraphNode\n                                \n                                \n                                        tooltip\n                                \n                                \n                                        transformMatrix\n                                \n                                \n                                            Optional\n                                        unpickable\n                                \n                                \n                                            Optional\n                                        wireframe\n                                \n                                \n                                            Optional\n                                        zoomBasedOpacity\n                                \n                                \n                                            Optional\n                                        zoomToOnLoad\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _lighting\n                                    \n                                \n                                \n                                    \n                                        _lighting:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @id\n                                    \n                                \n                                \n                                    \n                                        @id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @type\n                                    \n                                \n                                \n                                    \n                                        @type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:     [number, number, number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number, number, number]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        entityId\n                                    \n                                \n                                \n                                    \n                                        entityId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scenegraph\n                                    \n                                \n                                \n                                    \n                                        scenegraph:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scenegraphNode\n                                    \n                                \n                                \n                                    \n                                        scenegraphNode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tooltip\n                                    \n                                \n                                \n                                    \n                                        tooltip:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transformMatrix\n                                    \n                                \n                                \n                                    \n                                        transformMatrix:     Matrix4\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Matrix4\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unpickable\n                                    \n                                \n                                \n                                    \n                                        unpickable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wireframe\n                                    \n                                \n                                \n                                    \n                                        wireframe:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoomBasedOpacity\n                                    \n                                \n                                \n                                    \n                                        zoomBasedOpacity:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoomToOnLoad\n                                    \n                                \n                                \n                                    \n                                        zoomToOnLoad:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CompositeLayer, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { ScenegraphLayer, SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport { load, registerLoaders } from '@loaders.gl/core';\nimport { DracoLoader, DracoWorkerLoader } from '@loaders.gl/draco';\nimport { GLTFLoader } from '@loaders.gl/gltf';\nimport { CubeGeometry } from '@luma.gl/core';\nimport { Matrix4 } from '@math.gl/core';\n\n\n// Programmers Note: had to disable tslint in a few places due to deficient typings.\n\nexport interface SpatialSceneNode {\n  '@id': string;\n  '@type': string;\n  entityId?: string;\n  unpickable?: boolean;\n  wireframe?: boolean;\n  _lighting?: string;\n  scenegraph?: string;\n  scenegraphNode?: string;\n  zoomBasedOpacity?: boolean;\n  zoomToOnLoad?: boolean;\n  color?: [number, number, number, number];\n  transformMatrix: Matrix4;\n  tooltip: string;\n}\n\n// tslint:disable: no-unsafe-any\nasync function loadGLTF(model: SpatialSceneNode): Promise {\n  const gltf = await load(model.scenegraph as string, GLTFLoader, {DracoLoader, decompress: true, postProcess: true});\n\n  const scenegraphNode = model.scenegraphNode ? gltf.nodes?.find((n) => n.name === model.scenegraphNode) : undefined;\n  if (scenegraphNode) {\n    if (!scenegraphNode.rotation && gltf.scene?.nodes?.length > 0) {\n      scenegraphNode.rotation = gltf.scene.nodes[gltf.scene.nodes.length-1].rotation;\n    }\n    gltf.scene = {\n      id: 'scene-1',\n      name: 'Scene',\n      nodes: [scenegraphNode]\n    };\n    gltf.scenes = [gltf.scene, ...gltf.scenes];\n  }\n  return gltf;\n}\n// tslint:enable: no-unsafe-any\n\nfunction meshLayer(id: string, data: SpatialSceneNode[], options: {[key: string]: unknown}): SimpleMeshLayer | undefined {\n  if (!data || data.length === 0) {\n    return undefined;\n  } else {\n    return new SimpleMeshLayer({\n      ...{\n        id,\n        pickable: true,\n        autoHighlight: true,\n        highlightColor: [30, 136, 229, 255],\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        data,\n        // tslint:disable-next-line: no-unsafe-any\n        mesh: new CubeGeometry(),\n        wireframe: false,\n        getTransformMatrix: (d) => (d as {transformMatrix: number[][]}).transformMatrix,\n        getColor: (d) => (d as {color: [number, number, number, number]}).color || [255, 255, 255, 0.9*255]\n      },\n      ...options\n    });\n  }\n}\n\nexport class BodyUILayer extends CompositeLayer {\n  static readonly layerName = 'BodyUILayer';\n\n  initializeState(): void {\n    const { data } = this.props;\n    this.setState({data: data || [], zoomOpacity: 0.8});\n\n    // tslint:disable-next-line: no-unsafe-any\n    registerLoaders([DracoWorkerLoader, GLTFLoader]);\n  }\n\n  renderLayers(): unknown[] {\n    const state = this.state as {data: SpatialSceneNode[], zoomOpacity: number};\n    const cubes = state.data.filter(d => !d.scenegraph && !d.wireframe);\n    const wireframes = state.data.filter(d => !d.scenegraph && d.wireframe);\n    const models = state.data.filter(d => !!d.scenegraph);\n\n    return [\n      meshLayer('cubes', cubes, {wireframe: false}),\n      meshLayer('wireframes', wireframes, {wireframe: true, pickable: false}),\n      ...models.map((model) =>\n        new ScenegraphLayer({\n          ...{\n            id: 'models-' + model['@id'],\n            opacity: model.zoomBasedOpacity ? state.zoomOpacity : 1.0,\n            pickable: !model.unpickable,\n            coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n            data: [model],\n            scenegraph: model.scenegraphNode ? loadGLTF(model) : model.scenegraph,\n            _lighting: model._lighting,  // 'pbr' | undefined\n            getTransformMatrix: model.transformMatrix,\n            getColor: model.color || [0, 255, 0, 0.5*255],\n          }\n        })\n      )\n    ].filter(l => !!l);\n  }\n\n  getPickingInfo(e: {info: object}): unknown {\n    return e.info;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpatialSceneNode-1.html":{"url":"interfaces/SpatialSceneNode-1.html","title":"interface - SpatialSceneNode-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SpatialSceneNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-database/src/lib/ccf-spatial-scene.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        _lighting\n                                \n                                \n                                        @id\n                                \n                                \n                                        @type\n                                \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        entityId\n                                \n                                \n                                            Optional\n                                        scenegraph\n                                \n                                \n                                            Optional\n                                        scenegraphNode\n                                \n                                \n                                        tooltip\n                                \n                                \n                                        transformMatrix\n                                \n                                \n                                            Optional\n                                        unpickable\n                                \n                                \n                                            Optional\n                                        wireframe\n                                \n                                \n                                            Optional\n                                        zoomBasedOpacity\n                                \n                                \n                                            Optional\n                                        zoomToOnLoad\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _lighting\n                                    \n                                \n                                \n                                    \n                                        _lighting:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @id\n                                    \n                                \n                                \n                                    \n                                        @id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @type\n                                    \n                                \n                                \n                                    \n                                        @type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:     [number, number, number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number, number, number]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        entityId\n                                    \n                                \n                                \n                                    \n                                        entityId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scenegraph\n                                    \n                                \n                                \n                                    \n                                        scenegraph:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scenegraphNode\n                                    \n                                \n                                \n                                    \n                                        scenegraphNode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tooltip\n                                    \n                                \n                                \n                                    \n                                        tooltip:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transformMatrix\n                                    \n                                \n                                \n                                    \n                                        transformMatrix:     Matrix4\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Matrix4\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unpickable\n                                    \n                                \n                                \n                                    \n                                        unpickable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wireframe\n                                    \n                                \n                                \n                                    \n                                        wireframe:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoomBasedOpacity\n                                    \n                                \n                                \n                                    \n                                        zoomBasedOpacity:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoomToOnLoad\n                                    \n                                \n                                \n                                    \n                                        zoomToOnLoad:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Matrix4, toRadians } from '@math.gl/core';\n\nimport { CCFDatabase } from './ccf-database';\nimport { Filter } from './interfaces';\nimport { getSpatialEntity } from './queries/spatial-result-n3';\nimport { SpatialEntity } from './spatial-types';\nimport { ccf, rui } from './util/prefixes';\n\n\nexport interface SpatialSceneNode {\n  '@id': string;\n  '@type': 'SpatialSceneNode';\n  entityId?: string;\n  unpickable?: boolean;\n  wireframe?: boolean;\n  _lighting?: string;\n  scenegraph?: string;\n  scenegraphNode?: string;\n  zoomBasedOpacity?: boolean;\n  zoomToOnLoad?: boolean;\n  color?: [number, number, number, number];\n  transformMatrix: Matrix4;\n  tooltip: string;\n}\n\nexport class CCFSpatialScene {\n\n  constructor(private db: CCFDatabase) {}\n\n  getReferenceBody(filter?: Filter): SpatialEntity {\n    let bodyId: string;\n    switch (filter?.sex) {\n      case 'Male':\n        bodyId = ccf.spatial.Male.id;\n        break;\n      case 'Female':\n        bodyId = ccf.spatial.Female.id;\n        break;\n      case 'Both':\n      default:\n        bodyId = ccf.spatial.BothSexes.id;\n        break;\n    }\n    return getSpatialEntity(this.db.store, bodyId);\n  }\n\n  getReferenceOrgans(filter?: Filter): SpatialEntity[] {\n    let organsId: string;\n    switch (filter?.sex) {\n      case 'Male':\n        organsId = ccf.spatial.MaleOrgans.id;\n        break;\n      case 'Female':\n        organsId = ccf.spatial.FemaleOrgans.id;\n        break;\n      case 'Both':\n      default:\n        organsId = ccf.spatial.FemaleOrgans.id;\n        break;\n    }\n    return [getSpatialEntity(this.db.store, organsId)];\n  }\n\n  getReferenceSceneNodes(filter?: Filter): SpatialSceneNode[] {\n    const wholeBody = getSpatialEntity(this.db.store, ccf.spatial.Body.id);\n    const body = this.getReferenceBody(filter);\n    const organs = getSpatialEntity(this.db.store, ccf.spatial.MaleOrgans.id);\n    const store = this.db.store;\n    const terms = filter?.ontologyTerms || [];\n    const hasTerm = {\n      body: terms.indexOf(rui.body.id) === 0,\n      kidney: terms.indexOf(rui.kidney.id) === 0,\n      right_kidney: terms.indexOf(rui.right_kidney.id) === 0,\n      left_kidney: terms.indexOf(rui.left_kidney.id) === 0,\n      spleen: terms.indexOf(rui.spleen.id) === 0,\n    };\n\n    let nodes: (SpatialSceneNode | undefined)[] = [\n      this.getSceneNode(body, wholeBody, {unpickable: true, color: [255, 255, 255, 1*255]}),\n      ...this.getReferenceOrgans(filter).map((organ) =>\n        this.getSceneNode(organ, body, {unpickable: true, _lighting: 'pbr', zoomBasedOpacity: true,  color: [255, 0, 0, 1*255]})\n      ),\n      this.getSceneNode(getSpatialEntity(store, ccf.x('VHRightKidney').id), body, {color: [255, 255, 255, 1],\n        unpickable: hasTerm.kidney || hasTerm.right_kidney, zoomToOnLoad: hasTerm.right_kidney}),\n      this.getSceneNode(getSpatialEntity(store, ccf.x('VHLeftKidney').id), body, {color: [255, 255, 255, 1],\n        unpickable: hasTerm.kidney || hasTerm.left_kidney, zoomToOnLoad: hasTerm.left_kidney}),\n      this.getSceneNode(getSpatialEntity(store, ccf.x('VHSpleen').id), body, {color: [255, 255, 255, 1],\n        unpickable: hasTerm.spleen, zoomToOnLoad: hasTerm.spleen})\n    ];\n\n    if (filter?.debug) {\n      // Debug bounding boxes\n      nodes = nodes.concat([\n        this.getSceneNode(getSpatialEntity(store, ccf.x('VHRightKidney').id), wholeBody, {color: [0, 0, 255, 0.5*255], wireframe: true}),\n        this.getSceneNode(getSpatialEntity(store, ccf.x('VHLeftKidney').id), wholeBody, {color: [255, 0, 0, 0.5*255], wireframe: true}),\n        this.getSceneNode(getSpatialEntity(store, ccf.x('VHSpleenCC1').id), wholeBody, {color: [0, 255, 0, 0.5*255], wireframe: true}),\n        this.getSceneNode(getSpatialEntity(store, ccf.x('VHSpleenCC2').id), wholeBody, {color: [0, 255, 0, 0.5*255], wireframe: true}),\n        this.getSceneNode(getSpatialEntity(store, ccf.x('VHSpleenCC3').id), wholeBody, {color: [0, 255, 0, 0.5*255], wireframe: true})\n      ]);\n    }\n\n    return nodes.filter(s => s !== undefined) as SpatialSceneNode[];\n  }\n\n  getEntitySceneNodes(filter?: Filter): SpatialSceneNode[] {\n    const body = this.getReferenceBody(filter);\n    const highlighted = new Set(filter?.highlightedEntities);\n    return this.db.getSpatialEntities(filter).map((entity) =>\n      this.getSceneNode(entity, body, {\n        color: highlighted.has(entity.entityId as string) ? [10, 10, 229, 0.9*255] : [255, 255, 255, 0.9*255]\n      })\n    ).filter(s => s !== undefined) as SpatialSceneNode[];\n  }\n\n  getSceneNode(source: SpatialEntity, target: SpatialEntity, nodeAttrs: Partial = {}): SpatialSceneNode | undefined {\n    const has3dObject = source.object && source.object.file_format?.startsWith('model/gltf');\n    const sourceID = has3dObject && source.object ? source.object['@id'] : source['@id'];\n    let transform = this.db.graph.getTransformationMatrix(sourceID, target['@id']);\n    if (transform) {\n      if (has3dObject) {\n        transform = new Matrix4().rotateX(toRadians(90)).multiplyLeft(transform);\n      } else {\n        // Scale visible bounding boxes to the desired dimensions\n        let factor: number;\n        switch (source.dimension_units) {\n          case 'centimeter':\n            factor = 1 / 100;\n            break;\n          case 'millimeter':\n            factor = 1 / 1000;\n            break;\n          case 'meter':\n          default:\n            factor = 1;\n            break;\n        }\n        const scale = [source.x_dimension, source.y_dimension, source.z_dimension].map(dim => dim * factor / 2);\n        transform.scale(scale);\n      }\n      return {\n        '@id': source['@id'], '@type': 'SpatialSceneNode',\n        entityId: source.entityId || undefined,\n        scenegraph: has3dObject ? source.object?.file : undefined,\n        scenegraphNode: has3dObject ? source.object?.file_subpath : undefined,\n        transformMatrix: transform,\n        tooltip: source.label,\n        ...nodeAttrs\n      } as SpatialSceneNode;\n    } else {\n      return undefined;\n    }\n  }\n\n  getScene(filter?: Filter): SpatialSceneNode[] {\n    return [\n      ...this.getReferenceSceneNodes(filter),\n      ...this.getEntitySceneNodes(filter)\n    ];\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SpinnerOverlayComponent.html":{"url":"components/SpinnerOverlayComponent.html","title":"component - SpinnerOverlayComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SpinnerOverlayComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/spinner-overlay/spinner-overlay.component.ts\n\n\n    \n        Description\n    \n    \n        Overlay component that displays a progress spinner and\nan optional text description.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-spinner-overlay\n            \n\n            \n                styleUrls\n                ./spinner-overlay.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./spinner-overlay.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/spinner-overlay/spinner-overlay.component.ts:19\n                            \n                        \n                \n                    \n                        Whether the overlay is active/showing. \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/spinner-overlay/spinner-overlay.component.ts:22\n                            \n                        \n                \n                    \n                        Optional text description displayed alongside the spinner. \n\n                    \n                \n            \n        \n\n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 'ccf-spinner-overlay'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/spinner-overlay/spinner-overlay.component.ts:16\n                            \n                        \n\n                \n                    \n                        HTML class \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\n\n\n/**\n * Overlay component that displays a progress spinner and\n * an optional text description.\n */\n@Component({\n  selector: 'ccf-spinner-overlay',\n  templateUrl: './spinner-overlay.component.html',\n  styleUrls: ['./spinner-overlay.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SpinnerOverlayComponent {\n  /** HTML class */\n  @HostBinding('class') readonly className = 'ccf-spinner-overlay';\n\n  /** Whether the overlay is active/showing. */\n  @Input() @HostBinding('class.active') active = false;\n\n  /** Optional text description displayed alongside the spinner. */\n  @Input() text: string;\n}\n\n    \n\n    \n        \n{{ text }}\n\n    \n\n    \n                \n                    ./spinner-overlay.component.scss\n                \n                :host {\n  display: flex;\n  position: absolute;\n  width: 100%;\n  height: calc(100% - 4rem);\n  top: 4rem;\n  z-index: 100;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  pointer-events: none;\n  visibility: hidden;\n  opacity: 0;\n  transition: visibility 0.6s, opacity 0.4s ease-in-out;\n\n  mat-spinner {\n    margin-bottom: 1rem;\n    opacity: 0;\n    transition: opacity 0.3s ease-in-out 0.3s;\n  }\n\n  &.active {\n    pointer-events: auto;\n    visibility: visible;\n    opacity: 1;\n\n    mat-spinner {\n      opacity: 1;\n    }\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ text }}'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SpinnerOverlayComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SpinnerOverlayModule.html":{"url":"modules/SpinnerOverlayModule.html","title":"module - SpinnerOverlayModule","body":"\n                   \n\n\n\n\n    Modules\n    SpinnerOverlayModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SpinnerOverlayModule\n\n\n\ncluster_SpinnerOverlayModule_declarations\n\n\n\ncluster_SpinnerOverlayModule_exports\n\n\n\n\nSpinnerOverlayComponent\n\nSpinnerOverlayComponent\n\n\n\nSpinnerOverlayModule\n\nSpinnerOverlayModule\n\nSpinnerOverlayModule -->\n\nSpinnerOverlayComponent->SpinnerOverlayModule\n\n\n\n\n\nSpinnerOverlayComponent \n\nSpinnerOverlayComponent \n\nSpinnerOverlayComponent  -->\n\nSpinnerOverlayModule->SpinnerOverlayComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/shared/components/spinner-overlay/spinner-overlay.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            SpinnerOverlayComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SpinnerOverlayComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\nimport { SpinnerOverlayComponent } from './spinner-overlay.component';\n\n\n@NgModule({\n  imports: [CommonModule, MatProgressSpinnerModule],\n  declarations: [SpinnerOverlayComponent],\n  exports: [SpinnerOverlayComponent]\n})\nexport class SpinnerOverlayModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StoreModule.html":{"url":"modules/StoreModule.html","title":"module - StoreModule","body":"\n                   \n\n\n\n\n    Modules\n    StoreModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/store/store.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxsDataPluginModule } from '@ngxs-labs/data';\nimport { NgxsModule } from '@ngxs/store';\n\nimport { environment } from '../../../environments/environment';\nimport { DataState } from './data/data.state';\nimport { IconRegistryState } from './icon-registry/icon-registry.state';\nimport { OntologyState } from './ontology/ontology.state';\nimport { ViewerState } from './viewer/viewer.state';\n\n\n/**\n * States shared across the entire app.\n */\nexport const ROOT_STATES = [\n  IconRegistryState,\n  DataState,\n  OntologyState,\n  ViewerState\n];\n\n@NgModule({\n  imports: [\n    // For some strange reason the data plugin is not happy being placed after the store module!?\n    NgxsDataPluginModule.forRoot(),\n\n    NgxsModule.forRoot(ROOT_STATES, {\n      developmentMode: !environment.production\n      // Consider setting compatibility and executionStrategy\n      // https://www.ngxs.io/advanced/options\n    }),\n  ]\n})\nexport class StoreModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ThemingModule.html":{"url":"modules/ThemingModule.html","title":"module - ThemingModule","body":"\n                   \n\n\n\n\n    Modules\n    ThemingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ThemingModule\n\n\n\ncluster_ThemingModule_providers\n\n\n\n\nThemingService\n\nThemingService\n\n\n\nThemingModule\n\nThemingModule\n\nThemingModule -->\n\nThemingService->ThemingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/services/theming/theming.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ThemingService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { APP_BOOTSTRAP_LISTENER, NgModule } from '@angular/core';\n\nimport { ThemingService } from './theming.service';\n\n\n@NgModule({\n  providers: [\n    { provide: APP_BOOTSTRAP_LISTENER, useValue: ThemingService.initialize, multi: true },\n    ThemingService\n  ]\n})\nexport class ThemingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThemingService.html":{"url":"injectables/ThemingService.html","title":"injectable - ThemingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ThemingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/theming/theming.service.ts\n        \n\n            \n                Description\n            \n            \n                Manages the currently active theme.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                component\n                            \n                            \n                                    Private\n                                defaultTheme\n                            \n                            \n                                    Private\n                                theme\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                applyThemeClass\n                            \n                            \n                                getTheme\n                            \n                            \n                                    Static\n                                initialize\n                            \n                            \n                                    Private\n                                initializeImpl\n                            \n                            \n                                resetTheme\n                            \n                            \n                                setTheme\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(defaultTheme: string | null)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/theming/theming.service.ts:23\n                            \n                        \n\n                \n                    \n                            Creates the theming service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        defaultTheme\n                                                  \n                                                        \n                                                                    string | null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An optional default theme.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            applyThemeClass\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    applyThemeClass(cls: string, method: \"add\" | \"remove\")\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/theming/theming.service.ts:82\n                \n            \n\n\n            \n                \n                    Adds or removes a theme class from the necessary components.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    cls\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The theme class.\n\n                                    \n                                \n                                \n                                    method\n                                    \n                                            \"add\" | \"remove\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'add'\n                                    \n\n                                    \n                                        Whether to add or remove the theme.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTheme\n                        \n                        \n                    \n                \n            \n            \n                \ngetTheme()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/theming/theming.service.ts:37\n                \n            \n\n\n            \n                \n                    Get the currently active theme.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize(component: ComponentRef)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/theming/theming.service.ts:20\n                \n            \n\n\n            \n                \n                    Initializer called during bootstrap to set up theming. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    component\n                                    \n                                            ComponentRef\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initializeImpl\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initializeImpl(component: ComponentRef)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/theming/theming.service.ts:67\n                \n            \n\n\n            \n                \n                    Implementation of initialize.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    component\n                                    \n                                            ComponentRef\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The top level component.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resetTheme\n                        \n                        \n                    \n                \n            \n            \n                \nresetTheme()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/theming/theming.service.ts:56\n                \n            \n\n\n            \n                \n                    Resets the theme to the default.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setTheme\n                        \n                        \n                    \n                \n            \n            \n                \nsetTheme(theme: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/theming/theming.service.ts:46\n                \n            \n\n\n            \n                \n                    Sets the currently active theme.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    theme\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new theme class.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Optional\n                            component\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ComponentRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/theming/theming.service.ts:13\n                            \n                        \n\n                \n                    \n                        Top level component on which themes are applied. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            defaultTheme\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/theming/theming.service.ts:15\n                            \n                        \n\n                \n                    \n                        Default theme class. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            theme\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/theming/theming.service.ts:17\n                            \n                        \n\n                \n                    \n                        Currently active theme class. \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { OverlayContainer } from '@angular/cdk/overlay';\nimport { ComponentRef, Inject, Injectable, InjectionToken, Optional, Renderer2 } from '@angular/core';\n\n/** Token for specifying the default theme class. */\nexport const DEFAULT_THEME = new InjectionToken('Default theme class');\n\n/**\n * Manages the currently active theme.\n */\n@Injectable()\nexport class ThemingService {\n  /** Top level component on which themes are applied. */\n  private component?: ComponentRef;\n  /** Default theme class. */\n  private defaultTheme: string;\n  /** Currently active theme class. */\n  private theme: string;\n\n  /** Initializer called during bootstrap to set up theming. */\n  static initialize(component: ComponentRef): void {\n    const service = component.injector.get(ThemingService);\n    service.initializeImpl(component);\n  }\n\n  /**\n   * Creates the theming service.\n   *\n   * @param defaultTheme An optional default theme.\n   */\n  constructor(@Optional() @Inject(DEFAULT_THEME) defaultTheme: string | null) {\n    this.defaultTheme = this.theme = defaultTheme || '';\n  }\n\n  /**\n   * Get the currently active theme.\n   */\n  getTheme(): string {\n    return this.theme;\n  }\n\n  /**\n   * Sets the currently active theme.\n   *\n   * @param theme The new theme class.\n   */\n  setTheme(theme: string): void {\n    if (theme === this.theme) { return; }\n    this.applyThemeClass(this.theme, 'remove');\n    this.applyThemeClass(theme);\n    this.theme = theme;\n  }\n\n  /**\n   * Resets the theme to the default.\n   */\n  resetTheme(): void {\n    this.setTheme(this.defaultTheme);\n  }\n\n\n  /**\n   * Implementation of initialize.\n   *\n   * @param component The top level component.\n   * @throws {Error} If the theming service has already been initialized.\n   */\n  private initializeImpl(component: ComponentRef): void {\n    if (this.component) {\n      throw new Error('Theming service has already been initialized!');\n    }\n\n    this.component = component;\n    this.applyThemeClass(this.theme);\n  }\n\n  /**\n   * Adds or removes a theme class from the necessary components.\n   *\n   * @param cls The theme class.\n   * @param method Whether to add or remove the theme.\n   */\n  private applyThemeClass(cls: string, method: 'add' | 'remove' = 'add'): void {\n    const component = this.component;\n    if (!cls || !component) { return; }\n\n    const renderer = component.injector.get(Renderer2, null);\n    if (!renderer) { return; }\n\n    const root = component.location.nativeElement as HTMLElement;\n    const overlay = component.injector.get(OverlayContainer, null)?.getContainerElement();\n    const methodName = method === 'add' ? 'addClass' : 'removeClass';\n\n    renderer[methodName](root, cls);\n    if (overlay) { renderer[methodName](overlay, cls); }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TiffInfo.html":{"url":"interfaces/TiffInfo.html","title":"interface - TiffInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TiffInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ccf-image-viewer/src/lib/loader.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        offsets\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        offsets\n                                    \n                                \n                                \n                                    \n                                        offsets:     string | number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Loader, createZarrLoader, OMEZarrReader, createOMETiffLoader } from '@hubmap/vitessce-image-viewer';\n\nexport enum LoaderType {\n  Zarr = 'zarr',\n  OMEZarr = 'ome-zarr',\n  StaticZarr = 'static',\n\n  Tiff = 'tiff',\n  Tiff2 = 'tiff 2',\n  BFTiff = 'bf tiff',\n  CovidTiff = 'covid tiff',\n  StaticTiff = 'static tiff'\n}\n\n// createLoader info argument types\nexport type ZarrInfo = Parameters[0];\nexport interface OMEZarrInfo {\n  url: string;\n}\nexport interface TiffInfo {\n  url: string;\n  offsets?: string | number[];\n}\n\n// Copied from vitessce-image-viewer demo source\nexport async function createLoader(\n  type: LoaderType,\n  info: ZarrInfo | OMEZarrInfo | TiffInfo\n): Promise {\n  switch (type) {\n    case LoaderType.Zarr:\n    case LoaderType.StaticZarr:\n      return createZarrLoader(info as ZarrInfo);\n\n    case LoaderType.OMEZarr: {\n      const { url } = info as OMEZarrInfo;\n      const reader = await OMEZarrReader.fromUrl(url);\n      const { loader } = await reader.loadOMEZarr();\n      return loader;\n    }\n\n    case LoaderType.Tiff:\n    case LoaderType.Tiff2:\n    case LoaderType.BFTiff:\n    case LoaderType.CovidTiff:\n    case LoaderType.StaticTiff: {\n      const { url, offsets = [] } = info as TiffInfo;\n      return createOMETiffLoader({ url, offsets: await loadOffsets(offsets) });\n    }\n\n    default:\n      throw Error(`Pyramid type (${type}) is not supported`);\n  }\n}\n\nasync function loadOffsets(url: string | number[]): Promise {\n  if (typeof url !== 'string') { return url; }\n  const res = await fetch(url);\n  return res.status !== 404 ? await res.json() as number[] : [];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ToggleButtonComponent.html":{"url":"components/ToggleButtonComponent.html","title":"component - ToggleButtonComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ToggleButtonComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/drawer/toggle-button/toggle-button.component.ts\n\n\n    \n        Description\n    \n    \n        Implements open/close button for the side drawers.\n\n    \n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-drawer-toggle-button\n            \n\n            \n                styleUrls\n                ./toggle-button.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./toggle-button.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                opened\n                            \n                            \n                                    Private\n                                position\n                            \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleMessage\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                toggle\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                            \n                                class.ccf-drawer-toggle-button-end\n                            \n                        \n                    \n                \n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    icon\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(drawer: DrawerComponent, messageService: MessageService, cdr: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/drawer/toggle-button/toggle-button.component.ts:38\n                            \n                        \n\n                \n                    \n                            Creates an instance of toggle button component.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        drawer\n                                                  \n                                                        \n                                                                        DrawerComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The owning side drawer.\n\n                                                        \n                                                \n                                                \n                                                        messageService\n                                                  \n                                                        \n                                                                        MessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service used to send and receive event messages.\n\n                                                        \n                                                \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The change detector reference.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : 'ccf-drawer-toggle-button'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/toggle-button/toggle-button.component.ts:19\n                            \n                        \n\n                \n                    \n                        HTML class \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class.ccf-drawer-toggle-button-end\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/toggle-button/toggle-button.component.ts:22\n                            \n                        \n\n                \n                    \n                        Whether this button is attach to a drawer in position 'end'. \n\n                    \n                \n\n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleMessage\n                        \n                        \n                    \n                \n            \n            \n                \nhandleMessage(msg: Message)\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/toggle-button/toggle-button.component.ts:79\n                \n            \n\n\n            \n                \n                    Process an event message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    msg\n                                    \n                                                Message\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if change detection needs to be run.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/toggle-button/toggle-button.component.ts:59\n                \n            \n\n\n            \n                \n                    Initializes this component.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/toggle-button/toggle-button.component.ts:69\n                \n            \n\n\n            \n                \n                    Cleans up all subscriptions.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggle\n                        \n                        \n                    \n                \n            \n            \n                \ntoggle()\n                \n            \n\n\n            \n                \n                    Defined in src/app/shared/components/drawer/toggle-button/toggle-button.component.ts:91\n                \n            \n\n\n            \n                \n                    Updates the drawer state.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            opened\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/toggle-button/toggle-button.component.ts:36\n                            \n                        \n\n                \n                    \n                        Whether the owning drawer is opened. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            position\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"start\" | \"end\"\n\n                        \n                    \n                    \n                        \n                            Default value : 'start'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/toggle-button/toggle-button.component.ts:34\n                            \n                        \n\n                \n                    \n                        Position of the owning side drawer. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            subscriptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subscription()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/shared/components/drawer/toggle-button/toggle-button.component.ts:38\n                            \n                        \n\n                \n                    \n                        Subscriptions managed by this component. \n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n\n                \n                    \n                        geticon()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/components/drawer/toggle-button/toggle-button.component.ts:25\n                                \n                            \n                    \n                        \n                                Gets the name of the icon to display. \n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, HostBinding, AfterViewInit } from '@angular/core';\n\nimport { DrawerComponent } from '../drawer/drawer.component';\nimport { Message, MessageService } from '../messages';\nimport { Subscription } from 'rxjs';\n\n\n/**\n * Implements open/close button for the side drawers.\n */\n@Component({\n  selector: 'ccf-drawer-toggle-button',\n  templateUrl: './toggle-button.component.html',\n  styleUrls: ['./toggle-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToggleButtonComponent implements AfterViewInit, OnDestroy {\n  /** HTML class */\n  @HostBinding('class') readonly className = 'ccf-drawer-toggle-button';\n  /** Whether this button is attach to a drawer in position 'end'. */\n  @HostBinding('class.ccf-drawer-toggle-button-end') // tslint:disable-line: no-unsafe-any\n  get classEnd(): boolean { return this.position === 'end'; }\n\n  /** Gets the name of the icon to display. */\n  get icon(): string {\n    let expand = 'keyboard_arrow_right';\n    let collapse = 'keyboard_arrow_left';\n    if (this.position === 'end') { ([expand, collapse] = [collapse, expand]); }\n\n    return this.opened ? collapse : expand;\n  }\n\n  /** Position of the owning side drawer. */\n  private position: 'start' | 'end' = 'start';\n  /** Whether the owning drawer is opened. */\n  private opened = false;\n  /** Subscriptions managed by this component. */\n  private subscriptions = new Subscription();\n\n  /**\n   * Creates an instance of toggle button component.\n   *\n   * @param drawer The owning side drawer.\n   * @param messageService Service used to send and receive event messages.\n   * @param cdr The change detector reference.\n   */\n  constructor(private drawer: DrawerComponent,\n              messageService: MessageService,\n              private cdr: ChangeDetectorRef) {\n    const channel = messageService.connect(this);\n    this.subscriptions.add(channel.getMessagesFromSource(drawer).subscribe(msg => {\n      if (this.handleMessage(msg)) { cdr.markForCheck(); }\n    }));\n  }\n\n  /**\n   * Initializes this component.\n   */\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      this.position = this.drawer.position;\n      this.cdr.markForCheck();\n    });\n  }\n\n  /**\n   * Cleans up all subscriptions.\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n\n  /**\n   * Process an event message.\n   *\n   * @param msg The event.\n   * @returns true if change detection needs to be run.\n   */\n  handleMessage(msg: Message): boolean {\n    if (msg.payload.type === 'drawer-toggled') {\n      this.opened = msg.payload.opened;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Updates the drawer state.\n   */\n  toggle(): void {\n    const drawer = this.drawer;\n    const { opened, expanded } = drawer;\n    if (opened) {\n      if (expanded) {\n        drawer.closeExpanded();\n      } else {\n        drawer.close();\n      }\n    } else {\n      drawer.open();\n    }\n  }\n}\n\n    \n\n    \n        \n  {{ icon }}\n\n\n    \n\n    \n                \n                    ./toggle-button.component.scss\n                \n                :host {\n  position: absolute;\n  top: calc(50% - 2.0625rem);\n  right: -1.0625rem;\n  width: 1.0625rem;\n  height: 3rem;\n  border-radius: 0px 4px 4px 0px;\n  cursor: pointer;\n\n  &.ccf-drawer-toggle-button-end {\n    right: unset;\n    left: calc(-1rem - 1px);\n    border-radius: 4px 0px 0px 4px;\n  }\n\n  .expand-collapse-icon {\n    position: relative;\n    right: 0.25rem;\n  }\n\n  &.ccf-drawer-toggle-button-end .expand-collapse-icon {\n    right: unset;\n    left: -0.25rem;\n  }\n}\n\n.mat-icon {\n  transform: scale(1,2);\n  top: .6rem;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{ icon }}'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ToggleButtonComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ValueObject.html":{"url":"interfaces/ValueObject.html","title":"interface - ValueObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ValueObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/json-ontology.ts\n        \n\n            \n                Description\n            \n            \n                Interface containing the single json property '@value' \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        @value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        @value\n                                    \n                                \n                                \n                                    \n                                        @value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Json '@value' property \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { flow, map, partial, property } from 'lodash';\n\nimport { OntologyNode } from './ontology-node';\n\n\n/** Interface containing the single json property '@id' */\nexport interface IdObject {\n  /** Json '@id' property */\n  '@id': string;\n}\n\n/** Interface containing the single json property '@value' */\nexport interface ValueObject {\n  /** Json '@value' property */\n  '@value': string;\n}\n\n/**\n * Structure of a single json ontology node.\n */\nexport interface JsonOntologyNode extends IdObject {\n  /** Json parent property */\n  'parent': [IdObject];\n\n  /** Json label property */\n  'http://www.w3.org/2000/01/rdf-schema#label': [ValueObject];\n\n  /** Json synonyms property */\n  'http://www.geneontology.org/formats/oboInOwl#hasExactSynonym'?: ValueObject[];\n}\n\n/** Property name of json id field. */\nconst idProperty = '@id';\n/** Function for extracting json id fields. */\nconst idExtractor = property(idProperty);\n\n/** Property name of json value field. */\nconst valueProperty = '@value';\n/** Function for extracting json value fields. */\nconst valueExtractor = property(valueProperty);\n\n/** Property name of json parent field. */\nconst parentProperty = 'parent';\n/** Function for extracting json parent fields. */\nconst parentExtractor = flow(\n  property(parentProperty),\n  property(0),\n  idExtractor\n);\n\n/** Property name of json label field. */\nconst labelProperty = 'http://www.w3.org/2000/01/rdf-schema#label';\n/** Function for extracting json label fields. */\nconst labelExtractor = flow(\n  property(labelProperty),\n  property(0),\n  valueExtractor\n);\n\n/** Property name of json synonyms field. */\nconst synonymsProperty = 'http://www.geneontology.org/formats/oboInOwl#hasExactSynonym';\n/** Function for extracting json synonyms fields. */\nconst synonymsExtractor = flow(\n  property(synonymsProperty),\n  partial string, string[]>(map, partial.placeholder, valueExtractor)\n);\n\n/**\n * Converts a json encoded ontology node to an ontology node.\n *\n * @param json The json encoded node.\n * @returns The resulting ontology node.\n */\nexport function jsonToOntologyNode(json: JsonOntologyNode): OntologyNode {\n  return {\n    id: idExtractor(json),\n    parent: parentExtractor(json) ?? '',\n    children: [],\n    label: labelExtractor(json),\n    synonymLabels: synonymsExtractor(json)\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ViewerComponent.html":{"url":"components/ViewerComponent.html","title":"component - ViewerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ViewerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/image-viewer/viewer/viewer.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    AfterViewInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-viewer\n            \n\n            \n                styleUrls\n                ./viewer.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./viewer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _layers\n                            \n                            \n                                    Private\n                                _sources\n                            \n                            \n                                canvas\n                            \n                            \n                                isDemo\n                            \n                            \n                                    Private\n                                sensor\n                            \n                            \n                                    Private\n                                viewer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clear\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                sourcesFromUrls\n                            \n                            \n                                    Private\n                                    Async\n                                updateLayers\n                            \n                            \n                                    Private\n                                    Async\n                                updateSources\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                layers\n                            \n                            \n                                sources\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                channelsChange\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    sources\n                                \n                                \n                                    layers\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(container: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:82\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n                \n                    \n                        Type :     []\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:69\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        sources\n                    \n                \n                \n                    \n                        Type :     []\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:52\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        channelsChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:76\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            sourcesFromUrls\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sourcesFromUrls(urls: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    urls\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DataSource[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            updateLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateLayers()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            updateSources\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSources()\n                \n            \n\n\n            \n                \n                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _layers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ImageViewerLayer[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:74\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _sources\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DataSource[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            canvas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('canvas', {read: ElementRef})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isDemo\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:80\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sensor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ResizeSensor\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:82\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            viewer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ImageViewer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:81\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        sources\n                    \n                \n\n                \n                    \n                        getsources()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:63\n                                \n                            \n\n                \n                    \n                        setsources(urls: [])\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:52\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            urls\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        layers\n                    \n                \n\n                \n                    \n                        getlayers()\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:73\n                                \n                            \n\n                \n                    \n                        setlayers(layers: [])\n                    \n                \n                            \n                                \n                                    Defined in src/app/modules/image-viewer/viewer/viewer.component.ts:69\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            layers\n                                                    \n                                                            \n                                                                        []\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n  AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnDestroy, Output, ViewChild,\n} from '@angular/core';\nimport { ChannelConfig, DataSource, ImageViewer, LoaderType, PictureInPictureViewer, TiffInfo } from 'ccf-image-viewer';\nimport { ResizeSensor } from 'css-element-queries';\n\nimport { ImageViewerLayer } from '../../../core/models/image-viewer-layer';\n\n\nconst DEMO_SOURCE: DataSource = {\n  type: LoaderType.Tiff,\n  info: {\n    url: 'https://vitessce-demo-data.storage.googleapis.com/test-data/hubmap/pyramid_0.0.2/spraggins.ome.tif'\n  }\n};\n\nfunction hexToRgbTriple(hex: string): [number, number, number] {\n  // tslint:disable: no-bitwise\n  if (hex === undefined || hex.length !== 7) {\n    return [255, 255, 255];\n  }\n\n  const value = Number.parseInt(hex.slice(1), 16) | 0;\n  if (Number.isNaN(value)) {\n    return [255, 255, 255];\n  }\n\n  const red = (value >> 16) & 0xff;\n  const green = (value >> 8) & 0xff;\n  const blue = value & 0xff;\n\n  return [red, green, blue];\n  // tslint:enable: no-bitwise\n}\n\nfunction brightnessToSlider(brightness: [number, number]): [number, number] {\n  const SLIDER_MAX = 2 ** 16 - 1;\n  return [\n    Math.trunc(SLIDER_MAX * brightness[0] / 100),\n    Math.trunc(SLIDER_MAX * brightness[1] / 100)\n  ];\n}\n\n@Component({\n  selector: 'ccf-viewer',\n  templateUrl: './viewer.component.html',\n  styleUrls: ['./viewer.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ViewerComponent implements AfterViewInit, OnDestroy {\n  // tslint:disable-next-line: no-unsafe-any\n  @Input() set sources(urls: string[]) {\n    this._sources = this.sourcesFromUrls(urls);\n    this.isDemo = false;\n    if (this._sources.length === 0) {\n      this._sources = []; // Disabled showing demo image via [DEMO_SOURCE]\n      this.isDemo = true;\n    }\n\n    this.clear();\n    this.updateSources();\n  }\n  get sources(): string[] {\n    return this._sources.map(source => (source.info as TiffInfo).url);\n  }\n  private _sources: DataSource[] = []; // Disabled showing demo image via [DEMO_SOURCE]\n\n  // tslint:disable-next-line: no-unsafe-any\n  @Input() set layers(layers: ImageViewerLayer[]) {\n    this._layers = layers;\n    this.updateLayers();\n  }\n  get layers(): ImageViewerLayer[] { return this._layers; }\n  private _layers: ImageViewerLayer[] = [];\n\n  @Output() channelsChange = new EventEmitter();\n\n  @ViewChild('canvas', { read: ElementRef }) canvas: ElementRef;\n\n  isDemo = true;\n  private viewer: ImageViewer;\n  private sensor: ResizeSensor;\n\n  constructor(private readonly container: ElementRef) { }\n\n  ngAfterViewInit(): void {\n    const {\n      container: { nativeElement: container },\n      canvas: { nativeElement: element }\n    } = this;\n    const { clientWidth, clientHeight } = element;\n\n    this.viewer = new PictureInPictureViewer({\n      id: 'image-viewer',\n      initialViewState: {\n        zoom: -6,\n        target: [25000, 10000, 0]\n      },\n      canvas: element,\n      width: clientWidth,\n      height: clientHeight,\n      overview: {\n        detailWidth: clientWidth,\n        detailHeight: clientHeight\n      },\n      defaultChannelConfig: {\n        active: false\n      }\n    });\n\n    this.sensor = new ResizeSensor(container, ({ width, height }) => {\n      this.viewer.setSize(width, height);\n    });\n\n    (async () => {\n      await this.updateSources();\n      await this.updateLayers();\n    })();\n  }\n\n  ngOnDestroy(): void {\n    this.sensor.detach();\n    this.viewer.finalize();\n  }\n\n  private async updateSources(): Promise {\n    const { _sources: sources, viewer, channelsChange } = this;\n    if (!viewer) {\n      return;\n    }\n\n    await viewer.setSources(sources);\n\n    const isRgb = viewer.loaders.some((loader: { isRgb: boolean }) => loader.isRgb);\n    channelsChange.emit(!isRgb ? viewer.channelNames : []);\n  }\n\n  private async updateLayers(): Promise {\n    const { layers, viewer } = this;\n    if (!viewer || layers.length === 0) {\n      return;\n    }\n\n    const configs: Record> = layers.reduce((result, layer) => ({\n      ...result,\n      [layer.id]: {\n        active: layer.selected,\n        color: hexToRgbTriple(layer.color),\n        slider: brightnessToSlider(layer.brightness)\n      }\n    }), {});\n\n    await viewer.updateChannelConfigs(configs);\n  }\n\n  private clear(): void {\n    this.viewer?.clear();\n  }\n\n  private sourcesFromUrls(urls: string[]): DataSource[] {\n    return urls.filter(url => !!url).map(url => ({\n      type: LoaderType.Tiff,\n      info: { url }\n    }));\n  }\n}\n\n    \n\n    \n        \n  warning\n  This is a demo image\n\n\n\n    \n\n    \n                \n                    ./viewer.component.scss\n                \n                :host {\n  .demo-warning {\n    position: absolute;\n    left: 0;\n    right: 0;\n    z-index: 1;\n    text-align: center;\n\n    .text {\n      vertical-align: top;\n    }\n  }\n\n  canvas {\n    position: relative !important;\n    width: 100%;\n    height: 100%;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  warning  This is a demo image'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'BodyUiComponent', 'selector': 'ccf-body-ui'},{'name': 'CheckboxComponent', 'selector': 'ccf-checkbox'},{'name': 'ColorBarComponent', 'selector': 'ccf-color-bar'},{'name': 'ColorPickerLauncherComponent', 'selector': 'ccf-color-picker-launcher'},{'name': 'ColorSchemeContentsComponent', 'selector': 'ccf-color-scheme-contents'},{'name': 'ColorSchemePopupComponent', 'selector': 'ccf-color-scheme-popup'},{'name': 'ContainerComponent', 'selector': 'ccf-drawer-container'},{'name': 'ContentComponent', 'selector': 'ccf-drawer-content'},{'name': 'DrawerComponent', 'selector': 'ccf-drawer'},{'name': 'DropdownComponent', 'selector': 'ccf-dropdown'},{'name': 'DualSliderComponent', 'selector': 'ccf-dual-slider'},{'name': 'FiltersContentComponent', 'selector': 'ccf-filters-content'},{'name': 'FiltersPopoverComponent', 'selector': 'ccf-filters-popover'},{'name': 'HeaderComponent', 'selector': 'ccf-header'},{'name': 'ImageViewerAccordionComponent', 'selector': 'ccf-image-viewer-accordion'},{'name': 'ImageViewerContentComponent', 'selector': 'ccf-image-viewer-content'},{'name': 'ImageViewerLayersComponent', 'selector': 'ccf-image-viewer-layers'},{'name': 'ImageViewerLegendComponent', 'selector': 'ccf-image-viewer-legend'},{'name': 'ImageViewerPopoverComponent', 'selector': 'ccf-image-viewer-popover'},{'name': 'InfoButtonComponent', 'selector': 'ccf-info-button'},{'name': 'InfoDialogComponent', 'selector': 'ccf-info-dialog'},{'name': 'OntologySearchComponent', 'selector': 'ccf-ontology-search'},{'name': 'OntologySelectionComponent', 'selector': 'ccf-ontology-selection'},{'name': 'OntologyTreeComponent', 'selector': 'ccf-ontology-tree'},{'name': 'ResultsBrowserComponent', 'selector': 'ccf-results-browser'},{'name': 'ResultsBrowserItemComponent', 'selector': 'ccf-results-browser-item'},{'name': 'SchemeDropdownComponent', 'selector': 'ccf-scheme-dropdown'},{'name': 'SpinnerOverlayComponent', 'selector': 'ccf-spinner-overlay'},{'name': 'ToggleButtonComponent', 'selector': 'ccf-drawer-toggle-button'},{'name': 'ViewerComponent', 'selector': 'ccf-viewer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ViewerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ViewerModule.html":{"url":"modules/ViewerModule.html","title":"module - ViewerModule","body":"\n                   \n\n\n\n\n    Modules\n    ViewerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ViewerModule\n\n\n\ncluster_ViewerModule_declarations\n\n\n\ncluster_ViewerModule_exports\n\n\n\n\nViewerComponent\n\nViewerComponent\n\n\n\nViewerModule\n\nViewerModule\n\nViewerModule -->\n\nViewerComponent->ViewerModule\n\n\n\n\n\nViewerComponent \n\nViewerComponent \n\nViewerComponent  -->\n\nViewerModule->ViewerComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/modules/image-viewer/viewer/viewer.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ViewerComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ViewerComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { ViewerComponent } from './viewer.component';\n\n\n@NgModule({\n  imports: [CommonModule, MatIconModule],\n  declarations: [ViewerComponent],\n  exports: [ViewerComponent]\n})\nexport class ViewerModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ViewerState.html":{"url":"injectables/ViewerState.html","title":"injectable - ViewerState","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ViewerState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/viewer/viewer.state.ts\n        \n\n\n            \n                Extends\n            \n            \n                    NgxsDataEntityCollectionsRepository\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                activeLayers$\n                            \n                            \n                                    Readonly\n                                layers$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createLayers\n                            \n                            \n                                    Private\n                                getAutoColor\n                            \n                            \n                                setDefaultScheme\n                            \n                            \n                                updateLayer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createLayers\n                        \n                        \n                    \n                \n            \n            \n                \ncreateLayers(ids: string[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @DataAction()\n                \n            \n\n            \n                \n                    Defined in src/app/core/store/viewer/viewer.state.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getAutoColor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAutoColor(index: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/store/viewer/viewer.state.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setDefaultScheme\n                        \n                        \n                    \n                \n            \n            \n                \nsetDefaultScheme(scheme: ColorScheme)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @DataAction()\n                \n            \n\n            \n                \n                    Defined in src/app/core/store/viewer/viewer.state.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheme\n                                    \n                                                ColorScheme\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateLayer\n                        \n                        \n                    \n                \n            \n            \n                \nupdateLayer(id: string, changes: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @DataAction()\n                \n            \n\n            \n                \n                    Defined in src/app/core/store/viewer/viewer.state.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    changes\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            activeLayers$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.layers$.pipe(\n    map(layers => layers.filter(layer => layer.selected))\n  )\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/viewer/viewer.state.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            layers$\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.entities$.pipe(\n    map(entities => Object.values(entities)),\n    map(layers => layers.map(layer => new ImageViewerLayer(layer)))\n  )\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/store/viewer/viewer.state.ts:40\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { DataAction, StateRepository } from '@ngxs-labs/data/decorators';\nimport { NgxsDataEntityCollectionsRepository } from '@ngxs-labs/data/repositories';\nimport { EntityUpdate, NgxsEntityCollections } from '@ngxs-labs/data/typings';\nimport { createEntityCollections } from '@ngxs-labs/data/utils';\nimport { State } from '@ngxs/store';\nimport { map } from 'rxjs/operators';\n\nimport { DEFAULT_COLOR_SCHEMES } from '../../../modules/color-scheme/color-schemes';\nimport { ColorScheme } from '../../models/color-scheme';\nimport { ImageViewerLayer, PureImageViewerLayer } from '../../models/image-viewer-layer';\n\n\nconst NUM_LAYERS_SELECTED_ON_CREATION = 3;\nconst IMAGE_VIEWER_LAYER_DEFAULTS = {\n  brightness: [2, 31] as [number, number],\n  transparency: 100,\n  customizedColor: false,\n  defaultOrder: -1\n};\n\nexport interface ViewerStateModel extends NgxsEntityCollections {\n  defaultScheme: ColorScheme;\n  autoColorIndex: number;\n  selectionCounter: number;\n}\n\n@StateRepository()\n@State({\n  name: 'viewer',\n  defaults: {\n    ...createEntityCollections(),\n    defaultScheme: DEFAULT_COLOR_SCHEMES[0],\n    autoColorIndex: 0,\n    selectionCounter: 0\n  }\n})\n@Injectable()\nexport class ViewerState extends NgxsDataEntityCollectionsRepository {\n  readonly layers$ = this.entities$.pipe(\n    map(entities => Object.values(entities)),\n    map(layers => layers.map(layer => new ImageViewerLayer(layer)))\n  );\n  readonly activeLayers$ = this.layers$.pipe(\n    map(layers => layers.filter(layer => layer.selected))\n  );\n\n  @DataAction()\n  createLayers(ids: string[]): void {\n    const maxSelected = NUM_LAYERS_SELECTED_ON_CREATION;\n    const { defaultScheme } = this.snapshot;\n    const length = ids.length;\n\n    this.removeEntitiesMany(this.ids);\n    this.addEntitiesMany(ids.map((id, index) => ({\n      id,\n      label: id,\n      colorScheme: defaultScheme,\n      color: index ): void {\n    const { autoColorIndex, selectionCounter } = this.snapshot;\n    const layer = this.entities[id];\n    let color = changes.color || layer.color;\n    let defaultOrder = layer.defaultOrder;\n    if (!layer.customizedColor && !changes.customizedColor &&\n        changes.selected && layer.defaultOrder === -1) {\n      color = this.getAutoColor(autoColorIndex);\n      defaultOrder = autoColorIndex;\n      this.ctx.patchState({ autoColorIndex: autoColorIndex + 1 });\n    }\n\n    this.updateEntitiesMany([{\n      id,\n      changes: {\n        ...changes,\n        color,\n        selectionOrder: selectionCounter,\n        defaultOrder\n      }\n    }]);\n    this.ctx.patchState({ selectionCounter: selectionCounter + 1 });\n  }\n\n  @DataAction()\n  setDefaultScheme(scheme: ColorScheme): void {\n    const { entities } = this;\n    const changes: EntityUpdate[] = [];\n    for (const [id, layer] of Object.entries(entities)) {\n      if (!layer.customizedColor) {\n        const index = layer.colorScheme.colors.indexOf(layer.color);\n        changes.push({\n          id,\n          changes: {\n            colorScheme: scheme,\n            color: scheme.colors[index]\n          }\n        });\n      }\n    }\n\n    this.updateEntitiesMany(changes);\n    this.ctx.patchState({ defaultScheme: scheme });\n  }\n\n  private getAutoColor(index: number): string {\n    const { defaultScheme: { colors } } = this.snapshot;\n    const order = [0, 6, 3, 1, 5, 2, 4];\n    return colors[order[index % order.length]];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ViewerStateModel.html":{"url":"interfaces/ViewerStateModel.html","title":"interface - ViewerStateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ViewerStateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/viewer/viewer.state.ts\n        \n\n\n            \n                Extends\n            \n            \n                    NgxsEntityCollections\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        autoColorIndex\n                                \n                                \n                                        defaultScheme\n                                \n                                \n                                        selectionCounter\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoColorIndex\n                                    \n                                \n                                \n                                    \n                                        autoColorIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultScheme\n                                    \n                                \n                                \n                                    \n                                        defaultScheme:         ColorScheme\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ColorScheme\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectionCounter\n                                    \n                                \n                                \n                                    \n                                        selectionCounter:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { DataAction, StateRepository } from '@ngxs-labs/data/decorators';\nimport { NgxsDataEntityCollectionsRepository } from '@ngxs-labs/data/repositories';\nimport { EntityUpdate, NgxsEntityCollections } from '@ngxs-labs/data/typings';\nimport { createEntityCollections } from '@ngxs-labs/data/utils';\nimport { State } from '@ngxs/store';\nimport { map } from 'rxjs/operators';\n\nimport { DEFAULT_COLOR_SCHEMES } from '../../../modules/color-scheme/color-schemes';\nimport { ColorScheme } from '../../models/color-scheme';\nimport { ImageViewerLayer, PureImageViewerLayer } from '../../models/image-viewer-layer';\n\n\nconst NUM_LAYERS_SELECTED_ON_CREATION = 3;\nconst IMAGE_VIEWER_LAYER_DEFAULTS = {\n  brightness: [2, 31] as [number, number],\n  transparency: 100,\n  customizedColor: false,\n  defaultOrder: -1\n};\n\nexport interface ViewerStateModel extends NgxsEntityCollections {\n  defaultScheme: ColorScheme;\n  autoColorIndex: number;\n  selectionCounter: number;\n}\n\n@StateRepository()\n@State({\n  name: 'viewer',\n  defaults: {\n    ...createEntityCollections(),\n    defaultScheme: DEFAULT_COLOR_SCHEMES[0],\n    autoColorIndex: 0,\n    selectionCounter: 0\n  }\n})\n@Injectable()\nexport class ViewerState extends NgxsDataEntityCollectionsRepository {\n  readonly layers$ = this.entities$.pipe(\n    map(entities => Object.values(entities)),\n    map(layers => layers.map(layer => new ImageViewerLayer(layer)))\n  );\n  readonly activeLayers$ = this.layers$.pipe(\n    map(layers => layers.filter(layer => layer.selected))\n  );\n\n  @DataAction()\n  createLayers(ids: string[]): void {\n    const maxSelected = NUM_LAYERS_SELECTED_ON_CREATION;\n    const { defaultScheme } = this.snapshot;\n    const length = ids.length;\n\n    this.removeEntitiesMany(this.ids);\n    this.addEntitiesMany(ids.map((id, index) => ({\n      id,\n      label: id,\n      colorScheme: defaultScheme,\n      color: index ): void {\n    const { autoColorIndex, selectionCounter } = this.snapshot;\n    const layer = this.entities[id];\n    let color = changes.color || layer.color;\n    let defaultOrder = layer.defaultOrder;\n    if (!layer.customizedColor && !changes.customizedColor &&\n        changes.selected && layer.defaultOrder === -1) {\n      color = this.getAutoColor(autoColorIndex);\n      defaultOrder = autoColorIndex;\n      this.ctx.patchState({ autoColorIndex: autoColorIndex + 1 });\n    }\n\n    this.updateEntitiesMany([{\n      id,\n      changes: {\n        ...changes,\n        color,\n        selectionOrder: selectionCounter,\n        defaultOrder\n      }\n    }]);\n    this.ctx.patchState({ selectionCounter: selectionCounter + 1 });\n  }\n\n  @DataAction()\n  setDefaultScheme(scheme: ColorScheme): void {\n    const { entities } = this;\n    const changes: EntityUpdate[] = [];\n    for (const [id, layer] of Object.entries(entities)) {\n      if (!layer.customizedColor) {\n        const index = layer.colorScheme.colors.indexOf(layer.color);\n        changes.push({\n          id,\n          changes: {\n            colorScheme: scheme,\n            color: scheme.colors[index]\n          }\n        });\n      }\n    }\n\n    this.updateEntitiesMany(changes);\n    this.ctx.patchState({ defaultScheme: scheme });\n  }\n\n  private getAutoColor(index: number): string {\n    const { defaultScheme: { colors } } = this.snapshot;\n    const order = [0, 6, 3, 1, 5, 2, 4];\n    return colors[order[index % order.length]];\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nChangelog for the Common Coordinate Framework (CCF) - Exploration User Interface (EUI).\n1.1.0 - 2020-07-31\nAdded in 1.1.0\n\nUpgraded to latest Vitessce Image Viewer and started showing processed TIFF images coming directly from the HuBMAP infrastructure\nProcessed CODEX and 10x datasets are shown in the HuBMAP Portal's visualization tool\nAdded a limited set of TIFF image thumbnails, with more to come\nAdded two qualitative color schemes for colorizing images in the image viewer\nBug fixes/performance optimizations\n\n1.0.0-rc.1 - 2020-06-22\n\n:warning: WARNING: This version is a release candidate. Some minor updates will likely happen between now and the official HuBMAP Data Release 1 in July.\n\nAdded in 1.0.0-rc.1\n\nBody UI interactions\nImage Viewer Integration\nPartonomy linkage to search / Body UI\nNow fully integrated into the HuBMAP Portal\n\nKnown Issues in 1.0.0-rc.1\n\nImage Viewer is using a placeholder .tiff until more .tiff images can be loaded from the IEC\n\n1.0.0-alpha.3 - 2019-05-08\nAdded in 1.0.0-alpha.3\n\nHooked up the interface to real data (not shown online as the data is not public yet)\nAdded the Tissue Browser on the right\nAdded the initial (Tissue) Image Viewer popup. Currently shows metadata, but no images yet.\nAdded an initial 3D Body. Tissues cuboids currently not displayed, but a test cuboid is shown.\nDocumentation (>90%) and testing coverage improved further\n\n1.0.0-alpha.2 - 2019-03-27\nAdded in 1.0.0-alpha.2\n\nIncreased documentation and testing coverage across the board\nAdded fullscreen button\nBug fixes and optimizations\n\n1.0.0-alpha.1 - 2019-03-06\nAdded in 1.0.0-alpha.1\n\nStarted the process of implementing the 1.0.0 UI spec\nSpec Doc\nUser Stories\n\n\nSetup the base project scaffolding for the new version\nAdded CCF Partonomy (CCF-P) search and tree display\nAdded a filter for filter tissues\n\n0.6.0 - 2019-11-08\nAdded in 0.6.0\n\nThe CCF API project was started with an initial OpenAPI Schema, documentation, and code for spinning up a mock data server. This codifies the CCF data and metadata standards defined by MC-IU and will be used by the CCF EUI and RUI.\nIn preparation for future developments, we added a hidden, alpha-level 3d organ viewer. You can toggle this on and off in the organ view, by typing 3d with your keyboard.\nUpdated navigation to directly jump to the tissue browser when a user selects an item from the search box\nUpgraded dependencies, including upgrades to Angular 8\nTesting and bug fixes\nMinor UI updates\nChanged download icon color\nChanged the background color for the search\nMoved the Technologies filter above ontology\nAdditional styles for details button\n\n\n\n0.5.0 - 2019-05-24\nAdded in 0.5.0\n\nDisplay of the CCF ontology, integrated with search\nSemantic search by ontology, results are presented at all levels\nTissue overlays showing regions of interest\nData download links to direct users to https://sampledata.hubmapconsortium.org\nData documentation (95% coverage) and testing (85% coverage)\n\n0.2.0 - 2019-05-03\nAdded in 0.2.0\n\nSprint 2 release of the CCF-UI!\nA search interface was added to query data by age, gender, technology and TMC. Ontological search will be implemented in the next sprint.\nBody, Organ, and Tissue views now respond to updates to the search on the fly\nAppropriate metadata is now displayed in the Body, Organ, Tissue, and Cell views\n\n0.1.0 - 2019-04-12\nAdded in 0.1.0\n\nSprint 1 release of the CCF-UI!\nSetup the base project scaffolding\nAdded a sample database that includes initial data provided by VU\nAdded Visual browsing of tissue samples and metadata at the whole body, organ, tissue, and cell level\nStay tuned! More features coming in Sprint 2 (starts next week!) and Sprint 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^9.1.11\n        \n            @angular/cdk : ^9.2.4\n        \n            @angular/common : ^9.1.11\n        \n            @angular/compiler : ^9.1.11\n        \n            @angular/core : ^9.1.11\n        \n            @angular/forms : ^9.1.11\n        \n            @angular/material : ^9.2.4\n        \n            @angular/platform-browser : ^9.1.11\n        \n            @angular/platform-browser-dynamic : ^9.1.11\n        \n            @angular/router : ^9.1.11\n        \n            @deck.gl/core : ^8.2.3\n        \n            @deck.gl/geo-layers : ^8.2.3\n        \n            @deck.gl/layers : ^8.2.3\n        \n            @deck.gl/mesh-layers : ^8.2.3\n        \n            @hubmap/vitessce-image-viewer : ^0.3.2\n        \n            @loaders.gl/core : ^2.2.8\n        \n            @loaders.gl/draco : ^2.2.8\n        \n            @loaders.gl/gltf : ^2.2.8\n        \n            @luma.gl/core : ^8.2.0\n        \n            @math.gl/core : ^3.2.2\n        \n            @ngxs-labs/data : ^3.0.5\n        \n            @ngxs/store : ^3.6.2\n        \n            @rdfjs/data-model : ^1.1.2\n        \n            bind-decorator : ^1.0.11\n        \n            comlink : ^4.3.0\n        \n            css-element-queries : ^1.2.3\n        \n            graphology : ^0.17.1\n        \n            graphology-shortest-path : ^1.3.3\n        \n            jsonld : ^3.1.1\n        \n            lodash : ^4.17.15\n        \n            n3 : ^1.4.0\n        \n            ng5-slider : ^1.2.4\n        \n            quaternion : ^1.1.0\n        \n            quaternion-to-euler : ^0.5.0\n        \n            rdf-literal : ^1.1.1\n        \n            rdfxml-streaming-parser : ^1.3.6\n        \n            react : ^16.13.1\n        \n            rxjs : ~6.5.5\n        \n            tslib : ^1.13.0\n        \n            zone.js : ~0.10.3\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DataQueryState   (src/.../data.state.ts)\n                        \n                        \n                            LoaderType   (projects/.../loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/store/data/data.state.ts\n    \n        \n            \n                \n                    \n                        \n                        DataQueryState\n                    \n                \n                    \n                        \n                            Current state of data queries. \n\n                        \n                    \n                        \n                            \n                                 Running\n                            \n                        \n                        \n                            \n                                Value : running\n                            \n                        \n                        \n                            \n                                 Completed\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n            \n        \n\n    projects/ccf-image-viewer/src/lib/loader.ts\n    \n        \n            \n                \n                    \n                        \n                        LoaderType\n                    \n                \n                        \n                            \n                                 Zarr\n                            \n                        \n                        \n                            \n                                Value : zarr\n                            \n                        \n                        \n                            \n                                 OMEZarr\n                            \n                        \n                        \n                            \n                                Value : ome-zarr\n                            \n                        \n                        \n                            \n                                 StaticZarr\n                            \n                        \n                        \n                            \n                                Value : static\n                            \n                        \n                        \n                            \n                                 Tiff\n                            \n                        \n                        \n                            \n                                Value : tiff\n                            \n                        \n                        \n                            \n                                 Tiff2\n                            \n                        \n                        \n                            \n                                Value : tiff 2\n                            \n                        \n                        \n                            \n                                 BFTiff\n                            \n                        \n                        \n                            \n                                Value : bf tiff\n                            \n                        \n                        \n                            \n                                 CovidTiff\n                            \n                        \n                        \n                            \n                                Value : covid tiff\n                            \n                        \n                        \n                            \n                                 StaticTiff\n                            \n                        \n                        \n                            \n                                Value : static tiff\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nCommon Coordinate Framework (CCF) - Exploration User Interface (EUI)\n\n\n\n\n\n\n\n\nCCF-EUI: Common Coordinate Framework (CCF) - Exploration User Interface (EUI)\nBackground and More Information\nFor more information, see the HuBMAP CCF Portal at https://hubmapconsortium.github.io/ccf/.\nChange Log\nSee the ChangeLog for the latest developments.\nCredits\nCCF-EUI is developed at the Cyberinfrastructure for Network Science Center at Indiana University. It is funded by NIH Award OT2OD026671.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 HuBMAP Consortium\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BodyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BodyUiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CheckboxModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ColorBarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ColorPickerLauncherModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ColorSchemeContentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ColorSchemePopupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DrawerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DropdownModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DualSliderModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FiltersContentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FiltersPopoverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HeaderModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImageViewerAccordionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImageViewerContentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImageViewerLayersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImageViewerLegendModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImageViewerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImageViewerPopoverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InfoButtonModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InfoDialogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OntologyExplorationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OntologySearchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OntologySelectionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OntologyTreeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResultsBrowserItemModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResultsBrowserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SchemeDropdownModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SpinnerOverlayModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ThemingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ViewerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_BodyModule\n\n\n\ncluster_BodyModule_imports\n\n\n\ncluster_BodyModule_exports\n\n\n\ncluster_BodyUiModule\n\n\n\ncluster_BodyUiModule_declarations\n\n\n\ncluster_BodyUiModule_exports\n\n\n\ncluster_CheckboxModule\n\n\n\ncluster_CheckboxModule_declarations\n\n\n\ncluster_CheckboxModule_exports\n\n\n\ncluster_ColorBarModule\n\n\n\ncluster_ColorBarModule_declarations\n\n\n\ncluster_ColorBarModule_exports\n\n\n\ncluster_ColorPickerLauncherModule\n\n\n\ncluster_ColorPickerLauncherModule_declarations\n\n\n\ncluster_ColorPickerLauncherModule_imports\n\n\n\ncluster_ColorPickerLauncherModule_exports\n\n\n\ncluster_ColorSchemeContentsModule\n\n\n\ncluster_ColorSchemeContentsModule_declarations\n\n\n\ncluster_ColorSchemeContentsModule_exports\n\n\n\ncluster_ColorSchemePopupModule\n\n\n\ncluster_ColorSchemePopupModule_declarations\n\n\n\ncluster_ColorSchemePopupModule_exports\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_DrawerModule\n\n\n\ncluster_DrawerModule_declarations\n\n\n\ncluster_DrawerModule_exports\n\n\n\ncluster_DropdownModule\n\n\n\ncluster_DropdownModule_declarations\n\n\n\ncluster_DropdownModule_exports\n\n\n\ncluster_DualSliderModule\n\n\n\ncluster_DualSliderModule_declarations\n\n\n\ncluster_DualSliderModule_exports\n\n\n\ncluster_FiltersContentModule\n\n\n\ncluster_FiltersContentModule_declarations\n\n\n\ncluster_FiltersContentModule_exports\n\n\n\ncluster_FiltersPopoverModule\n\n\n\ncluster_FiltersPopoverModule_declarations\n\n\n\ncluster_FiltersPopoverModule_exports\n\n\n\ncluster_HeaderModule\n\n\n\ncluster_HeaderModule_declarations\n\n\n\ncluster_HeaderModule_imports\n\n\n\ncluster_HeaderModule_exports\n\n\n\ncluster_ImageViewerAccordionModule\n\n\n\ncluster_ImageViewerAccordionModule_declarations\n\n\n\ncluster_ImageViewerAccordionModule_imports\n\n\n\ncluster_ImageViewerAccordionModule_exports\n\n\n\ncluster_ImageViewerContentModule\n\n\n\ncluster_ImageViewerContentModule_declarations\n\n\n\ncluster_ImageViewerContentModule_exports\n\n\n\ncluster_ImageViewerLayersModule\n\n\n\ncluster_ImageViewerLayersModule_declarations\n\n\n\ncluster_ImageViewerLayersModule_imports\n\n\n\ncluster_ImageViewerLayersModule_exports\n\n\n\ncluster_ImageViewerLegendModule\n\n\n\ncluster_ImageViewerLegendModule_declarations\n\n\n\ncluster_ImageViewerLegendModule_exports\n\n\n\ncluster_ImageViewerModule\n\n\n\ncluster_ImageViewerModule_imports\n\n\n\ncluster_ImageViewerModule_exports\n\n\n\ncluster_ImageViewerPopoverModule\n\n\n\ncluster_ImageViewerPopoverModule_declarations\n\n\n\ncluster_ImageViewerPopoverModule_exports\n\n\n\ncluster_InfoButtonModule\n\n\n\ncluster_InfoButtonModule_declarations\n\n\n\ncluster_InfoButtonModule_exports\n\n\n\ncluster_InfoDialogModule\n\n\n\ncluster_InfoDialogModule_declarations\n\n\n\ncluster_InfoDialogModule_exports\n\n\n\ncluster_OntologyExplorationModule\n\n\n\ncluster_OntologyExplorationModule_imports\n\n\n\ncluster_OntologyExplorationModule_exports\n\n\n\ncluster_OntologySearchModule\n\n\n\ncluster_OntologySearchModule_declarations\n\n\n\ncluster_OntologySearchModule_exports\n\n\n\ncluster_OntologySelectionModule\n\n\n\ncluster_OntologySelectionModule_declarations\n\n\n\ncluster_OntologySelectionModule_exports\n\n\n\ncluster_OntologyTreeModule\n\n\n\ncluster_OntologyTreeModule_declarations\n\n\n\ncluster_OntologyTreeModule_exports\n\n\n\ncluster_ResultsBrowserItemModule\n\n\n\ncluster_ResultsBrowserItemModule_declarations\n\n\n\ncluster_ResultsBrowserItemModule_exports\n\n\n\ncluster_ResultsBrowserModule\n\n\n\ncluster_ResultsBrowserModule_declarations\n\n\n\ncluster_ResultsBrowserModule_exports\n\n\n\ncluster_SchemeDropdownModule\n\n\n\ncluster_SchemeDropdownModule_declarations\n\n\n\ncluster_SchemeDropdownModule_exports\n\n\n\ncluster_SpinnerOverlayModule\n\n\n\ncluster_SpinnerOverlayModule_declarations\n\n\n\ncluster_SpinnerOverlayModule_exports\n\n\n\ncluster_ThemingModule\n\n\n\ncluster_ThemingModule_providers\n\n\n\ncluster_ViewerModule\n\n\n\ncluster_ViewerModule_declarations\n\n\n\ncluster_ViewerModule_exports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nBodyModule\n\nBodyModule\n\nAppModule -->\n\nBodyModule->AppModule\n\n\n\n\n\nBodyUiModule \n\nBodyUiModule \n\nBodyUiModule  -->\n\nBodyModule->BodyUiModule \n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nHeaderModule \n\nHeaderModule \n\nHeaderModule  -->\n\nCoreModule->HeaderModule \n\n\n\n\n\nDrawerModule\n\nDrawerModule\n\nAppModule -->\n\nDrawerModule->AppModule\n\n\n\n\n\nContainerComponent \n\nContainerComponent \n\nContainerComponent  -->\n\nDrawerModule->ContainerComponent \n\n\n\n\n\nContentComponent \n\nContentComponent \n\nContentComponent  -->\n\nDrawerModule->ContentComponent \n\n\n\n\n\nDrawerComponent \n\nDrawerComponent \n\nDrawerComponent  -->\n\nDrawerModule->DrawerComponent \n\n\n\n\n\nToggleButtonComponent \n\nToggleButtonComponent \n\nToggleButtonComponent  -->\n\nDrawerModule->ToggleButtonComponent \n\n\n\n\n\nImageViewerPopoverModule\n\nImageViewerPopoverModule\n\nImageViewerPopoverModule -->\n\nDrawerModule->ImageViewerPopoverModule\n\n\n\n\n\nDualSliderModule\n\nDualSliderModule\n\nAppModule -->\n\nDualSliderModule->AppModule\n\n\n\n\n\nColorSchemeContentsModule\n\nColorSchemeContentsModule\n\nColorSchemeContentsModule -->\n\nDualSliderModule->ColorSchemeContentsModule\n\n\n\n\n\nDualSliderComponent \n\nDualSliderComponent \n\nDualSliderComponent  -->\n\nDualSliderModule->DualSliderComponent \n\n\n\n\n\nFiltersContentModule\n\nFiltersContentModule\n\nFiltersContentModule -->\n\nDualSliderModule->FiltersContentModule\n\n\n\n\n\nFiltersPopoverModule\n\nFiltersPopoverModule\n\nAppModule -->\n\nFiltersPopoverModule->AppModule\n\n\n\n\n\nFiltersPopoverComponent \n\nFiltersPopoverComponent \n\nFiltersPopoverComponent  -->\n\nFiltersPopoverModule->FiltersPopoverComponent \n\n\n\n\n\nImageViewerModule\n\nImageViewerModule\n\nAppModule -->\n\nImageViewerModule->AppModule\n\n\n\n\n\nImageViewerContentModule \n\nImageViewerContentModule \n\nImageViewerContentModule  -->\n\nImageViewerModule->ImageViewerContentModule \n\n\n\n\n\nImageViewerLayersModule \n\nImageViewerLayersModule \n\nImageViewerLayersModule  -->\n\nImageViewerModule->ImageViewerLayersModule \n\n\n\n\n\nImageViewerPopoverModule \n\nImageViewerPopoverModule \n\nImageViewerPopoverModule  -->\n\nImageViewerModule->ImageViewerPopoverModule \n\n\n\n\n\nInfoDialogModule\n\nInfoDialogModule\n\nAppModule -->\n\nInfoDialogModule->AppModule\n\n\n\n\n\nInfoButtonModule\n\nInfoButtonModule\n\nInfoButtonModule -->\n\nInfoDialogModule->InfoButtonModule\n\n\n\n\n\nInfoDialogComponent \n\nInfoDialogComponent \n\nInfoDialogComponent  -->\n\nInfoDialogModule->InfoDialogComponent \n\n\n\n\n\nOntologyExplorationModule\n\nOntologyExplorationModule\n\nAppModule -->\n\nOntologyExplorationModule->AppModule\n\n\n\n\n\nOntologySearchModule \n\nOntologySearchModule \n\nOntologySearchModule  -->\n\nOntologyExplorationModule->OntologySearchModule \n\n\n\n\n\nOntologySelectionModule \n\nOntologySelectionModule \n\nOntologySelectionModule  -->\n\nOntologyExplorationModule->OntologySelectionModule \n\n\n\n\n\nOntologyTreeModule \n\nOntologyTreeModule \n\nOntologyTreeModule  -->\n\nOntologyExplorationModule->OntologyTreeModule \n\n\n\n\n\nResultsBrowserModule\n\nResultsBrowserModule\n\nAppModule -->\n\nResultsBrowserModule->AppModule\n\n\n\n\n\nResultsBrowserComponent \n\nResultsBrowserComponent \n\nResultsBrowserComponent  -->\n\nResultsBrowserModule->ResultsBrowserComponent \n\n\n\n\n\nSpinnerOverlayModule\n\nSpinnerOverlayModule\n\nAppModule -->\n\nSpinnerOverlayModule->AppModule\n\n\n\n\n\nSpinnerOverlayComponent \n\nSpinnerOverlayComponent \n\nSpinnerOverlayComponent  -->\n\nSpinnerOverlayModule->SpinnerOverlayComponent \n\n\n\n\n\nBodyUiModule\n\nBodyUiModule\n\nBodyModule -->\n\nBodyUiModule->BodyModule\n\n\n\n\n\nBodyUiComponent \n\nBodyUiComponent \n\nBodyUiComponent  -->\n\nBodyUiModule->BodyUiComponent \n\n\n\n\n\nBodyUiComponent\n\nBodyUiComponent\n\nBodyUiModule -->\n\nBodyUiComponent->BodyUiModule\n\n\n\n\n\nCheckboxComponent\n\nCheckboxComponent\n\n\n\nCheckboxModule\n\nCheckboxModule\n\nCheckboxModule -->\n\nCheckboxComponent->CheckboxModule\n\n\n\n\n\nCheckboxComponent \n\nCheckboxComponent \n\nCheckboxComponent  -->\n\nCheckboxModule->CheckboxComponent \n\n\n\nFiltersContentModule -->\n\nCheckboxModule->FiltersContentModule\n\n\n\n\n\nColorBarComponent\n\nColorBarComponent\n\n\n\nColorBarModule\n\nColorBarModule\n\nColorBarModule -->\n\nColorBarComponent->ColorBarModule\n\n\n\n\n\nColorBarComponent \n\nColorBarComponent \n\nColorBarComponent  -->\n\nColorBarModule->ColorBarComponent \n\n\n\nColorSchemeContentsModule -->\n\nColorBarModule->ColorSchemeContentsModule\n\n\n\n\n\nSchemeDropdownModule\n\nSchemeDropdownModule\n\nSchemeDropdownModule -->\n\nColorBarModule->SchemeDropdownModule\n\n\n\n\n\nColorPickerLauncherComponent\n\nColorPickerLauncherComponent\n\n\n\nColorPickerLauncherModule\n\nColorPickerLauncherModule\n\nColorPickerLauncherModule -->\n\nColorPickerLauncherComponent->ColorPickerLauncherModule\n\n\n\n\n\nColorPickerLauncherComponent \n\nColorPickerLauncherComponent \n\nColorPickerLauncherComponent  -->\n\nColorPickerLauncherModule->ColorPickerLauncherComponent \n\n\n\n\n\nImageViewerLayersModule\n\nImageViewerLayersModule\n\nImageViewerLayersModule -->\n\nColorPickerLauncherModule->ImageViewerLayersModule\n\n\n\n\n\nColorSchemePopupModule\n\nColorSchemePopupModule\n\nColorPickerLauncherModule -->\n\nColorSchemePopupModule->ColorPickerLauncherModule\n\n\n\n\n\nColorSchemePopupComponent \n\nColorSchemePopupComponent \n\nColorSchemePopupComponent  -->\n\nColorSchemePopupModule->ColorSchemePopupComponent \n\n\n\n\n\nColorSchemeContentsComponent\n\nColorSchemeContentsComponent\n\nColorSchemeContentsModule -->\n\nColorSchemeContentsComponent->ColorSchemeContentsModule\n\n\n\nColorSchemePopupModule -->\n\nColorSchemeContentsModule->ColorSchemePopupModule\n\n\n\n\n\nColorSchemeContentsComponent \n\nColorSchemeContentsComponent \n\nColorSchemeContentsComponent  -->\n\nColorSchemeContentsModule->ColorSchemeContentsComponent \n\n\n\n\n\nColorSchemePopupComponent\n\nColorSchemePopupComponent\n\nColorSchemePopupModule -->\n\nColorSchemePopupComponent->ColorSchemePopupModule\n\n\n\n\n\nHeaderModule\n\nHeaderModule\n\nCoreModule -->\n\nHeaderModule->CoreModule\n\n\n\n\n\nHeaderComponent \n\nHeaderComponent \n\nHeaderComponent  -->\n\nHeaderModule->HeaderComponent \n\n\n\n\n\nStoreModule\n\nStoreModule\n\nCoreModule -->\n\nStoreModule->CoreModule\n\n\n\n\n\nThemingModule\n\nThemingModule\n\nCoreModule -->\n\nThemingModule->CoreModule\n\n\n\n\n\nContainerComponent\n\nContainerComponent\n\nDrawerModule -->\n\nContainerComponent->DrawerModule\n\n\n\n\n\nContentComponent\n\nContentComponent\n\nDrawerModule -->\n\nContentComponent->DrawerModule\n\n\n\n\n\nDrawerComponent\n\nDrawerComponent\n\nDrawerModule -->\n\nDrawerComponent->DrawerModule\n\n\n\n\n\nToggleButtonComponent\n\nToggleButtonComponent\n\nDrawerModule -->\n\nToggleButtonComponent->DrawerModule\n\n\n\n\n\nDropdownComponent\n\nDropdownComponent\n\n\n\nDropdownModule\n\nDropdownModule\n\nDropdownModule -->\n\nDropdownComponent->DropdownModule\n\n\n\n\n\nDropdownComponent \n\nDropdownComponent \n\nDropdownComponent  -->\n\nDropdownModule->DropdownComponent \n\n\n\nFiltersContentModule -->\n\nDropdownModule->FiltersContentModule\n\n\n\n\n\nDualSliderComponent\n\nDualSliderComponent\n\nDualSliderModule -->\n\nDualSliderComponent->DualSliderModule\n\n\n\n\n\nFiltersContentComponent\n\nFiltersContentComponent\n\nFiltersContentModule -->\n\nFiltersContentComponent->FiltersContentModule\n\n\n\nFiltersPopoverModule -->\n\nFiltersContentModule->FiltersPopoverModule\n\n\n\n\n\nFiltersContentComponent \n\nFiltersContentComponent \n\nFiltersContentComponent  -->\n\nFiltersContentModule->FiltersContentComponent \n\n\n\n\n\nFiltersPopoverComponent\n\nFiltersPopoverComponent\n\nFiltersPopoverModule -->\n\nFiltersPopoverComponent->FiltersPopoverModule\n\n\n\n\n\nHeaderComponent\n\nHeaderComponent\n\nHeaderModule -->\n\nHeaderComponent->HeaderModule\n\n\n\nHeaderModule -->\n\nInfoButtonModule->HeaderModule\n\n\n\n\n\nInfoButtonComponent \n\nInfoButtonComponent \n\nInfoButtonComponent  -->\n\nInfoButtonModule->InfoButtonComponent \n\n\n\n\n\nImageViewerAccordionComponent\n\nImageViewerAccordionComponent\n\n\n\nImageViewerAccordionModule\n\nImageViewerAccordionModule\n\nImageViewerAccordionModule -->\n\nImageViewerAccordionComponent->ImageViewerAccordionModule\n\n\n\n\n\nImageViewerAccordionComponent \n\nImageViewerAccordionComponent \n\nImageViewerAccordionComponent  -->\n\nImageViewerAccordionModule->ImageViewerAccordionComponent \n\n\n\n\n\nImageViewerContentModule\n\nImageViewerContentModule\n\nImageViewerContentModule -->\n\nImageViewerAccordionModule->ImageViewerContentModule\n\n\n\nImageViewerModule -->\n\nImageViewerLayersModule->ImageViewerModule\n\n\n\nImageViewerAccordionModule -->\n\nImageViewerLayersModule->ImageViewerAccordionModule\n\n\n\n\n\nImageViewerLayersComponent \n\nImageViewerLayersComponent \n\nImageViewerLayersComponent  -->\n\nImageViewerLayersModule->ImageViewerLayersComponent \n\n\n\n\n\nImageViewerContentComponent\n\nImageViewerContentComponent\n\nImageViewerContentModule -->\n\nImageViewerContentComponent->ImageViewerContentModule\n\n\n\nImageViewerModule -->\n\nImageViewerContentModule->ImageViewerModule\n\n\n\n\n\nImageViewerContentComponent \n\nImageViewerContentComponent \n\nImageViewerContentComponent  -->\n\nImageViewerContentModule->ImageViewerContentComponent \n\n\n\nImageViewerPopoverModule -->\n\nImageViewerContentModule->ImageViewerPopoverModule\n\n\n\n\n\nImageViewerLayersComponent\n\nImageViewerLayersComponent\n\nImageViewerLayersModule -->\n\nImageViewerLayersComponent->ImageViewerLayersModule\n\n\n\nImageViewerLayersModule -->\n\nSchemeDropdownModule->ImageViewerLayersModule\n\n\n\n\n\nSchemeDropdownComponent \n\nSchemeDropdownComponent \n\nSchemeDropdownComponent  -->\n\nSchemeDropdownModule->SchemeDropdownComponent \n\n\n\n\n\nImageViewerLegendComponent\n\nImageViewerLegendComponent\n\n\n\nImageViewerLegendModule\n\nImageViewerLegendModule\n\nImageViewerLegendModule -->\n\nImageViewerLegendComponent->ImageViewerLegendModule\n\n\n\n\n\nImageViewerLegendComponent \n\nImageViewerLegendComponent \n\nImageViewerLegendComponent  -->\n\nImageViewerLegendModule->ImageViewerLegendComponent \n\n\n\nImageViewerPopoverModule -->\n\nImageViewerLegendModule->ImageViewerPopoverModule\n\n\n\nImageViewerModule -->\n\nImageViewerPopoverModule->ImageViewerModule\n\n\n\n\n\nImageViewerPopoverComponent \n\nImageViewerPopoverComponent \n\nImageViewerPopoverComponent  -->\n\nImageViewerPopoverModule->ImageViewerPopoverComponent \n\n\n\n\n\nViewerModule\n\nViewerModule\n\nImageViewerModule -->\n\nViewerModule->ImageViewerModule\n\n\n\nImageViewerPopoverModule -->\n\nViewerModule->ImageViewerPopoverModule\n\n\n\n\n\nViewerComponent \n\nViewerComponent \n\nViewerComponent  -->\n\nViewerModule->ViewerComponent \n\n\n\n\n\nImageViewerPopoverComponent\n\nImageViewerPopoverComponent\n\nImageViewerPopoverModule -->\n\nImageViewerPopoverComponent->ImageViewerPopoverModule\n\n\n\n\n\nInfoButtonComponent\n\nInfoButtonComponent\n\nInfoButtonModule -->\n\nInfoButtonComponent->InfoButtonModule\n\n\n\n\n\nInfoDialogComponent\n\nInfoDialogComponent\n\nInfoDialogModule -->\n\nInfoDialogComponent->InfoDialogModule\n\n\n\n\n\nOntologySearchModule\n\nOntologySearchModule\n\nOntologyExplorationModule -->\n\nOntologySearchModule->OntologyExplorationModule\n\n\n\n\n\nOntologySelectionModule\n\nOntologySelectionModule\n\nOntologySelectionModule -->\n\nOntologySearchModule->OntologySelectionModule\n\n\n\n\n\nOntologySearchComponent \n\nOntologySearchComponent \n\nOntologySearchComponent  -->\n\nOntologySearchModule->OntologySearchComponent \n\n\n\nOntologyExplorationModule -->\n\nOntologySelectionModule->OntologyExplorationModule\n\n\n\n\n\nOntologySelectionComponent \n\nOntologySelectionComponent \n\nOntologySelectionComponent  -->\n\nOntologySelectionModule->OntologySelectionComponent \n\n\n\n\n\nOntologyTreeModule\n\nOntologyTreeModule\n\nOntologyExplorationModule -->\n\nOntologyTreeModule->OntologyExplorationModule\n\n\n\nOntologySelectionModule -->\n\nOntologyTreeModule->OntologySelectionModule\n\n\n\n\n\nOntologyTreeComponent \n\nOntologyTreeComponent \n\nOntologyTreeComponent  -->\n\nOntologyTreeModule->OntologyTreeComponent \n\n\n\n\n\nOntologySearchComponent\n\nOntologySearchComponent\n\nOntologySearchModule -->\n\nOntologySearchComponent->OntologySearchModule\n\n\n\n\n\nOntologySelectionComponent\n\nOntologySelectionComponent\n\nOntologySelectionModule -->\n\nOntologySelectionComponent->OntologySelectionModule\n\n\n\n\n\nOntologyTreeComponent\n\nOntologyTreeComponent\n\nOntologyTreeModule -->\n\nOntologyTreeComponent->OntologyTreeModule\n\n\n\n\n\nResultsBrowserItemComponent\n\nResultsBrowserItemComponent\n\n\n\nResultsBrowserItemModule\n\nResultsBrowserItemModule\n\nResultsBrowserItemModule -->\n\nResultsBrowserItemComponent->ResultsBrowserItemModule\n\n\n\nResultsBrowserModule -->\n\nResultsBrowserItemModule->ResultsBrowserModule\n\n\n\n\n\nResultsBrowserItemComponent \n\nResultsBrowserItemComponent \n\nResultsBrowserItemComponent  -->\n\nResultsBrowserItemModule->ResultsBrowserItemComponent \n\n\n\n\n\nResultsBrowserComponent\n\nResultsBrowserComponent\n\nResultsBrowserModule -->\n\nResultsBrowserComponent->ResultsBrowserModule\n\n\n\n\n\nSchemeDropdownComponent\n\nSchemeDropdownComponent\n\nSchemeDropdownModule -->\n\nSchemeDropdownComponent->SchemeDropdownModule\n\n\n\n\n\nSpinnerOverlayComponent\n\nSpinnerOverlayComponent\n\nSpinnerOverlayModule -->\n\nSpinnerOverlayComponent->SpinnerOverlayModule\n\n\n\n\n\nThemingService\n\nThemingService\n\nThemingModule -->\n\nThemingService->ThemingModule\n\n\n\n\n\nViewerComponent\n\nViewerComponent\n\nViewerModule -->\n\nViewerComponent->ViewerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        34 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    31 Components\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    42 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContainerPayload   (src/.../messages.ts)\n                        \n                        \n                            DeckCallbackArgs   (projects/.../image-viewer.ts)\n                        \n                        \n                            DeckProps   (projects/.../image-viewer.ts)\n                        \n                        \n                            DrawerPayload   (src/.../messages.ts)\n                        \n                        \n                            ExpandedState   (src/.../drawer.component.ts)\n                        \n                        \n                            ExpandedState2   (src/.../drawer.component.ts)\n                        \n                        \n                            GetChildrenFunc   (src/.../ontology-search.service.ts)\n                        \n                        \n                            ImageViewerLayerArgs   (src/.../image-viewer-layer.ts)\n                        \n                        \n                            ImageViewerLayerRequiredArgNames   (src/.../image-viewer-layer.ts)\n                        \n                        \n                            JsonDict   (projects/.../hubmap-data.ts)\n                        \n                        \n                            LayerConfig   (projects/.../image-viewer.ts)\n                        \n                        \n                            LayerFilterArgs   (projects/.../image-viewer.ts)\n                        \n                        \n                            Message   (src/.../messages.ts)\n                        \n                        \n                            MessageChannel   (src/.../messages.ts)\n                        \n                        \n                            MessageService   (src/.../messages.ts)\n                        \n                        \n                            OnViewStateChangeArgs   (projects/.../image-viewer.ts)\n                        \n                        \n                            OpenedState   (src/.../drawer.component.ts)\n                        \n                        \n                            OverviewArgs   (projects/.../picture-in-picture-viewer.ts)\n                        \n                        \n                            Payload   (src/.../messages.ts)\n                        \n                        \n                            State   (projects/.../image-viewer.ts)\n                        \n                        \n                            ValueOrGenerator   (projects/.../image-viewer.ts)\n                        \n                        \n                            ZarrInfo   (projects/.../loader.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/shared/components/drawer/messages.ts\n    \n    \n        \n            \n                \n                    \n                    ContainerPayload\n                \n            \n            \n                \n                    Payload types for messages sent from the drawer container. \n\n                \n            \n            \n                \n                        ContentContainerChanged | DrawerContainersChanged\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DrawerPayload\n                \n            \n            \n                \n                    Payload types for messages sent from the drawers. \n\n                \n            \n            \n                \n                        DrawerToggled | DrawerInitialized\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Message\n                \n            \n            \n                \n                    Specific message type. \n\n                \n            \n            \n                \n                            GenericMessage\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MessageChannel\n                \n            \n            \n                \n                    Specific channel type. \n\n                \n            \n            \n                \n                            GenericMessageChannel\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MessageService\n                \n            \n            \n                \n                    Specific service type. \n\n                \n            \n            \n                \n                            GenericMessageService\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Payload\n                \n            \n            \n                \n                    Combined payload type for all drawer sub components. \n\n                \n            \n            \n                \n                        ContainerPayload | DrawerPayload\n\n                \n            \n        \n    \n    projects/ccf-image-viewer/src/lib/image-viewer.ts\n    \n    \n        \n            \n                \n                    \n                    DeckCallbackArgs\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DeckProps\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LayerConfig\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LayerFilterArgs\n                \n            \n            \n                \n                            DeckCallbackArgs\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OnViewStateChangeArgs\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    State\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ValueOrGenerator\n                \n            \n            \n                \n                        T | \n\n                \n            \n        \n    \n    src/app/shared/components/drawer/drawer/drawer.component.ts\n    \n    \n        \n            \n                \n                    \n                    ExpandedState\n                \n            \n            \n                \n                    Expanded/collapsed state. \n\n                \n            \n            \n                \n                        \"open\" | \"open-instant\" | \"closed\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandedState2\n                \n            \n            \n                \n                    Expanded state relative to an opposite drawer. \n\n                \n            \n            \n                \n                        \"collapsed\" | \"half\" | \"extended\" | \"full\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OpenedState\n                \n            \n            \n                \n                    Opened/closed state. \n\n                \n            \n            \n                \n                        \"open\" | \"open-instant\" | \"closed\"\n\n                \n            \n        \n    \n    src/app/core/services/ontology-search/ontology-search.service.ts\n    \n    \n        \n            \n                \n                    \n                    GetChildrenFunc\n                \n            \n            \n                \n                    Type of function for getting child nodes from a parent node. \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/app/core/models/image-viewer-layer.ts\n    \n    \n        \n            \n                \n                    \n                    ImageViewerLayerArgs\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ImageViewerLayerRequiredArgNames\n                \n            \n            \n                \n                        \"id\" | \"colorScheme\"\n\n                \n            \n        \n    \n    projects/ccf-database/src/lib/hubmap/hubmap-data.ts\n    \n    \n        \n            \n                \n                    \n                    JsonDict\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/ccf-image-viewer/src/lib/picture-in-picture-viewer.ts\n    \n    \n        \n            \n                \n                    \n                    OverviewArgs\n                \n            \n            \n                \n                            Omit\n\n                \n            \n        \n    \n    projects/ccf-image-viewer/src/lib/loader.ts\n    \n    \n        \n            \n                \n                    \n                    ZarrInfo\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
